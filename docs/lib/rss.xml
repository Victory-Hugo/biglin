<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[科研思路]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>科研思路</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Fri, 08 Nov 2024 01:03:48 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Fri, 08 Nov 2024 01:03:47 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[1 .&nbsp;<a data-href="正态分布 (Normal Distribution)" href="正态分布 (Normal Distribution)" class="internal-link" target="_self" rel="noopener nofollow">正态分布 (Normal Distribution)</a>]]></title><description><![CDATA[ 
 <br><br>正态分布在我们的生活中随处可见，我们身高的分布、体重的分布，甚至是考试成绩的分布都可能符合正态分布。它的形状就像一个钟形曲线，最高点在中间，两边逐渐低下，具有对称性。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240517091725.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>伯努利分布又名两点分布或者0-1分布，是描述只有两种可能结果的随机试验的概率分布，比如抛硬币或投掷骰子。它将这两种结果分别表示为1和0，通常用 p 来表示事件的成功概率，而1-p 表示事件的失败概率。比如，你在玩一个抛硬币的游戏。硬币只有两面：正面和反面。当你抛硬币时，只有两种可能的结果：硬币出现正面或反面。伯努利分布就像是描述硬币落地后是正面还是反面的概率分布。在伯努利分布中，我们关心的是事件的成功概率，即出现期望结果的概率。比如，在抛硬币时，成功的概率就是硬币出现正面的概率。<br>伯努利分布的变异程度通常由成功和失败的概率决定。如果硬币是公平的，那么成功和失败的概率都是相等的，变异程度就较小。假设你在玩一个猜硬币正反面的游戏，如果你猜对了，你就赢得奖品。这种情况下，游戏的结果可以用伯努利分布来描述。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240517091815.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>泊松分布常常用于描述单位时间或空间内事件发生的次数，比如在一小时内接到的电话数量、一天内发生的交通事故数量等。<br>它的形状看起来有点像钟形曲线，但是更加扁平。在图的中心，事件发生的次数最多，然后随着次数的增加，概率逐渐减小。<br>平均值告诉我们在单位时间或空间内预期事件的平均发生次数。<br>
泊松分布的特点之一是，它的方差等于其平均值。这意味着，如果事件在某段时间内平均发生了5次，那么方差也是5，表明事件发生次数的变化程度与平均值相近。如果我们想知道某一条街道一天内发生的车祸数量的概率分布，我们可以使用泊松分布来预测不同数量的车祸发生的可能性。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240517092140.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>指数分布通常用于描述等待时间或事件之间的间隔时间，比如等待下一辆公交车到达的时间、两次地震之间的时间间隔等。<br>它的形状看起来有点像波峰逐渐减小的山脉。在开始时，概率较高，随着时间的推移，概率逐渐减小。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240517092030.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
指数分布的一个重要特点是，它是无记忆的。这意味着，在任何给定的时间点上，等待下一个事件的时间不受过去等待时间的影响。<br>平均值告诉我们在一段时间内预期发生事件的平均次数。而指数分布的方差等于平均值的平方，这意味着方差与平均值之间存在很大的差异。<br>如果我们想知道一个人等待下一次公交车到达的时间，我们可以使用指数分布来预测不同等待时间的概率分布。<br><br>伽玛分布通常用于描述连续随机变量的正数值，比如处理时间、等待时间或事件发生的时间间隔等。<br>它的形状可以是多样的，取决于伽玛分布的参数。但通常情况下，它呈现出右偏的形态，即尾部向右延伸。伽玛分布的平均值和方差都受到其参数的影响。当其中一个参数增大时，分布会更向右延伸，并且平均值和方差也会随之增大。<br>这个分布可以用于建模很多现实生活中的情况，比如处理时间、等待时间以及一些事件的发生间隔时间等。<br>如果我们想要预测一个机器的寿命，我们可以使用伽玛分布来描述机器的故障时间分布。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240517092124.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>贝塔分布是一种连续概率分布，通常用于描述在一个有限区间内取值的随机变量，比如概率值或者比例。<br>它的形状可以是多样的，取决于贝塔分布的参数。但通常情况下，它呈现出 U 型或者反 U 型的形态。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240517092207.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
贝塔分布的一个重要特点是，它可以用来描述一个随机变量的概率分布，并且在一些统计推断和贝叶斯分析中有重要的应用。<br>如果我们想要建立一个模型来描述一个产品的质量，我们可以使用贝塔分布来描述产品合格的比例。<br><br>均匀分布是一种简单的概率分布，它将所有可能的结果都分布在一个范围内，并且每个结果的概率都是相等的。<br>
想想想想一下，把一个区间分成若干个等长的小区间，每个小区间内的概率都是相同的，这就是均匀分布。<br>
它的形状就像是一个长方形，所有的小区间的高度都是一样的，表明每个结果出现的概率都是相等的。<br>
均匀分布的参数是区间的上下界，它们决定了分布的范围。<br>
如果我们想要模拟一个骰子的投掷结果，我们可以使用均匀分布，因为在一个公正的骰子中，每个面出现的概率都是相等的。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240517092250.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>二项分布在我们的日常生活中也很常见，比如抛硬币的结果、投掷骰子的结果或者考试中答对题目的次数等。<br>二项分布描述了在一系列独立的伯努利试验中成功次数的分布。这些试验只有两种可能的结果，比如抛硬币可能是正面或反面。<br>这个分布的形状不像钟形曲线那样，它更像是一个条形图。在图的两端，成功次数较少，而在中间，成功次数最多。<br>
平均值告诉我们在这些试验中预期成功的次数，而标准差则告诉我们成功次数的变化程度。<br>假设我们进行了10次抛硬币的试验，我们想知道有多少次是正面。二项分布可以告诉我们每种可能的正面次数的概率。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240517092331.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>对数正态分布描述了一个随机变量的对数服从正态分布的情况。换句话说，如果一个随机变量的对数是正态分布的，那么该随机变量就服从对数正态分布。<br>它的形状看起来有点像正态分布，但是更加右偏。这是因为正态分布的对数在较大的值处增长得更快。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240517092352.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
对数正态分布通常用于描述一些连续的正数值的分布，比如收入分布、财富分布等。<br>它的参数是正态分布的平均值和标准差，它们决定了对数正态分布的形状。<br>如果我们想要描述一个城市中居民的收入分布，我们可能会发现它符合对数正态分布。<br><br>负二项分布描述了在一系列独立的伯努利试验中，达到指定数量的成功之前的失败次数。<br>与几何分布不同，几何分布是在达到第一次成功时停止，而负二项分布则在达到指定数量的成功时停止。<br>它的形状类似于二项分布，但更为右偏。开始时概率较高，随着试验次数的增加，概率逐渐减小。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240517092426.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
负二项分布的参数是成功的概率和达到指定数量的成功所需的试验次数。成功的概率越高，试验次数越少，分布越向左偏。<br>如果我们重复进行投掷硬币的试验，直到出现5次正面为止，负二项分布可以告诉我们达到5次正面所需的失败次数的概率分布情况。<br>数据科学家在日常工作中使用的一些基本概率分布包括以下 11 个：<br>
<br>正态分布 (Normal Distribution)：在数据科学中应用广泛，特别是在统计推断和假设检验中。
<br>泊松分布 (Poisson Distribution)：用于描述单位时间或空间内事件发生的次数的分布，如某个时间段内电话呼叫的数量。
<br>指数分布 (Exponential Distribution)：描述等待时间或事件之间的间隔时间的分布，例如等待下一次地铁到达的时间。
<br>伽玛分布 (Gamma Distribution)：在描述连续随机变量的正数值时非常有用，例如在描述等待时间或处理时间时。
<br>贝塔分布 (Beta Distribution)：通常用于描述概率分布的先验知识，例如在贝叶斯推断中。
<br>均匀分布 (Uniform Distribution)：用于描述所有可能结果等概率出现的情况，例如抛硬币、掷骰子等。
<br>二项分布 (Binomial Distribution)：用于描述离散随机变量中成功次数的分布，例如抛硬币、投掷骰子等。
<br>对数正态分布 (Log-Normal Distribution)：描述一个随机变量的对数服从正态分布的情况，例如财富分布或收入分布。
<br>负二项分布 (Negative Binomial Distribution)：描述在一系列独立的伯努利试验中，达到指定数量的成功之前的失败次数。
<br>威布尔分布 (Weibull Distribution)：常用于可靠性工程和寿命分析，描述随机事件的生存时间。<br>

<br>这些分布覆盖了数据科学中许多常见的场景，从描述连续变量到描述离散变量，以及描述等待时间和间隔时间等各种情况。]]></description><link>术语\数据科学家-95-时间都在使用的-10-大基本分布.html</link><guid isPermaLink="false">术语/数据科学家 95% 时间都在使用的 10 大基本分布.md</guid><pubDate>Thu, 20 Jun 2024 12:25:33 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240517091725.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240517091725.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[<a data-href="平均成对核苷酸差异数（π值）" href="术语/平均成对核苷酸差异数（π值）.html" class="internal-link" target="_self" rel="noopener nofollow">平均成对核苷酸差异数（π值）</a>]]></title><description><![CDATA[ 
 <br><br>定义：指的是任意两条序列之间的平均核苷酸差异数。<br>
公式：<br>其中， 是样本数， 是第 i 对序列之间的差异数。<br>
意义：核苷酸多样性反映了一个种群的遗传多样性水平，数值越大说明种群内的基因变异越多。<br>除此之外，还可以计算 <a data-href="python：计算群体单倍群单倍型多样性" href="软件\python\数据科学与格式转换\python：计算群体单倍群单倍型多样性.html" class="internal-link" target="_self" rel="noopener nofollow">python：计算群体单倍群单倍型多样性</a>。<br><br>定义：基于分子多态性的种群遗传多样性估计。<br>
公式：<br>
其中，S是多态性位点的数目， 是一个与样本大小有关的常数。<br>
意义：OS 用于估计一个种群中的突变率，通常用于比较不同种群的遗传多样性<br><br>定义：反映了数据的离散程度。<br>
公式：<br>
其中， 是数据中的每个值， 是平均值，N 是数据点数目。<br>
意义：标准差用于表示遗传多样性参数的变异程度，数值越大，表示变异越大。<br><br><a data-href="python：计算群体单倍群单倍型多样性" href="软件\python\数据科学与格式转换\python：计算群体单倍群单倍型多样性.html" class="internal-link" target="_self" rel="noopener nofollow">python：计算群体单倍群单倍型多样性</a>。<br>我们使用以下公式来计算单倍型/单倍群的法医学参数。单倍型/单倍群多样性(Haplotype/haplogroup diversity, HD)是基于 Nei 和 Tajima 提出来的公式进行计算：<br>
其中 n 表示观察到单倍型/单倍群的数量，pi 表示第 i 个单倍型/单倍群的频率。分辨能力(Discrimination capacity,DC)使用观察的单倍型/单倍群数量和所有单倍型/单倍群数量的比值。<br><br>
<br>θS 值高：θS 是基于分离位点数量（S）的群体参数，反映了 DNA 序列中每个位点的平均突变率。较高的 θS 值表明群体中存在较多的分离位点，暗示着该群体在进化过程中积累了大量突变。这通常与古老的群体起源有关，因为需要较长的时间来积累足够的突变。但是强烈的混合也可能导致θS 升高。
<br>π 值高：π 表示群体内两个 DNA 序列之间的平均核苷酸差异。高 π 值意味着个体之间的遗传差异较大，这可能是由于长时间的进化积累，或者不同遗传背景的群体之间发生了基因交流（杂交或混合）。这种基因交流会引入新的变异，增加群体的遗传多样性。
<br>HD 值高：单倍型多样性（HD）表示在群体中随机选取两个单倍型不同的概率。高 HD 值意味着群体内存在丰富的单倍型，这可能是由于古老的起源使得突变积累，或者不同遗传背景的个体混合导致的多样性增加。
<br>综合来看，当一个群体同时具有高 θS、π 和 HD 值时，说明该群体内存在大量的遗传变异。这种高水平的多样性可能源于：<br>
<br>古老的起源：长时间的进化过程使得群体内积累了大量的突变和变异。
<br>不同遗传背景的杂合：来自不同群体的基因交流引入了新的遗传变异，增加了群体的多样性。
<br>通过分析 θS（θ_S）、π（pi） 和 HD（单倍型多样性） 这三个参数的数值及其相互关系，可以帮助我们区分高水平遗传多样性的具体原因，即确定多样性是源于古老的起源还是由于不同遗传背景群体的混合（基因交流）。以下是具体的方法：<br>
<br>θS 和 π 的比较：

<br>古老的起源（长期进化积累）：

<br>θS 和 π 值都较高，且两者数值接近。
<br>在稳定的中性进化条件下，θS 和 π 都是对群体突变率 θ 的无偏估计，因此在古老、稳定的群体中，这两个参数的值应当相似。
<br>高 θS 值表示有较多的分离位点（S），高 π 值表示平均核苷酸差异较大，这都符合长期突变积累的特征。


<br>群体混合（不同遗传背景的杂合）：

<br>π 值显著高于 θS 值。
<br>混合事件会引入来自不同群体的遗传变异，增加了个体间的核苷酸差异（π 增加），但分离位点的数量（S）增加相对有限，因此 θS 可能没有 π 增加得多。
<br>这种情况下，θS 和 π 之间的差异会导致其他统计量（如 Tajima's D）发生变化。




<br>Tajima's D 统计量的应用：

<br>计算 Tajima's D：

<br>Tajima's D 是基于 θS 和 π 之间差异的统计量，用于检测群体是否偏离中性进化。
<br>D ≈ 0：表示群体符合中性平衡状态。
<br>D &lt; 0：可能表示群体经历了选择压力（如净化选择）或人口扩张。
<br>D &gt; 0：可能表示群体经历了瓶颈效应、混合或平衡选择。


<br>解释 Tajima's D 值：

<br>古老的起源：如果群体在长期内保持稳定且没有经历人口波动或选择压力，Tajima's D 值应接近零。
<br>群体混合：混合会导致 π 增加，但 θS 增加较少，导致 Tajima's D 值为正，提示存在群体混合或瓶颈效应。




<br>HD（单倍型多样性）的作用：

<br>高 HD 值的解释：

<br>古老的起源：长时间的突变积累会产生大量独特的单倍型，导致 HD 值高。
<br>群体混合：不同群体的单倍型混合增加了单倍型的数量和多样性，也会使 HD 值升高。


<br>结合其他参数：

<br>如果 HD 值高且与高 θS 和 π 值一致，可能支持古老的起源。
<br>如果 HD 值高，但 θS 相对较低而 π 值较高，可能提示群体混合。




<br>单倍型网络和谱系分析：

<br>古老的起源：

<br>单倍型网络可能呈现星状结构，中心单倍型通过少数突变连接到其他单倍型，反映长期的稳定积累。


<br>群体混合：

<br>网络可能显示明显的群体分化结构，不同群体的单倍型通过较长的枝干连接，提示历史上的混合事件。




<br>地理分布和历史背景的结合：

<br>古老的起源：

<br>高多样性群体可能集中在被认为是物种起源或长期存在的地区。


<br>群体混合：

<br>多样性高的群体可能位于历史上迁移、贸易频繁的地区，支持混合的可能性。




<br>其他统计分析：<br>
- _Fu 和 Li's D 和 F_ 检验：这些统计量也可以用于检测偏离中性进化的情况，辅助判断多样性来源。<br>
- Mismatch Distribution（错配分布）：可以用于检测群体扩张或收缩历史。<br>
总结**：
<br>
<br>古老的起源特征：

<br>θS 和 π 值都高，且相近。
<br>Tajima's D 值接近零。
<br>HD 值高，单倍型网络呈星状。
<br>地理分布与物种起源地一致。


<br>群体混合特征：

<br>π 值高于 θS 值，差异显著。
<br>Tajima's D 值为正。
<br>HD 值高，单倍型网络显示复杂的连接模式。
<br>位于历史上已知的迁移或贸易路线附近。


<br><br>Theta(Hom) 参数是一个用来描述种群内部同质性（homozygosity）的指标。同质性是指在某个位点上，一个种群中个体有相同等位基因的比例。Theta(Hom) 常用于种群遗传学研究中，以估计种群内的遗传多样性和结构。它基于 Wright-Fisher 理想种群模型，考虑基因漂变和突变平衡的情况。<br><br><br>
<br>高  值：表示种群内部有较高的同质性，即种群中的个体在某一基因位点上具有相同等位基因的可能性较高。这通常表明种群较小，基因漂变的影响较大，或者突变率较低。
<br>低 值：表示种群内部同质性较低，即个体在某一基因位点上具有不同等位基因的可能性较高。这通常反映出种群较大，基因漂变的影响较小，或者突变率较高。
<br><br>主要用于估计在无限等位基因模型（每个新突变产生一个全新的等位基因）下，一个随机抽样的群体中预期观察到的不同等位基因的数量。该参数有助于理解种群内的遗传多样性，特别是在考虑突变率和样本大小的影响下。<br><br>
<br>高值：表明样本中观测到的等位基因数量较多，这通常意味着较高的突变率或者种群大小较大。这反映了种群中的高遗传多样性。
<br>低值：表明样本中观测到的等位基因数量较少，可能是由于较低的突变率或较小的种群大小，这反映了较低的遗传多样性。
<br><br><br><br><br>
<br>
<br>Zouros (1979) Zouros, E., 1979 Mutation rates, population sizes and amounts of electrophoretic  variation of enzyme loci in natural populations. Genetics 92: 623-646.<a href="about:blank#fnref-1-bc7ad54c46cf993c" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>Weiss (1991) Chakraborty, R., and K. M. Weiss, 1991 Genetic variation of the mitochondrial DNA  genome in American Indians is at mutation-drift equilibrium. Am. J. Hum. Genet.  86: 497-506.<a href="about:blank#fnref-2-bc7ad54c46cf993c" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>Ewens, 1972 Ewens, W.J. 1972 The sampling theory of selectively neutral alleles. Theor. Popul. Biol.  3:87-112.<a href="about:blank#fnref-3-bc7ad54c46cf993c" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>术语\序列多态性分析（sequence-polymorphism-analysis）.html</link><guid isPermaLink="false">术语/序列多态性分析（Sequence Polymorphism Analysis）.md</guid><pubDate>Tue, 05 Nov 2024 12:17:09 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[准备文件]]></title><description><![CDATA[ 
 <br><a data-href="Arlequin软件" href="软件\其它生信软件\a-j\arlequin软件.html" class="internal-link" target="_self" rel="noopener nofollow">Arlequin软件</a> 可以完成许多群体遗传方面的计算，但是有时候，在大规模的数据计算中，该程序的 win 版本可能无法发挥足够的性能。一个办法是使用它的 Linux 版本。<br>本文将介绍如何在 Linux 版本下使用该软件。<br><br>
<br>首先下载该软件的 Linux 版本：<a data-tooltip-position="top" aria-label="https://vip.123pan.cn/1835545223/%E6%96%87%E6%A1%A3%EF%BC%88%E5%85%B1%E4%BA%AB%EF%BC%89/arlecore_linux.zip" rel="noopener nofollow" class="external-link" href="https://vip.123pan.cn/1835545223/%E6%96%87%E6%A1%A3%EF%BC%88%E5%85%B1%E4%BA%AB%EF%BC%89/arlecore_linux.zip" target="_blank">点击此处下载备份</a>
<br>然后下载该软件的 win 版本：<a data-tooltip-position="top" aria-label="https://vip.123pan.cn/1835545223/%E6%96%87%E6%A1%A3%EF%BC%88%E5%85%B1%E4%BA%AB%EF%BC%89/WinArl35.zip" rel="noopener nofollow" class="external-link" href="https://vip.123pan.cn/1835545223/%E6%96%87%E6%A1%A3%EF%BC%88%E5%85%B1%E4%BA%AB%EF%BC%89/WinArl35.zip" target="_blank">点击此处下载备份</a>
<br>准备好 arp 文件，我们可以将 FASTA 转为 arp 文件：<a data-href="python：将FASTA转换成Arp" href="软件\python\数据科学与格式转换\python：将fasta转换成arp.html" class="internal-link" target="_self" rel="noopener nofollow">python：将FASTA转换成Arp</a>、<a data-href="python：批量修改VCF文件至Arp格式" href="软件\python\数据科学与格式转换\python：批量修改vcf文件至arp格式.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👎" aria-label="👎" data-icon="👎" aria-hidden="true" style="transform: translateY(0px);"></span>python：批量修改VCF文件至Arp格式</a><img class="emoji" draggable="false" alt="👎" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44e.svg" height="18px" style="max-width: 100%;">。
<br><br>打开 win 版本的软件：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202411051519239.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>进行需要的设置，可以参考 <a data-href="DnaSP：AMOVA及Fst分析软件操作" href="软件\其它生信软件\a-j\dnasp：amova及fst分析软件操作.html" class="internal-link" target="_self" rel="noopener nofollow">DnaSP：AMOVA及Fst分析软件操作</a>,然后选择存储设置为 ars 文件。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202411051520205.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>现在得到了2个文件：<br>
<br>ars
<br>arp
<br>将这2个文件放到 Linux 版本中去，例如 /arlecore_linux/input。<br><br><br>#!/bin/bash

# 脚本用途和使用说明
echo "This script runs ARLECORE on a specified .arp file with a given .ars settings file."
# 指定软件核心的路径
arlecore="/mnt/e/Scientifc_software/arlecore_linux/arlecore3522_64bit"
# 指定ars文件路径
settingsFile="/mnt/e/Scientifc_software/arlecore_linux/mtDNAHV1.ars"
# 指定arp文件路径
file="/mnt/e/Scientifc_software/arlecore_linux/mtDNAHV1.arp"
# 检查arlecore可执行文件是否存在
if [ ! -f "$arlecore" ]; then
    echo "Error: ARLECORE executable not found at $arlecore"
    exit 1
fi
# 检查设置文件是否存在
if [ ! -f "$settingsFile" ]; then
    echo "Error: Settings file not found at $settingsFile"
    exit 1
fi
# 检查项目文件是否存在
if [ ! -f "$file" ]; then
    echo "Error: Project file not found at $file"
    exit 1
fi
# 执行分析
echo "Processing file $file using settings from $settingsFile"
$arlecore $file $settingsFile  # Optionally, add 'run_silent' to suppress output
# 完成处理提示
echo "Processing completed for $file"
复制<br><br>#!/bin/bash

# 定义ARLECORE可执行文件路径
arlecore="/mnt/e/Scientifc_software/arlecore_linux/arlecore3522_64bit"
# 指定输入文件所在的目录
inputDir="/mnt/e/Scientifc_software/arlecore_linux/input"
# 检查arlecore可执行文件是否存在
if [ ! -f "$arlecore" ]; then
    echo "Error: ARLECORE executable not found at $arlecore"
    exit 1
fi
# 切换到输入文件目录
cd "$inputDir" || exit
# 遍历目录中的所有*.arp文件
for file in *.arp
do
    # 构建每个项目文件对应的设置文件路径
    settingsFile="${file%.*}.ars"
    # 检查对应的设置文件是否存在
    if [ ! -f "$settingsFile" ]; then
        echo "Warning: Settings file not found for $file at $settingsFile"
        continue  # 如果设置文件不存在，则跳过当前文件
    fi
    # 打印正在处理的文件
    echo "Processing file $file with settings from $settingsFile"
    # 调用arlecore，运行静默模式
    "$arlecore" "$file" "$settingsFile" run_silent
    # 提示用户处理完成
    echo "Completed processing $file"
done
# 返回原始目录
cd - || exit
# 脚本运行完毕
echo "Batch processing completed for all files in $inputDir"
复制]]></description><link>软件\其它生信软件\a-j\arlequin：在linux中运行.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/Arlequin：在Linux中运行.md</guid><pubDate>Tue, 05 Nov 2024 07:24:55 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44e.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44e.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Arlequin软件]]></title><description><![CDATA[ 
 <br>是一种种群遗传学综合数据分析软件，提供 GUI 界面，以让一般用户也可以作生物群体间的多种测试及计算，例如：遗传分化系数（Fixation index，亦作 F-statistics，Fst）、遗传距离、哈代-温伯格平衡、连锁不平衡和成对差测试等。]]></description><link>软件\其它生信软件\a-j\arlequin软件.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/Arlequin软件.md</guid><pubDate>Tue, 05 Nov 2024 07:13:41 GMT</pubDate></item><item><title><![CDATA[安装 trimal]]></title><description><![CDATA[ 
 <br><br>trimal 可以从官方网站或者使用包管理工具（如 conda）安装：<br>conda install -c bioconda trimal
复制<br><br>trimal 的基本命令结构如下：<br>trimal -in inputfile -out outputfile [options]
复制<br>其中 inputfile 是输入文件，outputfile 是输出文件，[options] 是你可以添加的其他选项。<br><br>
<br>-automated1：自动选择过滤的参数，通常能够达到不错的平衡。
<br>-gt：设定一个阈值，过滤掉那些在序列中缺失数据百分比高于该阈值的列。例如，-gt 0.9 会保留至少有90%有效数据的列。
<br>-st：与 -gt 类似，但适用于非缺失的序列。
<br>-cons：生成一个基于整体保守性的修剪版本。
<br>-resoverlap 和 -seqoverlap：设定最小重叠的百分比，用于保留或剔除某些序列或位置。
<br><br>假设你有一个名为 example.fasta 的 FASTA 格式文件，并想删除那些至少有20%缺失数据的列，你可以运行：<br>trimal -in example.fasta -out trimmed.fasta -gt 0.8
复制<br><br>-h                          打印此信息并显示一些示例。
--version                   打印trimAl的版本。

-in &lt;输入文件&gt;              输入多种格式的文件（clustal，fasta，NBRF/PIR，nexus，phylip3.2，phylip）。

-compareset &lt;输入文件&gt;      输入包含要比较对齐的文件路径列表。
-forceselect &lt;输入文件&gt;     在文件比较方法中强制选择给定的输入文件。

-backtrans &lt;输入文件&gt;       使用编码序列文件对给定的AA对齐进行回译。
-ignorestopcodon            忽略输入编码序列中的终止密码子。
-splitbystopcodon           在首个出现终止密码子处分割输入的编码序列。

-matrix &lt;输入文件&gt;          输入用户定义的相似性矩阵文件（默认为Blosum62）。
--alternative_matrix &lt;名称&gt; 选择已加载的替代相似性矩阵。
                            只提供“degenerated_nt_identity”。

-out &lt;输出文件&gt;             输出与输入格式相同的对齐（默认标准输出）。(默认输入格式)
-htmlout &lt;输出文件&gt;         以HTML文件形式获取trimAl工作的摘要。

-keepheader                 保留原始序列头部，包括非字母数字字符。
                            仅适用于输入FASTA格式文件。 （将来的版本将扩展此功能）

-nbrf                       输出NBRF/PIR格式的文件。
-mega                       输出MEGA格式的文件。
-nexus                      输出NEXUS格式的文件。
-clustal                    输出CLUSTAL格式的文件。

-fasta                      输出FASTA格式的文件。
-fasta_m10                  输出FASTA格式的文件。序列名长度最多10个字符。

-phylip                     输出PHYLIP/PHYLIP4格式的文件。
-phylip_m10                 输出PHYLIP/PHYLIP4格式的文件。序列名长度最多10个字符。
-phylip_paml                输出与PAML兼容的PHYLIP格式的文件。
-phylip_paml_m10            输出与PAML兼容的PHYLIP格式的文件。序列名长度最多10个字符。
-phylip3.2                  输出PHYLIP3.2格式的文件。
-phylip3.2_m10              输出PHYLIP3.2格式的文件。序列名长度最多10个字符。

-complementary              获取互补的对齐。
-colnumbering               获取旧对齐和新对齐中列之间的关系。

-selectcols { n,l,m-k }     选择要从对齐中移除的列。范围：[0 - (列数 - 1)]。（见用户指南）
-selectseqs { n,l,m-k }     选择要从对齐中移除的序列。范围：[0 - (序列数 - 1)]。（见用户指南）

-gt -gapthreshold &lt;n&gt;       允许的序列中存在间隙的最大比例为1 - (n)。范围：[0 - 1]
-st -simthreshold &lt;n&gt;       允许的最小平均相似性。范围：[0 - 1]
-ct -conthreshold &lt;n&gt;       允许的最小一致性值。范围：[0 - 1]
-cons &lt;n&gt;                   保留原始对齐中位置的最小百分比。范围：[0 - 100]

-nogaps                     移除对齐中所有带有间隙的位置。
-noallgaps                  移除完全由间隙组成的列。
-keepseqs                   即使序列完全由间隙组成也保留序列。

-gappyout                   使用基于间隙分布信息的“gappyout”模式进行自动选择。（见用户指南）
-strict                     使用“strict”模式进行自动选择。（见用户指南）
-strictplus                 使用“strictplus”模式进行自动选择。（见用户指南）
                           （针对邻接连接系统发育树重建进行优化）

-automated1                 使用基于相似性统计的启发式选择自动方法。（见用户指南）（针对最大似然系统发育树重建进行优化）

-terminalonly               只有内部边界（首尾无间隙的列）之外的列
                            可以根据所选方法进行修剪
--set_boundaries { l,r }    手动设置左（l）和右（r）边界 - 只有这些边界之外的列
                            可以根据所选方法进行修剪。范围：[0 - (列数 - 1)]
-block &lt;n&gt;                  在修剪对齐中保留的最小列块大小。与手动和自动（gappyout）方法一起使用

-resoverlap                 一个位置与列中其他位置的最小重叠量，以被视为“好位置”。范围：[0 - 1]。（见用户指南）
-seqoverlap                 序列必须具有的“好位置”的最小百分比，以便被保留。范围：[0 - 100]（见用户指南）

-clusters &lt;n&gt;               从给定对齐中获取最具代表性的序列。范围：[1 - (序列数)]
-maxidentity &lt;n&gt;            根据给定的身份阈值获取代表性序列。范围：[0 - 1]

-w &lt;n&gt;                      （半）窗口大小，位置i的得分是从(i - n)到(i + n)的窗口平均值。
-gw &lt;n&gt;                     （半）窗口大小仅适用于基于间隙的统计/方法。
-sw &lt;n&gt;                     （半）窗口大小仅适用于基于相似性的统计/方法。
-cw &lt;n&gt;                     （半）窗口大小仅适用于基于一致性的统计/方法。

-sgc                        为输入对齐中的每列打印间隙分数。
-sgt                        为输入对齐打印累计间隙分数。
-ssc                        为输入对齐中的每列打印相似性分数。
-sst                        为输入对齐打印累计相似性分数。
-sfc                        为选定对齐中的每列打印成对总分数。
-sft                        为选定对齐打印累计成对总分数。
-sident                     为输入对齐中所有序列打印身份分数矩阵。（见用户指南）
-soverlap                   为输入对齐中所有序列打印重叠分数矩阵。（见用户指南）

复制]]></description><link>软件\其它生信软件\t-z\trimal：自动修剪序列不可靠区域.html</link><guid isPermaLink="false">软件/其它生信软件/T-Z/Trimal：自动修剪序列不可靠区域.md</guid><pubDate>Tue, 05 Nov 2024 03:14:14 GMT</pubDate></item><item><title><![CDATA[种群配对Fst值（Population pairwise Fst values）]]></title><description><![CDATA[ 
 <br>Fst（Fixation index）是一个衡量种群间遗传差异的指标。<br>
它基于遗传变异的分布，通过比较种群内和种群间的遗传差异来度量种群结构。Fst值的范围从0到1，表示种群间遗传差异的程度。值接近0表示种群之间的遗传差异较小，可能存在较高的基因流和遗传交流。而值接近1表示种群之间的遗传差异较大，可能存在较低的基因流和遗传交流。<br>Population pairwise Fst values则是一种计算不同种群之间Fst值的方法。它通过对每对种群之间的遗传差异进行比较，计算出每对种群之间的Fst值。这种方法可以帮助确定不同种群之间的遗传结构差异程度，提供了评估种群间遗传流动和种群分化的信息。<br>计算population pairwise Fst values通常涉及使用遗传标记数据，如DNA序列或分子标记，例如单核苷酸多态性（SNP）或微卫星标记。这些数据用于计算不同种群间的遗传距离或遗传差异指标，从而获得Fst值。<br>Population pairwise Fst values的应用广泛，特别在种群遗传学、进化生物学、生态学和人类遗传学等领域。它可以用于研究种群分化、种群结构、种群历史和基因流等重要的生物学过程。<br>遗传距离（FST）热图是一种图形表示，用于展示不同人群之间的遗传差异程度，其基于FST（固定指数）值进行计算。FST是一种衡量人群遗传结构的指标，表示人群之间的遗传差异程度，它 quantifies 衡量了遗传变异中由人群间差异引起的比例，而非人群内部的变异。<br>热图使用颜色标尺来表示不同人群之间的FST值。通常情况下，较高的FST值会用较深的颜色（例如红色）表示，表示较高的遗传分化程度，而较低的FST值会用较浅的颜色（例如蓝色）表示，表示较低的遗传分化程度。热图可以帮助研究人员可视化人群之间的遗传相似性和差异性模式，有助于识别群集、人群亚组或基因流模式。<br>遗传距离热图在人群遗传学和进化研究中是一个有用的工具，它提供了遗传关系和人群结构的视觉表达方式，可以推断历史迁移模式、遗传混合和人群历史。<br>较低的FST值表示较低的遗传分化程度，意味着不同人群之间的遗传差异较小，亲缘关系较近。较低的FST值通常与更密切的遗传联系和更高的基因流程相关，表明不同人群之间有较频繁的基因交流和互相迁徙。因此，在遗传学中，较低的FST值常常被解释为人群之间的亲缘关系更为密切。相反，较高的FST值表示较高的遗传分化程度，意味着不同人群之间的遗传差异较大，亲缘关系较远。较高的FST值通常与较少的基因流程和较少的遗传交流相关，表明不同人群之间的遗传隔离和相对独立性。因此，遗传距离（FST）的值可以提供一种评估不同人群之间亲缘关系的度量方式。<br><br>我们使用了<a data-href="Arlequin软件" href="软件\其它生信软件\a-j\arlequin软件.html" class="internal-link" target="_self" rel="noopener nofollow">Arlequin软件</a> 来计算<a data-href="种群配对Fst值（Population pairwise Fst values）" href="术语\种群配对fst值（population-pairwise-fst-values）.html" class="internal-link" target="_self" rel="noopener nofollow">种群配对Fst值（Population pairwise Fst values）</a>。<br>前面文章写到群体遗传学主要致力于解决两个问题：1. 推断群体历史；2. 检测自然选择。今天这篇文章就来讲一下检测自然选择最基础也是最常用的一种方法：群体分化指数--Fst<br>
简单介绍F-statistics 和 Fst<br>
1. 概念<br>
在群体遗传学中，F-statistics（Fixation indices）是衡量种群中基因型实际频率是否偏离遗传平衡（哈温平衡）理论比例的指标。F-statistics的概念由美国遗传学家Wright在文章中提出，当时他对牛的近亲繁殖很感兴趣，然而，由于完全显性优势导致显性纯合子和杂合子控制的表型相同，直到20世纪60年代以来分子遗传学的出现，遗传学家们才得以测量群体中的杂合度。<br>
F-statistics也可以被认为是在分层群体（如生活在高原的高海拔人群和生活在平原的低海拔人群）中不同亚群间基因相关性的度量。这种相关性 (也可以理解为genetic distance) 会受到进化事件的影响，如遗传漂变，<a data-href="瓶颈效应（bottleneck）" href="术语\瓶颈效应（bottleneck）.html" class="internal-link" target="_self" rel="noopener nofollow">瓶颈效应（bottleneck）</a>，遗传搭载效应（有利突变附近位点由于连锁随着主效应位点一起频率升高并逐渐在群体中固定下来），突变，基因交流，近亲繁殖，自然选择等。这些进化事件导致的改变都会反映在等位基因频率和单倍型频率上，不过目前大多算法都是针对二等位基因设计，多等位基因的计算效果还有待进一步评估。<br>
在这里我们先定义一些符号：<br>
O(f(Aa))--实际观察杂合子频率，E(f(Aa))--期望杂合子频率，N表示数目。<br>
在群体结构为两个层次的群体中：一个层次为个体（I）到亚群（S），另一个从亚群(S)到总群体（T）.<br>
HI&nbsp;表示总群体所有个体实际观察到的杂合子频率平均值；  <br><img src="https://pic3.zhimg.com/80/v2-b6afaf6b7b9b1182ed0aa1bff2d4f0fa_720w.webp" referrerpolicy="no-referrer"><br>HS&nbsp;表示亚群在哈温平衡下杂合子期望频率:  <br><img src="https://pic3.zhimg.com/80/v2-45402248de991d3f3234974a92882746_720w.webp" referrerpolicy="no-referrer"><br>HT&nbsp;表示总群体在哈温平衡下杂合子期望频率；  <br><img src="https://pic1.zhimg.com/80/v2-448109c2f2390553d11568cc5fa9b514_720w.webp" referrerpolicy="no-referrer"><br>FIT&nbsp;表示个体(I)相对于总群体(T)的近交系数，即总群体的平均近交系数；  <br><img src="https://pic4.zhimg.com/80/v2-f82cfe921aaccc3464a060bcdb2853db_720w.webp" referrerpolicy="no-referrer"><br>FIS&nbsp;表示个体(I)相对于亚群(S)的近交系数，即亚群的平均近交系数；  <br><img src="https://pic3.zhimg.com/80/v2-e8376f1fd5f19bce24e3c5bfd7bd80b6_720w.webp" referrerpolicy="no-referrer"><br>FST&nbsp;表示亚群(S)相对于总群体(T)的近交系数，即有亲缘关系亚群间的平均近交系数。  <br><img src="https://pic3.zhimg.com/80/v2-db584f268423be3492f9ee3904548d4a_720w.webp" referrerpolicy="no-referrer"><br>FIT， FIS, FST之间的关系可以表示为 (1-FIS) = (1-FIS) (1-FST) .<br>
在哈温平衡下，近交系数计算公式如下：  <br><img src="https://pic3.zhimg.com/80/v2-d608d24d884036e19a15645a207a3c16_720w.webp" referrerpolicy="no-referrer"><br>并且预期杂合频率为： E (f(Aa)) = 2pq<br>
2. 举例<br>
上面讲了这么多公式，下面通过一个例子来加深理解。  <br><img src="https://pic2.zhimg.com/80/v2-c33a040e1053ec95d1c2101a58726e21_720w.webp" referrerpolicy="no-referrer"><br>FST的取值范围为[0,1], 数值越大，表明等位基因在各自亚群中越固定（频率越高），群体间分化程度越大。]]></description><link>术语\种群配对fst值（population-pairwise-fst-values）.html</link><guid isPermaLink="false">术语/种群配对Fst值（Population pairwise Fst values）.md</guid><pubDate>Tue, 05 Nov 2024 07:13:53 GMT</pubDate><enclosure url="https://pic3.zhimg.com/80/v2-b6afaf6b7b9b1182ed0aa1bff2d4f0fa_720w.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://pic3.zhimg.com/80/v2-b6afaf6b7b9b1182ed0aa1bff2d4f0fa_720w.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[介绍]]></title><description><![CDATA[ 
 <br><br>花园里有什么？  
如你所见，这是我的笔记本。<br>
我将所用的几乎所有的代码和软件的操作都存放在这里。<br>
笔记不定期更新。
<br>Important
以下学科：马克思主义哲学、逻辑学、宗教学、伦理学、、经济统计学、财政学、税收学、法学、民法学、刑法学、行政法学、商法学、国际法学、教育学、学前教育学、小学教育学、特殊教育学、教育技术学、中国语言文学、外国语言文学、比较文学与世界文学、新闻传播学、中国史、世界史、史学理论及史学史、考古学、数学、物理学、化学、生物科学、地理科学、机械工程、电子科学与技术、计算机科学与技术、土木工程、化学工程与技术、环境科学与工程、植物保护学、林学、畜牧学、水产养殖学、基础医学、临床医学、口腔医学、公共卫生与预防医学、中药学、药学、军事学、美术学、设计学、戏剧与影视学、数字人文学科、计算机辅助工程、有限元分析、计算流体力学、生物电脑学、物理电脑学、化学电脑学……<br>
几乎都没有。  
<br>
Σ(⊙▽⊙"a 你不会还在看吧？
<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202411042202742.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202411042202550.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br>Cake is a lie.<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240616211539.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240616211548.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240616211555.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240616211605.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>home\homepage.html</link><guid isPermaLink="false">Home/Homepage.md</guid><pubDate>Mon, 04 Nov 2024 14:02:17 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202411042202742.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202411042202742.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[尺寸]]></title><description><![CDATA[ 
 <br>LATEX 支持点阵图形格式（位图） JPEG 和 PNG，也支持矢量格式 EPS 和PDF。<br><br>点阵图形的像素是一种相对尺寸，其实际尺寸等于像素除以分辨率(resolution)<br>
，最常用的分辨率单位是像素/英寸(pixels per inch，PPI) 。<br>当图形分辨率和输出分辨率不一致时，就会有一个重新采样(resampling)的过程；从高分辨率到低分辨率叫下采样(downsampling) ，反之叫上采样(upsampling) 。重新采样的插值(interpolation) 算法有很多，其中常用的有最近像素(nearest neighbor) 、双线性(bilinear) 、双三次(bicubic) 、兰索斯(Lanczos) 等。前两种速度快，但是效果差；后两种效果好，但是速度慢。追求完美的雷人自然要选择Lanczos。<br>一般认为在屏幕上阅读需<br>
要72 PPI，考虑到放大150 PPI 应该够了，而高质量打印需要300 PPI。<br><br>\usepackage{graphicx}
\includegraphics{fig.png}
% 图形缩放
\includegraphics[width=60pt]{homer.pdf}
\includegraphics[width=80pt]{homer.pdf}
\includegraphics[width=80pt,height=100pt]{homer.pdf}
% 建议使用绝对路径，加上后缀
复制<br>插图通常需要占据大块空间，所以在文字处理软件中用户经常需要调整插图的位置。figure 环境可以自动完成这样的任务；这种自动调整位置的环境称作浮动环境(float) ，下一章里还会介绍表格浮动环境。<br>\begin{figure}[htbp] % htbp 选项用来指定插图的理想位置，这几个字母分别代表here, top, bottom, float page，一般不推荐单独使用h
\centering % 居中
\includegraphics{myphoto.jpg} % 插图
\caption{有图有真相} % 设置插图标题
\label{fig:myphoto}
\end{figure}
复制<br>当我们需要两幅图片并排摆放，并共享标题时，可以在 figure 环境中使用两个 \includegraphics 命令<br>\begin{figure}[htbp]
\centering
\includegraphics{left.pdf}
\includegraphics{right.pdf}
\caption{反清复明}
\end{figure}
复制<br><br>首先引入包：<br>\usepackage[dvipsnames]{xcolor}
\usepackage[svgnames]{xcolor}
\usepackage[x11names]{xcolor} 
% 一般引入简单的即可
\usepackage{xcolor} 
复制<br>\textcolor{Red}{红}
\textcolor{Green}{绿}
\textcolor{Blue}{蓝}
\textcolor[RGB]{255,0,0}{红}
\textcolor[HTML]{00FF00}{绿} % 我比较喜欢这个
\textcolor[rgb]{0,0,1}{蓝}
复制<br><br>\colorbox 命令可以生成有彩色背景的盒子，它的语法和 \textcolor 类似。]]></description><link>latex\latex基本语法：插图.html</link><guid isPermaLink="false">Latex/Latex基本语法：插图.md</guid><pubDate>Wed, 25 Sep 2024 05:59:52 GMT</pubDate></item><item><title><![CDATA[运算符]]></title><description/></item><item><title><![CDATA[8-氧基脱氧鸟嘌呤（8-oxo-dG）]]></title><description><![CDATA[ 
 <br>8-氧基脱氧鸟嘌呤（8-oxo-dG）是 DNA 氧化损伤的一种产物。它是鸟嘌呤碱基在第8位碳原子上的氧化产物。8-oxo-dG 的形成可能是由于活性氧（ROS）攻击 DNA 造成的。<br>8-oxo-dG是目前研究最广泛的DNA氧化损伤产物之一。它已被证明与癌症、衰老和神经退行性疾病等多种疾病有关。<br>8-oxo-dG的水平可以通过多种方法进行测定，包括酶联免疫吸附测定（ELISA）、高效液相色谱（HPLC）和质谱分析。<br>8-oxo-dG水平的升高可能是氧化应激的标志。氧化应激是指ROS的产生超过了机体的抗氧化能力。氧化应激会导致细胞损伤和疾病。<br>可以通过多种方法来降低8-oxo-dG的水平，包括：<br>
<br>抗氧化剂：抗氧化剂可以清除ROS，从而减少对DNA的损伤。
<br>DNA修复酶：DNA修复酶可以修复DNA损伤，包括8-oxo-dG。
<br>生活方式改变：健康的生活方式，如戒烟、避免紫外线辐射和健康饮食，可以降低氧化应激水平。
<br>8-oxo-dG是DNA氧化损伤的重要生物标志物。它的研究有助于了解氧化应激与疾病的关系，并开发新的疾病预防和治疗方法。]]></description><link>术语\8-氧基脱氧鸟嘌呤（8-oxo-dg）.html</link><guid isPermaLink="false">术语/8-氧基脱氧鸟嘌呤（8-oxo-dG）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:45 GMT</pubDate></item><item><title><![CDATA[阿尔泰山脉]]></title><description><![CDATA[ 
 <br>阿尔泰山脉：从中国新疆维吾尔自治区北部和蒙古西部一直延伸至俄罗斯境内与哈萨克东部，呈西北—东南走向，长2,000公里，海拔1,000—3,000米，北部平均海拔2,050米，南部平均海拔2,377米。中国境内的阿尔泰山脉属中段，长500余千米。高峰有别卢哈山（4,506米），友谊峰（4,374米）和中蒙俄交界的奎屯峰（4,082米）等。阿尔泰山脉森林、矿产资源丰富，清朝也称金山，因为阿尔泰在蒙语中意味“金山”，汉朝就开始有采金活动，至清朝在山中淘金的人曾多达5万多人。阿尔泰语系亦从此得名。<br>
<img alt="阿尔泰山" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E9%98%BF%E5%B0%94%E6%B3%B0%E5%B1%B1.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\阿尔泰山脉.html</link><guid isPermaLink="false">术语/阿尔泰山脉.md</guid><pubDate>Thu, 20 Jun 2024 12:19:42 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E9%98%BF%E5%B0%94%E6%B3%B0%E5%B1%B1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E9%98%BF%E5%B0%94%E6%B3%B0%E5%B1%B1.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[阿尔泰语系（Altaic languages）]]></title><description><![CDATA[ 
 <br>阿尔泰语系（英语：Altaic languages），或译阿勒泰语系，比利时语言学家马蒂尼·罗比茨在它基础上提出了泛欧亚语系（Transeurasian languages），是一个按照语言系属分类方法所划分的一组假说性语系，主要将突厥语族、蒙古语族和通古斯语族划为一个语系，有时朝鲜语、琉球语、日语与阿伊努语也会被归类在其中。这个语系主要分布在北纬35度以北的亚洲以及东欧地区，活动区域大致在日本至土耳其之间，包括60多种语言。这个语系的名称来自中亚的<a data-href="阿尔泰山脉" href="术语\阿尔泰山脉.html" class="internal-link" target="_self" rel="noopener nofollow">阿尔泰山脉</a>。<br>
在1970年代后，许多比较语言学家倾向认为这个假说并不成立，但这个假说仍有学者支持。因此是否存在这个语系，学术界直到现在都存在争议。<br>
<img alt="阿尔泰语系" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E9%98%BF%E5%B0%94%E6%B3%B0%E8%AF%AD%E7%B3%BB.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\阿尔泰语系（altaic-languages）.html</link><guid isPermaLink="false">术语/阿尔泰语系（Altaic languages）.md</guid><pubDate>Thu, 20 Jun 2024 12:27:48 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E9%98%BF%E5%B0%94%E6%B3%B0%E8%AF%AD%E7%B3%BB.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E9%98%BF%E5%B0%94%E6%B3%B0%E8%AF%AD%E7%B3%BB.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[阿尔乌斯塔（Al Wusta）]]></title><description><![CDATA[ 
 ]]></description><link>术语\阿尔乌斯塔（al-wusta）.html</link><guid isPermaLink="false">术语/阿尔乌斯塔（Al Wusta）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:20 GMT</pubDate></item><item><title><![CDATA[阿凡纳谢沃文化（Afanasievo）]]></title><description><![CDATA[<a class="tag" href="?query=tag:单倍群" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#单倍群</a> <a class="tag" href="?query=tag:单倍群" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#单倍群</a> 
 <br>阿凡纳谢沃文化（Afanasievo culture）大约是在公元前3500年至公元前2500年，距今4500年至5500年，时间上从红铜时代晚期到青铜器时代早期。以附近的一座山 Gora Afanasieva 得名。是<a data-href="印欧语系(Indo-European languages)" href="术语\印欧语系(indo-european-languages).html" class="internal-link" target="_self" rel="noopener nofollow">印欧语系(Indo-European languages)</a> 的重要传播者。<br>相关的文物是在西伯利亚中部偏南，叶尼塞河附近的米努辛斯克盆地（今博格勒区）被挖掘出的，但此文化的范围其实相当广大，遍及蒙古西部，新疆北部，以及哈萨克的东部和中部，甚至可能扩展到塔吉克和咸海地区。在生产方式上似乎已经进入半游牧的状态，牛、马和羊科动物等皆有被饲养的纪录，同时，他们也依然会猎捕些野生动物。<br>另外，这种文化最著名的特色之一就是埋葬方式，多半会将死者以仰卧的姿势，安葬在圆锥或长方形的坟墓中，这与<a data-href="颜那亚文化（Yamna culture）" href="术语\颜那亚文化（yamna-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">颜那亚文化（Yamna culture）</a>的墓葬方式有些类似。也已发现金属物和轮式车辆。<br><br>阿凡纳谢沃文化与东欧的<a data-href="颜那亚文化（Yamna culture）" href="术语\颜那亚文化（yamna-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">颜那亚文化（Yamna culture）</a>人群很相似，甚至高于两者之间的群体。这很有意思<a data-footref="1" href="about:blank#fn-1-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>。<br>然而，这个文明后来消失了。尽管它影响了蒙古和新疆。取而代之的是<a data-href="辛塔什塔游牧文化（Sintashta pastoral cultures）" href="术语\辛塔什塔游牧文化（sintashta-pastoral-cultures）.html" class="internal-link" target="_self" rel="noopener nofollow">辛塔什塔游牧文化（Sintashta pastoral cultures）</a>。
消失可能是由多种因素导致的，包括环境变化、资源竞争、文化融合和人口迁移等。
<br><br><a data-href="颜那亚文化（Yamna culture）" href="术语\颜那亚文化（yamna-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">颜那亚文化（Yamna culture）</a>和<a data-href="阿凡纳谢沃文化（Afanasievo）" href="术语\阿凡纳谢沃文化（afanasievo）.html" class="internal-link" target="_self" rel="noopener nofollow">阿凡纳谢沃文化（Afanasievo）</a>都有父系单倍群R1b<a data-footref="2" href="about:blank#fn-2-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a>。 <a href=".?query=tag:单倍群" class="tag" target="_blank" rel="noopener nofollow">#单倍群</a><br><br>2018年的研究发现<a data-href="阿凡纳谢沃文化（Afanasievo）" href="术语\阿凡纳谢沃文化（afanasievo）.html" class="internal-link" target="_self" rel="noopener nofollow">阿凡纳谢沃文化（Afanasievo）</a> 71%属于西欧亚母系单倍群U、H和R，而29%属于东欧亚母系单倍群C3。 <a href=".?query=tag:单倍群" class="tag" target="_blank" rel="noopener nofollow">#单倍群</a><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102116629.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br><br>
<br>
<br><a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Afanasievo_culture#Genetics" rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/Afanasievo_culture#Genetics" target="_blank">Afanasievo culture - Wikipedia</a><a href="about:blank#fnref-1-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>Narasimhan, Vagheesh M. (6 September 2019).&nbsp;<a data-tooltip-position="top" aria-label="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6822619" rel="noopener nofollow" class="external-link" href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6822619" target="_blank">"The formation of human populations in South and Central Asia"</a>.&nbsp;[Science](<a rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/Science" target="_blank">https://en.wikipedia.org/wiki/Science</a>(journal) "Science (journal)").&nbsp;365&nbsp;(6457).&nbsp;<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/American_Association_for_the_Advancement_of_Science" rel="noopener nofollow" class="external-link" title="American Association for the Advancement of Science" href="https://en.wikipedia.org/wiki/American_Association_for_the_Advancement_of_Science" target="_blank">American Association for the Advancement of Science</a>: eaat7487.&nbsp;[bioRxiv](<a rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/BioRxiv" target="_blank">https://en.wikipedia.org/wiki/BioRxiv</a>(identifier) "BioRxiv (identifier)")&nbsp;<a data-tooltip-position="top" aria-label="https://doi.org/10.1101%2F292581" rel="noopener nofollow" class="external-link" href="https://doi.org/10.1101%2F292581" target="_blank">10.1101/292581</a><a data-tooltip-position="top" aria-label="https://www.sci-hub.ee/10.1101/292581" rel="noopener nofollow" class="external-link" href="https://www.sci-hub.ee/10.1101/292581" target="_blank"></a>.&nbsp;<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Doi_(identifier)" rel="noopener nofollow" class="external-link" title="Doi (identifier)" href="https://en.wikipedia.org/wiki/Doi_(identifier)" target="_blank">doi</a>:<a data-tooltip-position="top" aria-label="https://doi.org/10.1126%2Fscience.aat7487" rel="noopener nofollow" class="external-link" href="https://doi.org/10.1126%2Fscience.aat7487" target="_blank">10.1126/science.aat7487</a><a data-tooltip-position="top" aria-label="https://www.sci-hub.ee/10.1126/science.aat7487" rel="noopener nofollow" class="external-link" href="https://www.sci-hub.ee/10.1126/science.aat7487" target="_blank"></a>.&nbsp;<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/PMC_(identifier)" rel="noopener nofollow" class="external-link" title="PMC (identifier)" href="https://en.wikipedia.org/wiki/PMC_(identifier)" target="_blank">PMC</a>&nbsp;<a data-tooltip-position="top" aria-label="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6822619" rel="noopener nofollow" class="external-link" href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6822619" target="_blank">6822619</a>.&nbsp;<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/PMID_(identifier)" rel="noopener nofollow" class="external-link" title="PMID (identifier)" href="https://en.wikipedia.org/wiki/PMID_(identifier)" target="_blank">PMID</a>&nbsp;<a data-tooltip-position="top" aria-label="https://pubmed.ncbi.nlm.nih.gov/31488661" rel="noopener nofollow" class="external-link" href="https://pubmed.ncbi.nlm.nih.gov/31488661" target="_blank">31488661</a>.<br>
3: Hollard, Clémence (September 2018).&nbsp;<a data-tooltip-position="top" aria-label="https://onlinelibrary.wiley.com/doi/10.1002/ajpa.23607" rel="noopener nofollow" class="external-link" href="https://onlinelibrary.wiley.com/doi/10.1002/ajpa.23607" target="_blank">"New genetic evidence of affinities and discontinuities between bronze age Siberian populations"</a>.&nbsp;American Journal of Physical Anthropology.&nbsp;167&nbsp;(1): 6–7.&nbsp;<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/Doi_(identifier)" rel="noopener nofollow" class="external-link" title="Doi (identifier)" href="https://en.wikipedia.org/wiki/Doi_(identifier)" target="_blank">doi</a>:<a data-tooltip-position="top" aria-label="https://doi.org/10.1002%2Fajpa.23607" rel="noopener nofollow" class="external-link" href="https://doi.org/10.1002%2Fajpa.23607" target="_blank">10.1002/ajpa.23607</a><a data-tooltip-position="top" aria-label="https://www.sci-hub.ee/10.1002/ajpa.23607" rel="noopener nofollow" class="external-link" href="https://www.sci-hub.ee/10.1002/ajpa.23607" target="_blank"></a>.&nbsp;<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/PMID_(identifier)" rel="noopener nofollow" class="external-link" title="PMID (identifier)" href="https://en.wikipedia.org/wiki/PMID_(identifier)" target="_blank">PMID</a>&nbsp;<a data-tooltip-position="top" aria-label="https://pubmed.ncbi.nlm.nih.gov/29900529" rel="noopener nofollow" class="external-link" href="https://pubmed.ncbi.nlm.nih.gov/29900529" target="_blank">29900529</a>.&nbsp;<a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/S2CID_(identifier)" rel="noopener nofollow" class="external-link" title="S2CID (identifier)" href="https://en.wikipedia.org/wiki/S2CID_(identifier)" target="_blank">S2CID</a>&nbsp;<a data-tooltip-position="top" aria-label="https://api.semanticscholar.org/CorpusID:205337212" rel="noopener nofollow" class="external-link" href="https://api.semanticscholar.org/CorpusID:205337212" target="_blank">205337212</a>.&nbsp;See also&nbsp;<a data-tooltip-position="top" aria-label="https://onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1002%2Fajpa.23607&amp;file=ajpa23607-sup-0001-suppinfo1.docx" rel="noopener nofollow" class="external-link" href="https://onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1002%2Fajpa.23607&amp;file=ajpa23607-sup-0001-suppinfo1.docx" target="_blank">Supporting Information document 1</a>&nbsp;for uniparental haplogroup details.<a href="about:blank#fnref-2-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>术语\阿凡纳谢沃文化（afanasievo）.html</link><guid isPermaLink="false">术语/阿凡纳谢沃文化（Afanasievo）.md</guid><pubDate>Wed, 18 Sep 2024 13:42:49 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102116629.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409102116629.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[阿克瑟斯文明（Oxus civilization）]]></title><description><![CDATA[ 
 <br>等同于<a data-href="巴克特里亚·马尔吉亚纳文明区（Bactria–Margiana Archaeological Complex，BMAC）" href="术语\巴克特里亚·马尔吉亚纳文明区（bactria–margiana-archaeological-complex，bmac）.html" class="internal-link" target="_self" rel="noopener nofollow">巴克特里亚·马尔吉亚纳文明区（Bactria–Margiana Archaeological Complex，BMAC）</a>。]]></description><link>术语\阿克瑟斯文明（oxus-civilization）.html</link><guid isPermaLink="false">术语/阿克瑟斯文明（Oxus civilization）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:49 GMT</pubDate></item><item><title><![CDATA[阿里多美洲（Aridoamerica）]]></title><description><![CDATA[ 
 <br>阿里多美洲位于今天墨西哥的北部和美国西南部，地理环境非常干旱，这对其人类历史和文化产生了深远影响。由于阿里多美洲的气候极度干旱，适合农业的土地较少。因此，这里的居民主要依靠狩猎、采集和半游牧的生活方式。]]></description><link>术语\阿里多美洲（aridoamerica）.html</link><guid isPermaLink="false">术语/阿里多美洲（Aridoamerica）.md</guid><pubDate>Sun, 22 Sep 2024 03:12:23 GMT</pubDate></item><item><title><![CDATA[阿留申人（Aleut）]]></title><description><![CDATA[ 
 <br>阿留申人生活在阿留申群岛，这是位于阿拉斯加与俄罗斯之间的弧形岛链。这些岛屿横跨北太平洋，气候相对温和但多变，拥有丰富的海洋资源。]]></description><link>术语\阿留申人（aleut）.html</link><guid isPermaLink="false">术语/阿留申人（Aleut）.md</guid><pubDate>Mon, 07 Oct 2024 02:25:20 GMT</pubDate></item><item><title><![CDATA[阿穆尔地区]]></title><description><![CDATA[ 
 <br><img alt="阿穆尔地区" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E9%98%BF%E7%A9%86%E5%B0%94%E5%9C%B0%E5%8C%BA.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\阿穆尔地区.html</link><guid isPermaLink="false">术语/阿穆尔地区.md</guid><pubDate>Thu, 20 Jun 2024 12:19:46 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E9%98%BF%E7%A9%86%E5%B0%94%E5%9C%B0%E5%8C%BA.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E9%98%BF%E7%A9%86%E5%B0%94%E5%9C%B0%E5%8C%BA.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[阿匹迪马洞穴（Apidima Cave）]]></title><description><![CDATA[ 
 ]]></description><link>术语\阿匹迪马洞穴（apidima-cave）.html</link><guid isPermaLink="false">术语/阿匹迪马洞穴（Apidima Cave）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:19 GMT</pubDate></item><item><title><![CDATA[阿维斯陀语（Avestan）]]></title><description><![CDATA[ 
 <br>阿维斯陀语（Avestan）是一种古老的印欧语言，属于伊朗语支的东伊朗语，亦是波斯古经《阿维斯陀》成书时所使用的语言。“阿维斯陀”一词与印度的“<a data-href="吠陀（Vedic）" href="术语\吠陀（vedic）.html" class="internal-link" target="_self" rel="noopener nofollow">吠陀（Vedic）</a>”相似，所以有语言学家认为这是伊朗语族与印度诸语相近的一个历史印证。]]></description><link>术语\阿维斯陀语（avestan）.html</link><guid isPermaLink="false">术语/阿维斯陀语（Avestan）.md</guid><pubDate>Thu, 18 Jul 2024 07:23:36 GMT</pubDate></item><item><title><![CDATA[阿伊努人]]></title><description><![CDATA[ 
 <br>阿伊努族（阿伊努语：Aynu），是日本北方、俄罗斯东南方的一个原住民种群，或译爱努人、爱奴人、阿衣奴人），主要聚居在北海道、库页岛、千岛群岛及堪察加等地。在阿伊努语中“阿伊努”即“人”的意思，该民族分布的地区亦称阿伊努茅希利，即阿伊努语中“人居住的地方”。至今，很多阿伊努人都希望人们称谓他们为“ウタリ”（日语罗马拼音：Utari，阿伊努语中“伙伴”的意思）。在官方文献中，“阿伊努”和“乌塔利”此两种称呼都有。由于已被同化入大和民族之中，纯阿伊努人血统基本上已经消失。]]></description><link>术语\阿伊努人.html</link><guid isPermaLink="false">术语/阿伊努人.md</guid><pubDate>Thu, 20 Jun 2024 12:26:19 GMT</pubDate></item><item><title><![CDATA[爱斯基摩人（Eskimo）]]></title><description><![CDATA[ 
 <br>Eskimo（但这个词现在逐渐被认为不够尊重，更偏向使用"<a data-href="因纽特人（Inuit）" href="术语\因纽特人（inuit）.html" class="internal-link" target="_self" rel="noopener nofollow">因纽特人（Inuit）</a> " 或者"<a data-href="尤皮克人（Yupik）" href="术语\尤皮克人（yupik）.html" class="internal-link" target="_self" rel="noopener nofollow">尤皮克人（Yupik）</a>"来分别描述不同的爱斯基摩族群。）<br>
爱斯基摩人主要分布在北极地区，包括格陵兰、加拿大北部、阿拉斯加以及俄罗斯的楚科奇半岛。因其适应极寒环境的能力，他们广泛分布在这些气候恶劣的地方。爱斯基摩人以其在极端寒冷环境中的生存技巧而著称。他们传统上生活在冰屋（Igloo）中，依赖海洋资源，如捕鱼、捕鲸、猎海豹等，提供食物、衣物和工具。]]></description><link>术语\爱斯基摩人（eskimo）.html</link><guid isPermaLink="false">术语/爱斯基摩人（Eskimo）.md</guid><pubDate>Mon, 07 Oct 2024 02:22:06 GMT</pubDate></item><item><title><![CDATA[安德罗诺沃文化（Andronovo culture）]]></title><description><![CDATA[ 
 <br>是一组相似的青铜时代文化的集合，繁盛于公元前2100年到公元前1400年的西西伯利亚和中亚草原地带。得名于安德罗诺沃村，1914年在该地发现了伴随有花纹丰富陶器的屈肢葬（くっそう、Flexed burial）。<br>在该文化向南和向东扩展的过程中，产生了两种不同的亚文化类型：<br>Alakul（1800–1400 BCE）<br>
Fedorovo（1700–1300 BCE）<br>该文化的地理分布范围和界限很难精确确定。其西界与同时期的斯鲁伯文化在伏尔加河-乌拉尔河一带重叠。其东界可到米努辛斯克盆地，某些地点分布到南乌拉尔山，与更早的阿凡纳谢沃文化重叠。其他地点向南散布在土库曼斯坦的克佩特山脉、塔吉克斯坦的帕米尔和吉尔吉斯斯坦的天山。其北界大约对应西伯利亚的森林带。在伏尔加河盆地，安德罗诺沃文化与斯鲁伯文化有强烈而持久的交流，Federovo风格的陶器在向西远达伏尔加格勒仍有发现。<br>到第二个千年中期，安德罗诺沃文化开始明显东扩，开始在阿尔泰山采掘铜矿，居住的村庄可以由多达十座地穴式的大型木屋组成，墓葬为石棺或者木椁。安德罗诺沃文化为牧业经济，主要有牛、马、绵羊和山羊，推测可能有农业，但缺乏明确的证据。<br>多数研究者把安德罗诺沃文化和早期的印度-伊朗语族联系起来，虽然该文化也在其北界与乌拉尔语族分布区域重叠。]]></description><link>术语\安德罗诺沃文化（andronovo-culture）.html</link><guid isPermaLink="false">术语/安德罗诺沃文化（Andronovo culture）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:34 GMT</pubDate></item><item><title><![CDATA[安多藏族]]></title><description><![CDATA[ 
 <br>安多藏族的传统地域是指阿尼玛卿山西北、甘肃河西走廊一带的小积石山以西的广阔地域。安多藏族的中心在阿尼玛卿山至青海湖一带。]]></description><link>术语\安多藏族.html</link><guid isPermaLink="false">术语/安多藏族.md</guid><pubDate>Thu, 20 Jun 2024 12:27:04 GMT</pubDate></item><item><title><![CDATA[安纳托利亚假说（Anatolian Hypothesis）]]></title><description><![CDATA[ 
 <br>安纳托利亚假说提出<a data-href="印欧语系(Indo-European languages)" href="术语\印欧语系(indo-european-languages).html" class="internal-link" target="_self" rel="noopener nofollow">印欧语系(Indo-European languages)</a> 起源于新石器时代的<a data-href="安纳托利亚农业人群（Anatolian farmer）" href="术语\安纳托利亚农业人群（anatolian-farmer）.html" class="internal-link" target="_self" rel="noopener nofollow">安纳托利亚农业人群（Anatolian farmer）</a>（即今天的土耳其地区）。根据这一假说，大约在公元前7000年到公元前6000年之间，安纳托利亚的早期农民开始向欧洲和亚洲扩张，传播他们的农业技术和语言。这一假说主要基于语言学证据，认为印欧语系语言的扩散与早期农业的传播密切相关。]]></description><link>术语\安纳托利亚假说（anatolian-hypothesis）.html</link><guid isPermaLink="false">术语/安纳托利亚假说（Anatolian Hypothesis）.md</guid><pubDate>Thu, 18 Jul 2024 08:27:42 GMT</pubDate></item><item><title><![CDATA[安纳托利亚农业人群（Anatolian farmer）]]></title><description><![CDATA[ 
 <br>考古学和遗传学证据表明，1.2万年前的某个时候，中东的游牧狩猎采集者完成了人类历史上最重要的转变之一——不再游荡，开始定居务农。这种转变后来也独立出现在世界其他地区，被称为新石器革命(农业及畜牧出现)。<br>古代基因组学研究曾暗示，这些“中东农民”起源复杂，涉及不同地方的狩猎采集群体，具有不同的遗传序列。<br>近日，两项古代人类DNA研究，其中包括迄今为止发表的最大的古代人类基因组集合之一，锁定了定居务农的狩猎采集者的身份，揭示了“农业发展黎明”的细节。<br>欧洲最早的农业人口主要是来自安纳托利亚半岛，即现在的土耳其的农民。<br>“在他们开始向安纳托利亚和欧洲迁移并传播农业文化之前发生了什么?”瑞士伯尔尼大学人口遗传学家Laurent Excoffier对此十分好奇。<br>为了解决这个问题，由Excoffier联合领导的研究团队对生活在亚洲西南部和欧洲的15名狩猎采集者和早期农民的遗骸进行了基因组测序。这些遗骸出土自几个考古遗址，包括安纳托利亚西部的一些早期村庄。这些人生前生活在早期农民进入欧洲的主要迁徙路线之一——多瑙河沿岸。<br>研究人员生成了“高覆盖率”的高质量基因组图谱，这使他们能够深入研究人口统计细节的数据，例如人口规模的变化。<br>Excoffier团队发现，古代安纳托利亚农民是欧洲和中东不同狩猎采集群体反复混合诞生的后代。这些群体最初是在约2.5万年前最后一个冰河时代时高度分化的。模型显示，西方的狩猎采集群体几乎灭绝，随着气候变暖又有所恢复。<br>Excoffier团队近日发表于《细胞》的研究指出，早期农民在安纳托利亚定居后，大约从8000年前开始，早期农业人口以其为“踏板”向西迁移至欧洲。他们偶尔与当地狩猎采集者婚配。<br>“这实际上是人口的扩散、农业社区的扩张，把农业带到了更远的西部。”Excoffier说。<br>这一发现与近日发表于预印本平台bioRxiv上的一项古代基因组学研究结果一致。该研究中，由丹麦哥本哈根大学古遗传学家Eske Willerslev共同领导的研究团队对317名欧亚大陆狩猎采集者和早期农民的基因组进行了测序，这是这一时期迄今为止规模最大的古代基因组研究。<br>这项研究发现了东西方狩猎采集群体之间的古老分化，并追溯了约8700年前始于巴尔干半岛的安纳托利亚农民的欧洲迁移史。(作者：徐锐 )]]></description><link>术语\安纳托利亚农业人群（anatolian-farmer）.html</link><guid isPermaLink="false">术语/安纳托利亚农业人群（Anatolian farmer）.md</guid><pubDate>Thu, 18 Jul 2024 07:05:09 GMT</pubDate></item><item><title><![CDATA[奥库涅夫文化（Okunev Culture）]]></title><description><![CDATA[ 
 <br>奥库涅夫文化（俄语：Окуневская культура，英语：Okunev Culture）是西伯利亚南部的青铜时代文化，以叶尼塞河中游的米努辛斯克盆地为中心，年代约在公元前2千年的上半叶，在这一地区，晚于<a data-href="阿凡纳谢沃文化（Afanasievo）" href="术语\阿凡纳谢沃文化（afanasievo）.html" class="internal-link" target="_self" rel="noopener nofollow">阿凡纳谢沃文化（Afanasievo）</a>，而早于<a data-href="安德罗诺沃文化（Andronovo culture）" href="术语\安德罗诺沃文化（andronovo-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">安德罗诺沃文化（Andronovo culture）</a>。<br>手工业<br>
发现的器具有骨器、铜器、石器、陶器等。红铜、青铜器物相当多见，有铸造的铜斧、锻造的鱼钩、铜锥、鬓环等；石器有石斧、石杵、石臼等；陶器多为平底，主要有桶形器和罐形器，前者大小不一，纹饰简单，有窝纹、杉针纹、纵列篦纹等，后者纹饰复杂多样，有波浪纹、棋盘纹、弦纹等，也发现了香炉形、圈足和多棱形器。<br>艺术<br>
考古学家发现了骨、石雕刻的人像、鸟兽等。<br>墓葬<br>
发现的墓葬多靠近河流，地面有高30至50厘米的方形石围，最大者占地400平方米。单个墓穴埋葬1至3人不等，男女或妇幼合葬常见，葬式为仰身屈膝，头大多向西，并垫有石枕，脚下的墓底略有倾斜。墓穴的随葬品不多，尚无明显的贫富分化，随葬品一般为生产工具和陶罐等，女性骨骼发现有骨针、红铜丝制鬓环等。]]></description><link>术语\奥库涅夫文化（okunev-culture）.html</link><guid isPermaLink="false">术语/奥库涅夫文化（Okunev Culture）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:32 GMT</pubDate></item><item><title><![CDATA[巴克特里亚·马尔吉亚纳文明区（Bactria–Margiana Archaeological Complex，BMAC）]]></title><description><![CDATA[ 
 <br>又称<a data-href="阿克瑟斯文明（Oxus civilization）" href="术语\阿克瑟斯文明（oxus-civilization）.html" class="internal-link" target="_self" rel="noopener nofollow">阿克瑟斯文明（Oxus civilization）</a>，是现代考古学对公元前2300年至公元前1700年一个中亚青铜时代文明的命名[1][2]。该文明体位于现今土库曼斯坦、阿富汗北部、伊朗东北部、乌兹别克南部及塔吉克斯坦西部，以阿姆河（又称阿克瑟斯）为核心。巴克特里亚·马尔吉亚纳文明体的遗址是由苏联考古学家维克托·萨瑞阿尼迪（Viktor Sarianidi）在1976年发现，并予以命名。巴克特里亚是巴克特拉地区（今巴尔赫）的希腊语名称，位于现今阿富汗北部，而马尔吉亚纳则是马尔古（Margu）的希腊语名称，即是今土库曼斯坦梅尔夫一带。<br>1970年代往后，萨瑞阿尼迪在各个遗址上发现了大量被围墙和闸门保护的纪念建筑物。在苏联解体前，关于巴克特里亚·马尔吉亚纳文明体的报告大部分都局限在苏联的刊物里，在1990年代萨瑞阿尼迪的作品开始被翻译成各种语言之前，西方对于这个发现可以说是一无所知。]]></description><link>术语\巴克特里亚·马尔吉亚纳文明区（bactria–margiana-archaeological-complex，bmac）.html</link><guid isPermaLink="false">术语/巴克特里亚·马尔吉亚纳文明区（Bactria–Margiana Archaeological Complex，BMAC）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:36 GMT</pubDate></item><item><title><![CDATA[白令海峡（Bering Strait）]]></title><description><![CDATA[ 
 <br>白令海峡（英语：Bering Strait；楚科奇语：Эʼрвытгыр、俄语：Бе́рингов проли́в），或译白林海峡，是太平洋的一个海峡，位于亚洲最东点的迭日涅夫角（169°43' W）和美洲最西点的威尔士王子角（168°05' W）之间的海峡，位于大约北纬65° 40'，宽约35-86公里，深度在30-50米之间。这个海峡连接了楚科奇海（北冰洋的一部分）和白令海（太平洋的一部分），位于俄罗斯和阿拉斯加中间。它的名字来自丹麦探险家的维他斯·白令。白令海峡正中间有代奥米德群岛。<br><img alt="Pasted image 20230802110457" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230802110457.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
冷战时期，白令海峡作为苏联和美国的边界，苏联的大代奥米德岛仅距美国的小代奥米德岛3.9公里。传统上，当地人常常往返此边界“例行访问、庆祝节日及生活贸易”。但在冷战时期，这种做法被禁止，该边界成为了“冰幕”（Ice Curtain）。该边界被完全封闭，直至1987年，美国游泳者琳·考克斯象征性地游泳横穿该边界，才缓解了两国间的紧张气氛，。她同时受到罗纳德·里根及米哈伊尔·戈尔巴乔夫的嘉奖。]]></description><link>术语\白令海峡（bering-strait）.html</link><guid isPermaLink="false">术语/白令海峡（Bering Strait）.md</guid><pubDate>Thu, 20 Jun 2024 12:19:25 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230802110457.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230802110457.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[白马藏族]]></title><description><![CDATA[ 
 <br>白马藏族主要生活在甘肃省陇南市文县铁楼乡白马河流域和四川省平武县、九寨沟县一带。他们的风俗习惯、文化、宗教信仰都与其他地区藏族有所不同。]]></description><link>术语\白马藏族.html</link><guid isPermaLink="false">术语/白马藏族.md</guid><pubDate>Thu, 20 Jun 2024 12:27:17 GMT</pubDate></item><item><title><![CDATA[班图语]]></title><description><![CDATA[ 
 <br>班图语支是非洲尼日尔-刚果语系大西洋-刚果语族中的一个语支，其中包含约600种语言，有约两亿母语者。在整个非洲中部和南部很普及，尽管在中非和南非国家中英语、法语和葡萄牙语一般为官方语言，但是班图语支是这些国家中最普及的语言。<br>在西北方班图地区与其它尼日尔-刚果语系接壤，在东北方它与尼罗-撒哈拉语系和亚非语系（其中的库希特语族）相邻。在西南方有一个科依桑语系的语言岛。<img alt="Pasted image 20230803085823" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803085823.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\班图语.html</link><guid isPermaLink="false">术语/班图语.md</guid><pubDate>Thu, 20 Jun 2024 12:27:40 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803085823.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803085823.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[伴随删除的倒置重复Inverted duplication associated with a deletion]]></title><description><![CDATA[ 
 <br>"Inverted duplication associated with a deletion"（inv dup del）是一种特殊的染色体结构异常，通常涉及到一个染色体段的重复（duplication）和删除（deletion）。这种异常通常表现为一个染色体末端的删除，紧接着是一个相同染色体区域的倒置重复。这种结构的形成可能由染色体断裂和错误修复机制导致。<br>简单来说，inv dup del 可以分为三个主要部分：<br>
<br>Inversion (倒置): 染色体的一部分发生了方向上的反转。
<br>Duplication (重复): 倒置的这部分染色体发生了复制，因此这部分遗传信息存在两份。
<br>Deletion (删除): 在重复和倒置发生的同时，染色体的另一部分丢失了。
<br>这种染色体异常可以导致遗传性疾病和发育异常，因为它改变了基因的正常排列和数量。inv dup del 的具体影响取决于受影响的染色体部分及其包含的基因。在临床遗传学中，通过染色体微阵列或其他基因组分析技术可以检测到这种类型的异常。]]></description><link>术语\伴随删除的倒置重复inverted-duplication-associated-with-a-deletion.html</link><guid isPermaLink="false">术语/伴随删除的倒置重复Inverted duplication associated with a deletion.md</guid><pubDate>Thu, 20 Jun 2024 12:20:50 GMT</pubDate></item><item><title><![CDATA[胞质线粒体内膜小泡（vesicles derived from the IMM，VDIMs）]]></title><description><![CDATA[ 
 ]]></description><link>术语\胞质线粒体内膜小泡（vesicles-derived-from-the-imm，vdims）.html</link><guid isPermaLink="false">术语/胞质线粒体内膜小泡（vesicles derived from the IMM，VDIMs）.md</guid><pubDate>Mon, 26 Aug 2024 02:17:24 GMT</pubDate></item><item><title><![CDATA[保守序列区块（CSBs）]]></title><description><![CDATA[ 
 ]]></description><link>术语\保守序列区块（csbs）.html</link><guid isPermaLink="false">术语/保守序列区块（CSBs）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:50 GMT</pubDate></item><item><title><![CDATA[北京猿人]]></title><description><![CDATA[ 
 <br>在北京郊区周口店发现的古代人类，被认为是<a data-href="直立人" href="直立人" class="internal-link" target="_self" rel="noopener nofollow">直立人</a>的一种，距今大约77万年。]]></description><link>术语\北京猿人.html</link><guid isPermaLink="false">术语/北京猿人.md</guid><pubDate>Thu, 20 Jun 2024 12:26:07 GMT</pubDate></item><item><title><![CDATA[北美洲（North America）]]></title><description><![CDATA[ 
 <br>北<a data-href="美洲" href="术语\美洲.html" class="internal-link" target="_self" rel="noopener nofollow">美洲</a>（英语：North America），全称为北亚美利加洲，位于西半球北部，是世界经济第二发达的大洲，其中美国经济位居世界首位，在全球经济和政治上有重要影响力。北<a data-href="美洲" href="术语\美洲.html" class="internal-link" target="_self" rel="noopener nofollow">美洲</a>大部分面积属于发达国家，有着极高的人类发展指数和经济发展水平。通用英语，其次是西班牙语、法语、荷兰语、<a data-href="美洲" href="术语\美洲.html" class="internal-link" target="_self" rel="noopener nofollow">美洲</a>原住民语言等。<br>
北<a data-href="美洲" href="术语\美洲.html" class="internal-link" target="_self" rel="noopener nofollow">美洲</a>总面积2422.8万平方公里（包括附近岛屿），约占世界陆地总面积的16.2%，是世界第三大洲。其东临大西洋，西临太平洋，北临北冰洋，南以巴拿马运河为界与南<a data-href="美洲" href="术语\美洲.html" class="internal-link" target="_self" rel="noopener nofollow">美洲</a>相分，东北面隔丹麦海峡与欧洲相望，地理位置优越。大陆东至圣查尔斯角（西经55°40′，北纬52°13′），南至马里亚托角（西经81°05′,北纬7°12′），西至威尔士王子角（西经168°05′,北纬65°37′），北至布西亚半岛的穆奇森角（西经94°26′，北纬71°59′）。]]></description><link>术语\北美洲（north-america）.html</link><guid isPermaLink="false">术语/北美洲（North America）.md</guid><pubDate>Thu, 20 Jun 2024 12:19:56 GMT</pubDate></item><item><title><![CDATA[贝加尔湖]]></title><description><![CDATA[ 
 <br>贝加尔湖位于俄罗斯西伯利亚伊尔库茨克州及布里亚特共和国境内，距离蒙古国边界111公里，是世界上水容量最大的淡水湖，最深近2000公尺，为北亚地区不少部族的世居领地，例如布里亚特人居住在湖泊东侧地区，于该地豢养山羊、骆驼、牛只及绵羊。另外，贝加尔湖有“西伯利亚明珠”之称。贝加尔湖为大陆裂谷湖，有逾1,700种动物及植物栖息其中，而且2/3为特有种，联合国教科文组织于1996年将贝加尔湖登录为世界自然遗产。<br>《汉书-苏武传》记载西汉时期，贝加尔湖在匈奴的控制范围之内，苏武被单于流放到“北海”去牧羊。苏武在北海边艰难熬过19年才回到汉都长安。]]></description><link>术语\贝加尔湖.html</link><guid isPermaLink="false">术语/贝加尔湖.md</guid><pubDate>Thu, 20 Jun 2024 12:19:37 GMT</pubDate></item><item><title><![CDATA[贝丘文化(Shell-Mound Culture)]]></title><description><![CDATA[ 
 <br>贝丘(Shell Mound)，古代人类居住遗址的一种﹐以包含大量古代人类食剩馀抛弃的贝壳为特征。又称<a data-href="贝冢（贝丘遗址）" href="术语\贝冢（贝丘遗址）.html" class="internal-link" target="_self" rel="noopener nofollow">贝冢（贝丘遗址）</a>。大都属于新石器时代﹐有的则延续到青铜时代或稍晚。贝丘遗址多位于海﹑湖泊和河流的沿岸﹐在世界各地有广泛的分布。在贝丘的文化层中夹杂著贝壳﹑各种食物的残渣以及石器﹑陶器等文化遗物﹐还往往发现房基﹑窖穴和墓葬等遗迹。由于贝壳中含有钙质﹐致使骨角器等往往能保存完好。根据贝丘的地理位置和贝壳种类的变化﹐可以了解古代海岸线和海水温差的变迁﹐对於复原当时自然条件和生活环境也有很大帮助。]]></description><link>术语\贝丘文化(shell-mound-culture).html</link><guid isPermaLink="false">术语/贝丘文化(Shell-Mound Culture).md</guid><pubDate>Thu, 20 Jun 2024 12:26:47 GMT</pubDate></item><item><title><![CDATA[贝塞马（Besemah）]]></title><description><![CDATA[ 
 <br>Besemah是一个典型的父系居住群体（patrilocal group）。在父系居住制度中，婚后夫妻通常居住在丈夫的家庭或村落中，家庭和财产的传承主要通过父系进行，男性在家庭中占据主导地位。]]></description><link>术语\贝塞马（besemah）.html</link><guid isPermaLink="false">术语/贝塞马（Besemah）.md</guid><pubDate>Wed, 03 Jul 2024 07:42:35 GMT</pubDate></item><item><title><![CDATA[贝叶斯进化树分析（Bayesian Evolutionary Analysis by Sampling Trees，BEAST）]]></title><description><![CDATA[ 
 <br>BEAST是一种用于进行分子进化和生物地理学分析的软件工具。它是一种贝叶斯方法的程序，用于对DNA或蛋白质序列数据进行分析，从而推断物种的进化历史、群体动态和地理分布等信息。BEAST分析可以用于估计物种的分歧时间、迁移模式、群体大小等重要参数，从而帮助科学家了解生物种群的演化过程和历史。它在分子生物学、进化生物学、生物地理学等领域广泛应用，并且可以根据具体的研究问题进行定制化分析。]]></description><link>术语\贝叶斯进化树分析（bayesian-evolutionary-analysis-by-sampling-trees，beast）.html</link><guid isPermaLink="false">术语/贝叶斯进化树分析（Bayesian Evolutionary Analysis by Sampling Trees，BEAST）.md</guid><pubDate>Thu, 20 Jun 2024 12:25:07 GMT</pubDate></item><item><title><![CDATA[贝叶斯马尔科夫链蒙特卡罗分析（Bayesian MCMC analysis）]]></title><description><![CDATA[ 
 <br>Bayesian MCMC分析是一种基于贝叶斯统计学原理的分析方法，其中MCMC代表<a data-href="马尔科夫链蒙特卡罗（Markov Chain Monte Carlo，MCMC）" href="术语\马尔科夫链蒙特卡罗（markov-chain-monte-carlo，mcmc）.html" class="internal-link" target="_self" rel="noopener nofollow">马尔科夫链蒙特卡罗（Markov Chain Monte Carlo，MCMC）</a>。在贝叶斯统计学中，我们使用先验知识和观测数据来推断参数的后验分布。MCMC是一种计算方法，用于从参数的后验分布中采样，以便近似地估计参数的不确定性和模型的后验概率分布。<br>在分析中，我们使用马尔科夫链的采样方法来探索参数空间，并根据参数的后验分布进行推断。通过迭代地生成一系列样本，每个样本都根据当前状态和转移概率生成下一个状态，最终我们可以获得参数的后验分布和估计值。这种方法适用于复杂的统计模型，可以处理高维参数空间和复杂的参数关联性。<br>Bayesian MCMC分析在许多领域广泛应用，包括生物学、遗传学、统计学、机器学习等。它提供了一种灵活而强大的方法来处理不确定性和复杂模型的推断问题，并且可以有效地利用先验知识和观测数据来更新和改进参数估计。<br>假设我们有一组数据，表示某个人群中的身高，我们希望推断这个人群的平均身高和身高的方差。我们可以使用贝叶斯MCMC方法来进行分析。<br>首先，我们需要选择先验分布来描述平均身高和方差的不确定性。假设我们选择了正态分布作为平均身高的先验分布，并选择了逆Gamma分布作为方差的先验分布。<br>接下来，我们使用MCMC方法从后验分布中采样。通过定义状态空间和转移概率，我们可以迭代地生成一系列样本。在每个迭代步骤中，根据当前状态和转移概率生成下一个状态。我们根据每个样本的似然函数、先验分布和转移概率计算其接受概率，并根据接受概率决定是否接受该样本。<br>在MCMC分析的过程中，我们会生成大量的样本。最终，我们可以使用这些样本来估计平均身高和方差的后验分布。通过观察后验分布的均值、<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>和概率密度函数，我们可以得出关于平均身高和方差的推断结论。<br>例如，我们的MCMC分析可能产生了一个后验分布，显示平均身高的均值为175cm，方差为25cm。这意味着在考虑数据和先验知识的情况下，我们对这个人群的平均身高和身高的变异性有了更准确的估计。我们还可以通过后验分布的<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>来描述不确定性，例如我们可以说有95%的置信度认为平均身高在165cm至185cm之间。<br>总之，通过MCMC分析，我们可以利用贝叶斯方法对参数的不确定性进行建模，并通过采样得到参数的后验分布。通过对后验分布的解释和分析，我们可以得出关于参数的推断结论，并估计参数的不确定性。]]></description><link>术语\贝叶斯马尔科夫链蒙特卡罗分析（bayesian-mcmc-analysis）.html</link><guid isPermaLink="false">术语/贝叶斯马尔科夫链蒙特卡罗分析（Bayesian MCMC analysis）.md</guid><pubDate>Thu, 20 Jun 2024 12:25:08 GMT</pubDate></item><item><title><![CDATA[贝叶斯天际线图（Bayesian Skyline Plot, BSP）]]></title><description><![CDATA[ 
 <br>Bayesian Skyline Plot（BSP）是基于贝叶斯方法的种群动态分析工具，用于估计种群的历史动态。<br>BSP 是一种用于估计种群历史动态的简化模型。它假设种群的大小在时间上是均匀的，即没有考虑过多的复杂性和时段的变化。BSP 适用于相对较短的时间段内的种群动态估计。<br><a data-href="扩展贝叶斯天际线图（Extended Bayesian Skyline Plot，EBSP）" href="术语\扩展贝叶斯天际线图（extended-bayesian-skyline-plot，ebsp）.html" class="internal-link" target="_self" rel="noopener nofollow">扩展贝叶斯天际线图（Extended Bayesian Skyline Plot，EBSP）</a>是其扩展版本。<br><br>
<br>模型简介：Bayesian Skyline Plot是一种无需指定具体种群模型的方法，可以直接从遗传数据中推断种群大小随时间变化的历史。
<br>参数设置：BSP通常需要用户指定分组数量，即时间点，这些时间点将被用来估计种群大小变化。
<br>数据要求：适用于单一样本或遗传相关性较强的样本集。
<br>应用：广泛应用于种群遗传学和保护生物学，可以有效地反映种群规模随时间的变化。
<br>计算需求：相对于更复杂的模型而言，计算需求适中。
<br><br>
<br>模型简介：Extended Bayesian Skyline Plot是Bayesian Skyline Plot的扩展，提供了对多个独立基因座的支持，并可以更加精确地估计种群历史。
<br>参数设置：与BSP相比，EBSP可以处理多个基因座的数据，提供了对复杂遗传结构的考虑。
<br>数据要求：EBSP适用于多基因座数据，可以处理来自不同基因座的数据，增加了分析的鲁棒性。
<br>应用：在考虑多基因座时，EBSP提供了一种更为复杂和详细的种群历史重建方式，尤其适用于复杂的遗传数据集，如多个相关或非相关样本。
<br>计算需求：由于模型更加复杂，EBSP在计算上更为要求，需要更多的计算资源和时间。
]]></description><link>术语\贝叶斯天际线图（bayesian-skyline-plot,-bsp）.html</link><guid isPermaLink="false">术语/贝叶斯天际线图（Bayesian Skyline Plot, BSP）.md</guid><pubDate>Thu, 18 Jul 2024 07:34:21 GMT</pubDate></item><item><title><![CDATA[贝叶斯系统发育模型]]></title><description><![CDATA[ 
 <br>以下是一些用于贝叶斯系统发育分析的程序、简要描述以及相应的参考文献：<br>
<br><a data-tooltip-position="top" aria-label="贝叶斯进化树分析（Bayesian Evolutionary Analysis by Sampling Trees，BEAST）" data-href="贝叶斯进化树分析（Bayesian Evolutionary Analysis by Sampling Trees，BEAST）" href="术语\贝叶斯进化树分析（bayesian-evolutionary-analysis-by-sampling-trees，beast）.html" class="internal-link" target="_self" rel="noopener nofollow">贝叶斯进化树分析（Bayesian Evolutionary Analysis by Sampling Trees，BEAST）</a>：实现大量模型，例如同时估计树的拓扑结构和分化时间、系统地理学、种群动态以及在多物种共同祖先（MSC）模型下的物种树估计。
<br>MrBayes实现大量模型，用于核苷酸、氨基酸和形态数据的分析。估计物种系统发育树和物种分化时间。
<br>RevBayes类似于MrBayes，但使用自己的编程语言来建立复杂的分层贝叶斯模型。
<br>MCMCTree在固定的系统发育树上估计分化时间。
<br>Phycas基于核苷酸数据估计系统发育树。允许多叉树，有助于减少系统发育的后验概率估计中虚高的情况。
<br>PhyloBayes使用无限混合模型重建系统发育树，以考虑核苷酸或氨基酸组成的位点间和谱系间异质性，这对于推断深层次系统发育可能很重要。
<br>BPP使用多基因组序列数据实现物种树估计和物种划分，应用多物种共同祖先（MSC）模型。
<br>Migrate基于分子数据在种群分裂模型下估计种群大小和迁移率。
<br>IMa2使用多基因DNA序列数据和固定的系统发育树估计分化时间、种群大小和迁移率，应用隔离迁移模型。
<br>Structure从多基因型数据估计种群结构。
<br>BAMM在系统发育树上估计支系多样化率。
<br>Tracer用于MCMC诊断和总结的程序。
<br>AWTY用于贝叶斯系统发育推断的MCMC诊断工具包。
<br>这些程序提供了丰富的工具和方法，可用于进行贝叶斯系统发育分析，并为研究人员提供了估计物种关系、分化时间、种群动态等方面的有用信息、]]></description><link>术语\贝叶斯系统发育模型.html</link><guid isPermaLink="false">术语/贝叶斯系统发育模型.md</guid><pubDate>Thu, 20 Jun 2024 12:23:26 GMT</pubDate></item><item><title><![CDATA[贝冢（贝丘遗址）]]></title><description><![CDATA[ 
 <br>贝冢，也称作贝丘，指的是由贝壳堆积形成的考古现象，其存在也显示着人群利用水生资源的生业模式。<br>
贝冢（蚬冢遗迹）<br>
作为弃置垃圾的现象，贝冢除了大量的贝壳之外，也常常发现弃置的陶片、石器、兽骨、鱼骨等。<a data-href="台湾" href="术语\台湾.html" class="internal-link" target="_self" rel="noopener nofollow">台湾</a>的贝冢分布由南到北及离岛皆有所见，发现有贝冢的考古学文化包含南部大湖文化、中部番仔园文化、北部的十三行文化和圆山文化等；而连江县的<a data-href="亮岛" href="术语\亮岛.html" class="internal-link" target="_self" rel="noopener nofollow">亮岛</a>岛尾考古遗址亦发现距今约8300-7000年前左右的贝冢。其中以圆山文化最为知名，也常被称为“贝冢文化”，广大深厚的贝冢在日治时期就被发现进而调查研究，其中也发现埋藏有人骨。同样发现埋藏有人骨的贝冢还包括<a data-href="亮岛" href="术语\亮岛.html" class="internal-link" target="_self" rel="noopener nofollow">亮岛</a>岛尾考古遗址，发现的两具人骨保存良好，并且采集并建立有效基因序列，为近期重大发现之一。<br>贝冢富含碳酸钙，可以有效中和土壤酸性，形成的堆积环境减缓了人骨、兽骨等有机质风化腐烂的情形，提供考古学保存良好的研究素材。贝冢除了提供生业型态的观察之外，也能进一步利用贝壳进行种类分析，例如贝的种类生活环境为纯咸水、半咸水、纯淡水等，以获取饮食偏好、采集季节、环境建立等讯息。<br>在亚洲地区如<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>，也有贝冢现象的分布，最早于1877年（明治10年）由美国动物学者摩斯（Edward Sylvester Morse）发现大森贝冢，发掘后出土贝壳、兽骨、陶器及石器等引发关注，同时因为<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>首次学术性发掘而被称为“<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>考古学发祥地”。在<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a><a data-href="绳文时代" href="术语\绳文时代.html" class="internal-link" target="_self" rel="noopener nofollow">绳文时代</a>早期可见，至弥生时代和古坟时代则属偶见。]]></description><link>术语\贝冢（贝丘遗址）.html</link><guid isPermaLink="false">术语/贝冢（贝丘遗址）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:20 GMT</pubDate></item><item><title><![CDATA[比达友 (Bidayuh)]]></title><description><![CDATA[ 
 <br>马来西亚婆罗洲砂拉越州的一个土著族群，属于南岛语系。他们主要居住在砂拉越的丘陵地区，以农业为生，并有自己独特的语言和文化。]]></description><link>术语\比达友-(bidayuh).html</link><guid isPermaLink="false">术语/比达友 (Bidayuh).md</guid><pubDate>Tue, 20 Aug 2024 12:36:46 GMT</pubDate></item><item><title><![CDATA[必需氨基酸 1]]></title><description><![CDATA[ 
 <br>必需氨基酸是指人体无法自行合成，必须通过饮食摄入的氨基酸。共有9种必需氨基酸，它们包括：<br><a data-href="色氨酸（Tryptophan）" href="色氨酸（Tryptophan）" class="internal-link" target="_self" rel="noopener nofollow">色氨酸（Tryptophan）</a><br>
<a data-href="赖氨酸（Lysine）" href="赖氨酸（Lysine）" class="internal-link" target="_self" rel="noopener nofollow">赖氨酸（Lysine）</a><br>
<a data-href="苯丙氨酸（Phenylalanine）" href="苯丙氨酸（Phenylalanine）" class="internal-link" target="_self" rel="noopener nofollow">苯丙氨酸（Phenylalanine）</a><br>
<a data-href="缬氨酸（Valine）" href="缬氨酸（Valine）" class="internal-link" target="_self" rel="noopener nofollow">缬氨酸（Valine）</a><br>
<a data-href="亮氨酸（Leucine）" href="亮氨酸（Leucine）" class="internal-link" target="_self" rel="noopener nofollow">亮氨酸（Leucine）</a><br>
<a data-href="异亮氨酸（Isoleucine）" href="异亮氨酸（Isoleucine）" class="internal-link" target="_self" rel="noopener nofollow">异亮氨酸（Isoleucine）</a><br>
<a data-href="蛋氨酸（Methionine）" href="蛋氨酸（Methionine）" class="internal-link" target="_self" rel="noopener nofollow">蛋氨酸（Methionine）</a><br>
<a data-href="苹果酸（Threonine）" href="苹果酸（Threonine）" class="internal-link" target="_self" rel="noopener nofollow">苹果酸（Threonine）</a><br>
<a data-href="组氨酸（Histidine）" href="组氨酸（Histidine）" class="internal-link" target="_self" rel="noopener nofollow">组氨酸（Histidine）</a>]]></description><link>术语\必需氨基酸-1.html</link><guid isPermaLink="false">术语/必需氨基酸 1.md</guid><pubDate>Thu, 20 Jun 2024 12:20:40 GMT</pubDate></item><item><title><![CDATA[避难所（Refuge）]]></title><description><![CDATA[ 
 <br>指的是在特殊时期，在某种/某些生物大量灭绝的时候，有一些特定的地点/区域，因为其特殊的环境/气候条件，使得生活在那里的这种/这些生物能够幸存下来，并在灾难过后，从这些地点/区域出发，重新繁衍开来——这些特殊的地点/区域，便是所谓的避难所。]]></description><link>术语\避难所（refuge）.html</link><guid isPermaLink="false">术语/避难所（Refuge）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:38 GMT</pubDate></item><item><title><![CDATA[扁扁]]></title><description><![CDATA[ 
 <br>2006年11月26日至12月13日，山东省文物考古研究所、淄博市文物事业管理局、沂源县文物管理所联合对沂源县张家坡镇北桃花坪村扁扁洞遗址进行了第一次正式发掘。扁扁洞遗址位于北桃花坪村东面一处山坡上，为岩厦结构，洞高约4米，进深约15米。洞内现有残存堆积厚达80厘米。]]></description><link>术语\扁扁.html</link><guid isPermaLink="false">术语/扁扁.md</guid><pubDate>Thu, 18 Jul 2024 01:30:09 GMT</pubDate></item><item><title><![CDATA[变异聚合关联（variant aggregate association）]]></title><description><![CDATA[ 
 <br>“聚合变异”在遗传学研究中通常指的是将多个罕见变异按其功能或位置进行分组，来评估这些变异的整体效应。由于单个罕见变异的个体效应较小且难以检测，通过聚合多个具有类似功能后果或位于相同调控区域的罕见变异，可以增强统计效力，从而检测出这些变异的总效应与复杂性状或疾病的关联。<br>在聚合分析中，研究人员通常将位于特定基因、调控元件（如启动子或增强子）或功能上具有相似性的变异进行归类，并对这些聚合体（aggregate）进行统计测试，以评估它们是否与感兴趣的表型相关。聚合变异分析特别适用于研究罕见变异，因为个体罕见变异的频率太低，单独进行关联分析时很难获得显著结果，而通过聚合分析可以将这些罕见变异的影响集中起来，从而提高检测效能并发现潜在的致病或致性状机制。<br>简而言之，聚合变异就是将具有相似功能或结构特征的罕见变异进行整合分析，旨在提高研究罕见遗传变异对复杂性状或疾病影响的检测能力。]]></description><link>术语\变异聚合关联（variant-aggregate-association）.html</link><guid isPermaLink="false">术语/变异聚合关联（variant aggregate association）.md</guid><pubDate>Tue, 08 Oct 2024 01:38:10 GMT</pubDate></item><item><title><![CDATA[标准化的赔率比（standardized odds ratio，SOR）]]></title><description><![CDATA[ 
 <br>是赔率比（或者又叫做<a data-href="风险比（Odds Ratio, OR）" href="术语\风险比（odds-ratio,-or）.html" class="internal-link" target="_self" rel="noopener nofollow">风险比（Odds Ratio, OR）</a>）的标准化。<br>
是一种用于比较两个或多个群体之间赔率比的统计量。SOR是将赔率比标准化为一个常数基础上计算的。<br><br>其中：<br>
<br>OR 是两个群体之间原始的赔率比
<br>OR0 是标准化的基础赔率比
<br>SOR的值越大，表示两个群体之间的赔率比越明显。SOR的值为0表示两个群体之间没有差异。<br>SOR常用于比较以下情况：<br>
<br>不同年龄、性别、种族等人口特征的群体之间患某种疾病的风险
<br>不同治疗方法的效果
<br>不同药物或化学物质的毒性
]]></description><link>术语\标准化的赔率比（standardized-odds-ratio，sor）.html</link><guid isPermaLink="false">术语/标准化的赔率比（standardized odds ratio，SOR）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:02 GMT</pubDate></item><item><title><![CDATA[表达定量性状位点（Expression Quantitative Trait Locus,eQTL）]]></title><description><![CDATA[ 
 <br>表达定量性状位点（eQTL）：eQTL代表"表达定量性状位点"（Expression Quantitative Trait Locus）。它是一种遗传变异，通常是单核苷酸多态性（SNP），对基因表达水平产生影响的位点。这意味着特定的基因表达水平与某个位点上的遗传变异相关联。eQTL通常用来研究遗传变异如何影响基因的表达，以帮助解释基因型和表型之间的关系。]]></description><link>术语\表达定量性状位点（expression-quantitative-trait-locus,eqtl）.html</link><guid isPermaLink="false">术语/表达定量性状位点（Expression Quantitative Trait Locus,eQTL）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:24 GMT</pubDate></item><item><title><![CDATA[丙二酰辅酶-A-辅酶蛋白质转移酶(malonyl-CoA-acyl carrier protein transacylase,MCAT) 1]]></title><description><![CDATA[ 
 <br>MCAT代表 "malonyl-CoA-acyl carrier protein transacylase"，它是一种酶，参与线粒体脂质代谢中的一些关键反应。 MCAT的主要功能是在线粒体内媒介脂质合成过程中的一步，将辅酶A上的马来酰辅酶（malonyl-CoA）转移至载体蛋白质上，这是合成脂质的重要步骤之一。脂质合成对于维持线粒体的结构和功能非常重要，因为它们是能量生产的主要场所。MCAT是这一生物合成过程中的一个关键酶，对维持细胞的正常功能至关重要。它在维护细胞的能量代谢和脂质代谢中发挥重要作用。]]></description><link>术语\丙二酰辅酶-a-辅酶蛋白质转移酶(malonyl-coa-acyl-carrier-protein-transacylase,mcat)-1.html</link><guid isPermaLink="false">术语/丙二酰辅酶-A-辅酶蛋白质转移酶(malonyl-CoA-acyl carrier protein transacylase,MCAT) 1.md</guid><pubDate>Thu, 20 Jun 2024 12:20:39 GMT</pubDate></item><item><title><![CDATA[并存实验（Parabiosis experiments）]]></title><description><![CDATA[ 
 <br>一种实验方法，通过这种方法将两只生物体的血液循环系统连接起来，以研究血液因子对生理和病理过程的影响。在中文科学文献中，这种翻译较为常见。]]></description><link>术语\并存实验（parabiosis-experiments）.html</link><guid isPermaLink="false">术语/并存实验（Parabiosis experiments）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:06 GMT</pubDate></item><item><title><![CDATA[博泰文化（Botai）]]></title><description><![CDATA[ 
 <br>博泰文化是史前中亚北部的考古文化（约公元前3700-3100年）。它以今天哈萨克斯坦北部的博泰定居点命名。<br>
博泰文化还有另外两个大型遗址：Krasnyi Yar和Vasilkovka。<br>博泰遗址位于伊希姆河的支流伊曼布里克河上。该遗址至少有153个坑屋。该定居点被仍在发生的河流侵蚀和林区的管理部分摧毁。]]></description><link>术语\博泰文化（botai）.html</link><guid isPermaLink="false">术语/博泰文化（Botai）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:24 GMT</pubDate></item><item><title><![CDATA[不完全谱系分选（incomplete lineage sorting，ILS）]]></title><description><![CDATA[ 
 <br>由于祖先多态性的保留而造成的根据单个基因建立的基因树和实际物种树不同的现象。<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-69be3390beab05d446f1dfabee994612_720w.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
如图，在红色一支突变出绿色和蓝色后，分别带有这两种基因的两波从红色一支中分化出去，在最初阶段并没有什么差别，后来某个时刻，也可能因为受到了更细致的筛选，也可能其他基因的突变等原因，使得这两波开始分道扬镳，分别朝着不同地方向发展形成了B和C。此时只是B和C物种分化的时刻，而B和C这两个物种在这个基因上的差异是在更早的时候产生的。所以如果只看某一个基因的话，分析出的基因树（右上）并不一定可以代表真实的物种树（灰色）。对实际物种分化的时间的判断也会有较大的差距。]]></description><link>术语\不完全谱系分选（incomplete-lineage-sorting，ils）.html</link><guid isPermaLink="false">术语/不完全谱系分选（incomplete lineage sorting，ILS）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:22 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-69be3390beab05d446f1dfabee994612_720w.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-69be3390beab05d446f1dfabee994612_720w.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[布哈拉绿洲假设（Bactrian Oasis Hypothesis）]]></title><description><![CDATA[ 
 <br>Bactrian oasis hypothesis是关于古代丝绸之路的一种假设。该假设认为，在古代，位于今天中亚的布哈拉（Bactria）地区是丝绸之路的一个重要绿洲，扮演着连接东西方的关键角色。<br>据该假设，布哈拉地区在古代是一个富饶的绿洲，拥有丰富的资源和水源，吸引了来自中国和中亚其他地区的商人和旅行者。这些商人和旅行者通过布哈拉地区，穿越沙漠和高原，进行东西方之间的贸易和文化交流。布哈拉地区成为丝绸之路上的一个重要节点，促进了中国和中亚、西亚和欧洲之间的经济、文化和人口交流。<br>虽然Bactrian oasis hypothesis在历史学界引起了广泛的讨论，但目前仍存在争议，尚没有明确的证据证实或否定这个假设。不过，丝绸之路的存在和古代丝绸贸易的重要性已经得到历史学和考古学的支持。]]></description><link>术语\布哈拉绿洲假设（bactrian-oasis-hypothesis）.html</link><guid isPermaLink="false">术语/布哈拉绿洲假设（Bactrian Oasis Hypothesis）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:07 GMT</pubDate></item><item><title><![CDATA[布农族（Bunun）]]></title><description><![CDATA[ 
 <br>台湾原住民。]]></description><link>术语\布农族（bunun）.html</link><guid isPermaLink="false">术语/布农族（Bunun）.md</guid><pubDate>Tue, 29 Oct 2024 13:02:30 GMT</pubDate></item><item><title><![CDATA[藏缅语（Tibeto-Burman languages）]]></title><description><![CDATA[ 
 <br>该族主要分布在中国西南某些省份，比如中国西藏、印度东北、以及尼泊尔、巴基斯坦、不丹、缅甸、泰国、越南等国家。比如说彝语、缅甸语、藏语、曼尼普尔语、羌语、嘉绒语等，都是属于藏缅语族的语言，其中以缅甸语母语人数最多。<br>
大概在1850年左右，相关学者从“藏文”（起源于7世纪）和“缅文”（起源于12世纪）的相关资料中，发现到这两种语言似乎有某种程度的关联性。在这之后，有一些英国学者以及英国派驻在印度和缅甸的殖民地官员，也开始采用比较有系统的方式，试着对该地区比较不为人知的一些“部落”（tribal）语言进行实地的田野调查和纪录，而发现到这些语言和藏语以及缅语这两个具有文字传统的语言，似乎也有某种程度的亲和关系。在这些相关研究中，George Abraham Grierson的《印度语言调查（Linguistic Survey of India）》（1903-1928，其中有三卷和藏缅语系的语言有关），是这个阶段对于藏缅语言最重要的研究成果。]]></description><link>术语\藏缅语（tibeto-burman-languages）.html</link><guid isPermaLink="false">术语/藏缅语（Tibeto-Burman languages）.md</guid><pubDate>Thu, 20 Jun 2024 12:27:42 GMT</pubDate></item><item><title><![CDATA[藏族分类]]></title><description><![CDATA[ 
 <br>藏族主要分为3种：<a data-href="卫藏藏族" href="术语\卫藏藏族.html" class="internal-link" target="_self" rel="noopener nofollow">卫藏藏族</a>、<a data-href="康巴藏族" href="术语\康巴藏族.html" class="internal-link" target="_self" rel="noopener nofollow">康巴藏族</a>、<a data-href="安多藏族" href="术语\安多藏族.html" class="internal-link" target="_self" rel="noopener nofollow">安多藏族</a>，还有几个比较特殊的藏族支系：工布藏族、嘉绒藏族、白马藏族、木雅藏族、华锐藏族、卓仓藏族、夏尔巴人等。<br><br>1、<a data-href="卫藏藏族" href="术语\卫藏藏族.html" class="internal-link" target="_self" rel="noopener nofollow">卫藏藏族</a>：<br>“卫藏”指拉萨、日喀则一带。该地域还包括阿里、山南以及部分林芝及那曲地区。这一地域内的藏族在方言、历史、政治、经济、军事以及文化等方面较统一，是西藏地区传统的核心地域。居住于该地域内的藏族统称为卫藏藏族。<br>2、<a data-href="康巴藏族" href="术语\康巴藏族.html" class="internal-link" target="_self" rel="noopener nofollow">康巴藏族</a>：<br>习惯上将西藏丹达山以东的地区，与四川西昌，雅安地区和阿坝藏羌自治州相连，北与青海省玉树、果洛两州相连的地域称为康区。具体包括：西藏昌都地区、云南迪庆州、四川甘孜州、青海玉树州以及那曲东南一线。<br>3、<a data-href="安多藏族" href="术语\安多藏族.html" class="internal-link" target="_self" rel="noopener nofollow">安多藏族</a>：<br>安多藏族的传统地域是指阿尼玛卿山西北、甘肃河西走廊一带的小积石山以西的广阔地域。安多藏族的中心在阿尼玛卿山至青海湖一带。<br>4、<a data-href="工布藏族" href="工布藏族" class="internal-link" target="_self" rel="noopener nofollow">工布藏族</a>：<br>工布藏族主要在今天西藏的林芝地区，以工布江达、林芝为中心。<br>5、<a data-href="嘉绒藏族" href="术语\嘉绒藏族.html" class="internal-link" target="_self" rel="noopener nofollow">嘉绒藏族</a>：<br>嘉绒在甘孜州丹巴县、康定县部分地区，阿坝州金川、小金、马尔康、理县、黑水、红原和汶川部分地区，以及雅安市、凉山州等地。<br>6、<a data-href="白马藏族" href="术语\白马藏族.html" class="internal-link" target="_self" rel="noopener nofollow">白马藏族</a>：<br>白马藏族主要生活在甘肃省陇南市文县铁楼乡白马河流域和四川省平武县、九寨沟县一带。他们的风俗习惯、文化、宗教信仰都与其他地区藏族有所不同。<br>7、<a data-href="木雅藏族" href="木雅藏族" class="internal-link" target="_self" rel="noopener nofollow">木雅藏族</a><br>一个古老而神秘的藏族支流，聚居于甘孜州高原地区。在康区木雅一带（甘孜州折多山和雅砻江之间）的藏族因其独特的语言和习俗，也称“木雅藏族”。<br>8、<a data-href="华锐藏族" href="华锐藏族" class="internal-link" target="_self" rel="noopener nofollow">华锐藏族</a><br>“华锐”，意为英雄的地区或部落，是白牦牛的故乡。历史上华锐是指湟水以北，河西以东，包括青海的乐都北山、互助、门源、大通东部、甘肃的天祝、肃南皇城等藏区。<br>9、<a data-href="卓仓藏族" href="卓仓藏族" class="internal-link" target="_self" rel="noopener nofollow">卓仓藏族</a><br>生活在青海省海东地区乐都、平安、湟中等县的藏族自称“卓仓娃”，其生活范围大约方圆一百多公里。<br>10、<a data-href="夏尔巴人" href="术语\夏尔巴人.html" class="internal-link" target="_self" rel="noopener nofollow">夏尔巴人</a><br>夏尔巴人，藏语意为“来自东方的人”，主要散居在中国、尼泊尔、印度和不丹等国边境外的喜马拉雅山脉两侧。<br><br>藏族民间有关其民族起源的传说中，流传最广、居于主导地位的是猕猴与罗刹女交配繁衍藏人的传说。有学者猜测，“罗刹女”指的是藏地土著，“猕猴”指来自横断山区的种群，二者结合的传说隐喻远古时期两地氏族之间的联姻。<br>
石硕. 一个隐含藏族起源真相的文本——对藏族始祖传说中“猕猴”与“罗刹女”含义的释读. 中国社会科学. 2000, (4): 167-177.
<br>近代以来，西方势力渗透西藏。<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E8%8B%B1%E5%9B%BD" rel="noopener nofollow" class="external-link" title="英国" href="https://zh.wikipedia.org/wiki/%E8%8B%B1%E5%9B%BD" target="_blank">英国</a>于清末<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E8%8B%B1%E5%9B%BD%E4%BE%B5%E8%97%8F%E6%88%98%E4%BA%89" rel="noopener nofollow" class="external-link" title="英国侵藏战争" href="https://zh.wikipedia.org/wiki/%E8%8B%B1%E5%9B%BD%E4%BE%B5%E8%97%8F%E6%88%98%E4%BA%89" target="_blank">入侵西藏</a>，并与清政府签订《<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E4%B8%AD%E8%8B%B1%E7%BA%8C%E8%A8%82%E8%97%8F%E5%8D%B0%E6%A2%9D%E7%B4%84" rel="noopener nofollow" class="external-link" title="中英续订藏印条约" href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E8%8B%B1%E7%BA%8C%E8%A8%82%E8%97%8F%E5%8D%B0%E6%A2%9D%E7%B4%84" target="_blank">中英续订藏印条约</a>》。<br><a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E8%BE%9B%E4%BA%A5%E9%9D%A9%E5%91%BD" rel="noopener nofollow" class="external-link" title="辛亥革命" href="https://zh.wikipedia.org/wiki/%E8%BE%9B%E4%BA%A5%E9%9D%A9%E5%91%BD" target="_blank">辛亥革命</a>爆发后，中国各地陷入连年军阀混战，<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E7%AC%AC%E5%8D%81%E4%B8%89%E4%B8%96%E9%81%94%E8%B3%B4%E5%96%87%E5%98%9B" rel="noopener nofollow" class="external-link" title="第十三世达赖喇嘛" href="https://zh.wikipedia.org/wiki/%E7%AC%AC%E5%8D%81%E4%B8%89%E4%B8%96%E9%81%94%E8%B3%B4%E5%96%87%E5%98%9B" target="_blank">第十三世达赖喇嘛</a>领导的<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E5%99%B6%E5%8E%A6" rel="noopener nofollow" class="external-link" title="噶厦" href="https://zh.wikipedia.org/wiki/%E5%99%B6%E5%8E%A6" target="_blank">噶厦</a>宣布西藏独立，并<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%A9%85%E6%BC%A2%E4%BA%8B%E4%BB%B6" rel="noopener nofollow" class="external-link" title="第一次驱汉事件" href="https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%A9%85%E6%BC%A2%E4%BA%8B%E4%BB%B6" target="_blank">驱逐了原清军</a>。1914年，藏区高层与英国政府签订《<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E8%A5%BF%E5%A7%86%E6%8B%89%E6%9D%A1%E7%BA%A6" rel="noopener nofollow" class="external-link" title="西姆拉条约" href="https://zh.wikipedia.org/wiki/%E8%A5%BF%E5%A7%86%E6%8B%89%E6%9D%A1%E7%BA%A6" target="_blank">西姆拉条约</a>》，划定“<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E9%BA%A6%E5%85%8B%E9%A9%AC%E6%B4%AA%E7%BA%BF" rel="noopener nofollow" class="external-link" title="麦克马洪线" href="https://zh.wikipedia.org/wiki/%E9%BA%A6%E5%85%8B%E9%A9%AC%E6%B4%AA%E7%BA%BF" target="_blank">麦克马洪线</a>”。<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E5%9C%8B%E6%B0%91%E6%94%BF%E5%BA%9C" rel="noopener nofollow" class="external-link" title="国民政府" href="https://zh.wikipedia.org/wiki/%E5%9C%8B%E6%B0%91%E6%94%BF%E5%BA%9C" target="_blank">中华民国国民政府</a>建立后，设置<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E8%92%99%E8%97%8F%E5%A7%94%E5%91%98%E4%BC%9A" rel="noopener nofollow" class="external-link" title="蒙藏委员会" href="https://zh.wikipedia.org/wiki/%E8%92%99%E8%97%8F%E5%A7%94%E5%91%98%E4%BC%9A" target="_blank">蒙藏委员会</a>，在<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E5%8D%97%E4%BA%AC" rel="noopener nofollow" class="external-link" title="南京" href="https://zh.wikipedia.org/wiki/%E5%8D%97%E4%BA%AC" target="_blank">南京</a>设立西藏驻京办事处。在藏区，则发生了<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E7%83%AD%E6%8C%AF%E6%B4%BB%E4%BD%9B" rel="noopener nofollow" class="external-link" title="热振活佛" href="https://zh.wikipedia.org/wiki/%E7%83%AD%E6%8C%AF%E6%B4%BB%E4%BD%9B" target="_blank">热振事件</a>及<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%A9%85%E6%BC%A2%E4%BA%8B%E4%BB%B6" rel="noopener nofollow" class="external-link" title="第二次驱汉事件" href="https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%A9%85%E6%BC%A2%E4%BA%8B%E4%BB%B6" target="_blank">驱逐国府职员的事件</a>。<br>1951年，<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD" rel="noopener nofollow" class="external-link" title="中华人民共和国" href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD" target="_blank">中华人民共和国</a>政府与西藏噶厦政府签订《<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E4%BA%BA%E6%B0%91%E6%94%BF%E5%BA%9C%E5%92%8C%E8%A5%BF%E8%97%8F%E5%9C%B0%E6%96%B9%E6%94%BF%E5%BA%9C%E5%85%B3%E4%BA%8E%E5%92%8C%E5%B9%B3%E8%A7%A3%E6%94%BE%E8%A5%BF%E8%97%8F%E5%8A%9E%E6%B3%95%E7%9A%84%E5%8D%8F%E8%AE%AE" rel="noopener nofollow" class="external-link" title="中央人民政府和西藏地方政府关于和平解放西藏办法的协议" href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E4%BA%BA%E6%B0%91%E6%94%BF%E5%BA%9C%E5%92%8C%E8%A5%BF%E8%97%8F%E5%9C%B0%E6%96%B9%E6%94%BF%E5%BA%9C%E5%85%B3%E4%BA%8E%E5%92%8C%E5%B9%B3%E8%A7%A3%E6%94%BE%E8%A5%BF%E8%97%8F%E5%8A%9E%E6%B3%95%E7%9A%84%E5%8D%8F%E8%AE%AE" target="_blank">十七条协议</a>》，西藏结束其独立状态，纳入中华人民共和国统治。<br>1959年，<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E7%AC%AC%E5%8D%81%E5%9B%9B%E4%B8%96%E8%BE%BE%E8%B5%96%E5%96%87%E5%98%9B" rel="noopener nofollow" class="external-link" title="第十四世达赖喇嘛" href="https://zh.wikipedia.org/wiki/%E7%AC%AC%E5%8D%81%E5%9B%9B%E4%B8%96%E8%BE%BE%E8%B5%96%E5%96%87%E5%98%9B" target="_blank">第十四世达赖喇嘛</a>流亡<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E5%8D%B0%E5%BA%A6" rel="noopener nofollow" class="external-link" title="印度" href="https://zh.wikipedia.org/wiki/%E5%8D%B0%E5%BA%A6" target="_blank">印度</a>，在印度<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E8%BE%BE%E5%85%B0%E8%90%A8%E6%8B%89" rel="noopener nofollow" class="external-link" title="达兰萨拉" href="https://zh.wikipedia.org/wiki/%E8%BE%BE%E5%85%B0%E8%90%A8%E6%8B%89" target="_blank">达兰萨拉</a>成立<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E8%A5%BF%E8%97%8F%E6%B5%81%E4%BA%A1%E6%94%BF%E5%BA%9C" rel="noopener nofollow" class="external-link" title="西藏流亡政府" href="https://zh.wikipedia.org/wiki/%E8%A5%BF%E8%97%8F%E6%B5%81%E4%BA%A1%E6%94%BF%E5%BA%9C" target="_blank">西藏流亡政府</a>，后改称“藏人行政中央”。<br>1965年，<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E8%A5%BF%E8%97%8F%E8%87%AA%E6%B2%BB%E5%8C%BA" rel="noopener nofollow" class="external-link" title="西藏自治区" href="https://zh.wikipedia.org/wiki/%E8%A5%BF%E8%97%8F%E8%87%AA%E6%B2%BB%E5%8C%BA" target="_blank">西藏自治区</a>成立。]]></description><link>术语\藏族.html</link><guid isPermaLink="false">术语/藏族.md</guid><pubDate>Thu, 20 Jun 2024 12:27:23 GMT</pubDate></item><item><title><![CDATA[草原假说（Steppe Hypothesis）]]></title><description><![CDATA[ 
 <br>草原假说提出<a data-href="印欧语系(Indo-European languages)" href="术语\印欧语系(indo-european-languages).html" class="internal-link" target="_self" rel="noopener nofollow">印欧语系(Indo-European languages)</a> 起源于欧亚大草原，特别是今天的乌克兰和俄罗斯南部地区。根据这一假说，大约在公元前4000年到公元前3000年之间，生活在这一地区的游牧民族通过马和车的使用，开始向欧洲和亚洲其他地区扩张，传播他们的语言和文化。这一假说得到考古证据和遗传学研究的支持，显示出青铜时代的欧亚大草原人群与现代印欧语系人群之间的遗传联系。<br>
该假说又被称为<a data-href="库尔干假说（Kurgan hypothesis）" href="术语\库尔干假说（kurgan-hypothesis）.html" class="internal-link" target="_self" rel="noopener nofollow">库尔干假说（Kurgan hypothesis）</a>。]]></description><link>术语\草原假说（steppe-hypothesis）.html</link><guid isPermaLink="false">术语/草原假说（Steppe Hypothesis）.md</guid><pubDate>Thu, 12 Sep 2024 06:04:11 GMT</pubDate></item><item><title><![CDATA[测序覆盖度（Sequencing Coverage）]]></title><description><![CDATA[ 
 <br>覆盖度（Coverage）：测序获得的序列占整个基因组的比例。即基因组上至少被检测到一次的区域，占整个基因组的比例。一般为「百分比」。<br><img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230907090703.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020231021172308.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\测序覆盖度（sequencing-coverage）.html</link><guid isPermaLink="false">术语/测序覆盖度（Sequencing Coverage）.md</guid><pubDate>Thu, 20 Jun 2024 12:39:09 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230907090703.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230907090703.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[测序后数据处理概览]]></title><description><![CDATA[ 
 <br><img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%B5%8B%E5%BA%8F%E5%90%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%A6%82%E8%A7%88.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>通过测序得到原始文件:BCL文件。
<br>将原始文件拆分成较多的小体量文件以供分析：FASTQ文件。
<br>将小体量文件进行筛选，并与已知的参考序列对齐校正：BAM或者 SAM文件。
<br>对最终的文件进行变异的注释（这往往涉及到与其它已知的变异数据进行比对）：VCF文件。
<br>一个良好的分析处理系统往往 简洁明了。
]]></description><link>术语\测序后数据处理概览.html</link><guid isPermaLink="false">术语/测序后数据处理概览.md</guid><pubDate>Thu, 20 Jun 2024 12:24:52 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%B5%8B%E5%BA%8F%E5%90%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%A6%82%E8%A7%88.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%B5%8B%E5%BA%8F%E5%90%8E%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%A6%82%E8%A7%88.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[测序深度（Sequencing Depth）]]></title><description><![CDATA[ 
 <br>深度（Depth）：一般用1× 、2×、3×……表示。测序的得到的总碱基数与待测基因组大小的比值，即基因组中每个碱基被测到的平均次数，简而言之，测序的数据量比上参考基因组或者转录组的值。<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020231021172746.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\测序深度（sequencing-depth）.html</link><guid isPermaLink="false">术语/测序深度（Sequencing Depth）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:53 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020231021172746.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020231021172746.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[铲形门齿]]></title><description><![CDATA[ 
 <br>分子生物学认为，决定铲形门齿的基因突变的地点在中国中部，并且随后扩散到中国，日本和韩国等。]]></description><link>术语\铲形门齿.html</link><guid isPermaLink="false">术语/铲形门齿.md</guid><pubDate>Thu, 20 Jun 2024 12:26:18 GMT</pubDate></item><item><title><![CDATA[沉默突变]]></title><description><![CDATA[ 
 <br><a class="internal-link" data-href="同义突变（Synonymous Mutation）.md" href="术语\同义突变（synonymous-mutation）.html" target="_self" rel="noopener nofollow">同义突变（Synonymous Mutation）</a>的同义词。]]></description><link>术语\沉默突变.html</link><guid isPermaLink="false">术语/沉默突变.md</guid><pubDate>Mon, 21 Oct 2024 03:42:24 GMT</pubDate></item><item><title><![CDATA[成簇规则间隔短回文重复关联系统 (clustered regularly interspaced short palindromic repeats associated system ,CRISPR-Cas)]]></title><description><![CDATA[ 
 ]]></description><link>术语\成簇规则间隔短回文重复关联系统-(clustered-regularly-interspaced-short-palindromic-repeats-associated-system-,crispr-cas).html</link><guid isPermaLink="false">术语/成簇规则间隔短回文重复关联系统 (clustered regularly interspaced short palindromic repeats associated system ,CRISPR-Cas).md</guid><pubDate>Sat, 02 Nov 2024 07:19:54 GMT</pubDate></item><item><title><![CDATA[成纤维细胞生长因子21（Fibroblast Growth Factor 21，FGF21）]]></title><description><![CDATA[ 
 <br>FGF21（成纤维细胞生长因子21）：<br>
<br>FGF21是一种属于成纤维细胞生长因子家族的蛋白质，通常在肝脏中表达，但也在肌肉和脂肪组织中有表达。
<br>它参与调节糖代谢、脂肪氧化和能量平衡。
<br>在线粒体疾病中，特别是那些影响线粒体翻译和功能的疾病中，FGF21的水平可能会上升。这是因为线粒体功能障碍会激活与FGF21表达相关的途径，从而作为线粒体应激的响应指标。
]]></description><link>术语\成纤维细胞生长因子21（fibroblast-growth-factor-21，fgf21）.html</link><guid isPermaLink="false">术语/成纤维细胞生长因子21（Fibroblast Growth Factor 21，FGF21）.md</guid><pubDate>Mon, 24 Jun 2024 05:27:56 GMT</pubDate></item><item><title><![CDATA[冲绳岛（Okinawa island）]]></title><description><![CDATA[ 
 <br>绳岛（日语：沖縄島／おきなわじ）或冲绳本岛，也称为地下（冲绳语：ジジ／ジチ）或大地（冲绳语：ウフジ／ウフジー）。位于<a data-href="琉球群岛（ Ryūkyū islands）" href="术语\琉球群岛（-ryūkyū-islands）.html" class="internal-link" target="_self" rel="noopener nofollow">琉球群岛（ Ryūkyū islands）</a>冲绳群岛，是琉球群岛中面积最大的岛屿。全岛面积1206.49平方千米，除去与俄罗斯有领土争议的北方四岛（南千岛群岛）外，为日本面积第五大岛屿，仅次于本土四大岛的本州、北海道、九州和四国。]]></description><link>术语\冲绳岛（okinawa-island）.html</link><guid isPermaLink="false">术语/冲绳岛（Okinawa island）.md</guid><pubDate>Thu, 20 Jun 2024 12:19:09 GMT</pubDate></item><item><title><![CDATA[磁山遗址]]></title><description><![CDATA[ 
 <br>位于河北南部，<a data-href="太行山" href="太行山" class="internal-link" target="_self" rel="noopener nofollow">太行山</a>东部，距今10000-8700年前。是<a data-href="黍（Panicum miliaceum）" href="术语\黍（panicum-miliaceum）.html" class="internal-link" target="_self" rel="noopener nofollow">黍（Panicum miliaceum）</a>的遗物。<br>
距今8700-7500年，开始出<a data-href="粟（millet）" href="术语\粟（millet）.html" class="internal-link" target="_self" rel="noopener nofollow">粟（millet）</a>，但是含量不高。]]></description><link>术语\磁山遗址.html</link><guid isPermaLink="false">术语/磁山遗址.md</guid><pubDate>Thu, 20 Jun 2024 12:20:15 GMT</pubDate></item><item><title><![CDATA[从母居（matrilocal）]]></title><description><![CDATA[ 
 ]]></description><link>术语\从母居（matrilocal）.html</link><guid isPermaLink="false">术语/从母居（matrilocal）.md</guid><pubDate>Tue, 29 Oct 2024 13:58:57 GMT</pubDate></item><item><title><![CDATA[从头NUMTs（De novo NUMTs）]]></title><description><![CDATA[ 
 <br>"De novo NUMTs" 是指新近整合到核DNA中的核心线粒体DNA序列。NUMTs，或核线粒体DNA序列，是在进化过程中从线粒体DNA转移到真核生物细胞核中的线粒体DNA片段。De novo NUMTs 是指那些最近转移的，不是从祖先继承而来的，而是由最近的遗传事件导致的。这些序列可以在个体之间有所不同，可能是遗传多样性和突变的来源。]]></description><link>术语\从头numts（de-novo-numts）.html</link><guid isPermaLink="false">术语/从头NUMTs（De novo NUMTs）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:50 GMT</pubDate></item><item><title><![CDATA[从遗传差异推断种群分离时间(Inference of population separation times from genetic divergence)]]></title><description><![CDATA[ 
 <br>考虑到两个种群的分歧，需要考虑：<br>
<br>种群分离时间（两个种群生殖隔离的时间）
<br>平均序列分歧时间（两个种群的基因组找到一个序列的平均时间）之间的差异。
<br><img alt="Pasted image 20230807115630" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230807115630.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
平均序列分歧时间比种群分离时间早，其数量取决于分离前祖先种群的多样性和人口统计。<br>在群体遗传模型中，这种差异表示为平均合并时间 tc 并与<a data-href="有效群体规模 (effective population size，Ne)" href="术语\有效群体规模-(effective-population-size，ne).html" class="internal-link" target="_self" rel="noopener nofollow">有效群体规模 (effective population size，Ne)</a>成正比：群体越大，遗传多样性越强，对应的 tc 值也越大。<br>在一个简单的情况下，分离的种群之间没有发生杂交，并且给定 tc 的估计，分离时间 ts 可以估计为 ts = d/ (2μ) – tc，其中 d 是平均序列散度，μ 是突变率。对全基因组范围内许多基因座的平均估计比基于几个基因座或单个基因座的估计更准确。<br>然而，更复杂的物种形成模式在自然界中很常见。例如，分离可能涉及部分基因交换的中间阶段（图中的b部分），其起点和终点可能不明确，并且交换的强度和方向可能随时间而变化。即使在隔离开始很久之后，分离的人群之间也可能会发生进一步的混合事件。事实上，现存的所有四种类人猿属都表明了这种复杂的物种形成过程。<br>还要注意，遗传和化石证据可能对物种形成的不同方面敏感。例如，化石中明显的形态特征（并最终通过物种形成而固定（因此被认为是衍生的））可能预先存在于杂交种群中或部分遗传接触的两个种群中。]]></description><link>术语\从遗传差异推断种群分离时间(inference-of-population-separation-times-from-genetic-divergence).html</link><guid isPermaLink="false">术语/从遗传差异推断种群分离时间(Inference of population separation times from genetic divergence).md</guid><pubDate>Thu, 20 Jun 2024 12:22:22 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230807115630.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230807115630.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[错义变异（Missense）]]></title><description><![CDATA[ 
 <br>这表示在基因的特定位置，有一些变异可能导致蛋白质的氨基酸替代（错义变异）]]></description><link>术语\错义变异（missense）.html</link><guid isPermaLink="false">术语/错义变异（Missense）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:27 GMT</pubDate></item><item><title><![CDATA[搭车变异（hitchhiked variants）]]></title><description><![CDATA[ 
 <br>与选定的基因变异共同传递的其他变异。]]></description><link>术语\搭车变异（hitchhiked-variants）.html</link><guid isPermaLink="false">术语/搭车变异（hitchhiked variants）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:57 GMT</pubDate></item><item><title><![CDATA[达尔德语（Dardic languages）]]></title><description><![CDATA[ 
 <br>达尔德语支是印欧语系印度-伊朗语族印度-雅利安语支下的一个分支，使用者主要集中在巴基斯坦北部吉尔吉特-巴尔蒂斯坦、开伯尔-普什图省，印度北部克什米尔河谷及阿富汗东部，克什米尔语是其代表，有自身文字，是印度22个官方语言之一。]]></description><link>术语\达尔德语（dardic-languages）.html</link><guid isPermaLink="false">术语/达尔德语（Dardic languages）.md</guid><pubDate>Thu, 18 Jul 2024 06:51:51 GMT</pubDate></item><item><title><![CDATA[大松山]]></title><description><![CDATA[ 
 <br>大松山墓群，位于贵州省贵阳市贵安新区<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E9%A9%AC%E5%9C%BA%E9%95%87/6003604?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E9%A9%AC%E5%9C%BA%E9%95%87/6003604?fromModule=lemma_inlink" target="_blank">马场镇</a>，共发掘墓葬620余座。<br>
2022年度全国十大考古新发现揭晓，贵州贵安新区大松山墓群入选。大松山墓群的2192座墓葬中出土4000多件（套）文物，以生活用具和装饰品为主、涵盖各种材质，其中不乏造型独特、工艺精湛的精美女性饰品，还有反映中外文化交流的宝石和玻璃珠等。墓葬时代从两晋一直延续到宋元明时期。贵安新区大松山墓群的发现，客观反映了该地区不同时期生活、商贸、信仰、丧葬等文化面貌，生动描绘出西南边疆古代民族1400余年的历史长卷。]]></description><link>术语\大松山.html</link><guid isPermaLink="false">术语/大松山.md</guid><pubDate>Thu, 18 Jul 2024 01:20:48 GMT</pubDate></item><item><title><![CDATA[大汶口文化]]></title><description><![CDATA[ 
 ]]></description><link>术语\大汶口文化.html</link><guid isPermaLink="false">术语/大汶口文化.md</guid><pubDate>Thu, 20 Jun 2024 12:26:32 GMT</pubDate></item><item><title><![CDATA[大溪文化]]></title><description><![CDATA[ 
 <br>大溪文化（公元前5000—公元前3300年）是中国新石器时代的一种考古学文化，主要位于中华人民共和国长江流域中流的三峡地区。于1920年代由内尔斯·克里斯蒂安·纳尔逊首次发掘出来，因1959年发掘的四川省巫山县（今属重庆市）大溪遗址而得名，大溪也是大溪文化的西线。主要分布在峡江地区和两湖平原，长江中游鄂西、渝东山地丘陵地区，洞庭湖周围和江汉平原的一部分。<br>从城背溪文化发展而来。推测年代约为公元前4400～前3300年。大溪文化的发现，陶器多呈红色，普遍以碳化稻壳末为孱和料，代表当时较高制陶水平的产品是篦点戳印纹白陶和薄胎彩陶，揭示了长江中游的一种以红陶为主并含彩陶的地区性文化遗存。<br>营造半地穴式和地面建筑，在居住面下往往铺有厚的红烧土块垫层，有的房屋墙外铺有红烧土渣地面散水或有专门的檐廊，以适应南方多雨炎热气候。<br>死者多数实行单人葬，葬式有仰身直肢、俯身直肢，以及很特殊的仰身跪屈葬、仰身蹲屈葬；随葬品除了陶器和石器外，还放置了鱼和龟，有的把整条鱼放在死者身上、嘴边或臂下，这一罕见习俗与当时人们的生活和信仰有关。<br>所有装饰技巧，包括：涂绘、压印、绳纹印花、雕花、贴花、网状细孔等，皆加以应用，常见的图案有尖齿纹、花瓣纹、交织曲线、三角纹等。高而深的豆、圈足碗、盘、杯为最重要的器型。此外，大溪遗址还发现石器，装饰品则有玉、骨、石、贝制成的戒指、项链等。<br>一项2007年对大溪遗址出土人类遗骸的Y染色体单倍型类群的研究显示，大溪人属于单倍群O3d-M7，这个特征在其他同时代的中国古代遗址中皆属罕见，但常见于现代苗人与东南亚人，显示大溪人可能是苗族先祖。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061046897.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\大溪文化.html</link><guid isPermaLink="false">术语/大溪文化.md</guid><pubDate>Thu, 20 Jun 2024 12:27:52 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061046897.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061046897.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[傣族（Tai people）]]></title><description><![CDATA[ 
 <br>中国少数民族之一，与讲原始泰语的共同祖先的后裔。该族群人口众多（约6000万），现居住在中南半岛，包括中国的傣族、泰国的泰族、普泰族、老挝的寮族、缅甸的掸族以及印度东北部的阿洪族。]]></description><link>术语\傣族（tai-people）.html</link><guid isPermaLink="false">术语/傣族（Tai people）.md</guid><pubDate>Thu, 20 Jun 2024 12:27:00 GMT</pubDate></item><item><title><![CDATA[袋獾（Sarcophilus harrisii,塔斯马尼亚恶魔）]]></title><description><![CDATA[ 
 <br>袋獾（学名：Sarcophilus harrisii），亦被称作塔斯马尼亚恶魔（Tasmanian Devil），是一种有袋类的食肉动物，现今只分布于澳大利亚的塔斯马尼亚州。<br>袋獾是袋獾属中唯一未灭绝的成员，身形与一只小狗差不多，但肌肉发达，十分壮硕。其特征包括：黑色的皮毛、遭遇攻击时发出的臭味、刺耳的叫声，以及进食时的神态。除狩猎外，袋獾也进食腐肉。它们通常单独行动，但有时也与其他袋獾一起进食。<br>在袋狼于1936年灭绝后，袋獾成为现存最大的食肉有袋动物。由于袋獾曾对塔斯马尼亚岛居民饲养的家畜造成威胁，因此当地政府也曾允许居民猎取袋獾。直至1941年袋獾被正式公告为保育类动物，对它们的狩猎行为才停止。<br>1990年代末，袋獾面部肿瘤病严重影响了袋獾的数量，故袋獾已于2008年被列入濒危物种名单。现时塔斯马尼亚州政府正进行一系列的工作，以减少这疾病对袋獾的影响。<br>基因分析显示袋獾与袋鼬最为亲近, 其次是已灭绝的袋狼。]]></description><link>术语\袋獾（sarcophilus-harrisii,塔斯马尼亚恶魔）.html</link><guid isPermaLink="false">术语/袋獾（Sarcophilus harrisii,塔斯马尼亚恶魔）.md</guid><pubDate>Thu, 20 Jun 2024 12:27:23 GMT</pubDate></item><item><title><![CDATA[丹尼索瓦人（Denisovan）]]></title><description><![CDATA[ 
 <br>最早在俄罗斯南部的<a data-href="阿尔泰山脉" href="术语\阿尔泰山脉.html" class="internal-link" target="_self" rel="noopener nofollow">阿尔泰山脉</a>附近的丹尼索瓦洞穴，生活在新几内亚，<a data-href="美拉尼西亚" href="术语\美拉尼西亚.html" class="internal-link" target="_self" rel="noopener nofollow">美拉尼西亚</a>的人体内，也有其基因。<br>在甘肃夏河县的白石崖溶洞，也发现了其遗址。]]></description><link>术语\丹尼索瓦人（denisovan）.html</link><guid isPermaLink="false">术语/丹尼索瓦人（Denisovan）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:06 GMT</pubDate></item><item><title><![CDATA[单倍型（haplotypes）]]></title><description><![CDATA[ 
 <br>单倍型，是<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E5%8D%95%E5%80%8D%E4%BD%93/304058?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E5%8D%95%E5%80%8D%E4%BD%93/304058?fromModule=lemma_inlink" target="_blank">单倍体</a><a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E5%9F%BA%E5%9B%A0%E5%9E%8B/2574789?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E5%9F%BA%E5%9B%A0%E5%9E%8B/2574789?fromModule=lemma_inlink" target="_blank">基因型</a>的简称，在遗传学上是指在同一染色体上进行共同遗传的多个<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E5%9F%BA%E5%9B%A0%E5%BA%A7/3844182?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E5%9F%BA%E5%9B%A0%E5%BA%A7/3844182?fromModule=lemma_inlink" target="_blank">基因座</a>上<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E7%AD%89%E4%BD%8D%E5%9F%BA%E5%9B%A0/1586334?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E7%AD%89%E4%BD%8D%E5%9F%BA%E5%9B%A0/1586334?fromModule=lemma_inlink" target="_blank">等位基因</a>的组合；通俗的说法就是若干个决定同一性状的紧密连锁的基因构成的基因型。按照某一指定基因座上<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E5%9F%BA%E5%9B%A0%E9%87%8D%E7%BB%84/4377520?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E5%9F%BA%E5%9B%A0%E9%87%8D%E7%BB%84/4377520?fromModule=lemma_inlink" target="_blank">基因重组</a>发生的数量，单倍型可以指至少两个基因座甚至整个染色体。]]></description><link>术语\单倍型（haplotypes）.html</link><guid isPermaLink="false">术语/单倍型（haplotypes）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:34 GMT</pubDate></item><item><title><![CDATA[单链 DNA 结合蛋白 1（single stranded DNA binding protein 1 ，SSBP1） 1]]></title><description><![CDATA[ 
 ]]></description><link>术语\单链-dna-结合蛋白-1（single-stranded-dna-binding-protein-1-，ssbp1）-1.html</link><guid isPermaLink="false">术语/单链 DNA 结合蛋白 1（single stranded DNA binding protein 1 ，SSBP1） 1.md</guid><pubDate>Thu, 20 Jun 2024 12:20:39 GMT</pubDate></item><item><title><![CDATA[稻（Oryza sativa L.）]]></title><description><![CDATA[ 
 <br>稻（Oryza sativa L.），通称水稻，是禾本科一年生水生草本（已有多年生稻品种）。秆直立，高0.5-1.5米，随品种而异。叶鞘无毛、松弛；叶舌披针形；叶片线状披针形，宽约1厘米，无毛，粗糙。圆锥花序大型疏展，棱粗糙；小穗含1成熟花；颖极小，仅在小穗柄先端留下半月形的痕迹，锥刺状；两侧孕性花外稃质厚，具5脉，中脉成脊，表面有方格状小乳状突起，厚纸质，遍布细毛端毛较密，有芒或无芒；内稃与外稃同质，具3脉，先端尖而无喙；雄蕊花药长2-3毫米。颖果长约5毫米，宽约2毫米；胚比约为颖果长的1/4。<br>
中国是水稻的原产地之一。中国南方地区农田多以水田为主，粮食作物以种植水稻为主。稻是亚洲热带广泛种植的重要谷物，中国南方为主要产稻区，北方各省也有栽种。种下主要分为2亚种，<a data-href="籼稻" href="术语\籼稻.html" class="internal-link" target="_self" rel="noopener nofollow">籼稻</a>与<a data-href="粳稻" href="术语\粳稻.html" class="internal-link" target="_self" rel="noopener nofollow">粳稻</a>。亚种下包括栽培品种极多。以成熟颖果入药。味甘，温。和中消食，健脾开胃。]]></description><link>术语\稻（oryza-sativa-l.）.html</link><guid isPermaLink="false">术语/稻（Oryza sativa L.）.md</guid><pubDate>Thu, 20 Jun 2024 12:25:55 GMT</pubDate></item><item><title><![CDATA[德穆安(Temuan)]]></title><description><![CDATA[ 
 <br>德穆安族是马来西亚半岛的一个土著群体，属于南岛语系的原住民之一。他们主要生活在马来西亚半岛的森林地区，以狩猎、采集和小规模农业为生，有着独特的语言和文化。]]></description><link>术语\德穆安(temuan).html</link><guid isPermaLink="false">术语/德穆安(Temuan).md</guid><pubDate>Tue, 20 Aug 2024 12:37:12 GMT</pubDate></item><item><title><![CDATA[等位基因分数（allelic fractions）]]></title><description><![CDATA[ 
 <br>"等位基因分数"是指在一组基因座位上检测到的某一等位基因的频率或比例。]]></description><link>术语\等位基因分数（allelic-fractions）.html</link><guid isPermaLink="false">术语/等位基因分数（allelic fractions）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:21 GMT</pubDate></item><item><title><![CDATA[概念]]></title><description><![CDATA[ 
 <br><br>位点频谱也叫等位基因频谱(allele frequency spectrum)是群体遗传学的术语，用来显示一个种群中特定基因座上各个等位基因所占的频率，或者说是等位基因在基因库中的丰富程度。是一个全基因组数据多样性的有效总结，FST，Tajima’s D，pi等都是在SFS的基础上衍生出来的统计量。<br>目前使用 <a data-href="ANGSD（Analysis of Next Generation Sequencing Data）" href="ANGSD（Analysis of Next Generation Sequencing Data）" class="internal-link" target="_self" rel="noopener nofollow">ANGSD（Analysis of Next Generation Sequencing Data）</a> 、<a data-href="vcftools" href="vcftools" class="internal-link" target="_self" rel="noopener nofollow">vcftools</a>、<a data-href="位点频谱SFS (site frequency spectrum)" href="位点频谱SFS (site frequency spectrum)" class="internal-link" target="_self" rel="noopener nofollow">位点频谱SFS (site frequency spectrum)</a> 来计算 SFS。<br><br><br>进行处理之前，先注意自己的数据是二倍体还是单倍体。对于 mtDNA，如果测序数据以二倍体形式表示，这可能是因为测序平台或数据处理流程默认将所有序列数据视为二倍体，即使它们来自于通常认为是单倍体的 mtDNA。<br>
<br>数据预处理：在进行 SFS 提取之前，您可能需要预处理 VCF 文件，确保每个个体在每个位点只保留一个等位基因信息。这可能涉及到选择一个等位基因（如果数据中呈现了两个等位基因）或简单地忽略第二个等位基因的信息。
<br>import sys

def convert_diploid_to_haploid(vcf_line):
    """Convert diploid genotypes in a VCF line to haploid."""
    # Split the VCF line into columns
    columns = vcf_line.strip().split('\t')
    
    # Iterate over each genotype column starting from the 9th column
    for i in range(9, len(columns)):
        genotype_info = columns[i].split(':')
        genotype = genotype_info[0]
        
        # Convert diploid genotypes to haploid
        if genotype in ['0/1', '1/0', '1/1']:
            genotype_info[0] = '1'
        elif genotype == '0/0':
            genotype_info[0] = '0'
        
        # Rejoin the modified genotype info
        columns[i] = ':'.join(genotype_info)
    
    # Rejoin the modified line
    return '\t'.join(columns)

def main():
    # Process each line from stdin
    for line in sys.stdin:
        # Check if the line is a header or a data line
        if line.startswith('#'):
            # Output header lines as is
            print(line, end='')
        else:
            # Convert and output data lines
            print(convert_diploid_to_haploid(line))

if __name__ == '__main__':
    main()
复制<br>我们在这里将这个 python 文件保存为 convert_diploid_to_haploid.py。然后使用如下的代码计算。<br>当然，如果你的文件本身就是二倍体，那么你就不需要这一步了。<br>bcftools view input.vcf | python convert_diploid_to_haploid.py &gt; haploid.vcf
复制<br><br>vcftools --vcf input.vcf --freq --out allele_freqs
复制<br>现在就可以得到如下的文件<br>CHROM	POS	N_ALLELES	N_CHR	{ALLELE:FREQ}
26	10	2	4789	T:1	X:0
26	26	2	4780	C:1	X:0
26	41	2	4741	C:0.996836	T:0.00316389
26	64	2	4563	C:0.986632	T:0.0133684
26	72	2	4742	T:1	X:0
26	73	2	4795	G:0.996455	A:0.00354536
26	89	2	4790	T:0.999791	C:0.000208768
26	93	2	4795	A:0.994161	G:0.00583942
26	95	2	4698	A:0.999574	C:0.000425713
复制<br>这里有一个问题
如果我是一个 mtDNA，也就是单倍体，那么等位基因应该是一个才对。换句话说，第三列应该是 1 而不是 2 。其实可以看到，最后一列的频率非常低，这也侧面反应了这一点。<br>
也就是说，这个步骤实际上是把刚才的 VCF 文件当做是一个单个人的文件。那么，如果我们将所有人的 VCF 文件都一起运算，事实上得到的数据意义不大。反过来，我们其实应该分组计算。例如首先划定汉族、藏族等，然后计算出 2 个 freq 文件。再将 2 个文件分别计算 SFS，然后最后来比较两者之间的差异。详见下文。
<br><br>def read_freq_file(freq_file):
    """读取由vcftools生成的等位基因频率文件，并返回频率列表。"""
    freqs = []
    with open(freq_file, 'r') as f:
        for line in f:
            if line.startswith('CHROM'):  # 跳过标题行
                continue
            parts = line.strip().split('\t')
            # 获取等位基因频率，假设是第5列
            freq = float(parts[4].split(':')[1])
            freqs.append(freq)
    return freqs

def calculate_sfs(freqs):
    """根据等位基因频率列表计算SFS。"""
    sfs = {}
    for freq in freqs:
        # 对频率进行四舍五入以简化SFS的计算
        freq_rounded = round(freq, 2)
        if freq_rounded in sfs:
            sfs[freq_rounded] += 1
        else:
            sfs[freq_rounded] = 1
    return sfs

def main():
    freq_file = 'allele_freqs.frq'  # 设定等位基因频率文件的路径
    freqs = read_freq_file(freq_file)
    sfs = calculate_sfs(freqs)
    # 打印SFS
    for freq, count in sorted(sfs.items()):
        print(f"Frequency: {freq}, Count: {count}")

if __name__ == "__main__":
    main()
复制<br>python SFS.py
复制<br><br>Frequency: 0.52, Count: 5
Frequency: 0.55, Count: 2
Frequency: 0.58, Count: 1
Frequency: 0.65, Count: 1
Frequency: 0.67, Count: 1
Frequency: 0.76, Count: 1
Frequency: 0.78, Count: 2
Frequency: 0.81, Count: 3
Frequency: 0.85, Count: 2
Frequency: 0.86, Count: 3
Frequency: 0.88, Count: 3
Frequency: 0.89, Count: 7
Frequency: 0.9, Count: 1
Frequency: 0.92, Count: 5
Frequency: 0.93, Count: 2
Frequency: 0.94, Count: 5
Frequency: 0.95, Count: 11
Frequency: 0.96, Count: 14
Frequency: 0.97, Count: 25
Frequency: 0.98, Count: 51
Frequency: 0.99, Count: 116
Frequency: 1.0, Count: 1168
复制<br><br><br>如果祖先状态已知，我们可以通过衍生等位基因的频率来推断 SFS。VCF 文件中基因型可以编码为0（纯合子为参考等位基因），1（杂合子），2（纯合子为替代等位基因）。<br>首先，我们需要计算每个SNP的绝对等位基因频率。在该矩阵中，每一行对应于基因组中的一个位点，每一列对应于一个个体，这些我们可以从VCF文件中获得。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021650662.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
其次，我们需要计算给定等位基因频率的位点数量。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021651384.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
内容的意思是说，衍生等位基因频率的计数。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021650975.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>SFS 可以扩展到任何数量的群体，如果我们从两个群体中采样数据，则产生2D-SFS，其对应的矩阵如下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021651854.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
如果计算两个群体的50,000个位点的2D-SFS，pop1的样本量为2个二倍体，pop2的样本量为3个二倍体。 我们会得到7行5列的矩阵。 每个单元格（i，j）包含SNP的数量，其中SNP的新生等位基因个数在pop1中为i，在pop2中为j。 此矩阵中单元格的总和是SNP总数，为50,000。 如下图所示，此矩阵也可以通过热图直观地表示。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021653902.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021653906.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
同时，我们根据上面2D SFS 的矩阵，可以得到边际1D SFS。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021653066.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
基于 SFS，不光可以判断群体的多样性，群体之间的分化程度，还可以推断群体演化历史，比如说群体经历了收缩，扩张还是稳定的演化模式。<br><br><br>#下载和配置环境
conda install -c bioconda dadi pandas
git clone https://github.com/isaacovercast/easySFS.git
cd easySFS
chmod 777 easySFS.py
./easySFS.py
#定义一个vcf文件变量
VCF=cichlid_filtered.vcf.gz
#提取单群体样本文件
bcftools query -l $VCF | grep "Mak" | awk '{split($0,a,"."); print $1,a[2]}' &gt; pop_file
#easySFS无法使用包含缺失的位点来计算SFS，它提供了过滤方法以保留最多的高覆盖率的位点。或者可以过滤高缺失率的样本。
easySFS.py -i $VCF -p pop_file -a -f --preview
#计算SFS
easySFS.py -i $VCF -p pop_file -a -f --proj 8,8
#生成文件适合fastsimcoal2和dadi的格式
复制<br>pop_file的格式：<br>sample1 pop1
sample2 pop1
sample3 pop2
sample4 pop2
复制<br>参数说明：<br>usage: easySFS.py [-h] [-a] -i VCF_NAME -p POPULATIONS [--proj PROJECTIONS]
                  [--preview] [-o OUTDIR] [--ploidy PLOIDY] [--prefix PREFIX]
                  [--unfolded] [--dtype DTYPE] [--GQ GQUAL] [-f] [-v]

optional arguments:
  -h, --help          show this help message and exit
  -a                  Keep all snps within each RAD locus (ie. do _not_
                      randomly sample 1 snp per locus).
  -i VCF_NAME         name of the VCF input file being converted
  -p POPULATIONS      Input file containing population assignments per
                      individual
  --proj PROJECTIONS  List of values for projecting populations down to
                      different sample sizes
  --preview           Preview the number of segragating sites per population
                      for different projection values.
  -o OUTDIR           Directory to write output SFS to
  --ploidy PLOIDY     Specify ploidy. Default is 2. Only other option is 1 for
                      haploid.
  --prefix PREFIX     Prefix for all output SFS files names.
  --unfolded          Generate unfolded SFS. This assumes that your vcf file
                      is accurately polarized.
  --dtype DTYPE       Data type for use in output sfs. Options are `int` and
                      `float`. Default is `float`.
  --GQ GQUAL          minimum genotype quality tolerated
  -f                  Force overwriting directories and existing files.
  -v                  Set verbosity. Dump tons of info to the screen
复制]]></description><link>术语\等位基因频谱(allele-frequency-spectrum,sfs).html</link><guid isPermaLink="false">术语/等位基因频谱(allele frequency spectrum,SFS).md</guid><pubDate>Fri, 21 Jun 2024 07:16:38 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021650662.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021650662.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[等位基因频谱(allele frequency spectrum)]]></title><description><![CDATA[ 
 <br>群在给定位点上的等位基因频率的分布情况，其能很好地刻画基因突变和遗传漂变的信息。等位基因频谱的变化在一定程度上可反映人群历史信息，且等位基因频率的计算方式也较为简单，可以直接依据基因型数据计算，无需大量的算法迭代过程，所以早期用于推断人群混合历史的方法多基于这一遗传信息。其中，比较有代表性的是赖克(D. Reich)团队在2009年开发的ADMIXTOOLS工具，该方法提出一系列统计量，如D统计量、F3统计量等，并基于不同人群的等位基因共享情况，借助系统发生树拓扑结构来刻画不同人群之间的基因流动与遗传混合情况。]]></description><link>术语\等位基因频谱(allele-frequency-spectrum).html</link><guid isPermaLink="false">术语/等位基因频谱(allele frequency spectrum).md</guid><pubDate>Thu, 20 Jun 2024 12:25:05 GMT</pubDate></item><item><title><![CDATA[氐羌（古）]]></title><description><![CDATA[ 
 <br>羌，又称羌人、羌方、羌戎、氐羌，是商周时期居住在<a data-href="中国西北" href="术语\中国西北.html" class="internal-link" target="_self" rel="noopener nofollow">中国西北</a>地区（今青海、甘肃一带）的古代部落。主流学认为源自原始汉<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>。古羌人乃<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>、<a data-href="羌族" href="术语\羌族.html" class="internal-link" target="_self" rel="noopener nofollow">羌族</a>等民族的先祖之一，古羌人不直接等同于<a data-href="羌族" href="术语\羌族.html" class="internal-link" target="_self" rel="noopener nofollow">羌族</a>。<br><a data-href="羌族" href="术语\羌族.html" class="internal-link" target="_self" rel="noopener nofollow">羌族</a>，是古羌人的后裔之一，自称尔玛。“羌”是他称，源于其以牧羊维生，是<a data-href="中国西南" href="术语\中国西南.html" class="internal-link" target="_self" rel="noopener nofollow">中国西南</a>的一个少数民族，总人口30万。有口语，文字失落。<a data-href="羌族" href="术语\羌族.html" class="internal-link" target="_self" rel="noopener nofollow">羌族</a>至今仍保留自己独特的民族传统、生活文化与巫觋宗教，信奉天神“阿爸”，也兼信别神，信奉天神、地神、山神、山神娘娘和树神等多神崇拜，使用马、猴、羊等图腾，也有很多人信仰藏传佛教。其语言属于<a data-href="汉藏语系" href="术语\汉藏语系.html" class="internal-link" target="_self" rel="noopener nofollow">汉藏语系</a>藏缅语族羌语支。]]></description><link>术语\氐羌（古）.html</link><guid isPermaLink="false">术语/氐羌（古）.md</guid><pubDate>Thu, 20 Jun 2024 12:27:16 GMT</pubDate></item><item><title><![CDATA[狄利克雷分布]]></title><description><![CDATA[ 
 <br>狄利克雷分布（Dirichlet Distribution）是一种常见的多维概率分布，常用于描述多项式分布中的参数。它是多个概率变量的联合分布，适用于离散概率分布中的情况，比如文本分析、主题建模、贝叶斯推断等领域。<br>狄利克雷分布的概率密度函数（PDF）如下：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230814112305.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
在这里， 是一个概率向量，表示了离散随机变量在各个取值上的概率。 是正参数，表示狄利克雷分布的参数， 是多维贝塔函数（multivariate beta function），用于归一化分布使其总和为1。<br>狄利克雷分布具有以下特点：<br>每个变量的取值范围在0到1之间，并且所有变量的和为1，因此适用于描述多项式分布的参数；<br>
参数 控制了分布的形状，不同参数可以产生不同的分布形式，从平坦分布到高度集中的分布都可以通过调整参数来实现；<br>
狄利克雷分布可以作为多项式分布的先验分布，用于贝叶斯推断中，通过观测数据来更新分布，得到后验分布，从而对参数进行推断。<br>
狄利克雷分布在贝叶斯统计中具有重要作用，特别是在文本挖掘、主题建模、自然语言处理等领域中的应用较为广泛。]]></description><link>术语\狄利克雷分布.html</link><guid isPermaLink="false">术语/狄利克雷分布.md</guid><pubDate>Thu, 20 Jun 2024 12:23:13 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230814112305.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230814112305.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[抵消模型]]></title><description><![CDATA[ 
 <br>即混合过程中两次或多次携带不同方向的性别偏向性混合事件得以抵消，最终呈现出无性别偏向的混合模式，且这类混合模式不能通过目前已有的其他方法进行解析。]]></description><link>术语\抵消模型.html</link><guid isPermaLink="false">术语/抵消模型.md</guid><pubDate>Thu, 20 Jun 2024 12:22:48 GMT</pubDate></item><item><title><![CDATA[颠换（transversion）]]></title><description><![CDATA[ 
 <br>颠换（Transversion）：颠换是指一种核酸碱基替代，其中一个嘌呤碱基（A或G）被一个嘧啶碱基（T或C）替代，或一个嘧啶碱基被一个嘌呤碱基替代。例如，A到C、G到T、T到A、C到G等都被认为是颠换。<br>区别
<a data-href="转换（transition）" href="术语\转换（transition）.html" class="internal-link" target="_self" rel="noopener nofollow">转换（transition）</a>和transversion
]]></description><link>术语\颠换（transversion）.html</link><guid isPermaLink="false">术语/颠换（transversion）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:28 GMT</pubDate></item><item><title><![CDATA[Footnotes]]></title><description><![CDATA[ 
 <br>染色体的结构变异包括多种类型，主要有<a data-footref="1" href="about:blank#fn-1-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>：<br>
<br>复制数变异 (Copy Number Variations, CNVs): 包括染色体片段的缺失和重复，这些变异可以影响基因的副本数，进而影响基因表达水平。
<br>插入和删除: 染色体上大片段的插入和删除，可以导致基因丢失或增加。
<br>小插入和删除 (Insertions and Deletions, Indels): 这些是指较短的DNA序列（通常少于50个碱基）的插入或删除。Indels可以改变基因的阅读框架，导致蛋白质结构和功能的改变<a data-footref="2" href="about:blank#fn-2-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a>。
<br>倒置 (Inversions): 染色体片段倒置，即染色体上的一部分片段在断裂后以相反的方向重新连接。
<br>易位 (Translocations): 涉及两个非同源染色体间片段的互换。
<br>易位复制 (Translocation duplications): 染色体片段在转移到另一个位置的同时增加副本数。
<br>单核苷酸多态性 (Single Nucleotide Polymorphisms, SNPs): 这是最常见的遗传变异类型，涉及单个核苷酸在染色体上的变化。SNPs可以影响基因的功能和表达，与多种疾病和个体特征有关。
<br>重复序列变异 (Tandem Repeats Variations): 包括微卫星和小卫星重复。这些是DNA序列中相邻重复单元的变化，长度可从几个碱基对到几百个碱基对不等。重复序列的长度变异可能影响基因表达或蛋白质功能。
<br><br><br><br>
<br>
<br><a data-tooltip-position="top" aria-label="https://consensus.app/papers/impact-variation-humans-hurles/90d0b1677d265f9a807c0678c75e0df2/?utm_source=chatgpt" rel="noopener nofollow" class="external-link" href="https://consensus.app/papers/impact-variation-humans-hurles/90d0b1677d265f9a807c0678c75e0df2/?utm_source=chatgpt" target="_blank">Hurles, M., Dermitzakis, E., &amp; Tyler-Smith, C. (2008). The functional impact of structural variation in humans. Trends in Genetics, 24(5), 238-245.</a><br>
<a data-tooltip-position="top" aria-label="https://consensus.app/papers/chromosome-variation-tumorigenesis-mechanisms-wang/2fe00ea44740539eb538381277458b50/?utm_source=chatgpt" rel="noopener nofollow" class="external-link" href="https://consensus.app/papers/chromosome-variation-tumorigenesis-mechanisms-wang/2fe00ea44740539eb538381277458b50/?utm_source=chatgpt" target="_blank">Wang, W., Li, L., &amp; Cui, J. (2020). Chromosome structural variation in tumorigenesis: mechanisms of formation and carcinogenesis. Epigenetics &amp; Chromatin, 13.</a><br>
<a data-tooltip-position="top" aria-label="https://consensus.app/papers/variation-genome-feuk/99c86317c9dc5faa9856a03e8bf19dd2/?utm_source=chatgpt" rel="noopener nofollow" class="external-link" href="https://consensus.app/papers/variation-genome-feuk/99c86317c9dc5faa9856a03e8bf19dd2/?utm_source=chatgpt" target="_blank">Feuk, L., Carson, A. R., &amp; Scherer, S. W. (2006). Structural variation in the human genome. Nature Reviews Genetics, 7, 85-97.</a><br>
<a data-tooltip-position="top" aria-label="https://consensus.app/papers/detecting-variations-genome-using-generation-sequencing-xi/9f408f45562e55f19ae479e314796574/?utm_source=chatgpt" rel="noopener nofollow" class="external-link" href="https://consensus.app/papers/detecting-variations-genome-using-generation-sequencing-xi/9f408f45562e55f19ae479e314796574/?utm_source=chatgpt" target="_blank">Xi, R., Kim, T.-M., &amp; Park, P. J. (2010). Detecting structural variations in the human genome using next generation sequencing. Briefings in Functional Genomics, 9(5-6), 405-415.</a><br>
<a data-tooltip-position="top" aria-label="https://consensus.app/papers/structural-variation-mechanisms-chromosome-weckselblatt/cdb037117062547e824211dc8e93c243/?utm_source=chatgpt" rel="noopener nofollow" class="external-link" href="https://consensus.app/papers/structural-variation-mechanisms-chromosome-weckselblatt/cdb037117062547e824211dc8e93c243/?utm_source=chatgpt" target="_blank">Weckselblatt, B., &amp; Rudd, M. K. (2015). Human Structural Variation: Mechanisms of Chromosome Rearrangements. Trends in Genetics, 31(10), 587-599.</a><br>
<a data-tooltip-position="top" aria-label="https://consensus.app/papers/patterns-variation-cancer-genomes-li/36662a1351fa5c728646aa1680edcd65/?utm_source=chatgpt" rel="noopener nofollow" class="external-link" href="https://consensus.app/papers/patterns-variation-cancer-genomes-li/36662a1351fa5c728646aa1680edcd65/?utm_source=chatgpt" target="_blank">Li, Y. et al. (2020). Patterns of somatic structural variation in human cancer genomes. Nature, 578, 112-121.</a><a href="about:blank#fnref-1-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>Small insertions and deletions (INDELs) in human genomes.<a href="about:blank#fnref-2-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>术语\典型的ndna结构变异.html</link><guid isPermaLink="false">术语/典型的nDNA结构变异.md</guid><pubDate>Thu, 20 Jun 2024 12:25:30 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[线粒体 DNA 的高变区]]></title><description><![CDATA[ 
 <br><br>
<br>HVR1: 16024 to 16383<br>
NC_012920: TTCTTTCATGGGGAAGCAGATTTGGGTACCACCCAAGTATTGACTCACCCATCAACAACCGCTATGTATTTCGTACATTACTGCCAGCCACCATGAATATTGTACGGTACCATAAATACTTGACCACCTGTAGTACATAAAAACCCAATCCACATCAAAACCCCCTCCCCATGCTTACAAGCAAGTACAGCAATCAACCCTCAACTATCACACATCAACTGCAACTCCAAAGCCACCCCTCACCCACTAGGATACCAACAAACCTACCCACCCTTAACAGTACATAGTACATAAAGCCATTTACCGTACATAGCACATTACAGTCAAATCCCTTCTCGTCCCCATGGATGACCCCCCTCA
<br>HVR2: 57-372<br>
NC_012920: TTTTCGTCTGGGGGGTATGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAACAATTGAATGTCTGCACAGCCACTTTCCACACAGACATCATAACAAAAAATTTCCACCAAACCCCCCCTCCCCCGCTTCTGGCCACAGCACTTAAACACATCTCTGCCAAACCCCAAAAACAAAGAACCCT
<br><br>这里只有一篇文章报道：<a data-href="线粒体DNA基因内倒位：线粒体肌病患者的一种新型致病突变" href="文献及报道\文献\2023年阅读\线粒体dna基因内倒位：线粒体肌病患者的一种新型致病突变.html" class="internal-link" target="_self" rel="noopener nofollow">线粒体DNA基因内倒位：线粒体肌病患者的一种新型致病突变</a><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403102257145.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>Indels 一般指的是小规模的插入和缺失（）。<br><br>这里有一个案例，是在956-965区域的MT-RNR功能区<a data-footref="1" href="about:blank#fn-1-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>，这个区域正常情况下是 ，但是发生插入之后变成了 。该患者是阿尔兹海默症+帕金森病患者。<br><br>在 302-493区域发生了一个插入, 插入了 200 个<a data-footref="2" href="about:blank#fn-2-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a>碱基，这可能是衰老的一种表现。<br><br>在147 86:14791 区域发生了一个 4 bp 的缺失，细胞色素 b 与帕金森和 MELAS 重叠症<a data-footref="3" href="about:blank#fn-3-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[3]</a>。<br><br>在2 97:348 区域发生了，50 bp 缺失。<a data-footref="4" href="about:blank#fn-4-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[4]</a><br><br>很多，举个例子，G3697A 影响了 ND 1 的功能，所以产生 MELAS 和 Encephalomyopathy<a data-footref="6" href="about:blank#fn-5-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[5]</a>。<br><br>从16070 到 3270 位置出现了一个重复的 4 kb mtDNA 片段<a data-footref="5" href="about:blank#fn-6-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[6]</a>:但没有神经肌肉疾病的证据。<br>
一个很有意思的事情是，Two types of rearrangements have been described in human mitochondrial DNA (mtDNA):&nbsp;deletions&nbsp;and duplications.人类线粒体 DNA (mtDNA) 中存在两种类型的重排：缺失和重复。
<br><br><br><br><br><br><br><br>
<br>
<br>Shoffner, J.M., Brown, M.D., Torroni, A., Lott, M.T., Cabell, M.R., Mirra, S.S., Beal, M.F., Yang, C., Gearing, M., Salvo, R., Watts, R.L., Juncos, J.L., Hansen, L.A., Crain, B.J., Fayad, M., Reckord, C.L., Wallace, D.C. (1993)&nbsp;Mitochondrial DNA variants observed in Alzheimer disease and Parkinson disease patients&nbsp;Genomics&nbsp;. 17 (1): 171-184 .<a href="about:blank#fnref-1-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>Lee, H.C., Pang, C.Y., Hsu, H.S., Wei, Y.H. (1994)&nbsp;Ageing-associated tandem duplications in the D-loop of mitochondrial DNA of human muscle&nbsp;FEBS Letters&nbsp;. 354 (1): 79-83 .<a href="about:blank#fnref-2-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>de Coo, I.F., Renier, W.O., Ruitenbeek, W., Ter Laak, H.J., Bakker, M., Schagger, H., Van Oost, B.A., Smeets, H.J. (1999)&nbsp;A 4-base pair deletion in the mitochondrial cytochrome b gene associated with parkinsonism/MELAS overlap syndrome&nbsp;Annals of Neurology&nbsp;. 45 (1): 130-133 .<a href="about:blank#fnref-3-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>Bi, R., Zhang, A. M., Zhang, W., Kong, Q. P., Wu, B. L., Yang, X. H., Wang, D., Zou, Y., Zhang, Y. P., Yao, Y. G. (2010)&nbsp;The acquisition of an inheritable 50-bp deletion in the human mtDNA control region does not affect the mtDNA copy number in peripheral blood cells&nbsp;Human Mutation&nbsp;. 31 (5): 538-543 .<a href="about:blank#fnref-4-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>Kirby, D. M., McFarland, R., Ohtake, A., Dunning, C., Ryan, M. T., Wilson, C., Ketteridge, D., Turnbull, D. M., Thorburn, D. R. and Taylor, R. W. (2004).&nbsp;<a data-tooltip-position="top" aria-label="http://www.ncbi.nlm.nih.gov/pubmed?term=15466014" rel="noopener nofollow" class="external-link" href="http://www.ncbi.nlm.nih.gov/pubmed?term=15466014" target="_blank">"Mutations of the mitochondrial ND1 gene as a cause of MELAS"</a>. Journal of Medical Genetics 41(10):784-789.<a href="about:blank#fnref-5-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>Tengan, C. H., Moraes, C. T. (1998)&nbsp;Duplication and triplication with staggered breakpoints in human mitochondrial DNA&nbsp;Biochimica et Biophysica Acta&nbsp;. 1406 (1): 73-80 .<a href="about:blank#fnref-6-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>术语\典型mtdna变异.html</link><guid isPermaLink="false">术语/典型mtDNA变异.md</guid><pubDate>Thu, 20 Jun 2024 12:21:39 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403102257145.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403102257145.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[电压依赖性阴离子通道(Voltage-Dependent Anion Channel, VDAC)]]></title><description><![CDATA[ 
 <br>外线粒体膜（OMM）上的主要通道蛋白，负责调节离子、代谢物和小分子在细胞质和线粒体之间的运输。VDAC还在调节线粒体功能和细胞凋亡中起关键作用。]]></description><link>术语\电压依赖性阴离子通道(voltage-dependent-anion-channel,-vdac).html</link><guid isPermaLink="false">术语/电压依赖性阴离子通道(Voltage-Dependent Anion Channel, VDAC).md</guid><pubDate>Mon, 26 Aug 2024 01:56:07 GMT</pubDate></item><item><title><![CDATA[东南亚大陆（Mainland Southeast Asia,MSEA）]]></title><description><![CDATA[ 
 ]]></description><link>术语\东南亚大陆（mainland-southeast-asia,msea）.html</link><guid isPermaLink="false">术语/东南亚大陆（Mainland Southeast Asia,MSEA）.md</guid><pubDate>Thu, 20 Jun 2024 12:18:41 GMT</pubDate></item><item><title><![CDATA[东乡族（Donghxiang）]]></title><description><![CDATA[ 
 ]]></description><link>术语\东乡族（donghxiang）.html</link><guid isPermaLink="false">术语/东乡族（Donghxiang）.md</guid><pubDate>Thu, 20 Jun 2024 12:27:56 GMT</pubDate></item><item><title><![CDATA[短散布核元件(Short Interspersed Nuclear Elements, SINEs)]]></title><description><![CDATA[ 
 <br>属于I类逆转座子（Class 1 Retrotransposons）的非自主移动元件，广泛存在于真核生物的基因组中。它们的主要区别在于长度、功能和转座机制。<br>
<br>特点：SINE是短片段的DNA序列，长度通常在100-300个碱基对之间。
<br>非自主转座：SINE本身没有编码转座所需的酶（如逆转录酶和内切酶），因此依赖于其他元件（如LINE）的转座机制来完成移动过程。
<br>常见例子：在人类基因组中，<a data-href="Alu元件" href="术语\alu元件.html" class="internal-link" target="_self" rel="noopener nofollow">Alu元件</a>是最著名的一类SINE，广泛存在并具有重要的调控功能。
<br>功能：虽然SINE主要被认为是“转座子”，但它们可以在基因组中充当顺式调控元件（如增强子或剪接调控位点），并通过基因组重排、基因表达调控等方式影响宿主基因的功能。
]]></description><link>术语\短散布核元件(short-interspersed-nuclear-elements,-sines).html</link><guid isPermaLink="false">术语/短散布核元件(Short Interspersed Nuclear Elements, SINEs).md</guid><pubDate>Mon, 21 Oct 2024 03:31:24 GMT</pubDate></item><item><title><![CDATA[与<a data-href="主成分分析（Principal Component Analysis，PCA）" href="术语/主成分分析（principal-component-analysis，pca）.html" class="internal-link" target="_self" rel="noopener nofollow">主成分分析（Principal Component Analysis，PCA）</a>的区别]]></title><description><![CDATA[ 
 <br>一种统计方法，常用于可视化并解释分类变量之间的关联，尤其适合处理类别数据。它可以将多维数据（如遗传单倍型频率）降维到二维或三维空间，使群体之间的关系更容易通过图形进行解释。在分子人类学中，CA分析常用来比较不同群体在遗传上的相似性和差异性。<br>图中的坐标轴（如Dimension 1和Dimension 2）代表CA分析的主成分，每个轴解释了一定比例的数据方差。例如，"Dimension 1 (6.83%)"表示该维度解释了6.83%的总体变异。越高的数值，表示该轴对群体差异的解释力越强。<br><br>
<br>数据类型：

<br>PCA：主要用于处理连续型数据，通常适用于数值型变量的降维。PCA通过最大化数据的方差来找到主成分轴，从而解释数据中的变异。
<br>CA：适用于类别数据，特别是在分析频数表或分类数据时更为有效。因此，CA常用于基因频率、群体分类数据的降维分析。


<br>数学原理：

<br>PCA：基于协方差矩阵，寻找数据中方差最大的方向（主成分），并沿着这些方向进行数据投影，以捕捉尽可能多的变异。
<br>CA：基于卡方距离（chi-square distance），通过计算行和列的比例关系（而非方差）来寻找最佳的降维方向，因此更适合对频数表或分类数据进行分析。


<br>解释方式：

<br>PCA：主成分之间的距离表示个体或变量间的差异度，距离越小则越相似。
<br>CA：通过行和列之间的相关性来解释，图中位置靠近的点表示在分类变量上有更相似的分布。


]]></description><link>术语\对应分析-(correspondence-analysis,-ca).html</link><guid isPermaLink="false">术语/对应分析 (Correspondence Analysis, CA).md</guid><pubDate>Tue, 29 Oct 2024 14:29:55 GMT</pubDate></item><item><title><![CDATA[多态性（Polymorphism）]]></title><description><![CDATA[ 
 <br>在人类的演化过程中，会积累很多的DNA突变，称为遗传多态性或基因多态性。多态性说的通俗点就叫多样性，比如，很早以前，所有的人都是ACT，突然有一天，某一人突变成了AGT，并且还活下来了，生存繁衍，最后一群人继承了他的基因，变成了AGT，这就是多态性。]]></description><link>术语\多态性（polymorphism）.html</link><guid isPermaLink="false">术语/多态性（Polymorphism）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:44 GMT</pubDate></item><item><title><![CDATA[多维缩放（Multidimensional Scaling, MDS）]]></title><description><![CDATA[ 
 <br>多维缩放（Multidimensional Scaling, MDS）是一种统计分析方法，用于分析和解释数据中的相似性或距离的结构。它将每个对象转换为几何空间中的点，以侠这些对象间的距离与它们在原始数据中的相似性或距离保持一致。<br>MDS尝试在较低维度的空间中保持对象对之间的距离，使得这些距离尽可能地反映高维空间中的实际测量距离。MDS特别适用于探索性数据分析和可视化高维数据。<br>MDS与<a data-href="主成分分析（Principal Component Analysis，PCA）" href="术语\主成分分析（principal-component-analysis，pca）.html" class="internal-link" target="_self" rel="noopener nofollow">主成分分析（Principal Component Analysis，PCA）</a>都是降维技术，但它们的方法和应用场景略有不同：<br>
<br>
基本原理:

<br>PCA 是一种线性降维技术，它通过正交变换将数据转换到新的坐标系中，新坐标（主成分）按照方差递减的顺序排列。
<br>MDS 是一种非线性降维技术，它不关注变量的方差，而是致力于在低维空间中尽可能准确地保持原始数据项之间的距离。


<br>
目的和应用:

<br>PCA 主要用于发现数据中的主要变量（即主成分），并通过这些主成分来解释数据的大部分变异。
<br>MDS 主要用于数据可视化，它能帮助研究者理解数据项之间的相对距离或相似性。


<br>
处理数据类型:

<br>PCA 适用于量化数据，通常是连续变量，它通过计算协方差矩阵或相关矩阵来工作。
<br>MDS 可以处理量化数据和非量化数据（如相似性或不相似性评分），它不需要数据项之间的相关性。


<br>
结果解释:

<br>PCA 生成的主成分有固定的解释，每个主成分都是原始变量的线性组合。
<br>MDS 生成的是一个配置，其中每个点的位置都是为了保持原始数据项之间的距离。


<br><br>离群值的叙述模板:<br>
<br>"MDS分析揭示了数据中的一个明显离群点，该点在几何空间中与其他数据点的距离显著不同，这可能表明了一个与众不同的模式或异常情况。"
<br>"在低维度表示中，一个特定的数据点远离主群体，表明其具有不同的特性或行为。"
<br>"一个数据点在MDS图上的孤立位置提示了一个潜在的离群值，这需要进一步的调查来确认其背后的原因。"
<br>"MDS映射揭示了一个离群点，这引起了我们对该点代表的对象/样本的特殊兴趣，它可能具有独特的属性或是一个测量误差的结果。"
<br>聚类的叙述模板:<br>
<br>"多维缩放（MDS）分析表明，数据中存在明显的聚类现象，这些聚类代表了具有相似属性的数据点的集合。"
<br>"在MDS图中观察到几个密集的点群，这些点群暗示了数据中的自然分组，可能与内在的相似性有关。"
<br>"通过MDS分析，我们可以看到数据点在低维空间中形成了几个独立的群落，这支持了我们关于数据子集之间存在显著差异的假设。"
<br>"MDS结果揭示了几个紧密相连的数据点群，这些群体在空间上的接近性可能反映了它们之间的共性或相似的来源。"
]]></description><link>术语\多维缩放（multidimensional-scaling,-mds）.html</link><guid isPermaLink="false">术语/多维缩放（Multidimensional Scaling, MDS）.md</guid><pubDate>Thu, 27 Jun 2024 03:44:43 GMT</pubDate></item><item><title><![CDATA[多中心假说]]></title><description><![CDATA[ 
 <br>魏敦瑞认为，现在的人类不都来自同一个地区。可以分为澳大利亚，蒙古，非洲，欧洲等。<br>
它们各自独立变成了现代人类。<br>后来经过库恩的改进，多中心假说也被称为：<a data-href="烛台理论" href="术语\烛台理论.html" class="internal-link" target="_self" rel="noopener nofollow">烛台理论</a>。]]></description><link>术语\多中心假说.html</link><guid isPermaLink="false">术语/多中心假说.md</guid><pubDate>Thu, 20 Jun 2024 12:22:43 GMT</pubDate></item><item><title><![CDATA[额济纳河（黑河，弱水）]]></title><description><![CDATA[ 
 <br><img alt="Pasted image 20230803175200" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803175200.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
中国第二大内陆河，从<a data-href="青海" href="青海" class="internal-link" target="_self" rel="noopener nofollow">青海</a>出发，经过<a data-href="甘肃" href="甘肃" class="internal-link" target="_self" rel="noopener nofollow">甘肃</a>，<a data-href="内蒙古" href="内蒙古" class="internal-link" target="_self" rel="noopener nofollow">内蒙古</a>西部，最终注入<a data-href="居延海" href="术语\居延海.html" class="internal-link" target="_self" rel="noopener nofollow">居延海</a>。]]></description><link>术语\额济纳河（黑河，弱水）.html</link><guid isPermaLink="false">术语/额济纳河（黑河，弱水）.md</guid><pubDate>Thu, 20 Jun 2024 12:19:51 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803175200.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803175200.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[二里头文化]]></title><description><![CDATA[ 
 <br>二里头文化是指以河南省洛阳市偃师<a data-href="二里头遗址" href="术语\二里头遗址.html" class="internal-link" target="_self" rel="noopener nofollow">二里头遗址</a>一至四期所代表的一类考古学文化遗存，是介于中原龙山文化和二里岗文化的一种考古学文化。为华夏文明的重要组成部分，是各族先民所创造。该考古文化主要集中分布于豫西、豫中，北至晋中，西至陕州区、丹江上游的商州地区，南至湖北北部，东至开封、兰考一带地区。<br>
二里头文化，既包含了二里头遗址的文化，又包括了二里头遗址之外具有二里头遗址文化特征的上百处遗址所反映的文化面貌。二里头遗址和二里头文化成为公认的探索夏文化的关键性研究对象。表明当时的社会由“满天星斗”式的若干相互竞争的政治实体并存的局面，进入到“月明星稀”式的广域王权国家时期。由之前多元化的邦国文明走向一体化的王朝文明。<br>
作为东亚大陆最早的广域王权国家遗存，二里头文化堪称“最早的中国”。二里头文化的文明底蕴通过商周时代王朝间的传承扬弃，成为华夏文明的主流。]]></description><link>术语\二里头文化.html</link><guid isPermaLink="false">术语/二里头文化.md</guid><pubDate>Thu, 20 Jun 2024 12:26:23 GMT</pubDate></item><item><title><![CDATA[二里头遗址]]></title><description><![CDATA[ 
 <br>二里头遗址，全国重点文物保护单位，中华文明探源工程首批重点六大都邑之一 。遗址位于洛阳盆地东部的偃师区境内，遗址上最为丰富的文化遗存属二里头文化，其年代约为距今3800～3500年，相当于古代文献中的夏、商王朝时期。该遗址南临古洛河、北依邙山、背靠黄河，范围包括二里头、圪垱头和四角楼等三个自然村，面积不少于3平方公里。作为全国重点文物保护单位，二里头遗址对研究华夏文明的渊源、国家的兴起、城市的起源、王都建设、王宫定制等重大问题具有重要的参考价值，学术界公认为中国最引人瞩目的古文化遗址之一。<br>
二里头遗址是一座精心规划、庞大有序、史无前例的王朝大都，多项中国古代都邑和政治制度都源于此。1959年开始发掘，遗存可划分为四个时期。遗址内发现有宫殿、居民区、制陶作坊、铸铜作坊、窖穴、墓葬等遗迹。出土有大量石器、陶器、玉器、铜器、骨角器及蚌器等遗物，其中的青铜爵是目前所知中国最早的青铜容器，二里头遗址的发现揭开了古老“夏都”的神秘面纱，时至今日，二里头遗址实证为夏朝中晚期都城遗存已成为学界的普遍共识。<br>
二里头文化与二里头都邑的出现，表明当时的社会由“满天星斗”式的若干相互竞争的政治实体并存的局面，进入到“月明星稀”式的广域王权国家时期。由之前多元化的邦国文明走向一体化的王朝文明。作为东亚大陆最早的广域王权国家遗存，二里头文化堪称“最早的中国”二里头文化的文明底蕴通过商周时代王朝间的传承扬弃，成为华夏文明的主流]]></description><link>术语\二里头遗址.html</link><guid isPermaLink="false">术语/二里头遗址.md</guid><pubDate>Thu, 20 Jun 2024 12:19:53 GMT</pubDate></item><item><title><![CDATA[非必须氨基酸 1]]></title><description><![CDATA[ 
 <br>非必需氨基酸是指人体可以通过代谢途径自行合成的氨基酸，因此不需要通过膳食补充。人体可以从其他代谢物中合成非必需氨基酸。共有11种非必需氨基酸，它们包括：<br><a data-href="丙氨酸（Alanine）" href="丙氨酸（Alanine）" class="internal-link" target="_self" rel="noopener nofollow">丙氨酸（Alanine）</a><br>
<a data-href="天冬酰胺（Asparagine）" href="天冬酰胺（Asparagine）" class="internal-link" target="_self" rel="noopener nofollow">天冬酰胺（Asparagine）</a><br>
<a data-href="天冬酰胺（Aspartic Acid）" href="天冬酰胺（Aspartic Acid）" class="internal-link" target="_self" rel="noopener nofollow">天冬酰胺（Aspartic Acid）</a><br>
<a data-href="胱氨酸（Cysteine）" href="胱氨酸（Cysteine）" class="internal-link" target="_self" rel="noopener nofollow">胱氨酸（Cysteine）</a><br>
<a data-href="谷氨酸（Glutamine）" href="谷氨酸（Glutamine）" class="internal-link" target="_self" rel="noopener nofollow">谷氨酸（Glutamine）</a><br>
<a data-href="谷氨酸（Glutamic Acid）" href="谷氨酸（Glutamic Acid）" class="internal-link" target="_self" rel="noopener nofollow">谷氨酸（Glutamic Acid）</a><br>
<a data-href="甘氨酸（Glycine）" href="甘氨酸（Glycine）" class="internal-link" target="_self" rel="noopener nofollow">甘氨酸（Glycine）</a><br>
<a data-href="脯氨酸（Proline）" href="脯氨酸（Proline）" class="internal-link" target="_self" rel="noopener nofollow">脯氨酸（Proline）</a><br>
<a data-href="苏氨酸（Serine）" href="苏氨酸（Serine）" class="internal-link" target="_self" rel="noopener nofollow">苏氨酸（Serine）</a><br>
<a data-href="苹果酸（Threonine）" href="苹果酸（Threonine）" class="internal-link" target="_self" rel="noopener nofollow">苹果酸（Threonine）</a><br>
<a data-href="色氨酸（Tyrosine）" href="色氨酸（Tyrosine）" class="internal-link" target="_self" rel="noopener nofollow">色氨酸（Tyrosine）</a>]]></description><link>术语\非必须氨基酸-1.html</link><guid isPermaLink="false">术语/非必须氨基酸 1.md</guid><pubDate>Thu, 20 Jun 2024 12:20:42 GMT</pubDate></item><item><title><![CDATA[非陶器时期(aceramic,non-pottery)]]></title><description><![CDATA[ 
 <br>Aceramic文化是指一种没有陶器的考古文化，即在特定历史时期和地区没有发现陶器的文化阶段。这种文化可能在某一时间段内存在，或在某一特定地区内存在。<br>陶器是人类文化中重要的技术创新之一，它在许多文化中起着重要作用，如食物加工、储存、烹饪等方面。然而，在某些历史时期或地区，由于各种原因，人们并没有使用或制造陶器，而是使用其他材料来满足他们的需求。]]></description><link>术语\非陶器时期(aceramic,non-pottery).html</link><guid isPermaLink="false">术语/非陶器时期(aceramic,non-pottery).md</guid><pubDate>Thu, 20 Jun 2024 12:26:52 GMT</pubDate></item><item><title><![CDATA[非同义突变（Non-Synonymous Mutation）]]></title><description><![CDATA[ 
 <br>非同义突变是一种基因突变，其中一个或多个核苷酸的改变导致蛋白质编码的氨基酸序列发生改变。<br>这种类型的突变会导致蛋白质的氨基酸组成发生变化，可能会对蛋白质的结构和功能产生影响。<br>非同义突变有时被称为"错义突变"，因为它们改变了蛋白质编码，而这种改变可能会对蛋白质的性能产生重要影响。]]></description><link>术语\非同义突变（non-synonymous-mutation）.html</link><guid isPermaLink="false">术语/非同义突变（Non-Synonymous Mutation）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:28 GMT</pubDate></item><item><title><![CDATA[非洲（Africa）]]></title><description><![CDATA[ 
 <br>非洲（英文：Africa），全称阿非利加洲，位于东半球西部，欧洲以南，亚洲之西，东濒印度洋，西临大西洋，纵跨赤道南北，面积大约为3020万平方公里（土地面积），占全球总陆地面积的20.4%，是世界第二大洲，最新估计，非洲人口超过14亿，约占世界六分之一]]></description><link>术语\非洲（africa）.html</link><guid isPermaLink="false">术语/非洲（Africa）.md</guid><pubDate>Thu, 20 Jun 2024 12:19:49 GMT</pubDate></item><item><title><![CDATA[吠陀（Vedic）]]></title><description><![CDATA[ 
 <br>又译为韦达经、韦陀经、围陀经等，是吠陀教最重要和最根本的教典。“吠陀”意思是“知识”、“启示”。<br>
吠陀文化（约公元前1500年—前500年）是指<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E5%90%A0%E9%99%80" rel="noopener nofollow" class="external-link" title="吠陀" href="https://zh.wikipedia.org/wiki/%E5%90%A0%E9%99%80" target="_blank">吠陀</a>经典所记载和反映的印度历史时期文化。]]></description><link>术语\吠陀（vedic）.html</link><guid isPermaLink="false">术语/吠陀（Vedic）.md</guid><pubDate>Thu, 18 Jul 2024 07:24:04 GMT</pubDate></item><item><title><![CDATA[分层LD分数回归（Stratified Linkage Disequilibrium Score Regression，S-LDSC,S-LDSC)]]></title><description><![CDATA[ 
 <br>是 Linkage Disequilibrium Score Regression（LDSC）的扩展，旨在更详细地分析基因组中不同功能元件（例如，基因、启动子区域、增强子等）的遗传变异与复杂性疾病或定量性状之间的关联。<br>S-LDSC使用整个基因组的遗传变异数据，结合不同功能元件的注释信息，来检验不同功能元件是否与疾病或特定定量性状相关。它可以揭示哪些功能元件更可能与疾病或性状的遗传风险相关，并帮助研究人员更好地理解基因组中不同区域的生物学功能。<br>S-LDSC通常用于分层分析基因组关联数据，以探索复杂性疾病的遗传体质和与基因组中不同功能元件相关的遗传变异之间的关系。这有助于更全面地理解基因组的遗传结构和复杂性疾病的发病机制。]]></description><link>术语\分层ld分数回归（stratified-linkage-disequilibrium-score-regression，s-ldsc,s-ldsc).html</link><guid isPermaLink="false">术语/分层LD分数回归（Stratified Linkage Disequilibrium Score Regression，S-LDSC,S-LDSC).md</guid><pubDate>Thu, 20 Jun 2024 12:24:34 GMT</pubDate></item><item><title><![CDATA[概念]]></title><description><![CDATA[ 
 <br><br>AMOVA 是一种用于分析遗传数据中种群间和种群内遗传差异的统计方法。旨在评估遗传数据中不同层次的变异分布。它将总体遗传变异分解为不同层次的组成部分，包括种群内的变异和种群间的变异。<br><br>AMOVA 将遗传差异分解为不同的成分，包括<br>
<br>
总遗传变异（Total Genetic Variance​)：这是对所有个体之间遗传差异的总计算，表示整个样本中遗传多样性的总量。<br>
。<br>
 个体  和  之间的遗传距离。

<br>
种群内的遗传差异（Within-population variation）：这部分变异计算单个种群内部个体之间的遗传差异。<br>
 组数。<br>
。<br>
· :第  组中的种群数。<br>
:第  组第  种群的个体数。<br>
· :同一种群内个体  和  之间的遗传距离。

<br>
种群间的遗传差异（Among Populations within Groups Variance）：这部分变异计算组内不同种群之间的遗传差异。<br>
 组数。<br>
。<br>
 总组数。<br>
· :第  组中的种群数。<br>
 :第  组第  种群的个体数。<br>
· :第  组的遗传距离均值。<br>
· :第  组第  种群的遗传距离均值。

<br>
组间遗传变异（Among Groups Variance）：这部分变异计算不同组之间的遗传差异，基于整个组的遗传均值之间的差异。<br>
·  总组数。<br>
  第  组的个体数。<br>
· :第  组的遗传距离均值。<br>
· ..:全部个体的遗传距离均值。

<br><br>AMOVA 的结果通常以方差百分比的形式呈现，即将总遗传变异分解为上述三种的比例。这些百分比可以用来解释遗传数据中不同层次间的变异程度。<br>始终记住，计算出的 Percentage of Variance 是一个比值。不同的研究群体之间的比值可能随着总群体的不同而不同，因此需要谨慎看待！]]></description><link>术语\分子方差分析（amova-，analysis-of-molecular-variance).html</link><guid isPermaLink="false">术语/分子方差分析（AMOVA ，Analysis of Molecular Variance).md</guid><pubDate>Thu, 20 Jun 2024 12:24:33 GMT</pubDate></item><item><title><![CDATA[分子钟定年方法(molecular dating approach)]]></title><description><![CDATA[ 
 <br>
Lanfear, R., Welch, J.&nbsp;J. &amp; Bromham, L. Watching the clock: studying variation in rates of molecular evolution between species. Trends Ecol. Evol. 25, 495–503 (2010).
]]></description><link>术语\分子钟定年方法(molecular-dating-approach).html</link><guid isPermaLink="false">术语/分子钟定年方法(molecular dating approach).md</guid><pubDate>Thu, 20 Jun 2024 12:22:32 GMT</pubDate></item><item><title><![CDATA[分子钟理论估计的总突变数目（θ）]]></title><description><![CDATA[ 
 <br>是遗传学中常用的一个参数，主要用于衡量一个群体中预期的核苷酸多态性水平。这个参数的估算是基于中性理论假设，即认为大多数突变是中性的，不受自然选择的影响，因此它们的积累速度可以被视为是一个“分子钟”。θ反映的是一个群体中基于中性突变模型的理论多态性水平，即该群体在没有选择压力且处于进化平衡状态下预期会产生的突变位点数量。<br>具体解释：<br>
<br>θ的定义：θ通常表示为“每个碱基对的突变率乘以群体的有效大小”。具体来说，它估算的是在特定基因片段中由于突变而产生的多态性位点的总数。数学上，θ通常被表示为θ = 4Neμ，其中Ne是群体的有效大小，μ是每个位点的突变率。


<br>分子钟理论：分子钟理论假设突变在进化过程中以一个相对恒定的速率发生，因此可以用来估算种群之间的分化时间或某一群体内的多样性积累。基于这个理论，θ可以被视为是一个群体在长期进化过程中所积累的总突变数目。
<br>θ的计算：在实际分析中，θ可以通过多种方法估算，其中一种常见的方法是基于测得的单倍型（haplotype）或单倍群（haplogroup）频率来估算群体中的平均核苷酸差异，然后推导出θ的值。
]]></description><link>术语\分子钟理论估计的总突变数目（θ）.html</link><guid isPermaLink="false">术语/分子钟理论估计的总突变数目（θ）.md</guid><pubDate>Mon, 26 Aug 2024 03:22:36 GMT</pubDate></item><item><title><![CDATA[风险比（Odds Ratio, OR）]]></title><description><![CDATA[ 
 <br>风险比（OR）是一种比较发生某事件的几率（而不是概率）在两个群体中的比值。在疾病关联研究中，它常用于衡量暴露与非暴露群体中发生疾病的几率之比。<br><br>公式如下：<br><br>解读： 如果  那么暴露与疾病正相关， 表示负相关， 表示暴露与疾病无显著相关。]]></description><link>术语\风险比（odds-ratio,-or）.html</link><guid isPermaLink="false">术语/风险比（Odds Ratio, OR）.md</guid><pubDate>Thu, 20 Jun 2024 12:25:28 GMT</pubDate></item><item><title><![CDATA[负选择（Negative Selection）]]></title><description><![CDATA[ 
 <br>当某个特定基因型或基因变异在个体适应度中表现出明显劣势时，这种情况被称为负选择。在负选择下，不利的遗传变异会逐渐减少，因为它们降低了个体的生存或繁殖能力。负选择有助于维持种群中的适应性特征，通过阻止不利基因的累积。]]></description><link>术语\负选择（negative-selection）.html</link><guid isPermaLink="false">术语/负选择（Negative Selection）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:26 GMT</pubDate></item><item><title><![CDATA[富含亮氨酸重复序列的G蛋白偶联受体(Leucine-rich repeat-containing G-protein coupled receptor, LGR)]]></title><description><![CDATA[ 
 ]]></description><link>术语\富含亮氨酸重复序列的g蛋白偶联受体(leucine-rich-repeat-containing-g-protein-coupled-receptor,-lgr).html</link><guid isPermaLink="false">术语/富含亮氨酸重复序列的G蛋白偶联受体(Leucine-rich repeat-containing G-protein coupled receptor, LGR).md</guid><pubDate>Tue, 13 Aug 2024 07:15:55 GMT</pubDate></item><item><title><![CDATA[富集分析之桃园三结义：GO、KEGG、GSEA]]></title><description><![CDATA[ 
 <br>
原文链接：<a data-tooltip-position="top" aria-label="https://mp.weixin.qq.com/s?__biz=Mzk0MzQxNzcxOA==&amp;mid=2247484040&amp;idx=1&amp;sn=87bddf991f19c61705dac401f94ccc41&amp;chksm=c3357291f442fb87f8a5b0bd55a0a99446787d1b9a31e3908b7951f9ac6c4b86bc911da1b28d&amp;mpshare=1&amp;scene=1&amp;srcid=1211BY0QXO9MfDJPggUAX8q5&amp;sharer_shareinfo=9fa81783c85482755c881541fb95cec5&amp;sharer_shareinfo_first=dd20accccb0ddca8e3497923d1bfd9e9#rd" rel="noopener nofollow" class="external-link" href="https://mp.weixin.qq.com/s?__biz=Mzk0MzQxNzcxOA==&amp;mid=2247484040&amp;idx=1&amp;sn=87bddf991f19c61705dac401f94ccc41&amp;chksm=c3357291f442fb87f8a5b0bd55a0a99446787d1b9a31e3908b7951f9ac6c4b86bc911da1b28d&amp;mpshare=1&amp;scene=1&amp;srcid=1211BY0QXO9MfDJPggUAX8q5&amp;sharer_shareinfo=9fa81783c85482755c881541fb95cec5&amp;sharer_shareinfo_first=dd20accccb0ddca8e3497923d1bfd9e9#rd" target="_blank">富集分析之桃园三结义：GO、KEGG、GSEA (qq.com)</a>
<br>在富集分析的世界里，GO、KEGG、GSEA 就如同《三国演义》中的桃园结义三兄弟一样，各自发挥独特的作用。<br>
<br>GO（Gene Ontology）犹如张飞，致力于整合基因功能的标准，对基因进行分类：

<br>分子功能（Molecular Function）
<br>生物学过程（Biological Process）
<br>细胞组分（Cellular Component）<br>
就如同张飞在战场上组织部队一样。


<br>KEGG（Kyoto Encyclopedia of Genes and Genomes）如同关羽，以其深刻的通路图谱而著称，一路过五关斩六将，为我们提供了对基因组和生物通路的深刻了解。
<br>GSEA（Gene Set Enrichment Analysis）则类似刘备不受预定义显著差异基因阈值的限制，以灵活的方式关注整个基因集的协同变化模式，弥合了传统富集分析方法的不足，如同刘备整合了三兄弟，成为一支无往不利的力量。
<br><br>相同点：<br>
GO、KEGG和GSEA都是基因功能研究的重要工具，可以帮助研究人员发现与特定生物学现象相关的基因集。<br>
不同点：<br>
1. GO和KEGG是基因功能注释数据库，GSEA是基因集富集分析方法。<br>
2. GO将基因分为功能、过程和组成三个层次，KEGG将基因分为代谢、信号转导、细胞组成等功能模块。<br>
3. GSEA通过统计方法判断基因集在特定功能或过程上是否富集。<br>GSEA是基因集富集分析的缩写，是一种用于判断基因集在特定功能或过程上是否富集的统计方法。GSEA的基本原理是：首先，将基因根据差异表达程度进行排序，得到一个排序列表。然后，将基因集与基因本体论或其他功能注释数据库进行比较，得到每个基因是否属于该基因集的信息。最后，计算基因集在排序列表中的位置分数（ES），该分数可以反映基因集在特定功能或过程上是否富集。具体来说，GSEA首先将基因根据差异表达程度进行排序，得到一个排序列表。然后，从第一个基因开始，判断该基因是否属于基因集。如果属于，则为基因集加分；如果不属于，则为基因集减分。这样，从第一个基因开始，基因集的分数会一直累加或累减。最后，得到一个峰值，该峰值就是基因集在排序列表中的位置分数（ES）.ES值越高，表明基因集在特定功能或过程上富集的可能性越大。如果ES值的p值小于显著性水平，则可以认为该基因集在特定功能或过程上富集具有统计学意义。<br>在这个三兄弟中，GO 和 KEGG 象征着生物通路的导航专家。与传统富集分析方法不同的是，GO 和 KEGG 通常需要依赖差异基因（发生显著变化的将士），类似于张飞和关羽爱憎分明，容易识别那些有显著变化的人。而 GSEA 的独特之处在于，它不需要预定义显著差异基因的阈值，就如同刘备在整合三兄弟时不需要过多的事先设定（）。GSEA以一种更为灵活的方式，关注整个基因集的协同变化模式，即使对表达变化较小的基因（没有显著变化却也发挥了一定协同作用的将士）也能有效捕捉。这种特点使得 GSEA 能够更全面地理解整体基因集中的协同变化模式，无需过多依赖事先设定的显著性阈值。<br>在RNA测序研究中，一旦确定了差异表达的基因，研究者通常希望了解这些基因涉及了哪些生物学通路（pathways），并且哪些通路是关键的。通过这样的分析，我们可以推断出在不同样本之间存在的重要功能差异。这有助于将我们的研究提升到更深层次的功能和机制层面，并为进一步的实验研究提供有益的指导。 此时就需要利用基因集富集分析（Enrichment Analysis）来帮我们实现上述目的。那么，问题来了：<br><br>富集分析是一种生物信息学分析方法，其主要目的是在高通量生物学实验数据中识别一组基因或蛋白质是否在特定的功能类别、通路或生物学过程中显著富集。这一方法在研究基因表达、蛋白质组学和其他高通量数据方面非常有用。<br><br>
<br>功能解释： 富集分析有助于解释高通量实验数据，尤其是在基因表达谱、蛋白质组学或其他”omics”数据中，指导研究者理解在不同条件下哪些生物学功能或通路受到调控。
<br>生物学解释： 通过识别显著富集的基因集，研究者能够推断在实验条件下哪些生物学过程起着重要作用。例如，可以确定在疾病状态下活跃的信号通路或参与特定细胞功能的基因。
<br>数据压缩： 富集分析可以将大量的基因或蛋白质数据整合成更为可解释和具有生物学意义的信息，从而简化数据集并减少信息的复杂性。
<br>假设生成： 富集分析有助于生成新的生物学假设，从而指导后续实验的设计和数据采集。它可以帮助研究者聚焦于与特定生物学问题相关的基因集。
<br>药物靶点发现： 在药物研发中，富集分析可以揭示与药物响应相关的生物学通路，从而帮助寻找潜在的药物靶点。
<br>可视化： 结果可视化是富集分析的重要部分，可以通过富集分数曲线、热图等方式直观地呈现基因集的富集情况，提供直观的解释和展示。
<br>总体而言，富集分析为生物学研究者提供了一种系统性的方法，通过将高通量实验数据映射到已知的生物学知识库中，帮助解释数据、发现潜在的生物学意义并生成新的研究假设。<br><br>以下内容来自生信技能树小洁老师的课件&nbsp;<img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_jpg/aiaeCPicRlUjJwyW9ryFdkBrqLTdPUsOtAj0kF6vzibWlYX9YM9BEnGYvpIw5gSsBFCx6CF7O8ZBYqJibL4hzTX7KQ/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer">假如总共有13000个球，其中有35个是中奖的球。舀了1000个球，其中有25个是中奖的球，中奖率是（20/100），比预期的中奖率（35/13000）多，这就是富集的意思。而这1000个基因是不是随便选的，其实是经过筛选的，这1000个球相当于是1000个差异基因，是实验设计，有目的，所以这个通路跟实验设计是有关系，具体什么关系要具体分析。<br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_jpg/aiaeCPicRlUjJwyW9ryFdkBrqLTdPUsOtAb05wFf2OZL2LBxUtdgS4hUBNXiaW6we9FibzhrxqMLa28NDWJ06UHVQQ/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer">上面这个图是富集分析的结果，涉及到与基因集富集分析相关的两个概念：&nbsp;BGRatio（Background Ratio）： BGRatio 是富集分析中用于比较观察到的差异基因集与整体基因集（背景基因集）之间的比率。背景基因集通常是指在整个基因组中的所有基因。BGRatio 的计算方式通常是观察到的差异基因数目与背景基因数目之间的比值。如果 BGRatio 显著大于 1，说明差异基因在特定的基因集中富集。<br>GeneRatio（Gene Ratio）： GeneRatio 则是指在某个特定的生物学通路、功能类别或基因集合中，观察到的差异基因数目占该基因集合总数的比例。GeneRatio 的计算方式是差异基因数目除以总基因集合的数目。GeneRatio 提供了对差异基因在特定功能类别中的相对富集程度的信息。<br>这两个概念通常用于帮助解释基因集富集分析的结果。在进行富集分析时，研究者会比较观察到的差异基因集与整体基因组之间的比例，以确定某个功能类别或通路是否在差异基因中富集。 BGRatio 和 GeneRatio 是富集分析报告中的关键参数，用于评估富集分析结果的统计显著性和生物学意义。<br>ID：对应的功能或者通路的ID编号，由数据库给定。<br>Description：对应的功能或者通路的名字，详细信息。<br>GeneRatio：指在某个特定的生物学通路、功能类别或基因集合中，观察到的差异基因数目占该基因集合总数的比例。GeneRatio 的计算方式是差异基因数目除以总基因集合的数目。GeneRatio 提供了对差异基因在特定功能类别中的相对富集程度的信息。<br>BgRatio（Background Ratio）：对应ID条目内分子总数/库内（BP、CC、MF和KEGG都是分开的注释库）总的有功能注释的分子的交集总数。指某个特定的生物学通路、功能类别或基因集合占所有基因总数的比例。<br>pvalue：超几何分布检验统计的p值。<br>p.adjust：通过p值校正方法得到的校正后的p值。<br>qvalue：通过p值校正方法得到的校正后的q值，也称为FDR，代表错误率。<br>geneID：geneid这一列的内容是entrezid，加参数 readable = TRUE后就可读的基因名称（genesymbol）了，如下：&nbsp;<img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_jpg/aiaeCPicRlUjJwyW9ryFdkBrqLTdPUsOtAaoGGDsiaweac7WWuZ5Jq0wqWAj2Whp15pIo3Yvu0RonRgDUnQGCLtRg/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer"><br>Count：count是差异基因里有多少个是匹配到当前的通路里，给差异基因归类。<br><br><br>指的是 “Gene Ontology”，是一种用于描述基因及其产物功能的标准化的生物信息学术语体系。Gene Ontology 旨在提供一个统一的框架，帮助研究者对基因功能进行标准化、一致性的描述，从而方便不同实验室和研究者之间的数据共享和比较。Gene Ontology 分为三个主要方面，每个方面都有相应的子集：<br>分子功能（Molecular Function）： 描述基因产物的分子活性，比如催化特定的化学反应、结合分子或传导信号等。<br>生物学过程（Biological Process）： 描述基因参与的生物学活动，如代谢、细胞周期、免疫响应等。<br>细胞组分（Cellular Component）： 描述基因产物定位于细胞中的特定结构或组分，例如核、细胞膜、线粒体等。&nbsp;<a rel="noopener nofollow" class="external-link" href="https://www.geneontology.org" target="_blank">https://www.geneontology.org</a><br><br>是 “Kyoto Encyclopedia of Genes and Genomes”（京都基因和基因组百科全书）的缩写。KEGG是一个用于理解生物系统高级功能和效用的数据库资源，包括细胞、生物体和生物圈等各个层次，从基因组和分子水平的信息入手。它是生物系统的计算机模型，由基因和蛋白质的分子构建块（基因组信息）以及化学物质（化学信息）组成，与相互作用和反应网络的分子布线图（系统信息）相整合。KEGG模型还包含疾病和药物信息（健康信息），涉及受扰动的分子网络。<img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_jpg/aiaeCPicRlUjJwyW9ryFdkBrqLTdPUsOtAFvgtBzSaqGAuRE0CSRflGbGz5SzicibicjVuOSgP7j6YxJD0MjDk6zTog/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer"><br><a rel="noopener nofollow" class="external-link" href="https://www.genome.jp/kegg/" target="_blank">https://www.genome.jp/kegg/</a><br><br>library(tinyarray)  # 小洁老师写的R包，可以简化芯片数据的pipeline的流程。library(stringr)gse = "GSE56649"geo = geo_download(gse)# geo = geo_download(gse,by_annopbrobe = F)geo$exp = log2(geo$exp + 1)Group = ifelse(str_detect(geo$pd$source_name_ch1, "control"), "control", "RA")Group = factor(Group, levels = c("control", "RA"))find_anno(geo$gpl)
复制<br>## [1] "`library(hgu133plus2.db);ids &lt;- toTable(hgu133plus2SYMBOL)` and `ids &lt;- AnnoProbe::idmap('GPL570')` are both avaliable"
复制<br>library(hgu133plus2.db)ids &lt;- toTable(hgu133plus2SYMBOL)head(ids)
复制<br><br># 差异分析和它的可视化dcp = get_deg_all(geo$exp, Group, ids)table(dcp$deg$change)
复制<br>## ##   down stable     up ##    828  19339    657
复制<br>head(dcp$deg)
复制<br><br>deg &lt;- dcp$deglibrary(tidyverse)dcp$plots
复制<br><br>genes = dcp$deg$ENTREZID[dcp$deg$change != "stable"]  #差异基因的ENTREZID，因为富集分析需要ENTREZID。head(genes)
复制<br>## [1] "3030"  "9208"  "54726" "2286"  "64771" "2962"
复制<br># 有可能因为网络问题报错g = quick_enrich(genes, destdir = tempdir())  #快速富集names(g)  #kk是KEGG，go是GO，kk.dot是KEGG气泡图，go.dot是GO气泡图
复制<br>## [1] "kk"     "go"     "kk.dot" "go.dot"
复制<br>g[[1]][1:4, 1:4]
复制<br><br>library(patchwork)g[[3]] + g[[4]]
复制<br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_png/aiaeCPicRlUjJwyW9ryFdkBrqLTdPUsOtA9qhF8hMHh7JVhmOdDBP9ohCFsZnFOibsJGYjAmXGUzk3outD7McVISg/640?wx_fmt=png&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer"><br>ggsave("enrich.png", width = 12, height = 7)
复制<br>如上图所示，用差异基因富集会出现富集的通路很少甚至是富集不到通路的情况，所以就可以试试GSEA用全部的基因来富集了。<br><br>deg &lt;- dcp$deglibrary(tidyverse)deg &lt;- arrange(deg, logFC)geneList = deg$logFCnames(geneList) = toupper(deg$symbol)geneList = sort(geneList, decreasing = T)head(geneList)
复制<br>##     OLR1   COL1A1    OLFM4     H3C8   CRISP3  ZFP36L2 ## 3.835314 3.790745 3.427338 3.180043 2.956932 2.909744
复制<br>library(ggplot2)library(clusterProfiler)library(org.Hs.eg.db)# 选择gmt文件（MigDB中的全部基因集）# 下载链接：https://www.gsea-msigdb.org/gsea/msigdb/download_file.jsp?filePath=/msigdb/release/2023.2.Hs/h.all.v2023.2.Hs.symbols.gmtgmtfile = "h.all.v2023.2.Hs.symbols.gmt.txt"# 31120 个基因集 GSEA分析library(GSEABase)geneset &lt;- clusterProfiler::read.gmt(gmtfile)length(unique(geneset$term))
复制<br>## [1] 50
复制<br>egmt &lt;- GSEA(geneList, TERM2GENE = geneset, minGSSize = 1, pvalueCutoff = 0.99, verbose = FALSE)# head(egmt,1)#内容太多，就注释掉了此代码 egmt@result[1] ##内容太多，就注释掉了此代码gsea_results_df &lt;- egmt@resultrownames(gsea_results_df)[1:5]
复制<br>## [1] "HALLMARK_TNFA_SIGNALING_VIA_NFKB"          ## [2] "HALLMARK_OXIDATIVE_PHOSPHORYLATION"        ## [3] "HALLMARK_MYC_TARGETS_V1"                   ## [4] "HALLMARK_INFLAMMATORY_RESPONSE"            ## [5] "HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION"
复制<br>write.csv(gsea_results_df, file = "gsea_results_df.csv")library(enrichplot)gseaplot2(egmt, geneSetID = "HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION", pvalue_table = T)
复制<br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_png/aiaeCPicRlUjJwyW9ryFdkBrqLTdPUsOtAyd1Hsicz1I3aVBjibw4libHL3dI6VDaB4BvphFCexkjENfavhG6PJlz1A/640?wx_fmt=png&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer"><br>gseaplot2(egmt, geneSetID = "HALLMARK_MTORC1_SIGNALING", pvalue_table = T)
复制<br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_png/aiaeCPicRlUjJwyW9ryFdkBrqLTdPUsOtAY3DstDzQvy1waOemRKT41c7K9heYPoZp5tfVnUtBqkibS4Sicoy7iciaqg/640?wx_fmt=png&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer"><br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_jpg/aiaeCPicRlUjJwyW9ryFdkBrqLTdPUsOtAyIF2jw0hd1XLT1dqg13IQ6tPEGe4avB6jicD2ABbrjeWMwKFaRg9nBg/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer">GSEA图的解读： 1:这个图从下往上看，下方纵坐标-4～4是logFC，横坐标从左到右是大约2万个基因，每个基因是一个非常细的柱状图，他的高度是代表他的logFC大小，从左往右是从大到小的趋势，和go、kegg的富集分析不一样，go、kegg只用了差异基因来做的分析，这里是用的排序好的全部基因做的分析，logFC是最常用的排序方式，但它不是唯一的，按其他方式排序也可以做图，只不过要自己去把握其意义，若无特殊就用logFC就可以了。 2:中间的红蓝条代表logFC大小，越红代表logFC越大，越蓝代表越小。 3:红蓝线条像条形码的那里，一个小竖条代表一个基因，它和下方的基因是一一对应的，但它不是每个位置都布满了基因，位置上有没有基因的区别是通路，有条的地方代表对应位置的基因属于这条通路，没有条代表对应位置的基因不属于这条通路。 4.Running Enrichment Score是富集的考量指标，基本是从0出发最终又回到0，从左往右是一点点跑出来的，先上升后下降最后又上升，它的上升和下降是看当前位置的基因是否属于这个通路，属于就上升，不属于就下降，增加的时候是按权重的。这个图的最终的结论是展示的通路到底是富集到了上调基因还是下调基因，如果如果像这张图这个图前面的峰比较大（1.5），后面的谷（峰）比较小（-0.28），如果左边波动大就是上调基因富集到了，如果是右边波动大就是下调基因富集到了。也有极端情况两边波动幅度差不多大。]]></description><link>术语\富集分析之桃园三结义：go、kegg、gsea.html</link><guid isPermaLink="false">术语/富集分析之桃园三结义：GO、KEGG、GSEA.md</guid><pubDate>Thu, 20 Jun 2024 12:24:46 GMT</pubDate><enclosure url="https://mmbiz.qpic.cn/mmbiz_jpg/aiaeCPicRlUjJwyW9ryFdkBrqLTdPUsOtAj0kF6vzibWlYX9YM9BEnGYvpIw5gSsBFCx6CF7O8ZBYqJibL4hzTX7KQ/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://mmbiz.qpic.cn/mmbiz_jpg/aiaeCPicRlUjJwyW9ryFdkBrqLTdPUsOtAj0kF6vzibWlYX9YM9BEnGYvpIw5gSsBFCx6CF7O8ZBYqJibL4hzTX7KQ/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[冈崎片段（Okazaki frageme）]]></title><description><![CDATA[ 
 <br>DNA双链进行复制的时候，其中一条链被称前导链，另外一条被称为滞后链。<br>后者进行复制的时候由于从5'→3'端与DNA解链方向相反，因此只能片段合成，合成的多个片段被称为冈崎片段。]]></description><link>术语\冈崎片段（okazaki-frageme）.html</link><guid isPermaLink="false">术语/冈崎片段（Okazaki frageme）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:52 GMT</pubDate></item><item><title><![CDATA[高棉人（Khmer）]]></title><description><![CDATA[ 
 <br>高棉人主要居住在今天的柬埔寨，是该国的主体民族。高棉帝国（Khmer Empire）在9到15世纪期间是该地区的一个强大的帝国，其遗址如著名的吴哥窟（Angkor Wat）至今仍是重要的历史和文化象征。]]></description><link>术语\高棉人（khmer）.html</link><guid isPermaLink="false">术语/高棉人（Khmer）.md</guid><pubDate>Sun, 14 Jul 2024 14:46:33 GMT</pubDate></item><item><title><![CDATA[高山古城遗址]]></title><description><![CDATA[ 
 <br>高山古城遗址位于四川省成都市大邑县三岔镇高山社区3组，为新石器时代城址，平面呈长方形，分布面积约57万平方公尺，东西长1050公尺，南北宽550公尺。城墙为堆筑而成，东墙及南墙尚存，城墙东南转角明显。城墙最宽处约50公尺，以前曾采集到陶片、石器等，从形制分析应属成都平原宝墩文化遗存。古城遗址外形明显，夯土层断面清晰，东墙南墙尚存。为研究成都平原新石器时代文化遗存及社会生活状况提供了重要的实物资料。]]></description><link>术语\高山古城遗址.html</link><guid isPermaLink="false">术语/高山古城遗址.md</guid><pubDate>Thu, 20 Jun 2024 12:20:22 GMT</pubDate></item><item><title><![CDATA[高通量染色体构象捕获技术(High-throughput chromosome conformation capture,Hi-C)]]></title><description><![CDATA[ 
 <br>Hi-C技术是染色体构象捕获（Chromosome conformation capture，简称为3C）的一种衍生技术，是指基于高通量进行染色体构象的捕获，它能够在全基因组范围内捕捉不同基因座位之间的空间交互信息，研究三维空间中调控基因的DNA元件。<br>Hi-C技术的原理是利用DNA的酶切位点，将染色质中的DNA断开成短片段，然后将这些短片段进行连接，再根据连接的频率来推断不同基因座位之间的空间距离。<br><a data-tooltip-position="top" aria-label="http://cn.novogene.com/novo/hi_cpjs_206.html#:~:text=Hi%2DC%E6%8A%80%E6%9C%AF%E6%98%AF%E6%9F%93%E8%89%B2%E4%BD%93,%E7%A9%BA%E9%97%B4%E4%BD%8D%E7%BD%AE%E4%B8%8A%E7%9A%84%E5%85%B3%E7%B3%BB%E3%80%82" rel="noopener nofollow" class="external-link" href="http://cn.novogene.com/novo/hi_cpjs_206.html#:~:text=Hi%2DC%E6%8A%80%E6%9C%AF%E6%98%AF%E6%9F%93%E8%89%B2%E4%BD%93,%E7%A9%BA%E9%97%B4%E4%BD%8D%E7%BD%AE%E4%B8%8A%E7%9A%84%E5%85%B3%E7%B3%BB%E3%80%82" target="_blank">Hi-C技术的具体步骤如下</a>：<br>
<a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV1AW4y1y77A/?spm_id_from=333.337.search-card.all.click&amp;vd_source=4410d713724fce7981d19f087cc50ee6" rel="noopener nofollow" class="external-link" href="https://www.bilibili.com/video/BV1AW4y1y77A/?spm_id_from=333.337.search-card.all.click&amp;vd_source=4410d713724fce7981d19f087cc50ee6" target="_blank">Hi-C动画</a>:<br>
<br>
将细胞固定，使DNA与蛋白、蛋白与蛋白之间进行交联。<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401061117677.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">

<br>
进行酶切，使交联两侧产生粘性末端。<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401061118062.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">

<br>
末端修复，引入生物素标记，连接。<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401061118620.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401061118103.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">

说明一下，如何结合DNA和蛋白质：蛋白质末端与DNA末端结合的原因主要有以下几个：<br>
碱基对相互作用：DNA末端的碱基序列可以与蛋白质的氨基酸序列形成碱基对相互作用，从而促进二者的结合。例如，CTCF蛋白的N端有一个DNA结合结构域，该结构域可以与DNA末端的CT碱基对形成相互作用。<br>
氢键相互作用：DNA末端的磷酸基团可以与蛋白质的氨基酸侧链形成氢键相互作用，从而促进二者的结合。例如，HMG家族蛋白的C端有一个DNA结合结构域，该结构域可以与DNA末端的磷酸基团形成氢键相互作用。<br>
疏水相互作用：DNA末端的碱基和磷酸基团都具有一定的疏水性，可以与蛋白质的疏水性氨基酸侧链形成疏水相互作用，从而促进二者的结合。例如，组蛋白H1的C端有一个DNA结合结构域，该结构域可以与DNA末端的碱基和磷酸基团形成疏水相互作用。<br>
生物素并不是蛋白质与DNA末端结合的主要原因。生物素是一种小分子，可以与蛋白质的特定结构域结合，从而改变蛋白质的功能。例如，生物素可以与Hi-C技术中使用的蛋白质结合，使蛋白质能够与DNA末端结合。但是，生物素本身并不直接参与蛋白质与DNA末端的结合。


<br>
解交联，使DNA和蛋白、蛋白和蛋白分开。<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401061118964.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">

<br>
提取DNA，打断，捕获带有生物素标记片段，进行建库。<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401061119781.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">

<br>
测序。<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401061119685.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
Hi-C技术已经被广泛应用于三维基因组学的研究，在以下方面取得了重要进展：

<br>
<br>揭示了染色质的三维结构，包括染色质环（chromosome loop）、染色质TAD（topologically associated domain）等。
<br>发现了调控基因表达的三维基因组机制，例如CTCF在染色质TAD的形成和维持中的作用。
<br>为肿瘤、神经退行性疾病等疾病的发生发展提供了新的线索。
<br>Hi-C技术是三维基因组学研究的重要工具，为我们深入理解基因表达调控和疾病发生发展提供了新的视角。]]></description><link>术语\高通量染色体构象捕获技术(high-throughput-chromosome-conformation-capture,hi-c).html</link><guid isPermaLink="false">术语/高通量染色体构象捕获技术(High-throughput chromosome conformation capture,Hi-C).md</guid><pubDate>Thu, 20 Jun 2024 12:25:22 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401061117677.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401061117677.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[仡佬族]]></title><description><![CDATA[ 
 <br>仡佬族,古称“濮人”、“僚人”、“仡僚”，是贵州省内最古老的民族。商周时期，仡佬族先民濮人曾随周王伐纣。秦汉时期,濮人建立夜郎国,盛极西南。悠久的民族历史磨砺了仡佬族人民坚韧不拔、包容开放的民族格。独特的自然环境塑造了仡佬族人民多彩的民族文化。依山而居、采砂炼禾、巫傩崇拜,都是仡佬族人民传统社会生活的真实写照，使仡佬族闪耀于中国少数民族文化之林。<br>务川是仡佬族的发祥地，是仡佬族人重要的聚居地，也是仡佬文化遗存最丰富的地方。务川新田院子菁文化遗址考古实证证明,七千年前的新石期时期,务川就有人类活动。<br>以最早的祖先濮人为发端，经过长达三千多年的历史演变，佬族内部形成众多支系,历史上有 “青仡佬”，“红仡佬”，“水仡佬”，“打铁仡佬 ”、“剪头仡佬”等之分。1956 年，统一族称为“仡佬族”。2000 年第五次人口普查数据显示，全国佬族共有57.94 万人，其中 96.49% 聚居在贵州省内。贵州的仡佬族人口又主要分布在务川仡佬族苗族自治县、道真仡佬族苗族自治县、石阡县以及正安县、义县。仡佬族语言属汉藏语系，可分为黔中、黔中北、黔西南和黔西四大方言区。<br>魏晋南北朝时期，战乱频仍，濮人四散，这一时期仡佬族先人的称谓经历了由“濮人”向“僚人”的转变过程。唐宋时期，居住在湘西、贵州境内的僚人，开始“葛僚”、“仡僚”、“革老”、“仡佬”等见于史书。为了充实成都，获取劳动力，以李寿为首的成汉政权从南中、牂牁等地掠夺了大批僚人入蜀。据统计，当时入蜀的僚人有 58万之多。自此以后，僚人大规模北上移居巴蜀各地，僚人的社会活动重心随之北移。而僚人曾经聚居的牂牁，则因人口的骤然剧减，很少见诸史籍。]]></description><link>术语\仡佬族.html</link><guid isPermaLink="false">术语/仡佬族.md</guid><pubDate>Wed, 17 Jul 2024 09:37:29 GMT</pubDate></item><item><title><![CDATA[格鲁吉亚人]]></title><description><![CDATA[ 
 <br>非洲境外的最早的直立人，距今180万年，生活在<a data-href="高加索山" href="高加索山" class="internal-link" target="_self" rel="noopener nofollow">高加索山</a>一带。]]></description><link>术语\格鲁吉亚人.html</link><guid isPermaLink="false">术语/格鲁吉亚人.md</guid><pubDate>Thu, 20 Jun 2024 12:26:16 GMT</pubDate></item><item><title><![CDATA[宫古岛（Myaaku(Miyako) island）]]></title><description><![CDATA[ 
 <br>宫古岛（日语：宮古島／みやこじま Miyako-jima，琉球语：宮古／ミャーク Myaaku）位于日本琉球列岛宫古群岛，为宫古群岛内最大岛屿，距离冲绳岛约300公里。行政区划属于冲绳县宫古岛市。全岛面积158.87平方公里，周长117.5公里，最高点海拔114.8公尺，人口51,137人（2017年8月初统计）。<br>宫古岛的名称Miyako，根据琉球语宫古方言把各自音节拆开，分别是“mi（自己）”、“ya（住）”、“ku（地方）”，所谓miyako就是“自己居住的地方”的意思。<br>宫古岛东南端为“东平安名岬”，北西端“西平安名岬”。岛的北方，有池间岛，东北有大神岛，西方有伊良部岛、下地岛、来间岛；其中池间岛及来间岛分别有池间大桥与来间大桥相通，以伊良部大桥与伊良部岛相通。<br>宫古岛为珊瑚礁隆起后形成的石灰石岛屿，地势平坦，没有真正的河川，但因具有黏土层，具有丰富的地下水。]]></description><link>术语\宫古岛（myaaku(miyako)-island）.html</link><guid isPermaLink="false">术语/宫古岛（Myaaku(Miyako) island）.md</guid><pubDate>Thu, 20 Jun 2024 12:19:18 GMT</pubDate></item><item><title><![CDATA[共定位]]></title><description><![CDATA[ 
 <br>共定位（Colocalization）是指在基因组或染色体上的不同遗传变异或性状之间存在相关性或重叠的情况。在遗传研究中，共定位通常表示两个或多个遗传变异，如单核苷酸多态性（SNP）或突变，与不同性状或疾病之间存在关联。这表明这些遗传变异可能与某些生物学机制或致病机制有关，可以影响多个性状。<br>在研究中，研究人员会使用统计方法来评估不同遗传变异与不同性状之间的关联程度。如果这些遗传变异在某个基因区域或染色体上显示高度相关，那么可以认为它们共定位，可能影响相同或相似的生物学过程。共定位的研究有助于揭示遗传因素和性状之间的潜在关联，有助于理解疾病的发病机制和性状的遗传基础。]]></description><link>术语\共定位.html</link><guid isPermaLink="false">术语/共定位.md</guid><pubDate>Thu, 20 Jun 2024 12:20:51 GMT</pubDate></item><item><title><![CDATA[基于单倍群频率]]></title><description><![CDATA[ 
 <br>我已经看到不止一种共享单倍群分析了，其逻辑和实现是不太相同的。在这里我做一个简单的总结。<br><br>具体可以参见这篇：<a data-href="早期南岛人：进出台湾" href="文献及报道\文献\2023年阅读\早期南岛人：进出台湾.html" class="internal-link" target="_self" rel="noopener nofollow">早期南岛人：进出台湾</a>。<br>或者看看这篇论文：青藏高原及部分周边地区古代人群线粒体基因组研究
我们通过识别共有单倍群的方法来比较不同人群的遗传关系系。对矩阵的方式，把成对人群共享单倍群的最小频率数值视为该两个人群的共享单倍群值。而这两个人群非共享单倍群的值，即某一个单倍群在成对比较中人群有但是是另外一个人群没有的单倍群，视为单独有单倍群频率。人群共享、非共享单倍群的数值均除以总计数，而从归一化数据。据此得到的单倍群共享的单倍群数值来衡量人群之间的基因相似性的程度。
<br>具体操作如下：<a data-href="python：根据共享单倍群频率绘制人群热图" href="软件\python\数据科学与格式转换\python：根据共享单倍群频率绘制人群热图.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：根据共享单倍群频率绘制人群热图</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">、<a data-href="python：根据共享单倍群频率绘制人群柱状图" href="软件\python\数据科学与格式转换\python：根据共享单倍群频率绘制人群柱状图.html" class="internal-link" target="_self" rel="noopener nofollow">python：根据共享单倍群频率绘制人群柱状图</a>。<br><br>具体参考这篇：<a data-href="2024 PO 调查越南南岛语传播中的文化扩散和性别偏倚" href="文献及报道\文献\2024年阅读\7-12月\2024-po-调查越南南岛语传播中的文化扩散和性别偏倚.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="LiQuestionMarkGlyph" aria-label="LiQuestionMarkGlyph" data-icon="LiQuestionMarkGlyph" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" width="18px" height="18px" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="question-mark-glyph"><path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"></path><path d="M9.09009 9.00003C9.32519 8.33169 9.78924 7.76813 10.4 7.40916C11.0108 7.05019 12.079 6.94542 12.7773 7.06519C13.9093 7.25935 14.9767 8.25497 14.9748 9.49073C14.9748 11.9908 12 11.2974 12 14"></path><path d="M12 17H12.01"></path></svg></span>2024 PO 调查越南南岛语传播中的文化扩散和性别偏倚</a>
The haplotype sharing within and between populations was estimated as the proportion of pairs of identical sequences shared between populations using an in-house R script, which is provided upon request.
<br>具体操作如下：<br>
<br>数据准备：

<br>输入数据：包含每个个体的单倍型序列和对应的群体标签。数据可以是FASTA格式的序列文件，或者是一个包含个体ID、群体标签和序列的表格。


<br>数据读取：

<br>使用R中的函数读取序列数据和群体标签。例如，可以使用read.table或read.csv读取表格数据，或者使用Biostrings包读取FASTA序列。


<br>数据整理：

<br>将数据整理成一个数据框，其中每一行代表一个个体，包含以下列：

<br>个体ID
<br>群体标签
<br>单倍型序列




<br>计算群体内共享比例：

<br>对于每个群体：

<br>提取该群体的所有个体及其序列。
<br>生成所有可能的个体对（组合），计算总对数：n * (n - 1) / 2，其中n是该群体的个体数量。
<br>比较每对个体的序列是否相同，统计序列相同的个体对数量。
<br>计算共享比例：共享对数 / 总对数。




<br>计算群体间共享比例：

<br>对于每一对不同的群体：

<br>提取两个群体的所有个体及其序列。
<br>生成跨群体的个体对，总对数为n1 * n2，其中n1和n2是两个群体的个体数量。
<br>比较每对个体的序列是否相同，统计序列相同的个体对数量。
<br>计算共享比例：共享对数 / 总对数。




<br>结果汇总：

<br>将计算得到的群体内和群体间共享比例整理成一个表格或矩阵，方便后续分析和可视化。


]]></description><link>术语\共享单倍群分析-(sharing-haplogroup-analysis).html</link><guid isPermaLink="false">术语/共享单倍群分析 (Sharing haplogroup analysis).md</guid><pubDate>Wed, 30 Oct 2024 01:48:58 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[估计突变率（Estimating mutation rates）]]></title><description><![CDATA[ 
 <br>DNA序列以多种方式进化，其中最直接的是在单个核苷酸中积累变化或突变，当基因组相互比对时导致单碱基差异。大多数对分歧和物种形成时间的估计都是基于这种比对，因此突变累积的速率是一个关键的缩放参数。<br>有两种方法用于估计突变率。<br>
<br>直接的方法：随着<a data-href="下一代测序（next-generation sequencing，NGS）" href="术语\下一代测序（next-generation-sequencing，ngs）.html" class="internal-link" target="_self" rel="noopener nofollow">下一代测序（next-generation sequencing，NGS）</a>的应用，采集全基因或者外显子组序列数据并直接识别亲子三人组中的新生突变。在这两种情况下，得到的估计 μg 是每代的突变率，因此需要进一步估计平均世代时间 tg 以转换为每年的突变率：μ = μg / tg。但是众所周知，从父母到子代的突变率并不是很多，也就是说，由于任何一次传播中涉及的突变数量很少，测序研究的另一个重要问题是假阳性和假阴性计数的校正。
<br>
Conrad, D.&nbsp;D.&nbsp;F. et&nbsp;al. Variation in genome-wide mutation rates within and between human families. Nature 43, 712–714 (2011).
复制
<br>
<br>间接的方法：使用自两个当今基因组的<a data-href="最近共同祖先时间(Time to most recent common ancestor，MRCA)" href="术语\最近共同祖先时间(time-to-most-recent-common-ancestor，mrca).html" class="internal-link" target="_self" rel="noopener nofollow">最近共同祖先时间(Time to most recent common ancestor，MRCA)</a>以来的时间 t 的独立估计，这两个基因组是从例如其祖先分化的物种形成事件的化石测年（例如C14同位素测年法）中得出的。根据此估计，连接基因组（通过其共同祖先）的谱系的平均突变率计算为μ= 2d / t，其中 d 是它们之间的序列分歧（即每个碱基对的替换数），t代表某个基因组距离<a data-href="最近共同祖先时间(Time to most recent common ancestor，MRCA)" href="术语\最近共同祖先时间(time-to-most-recent-common-ancestor，mrca).html" class="internal-link" target="_self" rel="noopener nofollow">最近共同祖先时间(Time to most recent common ancestor，MRCA)</a>的时间 。后者是直接从基因组序列比对中获得的，但是与 t 的估计相关的许多不确定性，例如化石分类的系统发育位置和祖先多态性的影响。以这种方式估计的突变率有时被称为系统发育率（phylogenetic rate）。
<br>
该种方法具体的问题在这里：[[从遗传差异推断种群分离时间]]。
复制
<br>基因组区域之间的突变率有所不同，因为它们受到序列内容和其他因素的影响，这意味着基于基因组不同子集的估计值可能会有所不同。<br>对于某些分析来说，更成问题的是，速率也可能在进化谱系之间或沿进化谱系变化，从而打破了<a data-href="分子钟定年方法(molecular dating approach)" href="术语\分子钟定年方法(molecular-dating-approach).html" class="internal-link" target="_self" rel="noopener nofollow">分子钟定年方法(molecular dating approach)</a>的假设。这意味着对系统发育树的一部分或某些物种估计的比率可能在其他地方无效。<br>另外，自然选择也可能导致上述2种测量方法之间存在差异：<br>
在家系谱系研究中，研究人员可以追踪家族成员的遗传信息，从而检测到一些可能是弱有害的突变，即对生存和繁殖有轻微不利影响的突变。然而，在进行物种间比较时，研究的时间尺度涵盖了较长的演化历史，而弱有害突变在这样的时间尺度上通常难以存活下来。这是因为在漫长的演化过程中，自然选择会淘汰对生存和繁殖有不利影响的突变，从而导致这些突变在较长时间尺度上的稀少或消失。因此，选择是导致两种遗传学研究方法之间差异的一个因素。
<br>因此，人们区分了<a data-href="新生突变率（de novo mutation rate）" href="术语\新生突变率（de-novo-mutation-rate）.html" class="internal-link" target="_self" rel="noopener nofollow">新生突变率（de novo mutation rate）</a>和固定的物种间差异或<a data-href="替换积累速率（substitutions accumulate）" href="术语\替换积累速率（substitutions-accumulate）.html" class="internal-link" target="_self" rel="noopener nofollow">替换积累速率（substitutions accumulate）</a>。后者是通过系统发育速率估计得出的，也称为替换率。<br>在中性位点（忽略其他因素的情况下），这两者应该是相等的，但在受选择作用的基因座中，比如线粒体DNA（mtDNA），<a data-href="新生突变率（de novo mutation rate）" href="术语\新生突变率（de-novo-mutation-rate）.html" class="internal-link" target="_self" rel="noopener nofollow">新生突变率（de novo mutation rate）</a>预计会更高（并且通常确实如此）。<br>
Ho, S.&nbsp;Y.&nbsp;W., Lanfear, R., Bromham, L. &amp; Phillips, M.&nbsp;J. Time-dependent rates of molecular evolution. Mol. Ecol. 20, 3087–3101 (2011).
<br>作者提到，在中性位点（即对生物体的适应性或生存没有影响的位点）时，<a data-href="新生突变率（de novo mutation rate）" href="术语\新生突变率（de-novo-mutation-rate）.html" class="internal-link" target="_self" rel="noopener nofollow">新生突变率（de novo mutation rate）</a>和替换率应该是相等的，因为中性位点上的突变在进化中没有被选择的压力。<br>
受选择的位点可能受到自然选择的压力，导致有利的突变在进化中被保存下来，而不利的突变会被淘汰。
<br>总的来说，新生突变率和替换率是遗传学中两个不同但相关的概念，它们在不同的遗传座位和遗传环境下可能会有显著差异。这些概念对于研究基因组的进化和遗传变异具有重要的意义。]]></description><link>术语\估计突变率（estimating-mutation-rates）.html</link><guid isPermaLink="false">术语/估计突变率（Estimating mutation rates）.md</guid><pubDate>Mon, 26 Aug 2024 02:56:20 GMT</pubDate></item><item><title><![CDATA[古环境DNA (Ancient environmental DNA, aeDNA)]]></title><description><![CDATA[ 
 <br>从古代环境样本中提取的DNA片段，这些样本可以包括土壤、沉积物、冰芯、洞穴沉积物、湖泊底泥、化石等。aeDNA来源于历史上曾经生活在这些环境中的各种生物（如植物、动物、微生物等），通过这些DNA片段可以重建过去的生态系统，揭示古代环境中的生物多样性和生态变化。<br>aeDNA的应用特别有价值，因为与传统的化石记录相比，它能够保留更为广泛的生物信息，不仅限于大体型生物或那些容易保存为化石的物种。通过分析aeDNA，研究人员可以了解过去生物的种类、群落组成、环境条件变化，甚至能够追踪物种的迁徙和进化。<br>然而，由于古代DNA通常已经降解并且受损，且与现代DNA相比含量较低，研究古环境DNA在技术和分析上面临许多挑战。这些挑战包括如何从样本中提取足够的DNA片段、如何将这些片段归类为具体的物种，以及如何进行系统发育分析来研究物种的演化关系。<br>总体而言，aeDNA技术为研究古代生态系统和环境变化提供了新的视角，能够揭示传统方法无法捕捉到的生物和生态信息。]]></description><link>术语\古环境dna-(ancient-environmental-dna,-aedna).html</link><guid isPermaLink="false">术语/古环境DNA (Ancient environmental DNA, aeDNA).md</guid><pubDate>Sun, 20 Oct 2024 04:14:44 GMT</pubDate></item><item><title><![CDATA[古崎文化(Gusuku Culture)]]></title><description><![CDATA[ 
 <br>Gusuku Culture（古崎文化）是指日本冲绳地区的一种考古文化，主要存在于公元12世纪至15世纪的时期。它得名于冲绳地区的一种独特的城堡或要塞式建筑，称为“gusuku”。<br>Gusuku Culture 是冲绳历史上一个重要的时期，标志着该地区的政治、社会和文化变革。这一时期的特点之一是大规模的城堡建设，这些城堡通常由石头和土壤构筑而成，用于行政、军事和居住目的。Gusuku 不仅是冲绳的政治和社会中心，还反映了当时的社会组织、文化传承和外部影响。<br>Gusuku Culture 时期的考古遗址包括城堡遗址、陶器、石器、骨器等，这些遗物提供了了解当时社会、经济和文化特征的重要线索。研究人员通过对这些遗址和遗物的分析，逐渐了解了 Gusuku Culture 时期的人类活动、生活方式、贸易关系等信息。<br>Gusuku Culture 对于研究冲绳历史、考古学和文化研究具有重要意义，帮助我们更好地理解冲绳地区在中世纪时期的社会发展和文化变迁。]]></description><link>术语\古崎文化(gusuku-culture).html</link><guid isPermaLink="false">术语/古崎文化(Gusuku Culture).md</guid><pubDate>Thu, 20 Jun 2024 12:26:29 GMT</pubDate></item><item><title><![CDATA[古丝绸之路]]></title><description><![CDATA[ 
 <br>丝绸之路是指从汉唐古都长安/洛阳出发，经甘肃、新疆，到中亚、西亚、欧洲，并联结地中海各国的陆上通道，最远到达西亚诸国的陆上贸易通道，东汉时班超再次出使西域打通了荒废已久的丝绸之路，将东端延伸到京师洛阳，西端延伸到欧洲（罗马）。这条道路也被称为“陆上丝绸之路”，以区别日后另外两条冠以“丝绸之路”名称的交通路线。因为由这条路西运的货物中以丝绸制品的影响最大，故得此名。其基本走向定于两汉时期，包括南道、中道、北道三条路线。但实际上，丝绸之路并非是一条 “路”，而是一个穿越山川、沙漠和海洋且没有标识的道路网络，并且丝绸也只是货物中的一种。<br>广义的丝绸之路指从上古开始陆续形成的，遍及欧亚大陆甚至包括北非和东非在内的长途商业贸易和文化交流线路的总称。除了上述的路线之外，还包括约于前5世纪形成的草原丝绸之路、和与中古初年形成的西北丝绸之路，在宋代以后发挥巨大作用的海上丝绸之路开始兴盛，但在宋初西北丝绸之路被取代，成为路上交流通道的则是南方丝绸之路。元代开始是古代海上活动最为频繁、海外贸易最为发达的时期，船运能力猛增。于是，海上丝绸之路的重要性超过了陆上丝绸之路，使欧亚的交流达到了空前的程度。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240627113812.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\古丝绸之路.html</link><guid isPermaLink="false">术语/古丝绸之路.md</guid><pubDate>Thu, 27 Jun 2024 03:39:08 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240627113812.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240627113812.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[广西]]></title><description><![CDATA[ 
 <br>广西壮族自治区，简称“桂”，中华人民共和国省级行政区，首府南宁市，地处中国地势第二台阶中的云贵高原东南边缘，两广丘陵西部；主要分布有山地、丘陵、台地、平原等类型地貌，中部和南部多丘陵平地，呈盆地状，有“广西盆地”之称 ；行政区域土地面积23.76万平方千米。]]></description><link>术语\广西.html</link><guid isPermaLink="false">术语/广西.md</guid><pubDate>Thu, 20 Jun 2024 12:19:18 GMT</pubDate></item><item><title><![CDATA[过氧化物酶体增殖物激活受体γ共激活因子-1α（PGC-1α）]]></title><description><![CDATA[ 
 <br>一种转录共激活因子，主要在调节细胞能量代谢和线粒体生物生成中发挥关键作用。PGC-1α的活动受到多种生理和环境因素的影响，包括低温、饥饿、运动和多种激素信号。<br><br>
<br>
线粒体生物生成和呼吸作用

<br>PGC-1α通过与不同的核受体和其他转录因子（如NRF1, NRF2和ERRα）相互作用，促进线粒体DNA的复制和转录，增加线粒体数量，提高氧化磷酸化的效率。


<br>
糖代谢

<br>在肝脏中，PGC-1α与HNF4α和FOXO1相互作用，调节糖异生相关基因的表达，影响血糖水平。


<br>
脂肪酸氧化

<br>在肌肉和肝脏中，PGC-1α激活PPARα，促进脂肪酸的氧化和能量产生。


<br>
热生成

<br>在棕色脂肪组织中，PGC-1α协同PRDM16激活UCP1表达，促进热生成，有助于体温维持和能量消耗。


<br>
抗氧化防御

<br>PGC-1α可以提升抗氧化酶的表达，如超氧化物歧化酶和谷胱甘肽过氧化物酶，帮助细胞应对氧化压力。


<br><br>PGC-1α的活性受到多种机制的精细调控，包括：<br>
<br>翻译后修饰：如磷酸化、乙酰化和泛素化，这些修饰可以改变PGC-1α的稳定性、亲和力或其激活状态。
<br>转录调控：一些激素（例如甲状腺激素和胰岛素）和信号通路（如AMPK和SIRT1）可以增加或减少PGC-1α的表达。
<br><br>PGC-1α的异常表达与多种疾病相关，包括肥胖、2型糖尿病、心血管疾病和神经退行性疾病。因此，PGC-1α不仅是能量代谢的重要调节器，也是潜在的治疗靶点。<br>这种转录共激活因子在调节细胞内能量平衡的多个方面发挥作用，表明了其在维持生理平衡和应对环境压力中的中心角色。]]></description><link>术语\过氧化物酶体增殖物激活受体γ共激活因子-1α（pgc-1α）.html</link><guid isPermaLink="false">术语/过氧化物酶体增殖物激活受体γ共激活因子-1α（PGC-1α）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:03 GMT</pubDate></item><item><title><![CDATA[哈萨克族]]></title><description><![CDATA[ 
 <br>哈萨克族是主要居住在哈萨克斯坦的土耳其民族，也有一定人口在中国新疆。他们传统上是游牧民族，以畜牧业为生，历史上经历了多次领土和政治变迁。]]></description><link>术语\哈萨克族.html</link><guid isPermaLink="false">术语/哈萨克族.md</guid><pubDate>Thu, 27 Jun 2024 03:26:53 GMT</pubDate></item><item><title><![CDATA[海德堡人]]></title><description><![CDATA[ 
 <br>海德堡在德国地区，距今70万年。<br>
一般认为有2种海德堡人。<br>
<br>非洲海德堡人；
<br>欧洲海德堡人。<br>
科学家认为，它与<a data-href="尼安德特人（Neanderthal）" href="术语\尼安德特人（neanderthal）.html" class="internal-link" target="_self" rel="noopener nofollow">尼安德特人（Neanderthal）</a>和<a data-href="丹尼索瓦人（Denisovan）" href="术语\丹尼索瓦人（denisovan）.html" class="internal-link" target="_self" rel="noopener nofollow">丹尼索瓦人（Denisovan）</a>的关系比较近。
]]></description><link>术语\海德堡人.html</link><guid isPermaLink="false">术语/海德堡人.md</guid><pubDate>Thu, 20 Jun 2024 12:26:17 GMT</pubDate></item><item><title><![CDATA[海南]]></title><description><![CDATA[ 
 <br>海南省  ，简称“琼”，是中华人民共和国最南端的省级行政区， 省会海口市；地处中国华南地区，北以琼州海峡与广东划界，西临北部湾与广西、越南相对，东濒南海与台湾对望，东南和南部在南海与菲律宾、文莱、马来西亚为邻；海南地势为中部高四周低，中间高耸，呈穹窿山地形 ；属热带海洋性季风气候；陆地总面积3.54万平方公里，管辖海域总面积约200万平方公里。 ]]></description><link>术语\海南.html</link><guid isPermaLink="false">术语/海南.md</guid><pubDate>Thu, 20 Jun 2024 12:19:21 GMT</pubDate></item><item><title><![CDATA[汉藏语系]]></title><description><![CDATA[ 
 <br><a data-href="汉族" href="汉族" class="internal-link" target="_self" rel="noopener nofollow">汉族</a>，<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>]]></description><link>术语\汉藏语系.html</link><guid isPermaLink="false">术语/汉藏语系.md</guid><pubDate>Thu, 20 Jun 2024 12:27:39 GMT</pubDate></item><item><title><![CDATA[和平文化（HòabÌnhian Culture)]]></title><description><![CDATA[ 
 <br>东南亚中石器时代至新石器时代早期的文化。<br>和平文化是中南半岛国家和苏门答腊岛普遍存在的旧石器时代晚期到新石器时代早中期的文化，是狩猎采集人群向定居人群过渡阶段的一种独特的石核工具文化。<br>该文化最早由法国学者科拉妮于上世纪20年代首次在越南北部的和平省发现而得名，并于1932年在首届远东史前史学家大会上正式公布。<br>年代约为前18500～前6000年间。该文化居民主要从事采集、狩猎和捕捞。重要的文化遗址包括老挝Pha Faen遗址、马来西亚Gua Cha遗址等。<br>2015年中国西南云南硝洞岩厦发现距今43500年亚洲最古老的和平文化遗址，这一发现显示广泛分布于东南亚的和平文化可能起源于澜沧江-湄公河上游的中国云南地区。]]></description><link>术语\和平文化（hòabìnhian-culture).html</link><guid isPermaLink="false">术语/和平文化（HòabÌnhian Culture).md</guid><pubDate>Thu, 20 Jun 2024 12:26:29 GMT</pubDate></item><item><title><![CDATA[河姆渡遗址]]></title><description><![CDATA[ 
 <br>河姆渡遗址，位于<a data-href="浙江" href="浙江" class="internal-link" target="_self" rel="noopener nofollow">浙江</a>省宁波市余姚市河姆渡镇河姆渡村的东北，距宁波市区约20千米，是<a data-href="中国南方" href="术语\中国南方.html" class="internal-link" target="_self" rel="noopener nofollow">中国南方</a>早期新石器时代（约7000—5000年前）遗址 。<br>
河姆渡遗址总面积达4万平方米，上下叠压着四个文化层。河姆渡遗址出土陶片达几十万片，还有陶器、骨器、石器以及植物遗存、动物遗骸、木构建筑遗迹等大量珍贵文物。河姆渡遗址的发现，为中国史学界和考古界提供了依据，证明长江流域是中华文明的重要发源地之一。]]></description><link>术语\河姆渡遗址.html</link><guid isPermaLink="false">术语/河姆渡遗址.md</guid><pubDate>Thu, 20 Jun 2024 12:20:13 GMT</pubDate></item><item><title><![CDATA[核-线片段（nuclear-mitochondrial DNA segments, NUMTs）]]></title><description><![CDATA[ 
 <br>线粒体 DNA 掺入生物体核基因组是一种持续存在的现象；这些核线粒体插入，称为“NUMTs”，]]></description><link>术语\核-线片段（nuclear-mitochondrial-dna-segments,-numts）.html</link><guid isPermaLink="false">术语/核-线片段（nuclear-mitochondrial DNA segments, NUMTs）.md</guid><pubDate>Sat, 02 Nov 2024 07:26:52 GMT</pubDate></item><item><title><![CDATA[核内复制机器1（Ribonucleotide Reductase Regulatory Subunit M1,RRM1) 1]]></title><description><![CDATA[ 
 <br>RRM1代表核内复制机器1（Ribonucleotide Reductase Regulatory Subunit M1）。RRM1是与细胞核DNA复制和核内生物合成有关的蛋白质。虽然它不直接与线粒体相关，但它在细胞核中的生物合成过程中可能会间接影响线粒体功能。]]></description><link>术语\核内复制机器1（ribonucleotide-reductase-regulatory-subunit-m1,rrm1)-1.html</link><guid isPermaLink="false">术语/核内复制机器1（Ribonucleotide Reductase Regulatory Subunit M1,RRM1) 1.md</guid><pubDate>Thu, 20 Jun 2024 12:20:40 GMT</pubDate></item><item><title><![CDATA[恒定速率（invariable,I）]]></title><description><![CDATA[ 
 <br>假设位点间替换速率独立且恒定。]]></description><link>术语\恒定速率（invariable,i）.html</link><guid isPermaLink="false">术语/恒定速率（invariable,I）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:54 GMT</pubDate></item><item><title><![CDATA[横北遗址]]></title><description><![CDATA[ 
 <br><img alt="横北遗址所在地" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%A8%AA%E5%8C%97%E9%81%97%E5%9D%80%E6%89%80%E5%9C%A8%E5%9C%B0.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="横北遗址挖掘" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%A8%AA%E5%8C%97%E9%81%97%E5%9D%80%E6%8C%96%E6%8E%98.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
横北倗国墓地位于绛县县城以西约11公里的横水镇横北村北约1000米处。墓地南北长约200米，东西宽约175米，面积约35000平方米。<br>
2004年12月至2007年12月，山西省考古研究所主持进行了大面积发掘。共发掘墓葬1326座，其中西周早期偏晚一直到西周晚期墓葬1299座。在发掘区域内共发现西周时期的车马坑或马坑35座。<br>出土文物有带有“倗伯”铭文的青铜器和先秦史籍《周礼》中记载的“荒帷”。以及大量的鼎、簋、甗、盘、盉、鬲、盆、觚、爵、觯、尊、壶、卣、方彝、钟等青铜礼乐器，鬲、罐、豆、盆、簋、尊、壶、瓮、瓿、杯等陶器，豆、壶、瓿等原始瓷器，漆器、玉石器、蚌贝器、串饰、骨器、铜车马器、铜饰件、铜兵器（戈、矛、镞）等。<br>2004年被运城市人民政府公布为市级文物保护单位，2013年5月，被国务院公布为第七批全国重点文物保护单位。]]></description><link>术语\横北遗址.html</link><guid isPermaLink="false">术语/横北遗址.md</guid><pubDate>Thu, 20 Jun 2024 12:20:12 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%A8%AA%E5%8C%97%E9%81%97%E5%9D%80%E6%89%80%E5%9C%A8%E5%9C%B0.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%A8%AA%E5%8C%97%E9%81%97%E5%9D%80%E6%89%80%E5%9C%A8%E5%9C%B0.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[红山文化]]></title><description><![CDATA[ 
 <br>红山文化是中国北方地区较重要的新石器时期文化，因发现于热河省（今属内蒙古）的红山而得名，是一个以农业为主的新石器时代文化，距今约5000至8000年前，持续时间约2000年。该文化最早发现于1908年，在1924、1930和1935年由日本考古学者进行了连续发掘。<br>
<img alt="红山文化" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%BA%A2%E5%B1%B1%E6%96%87%E5%8C%96.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>红山文化（公元前4700～2900）之前是兴隆洼文化（公元前6200～5400）、新乐文化（公元前5300～4800）以及赵宝沟文化（公元前4500～4000），红山文化之后是小河沿文化和夏家店下层文化（公元前2000～1000）。红山文化分为早、中、晚三期，<br>
<br>早期距今6500～6000年左右，是红山文化的孕育和形成期；
<br>中期距今6000～5500年左右，红山文化进入繁荣期；
<br>晚期距今5500～5000年，红山文化进入鼎盛期。
<br>
孙妙凝.&nbsp;<a data-tooltip-position="top" aria-label="http://www.kaogu.cn/cn/kaogurenwu/xuezhefengcai/2016/0318/53325.html" rel="noopener nofollow" class="external-link" href="http://www.kaogu.cn/cn/kaogurenwu/xuezhefengcai/2016/0318/53325.html" target="_blank">红山文化已进入文明时代—访中国社会科学院考古研究所研究员刘国祥</a>. 中国考古. 中国社会科学网.&nbsp;[2017-04-15]. （原始内容<a data-tooltip-position="top" aria-label="https://web.archive.org/web/20210215164811/http://www.kaogu.cn/cn/kaogurenwu/xuezhefengcai/2016/0318/53325.html" rel="noopener nofollow" class="external-link" href="https://web.archive.org/web/20210215164811/http://www.kaogu.cn/cn/kaogurenwu/xuezhefengcai/2016/0318/53325.html" target="_blank">存档</a>于2021-02-15）
]]></description><link>术语\红山文化.html</link><guid isPermaLink="false">术语/红山文化.md</guid><pubDate>Thu, 20 Jun 2024 12:26:46 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%BA%A2%E5%B1%B1%E6%96%87%E5%8C%96.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%BA%A2%E5%B1%B1%E6%96%87%E5%8C%96.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[后期有丝分裂组织（post-mitotic tissues）]]></title><description><![CDATA[ 
 <br>指的是已经完成有丝分裂并停止细胞分裂的组织或细胞类型。这些组织或细胞不再经历细胞分裂，通常是成熟的或终末分化的状态。与之相对的是 "mitotic tissues"，指的是仍然能够进行有丝分裂的组织或细胞类型。]]></description><link>术语\后期有丝分裂组织（post-mitotic-tissues）.html</link><guid isPermaLink="false">术语/后期有丝分裂组织（post-mitotic tissues）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:56 GMT</pubDate></item><item><title><![CDATA[后验包含概率(Posterior Inclusion Probability,PIP)]]></title><description><![CDATA[ 
 <br>后验概率的一种。原理基于贝叶斯概率公式。]]></description><link>术语\后验包含概率(posterior-inclusion-probability,pip).html</link><guid isPermaLink="false">术语/后验包含概率(Posterior Inclusion Probability,PIP).md</guid><pubDate>Thu, 20 Jun 2024 12:22:35 GMT</pubDate></item><item><title><![CDATA[后验概率]]></title><description><![CDATA[ 
 <br>先验概率和后验概率是与贝叶斯概率更新有关的两个概念。假如某一不确定事件发生的主观概率 因为某个新情况的出现 而发生了改变，那么改变前的那个概率就被叫做先验概率，改变后的概率就叫后验概率。<br><br><img alt="Pasted image 20230807110511" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230807110511.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
后验概率：看到事情结果的情况下，分析结果来自某一原因的概率。后验概率随着事件的发生，事物的变化而变化。]]></description><link>术语\后验概率.html</link><guid isPermaLink="false">术语/后验概率.md</guid><pubDate>Thu, 20 Jun 2024 12:22:37 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230807110511.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230807110511.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[华莱士线（Wallace's Line）]]></title><description><![CDATA[ 
 <br>华莱士线（Wallace's Line）是<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E7%94%9F%E7%89%A9%E5%9C%B0%E7%90%86%E5%AD%B8" rel="noopener nofollow" class="external-link" title="生物地理学" href="https://zh.wikipedia.org/wiki/%E7%94%9F%E7%89%A9%E5%9C%B0%E7%90%86%E5%AD%B8" target="_blank">生物地理学</a>中，区分<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E6%9D%B1%E6%B4%8B%E5%8D%80" rel="noopener nofollow" class="external-link" title="东洋区" href="https://zh.wikipedia.org/wiki/%E6%9D%B1%E6%B4%8B%E5%8D%80" target="_blank">东洋区</a>和<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E6%BE%B3%E5%A4%A7%E6%8B%89%E8%A5%BF%E4%BA%9E%E5%8D%80" rel="noopener nofollow" class="external-link" title="澳大拉西亚区" href="https://zh.wikipedia.org/wiki/%E6%BE%B3%E5%A4%A7%E6%8B%89%E8%A5%BF%E4%BA%9E%E5%8D%80" target="_blank">澳大拉西亚区</a>的分界线。1854年到1862年英国动物地理学者<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E4%BA%9E%E7%88%BE%E4%BD%9B%E5%BE%B7%C2%B7%E7%BE%85%E7%B4%A0%C2%B7%E8%8F%AF%E8%90%8A%E5%A3%AB" rel="noopener nofollow" class="external-link" title="亚尔佛德·罗素·华莱士" href="https://zh.wikipedia.org/wiki/%E4%BA%9E%E7%88%BE%E4%BD%9B%E5%BE%B7%C2%B7%E7%BE%85%E7%B4%A0%C2%B7%E8%8F%AF%E8%90%8A%E5%A3%AB" target="_blank">亚尔佛德·罗素·华莱士</a>在马来群岛研究岛屿上的动物时，注意到<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E5%A9%86%E7%BE%85%E6%B4%B2" rel="noopener nofollow" class="external-link" title="婆罗洲" href="https://zh.wikipedia.org/wiki/%E5%A9%86%E7%BE%85%E6%B4%B2" target="_blank">婆罗洲</a>与<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E8%98%87%E6%8B%89%E5%A8%81%E8%A5%BF%E5%B3%B6" rel="noopener nofollow" class="external-link" title="苏拉威西岛" href="https://zh.wikipedia.org/wiki/%E8%98%87%E6%8B%89%E5%A8%81%E8%A5%BF%E5%B3%B6" target="_blank">苏拉威西岛</a>、<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E5%B3%87%E9%87%8C%E5%B3%B6" rel="noopener nofollow" class="external-link" title="峇里岛" href="https://zh.wikipedia.org/wiki/%E5%B3%87%E9%87%8C%E5%B3%B6" target="_blank">峇里岛</a>和<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E9%BE%8D%E7%9B%AE%E5%B3%B6" rel="noopener nofollow" class="external-link" title="龙目岛" href="https://zh.wikipedia.org/wiki/%E9%BE%8D%E7%9B%AE%E5%B3%B6" target="_blank">龙目岛</a>之间，似乎有一条隐形的界线将两边的生物分开；界线以西接近<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E6%9D%B1%E5%8D%97%E4%BA%9E" rel="noopener nofollow" class="external-link" title="东南亚" href="https://zh.wikipedia.org/wiki/%E6%9D%B1%E5%8D%97%E4%BA%9E" target="_blank">东南亚</a>的生物相，界线以东则接近<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E6%96%B0%E5%B9%BE%E5%85%A7%E4%BA%9E" rel="noopener nofollow" class="external-link" title="新几内亚" href="https://zh.wikipedia.org/wiki/%E6%96%B0%E5%B9%BE%E5%85%A7%E4%BA%9E" target="_blank">新几内亚</a>的生物相。华莱士注意到：峇里岛的鸟类与爪哇岛几乎相同，但在距峇里岛仅约30公里的龙目岛，却只有50%的鸟类相同。为纪念他的发现，科学界将划分这两区的界线称为华莱士线。]]></description><link>术语\华莱士线（wallace's-line）.html</link><guid isPermaLink="false">术语/华莱士线（Wallace's Line）.md</guid><pubDate>Thu, 20 Jun 2024 12:19:12 GMT</pubDate></item><item><title><![CDATA[华龙洞]]></title><description><![CDATA[ 
 <br>位于<a data-href="安徽" href="安徽" class="internal-link" target="_self" rel="noopener nofollow">安徽</a>省东至县。<img alt="Pasted image 20230803144744" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803144744.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\华龙洞.html</link><guid isPermaLink="false">术语/华龙洞.md</guid><pubDate>Thu, 20 Jun 2024 12:37:57 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803144744.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803144744.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[化石标定（fossil calibration）]]></title><description><![CDATA[ 
 ]]></description><link>术语\化石标定（fossil-calibration）.html</link><guid isPermaLink="false">术语/化石标定（fossil calibration）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:34 GMT</pubDate></item><item><title><![CDATA[回归分析因子（REGR）]]></title><description><![CDATA[ 
 <br>REGR的全称是"Regression"，即回归分析。回归分析是一种统计方法，用于研究自变量和因变量之间的关系。<br>下面是一个简单的例子来说明如何进行REGR计算并解读结果：<br>假设我们想研究身高（自变量）对体重（因变量）的影响。我们收集了以下10个人的身高和体重数据：<br><br>现在我们可以使用回归分析来计算REGR结果，以评估身高对体重的影响程度。<br>
<br>打开SPSS软件并加载数据集。
<br>选择菜单栏中的"Analyze"（分析），然后选择"Regression"（回归）。
<br>在回归分析对话框中，将体重作为因变量，身高作为自变量，并点击"OK"（确定）。
<br>SPSS将计算回归模型的各种统计指标，其中包括REGR因子。
<br>在这个例子中，假设回归模型的结果显示REGR因子为0.75。这意味着身高能够解释体重变异的75%。换句话说，身高对体重有较强的解释力度，可以解释体重变异的大部分。<br>这个结果可以解读为，身高对体重有一定的预测能力，但还有其他因素也可能对体重产生影响，因为REGR因子不是完全达到1。可能还有其他因素，如基因、饮食和生活习惯等，也会对体重产生影响。<br>需要注意的是，这只是一个简单的例子，实际的回归分析可能涉及更多的变量和更复杂的模型。解读REGR因子时，还需要考虑其他统计指标和模型的适用性来全面评估变量之间的关系。]]></description><link>术语\回归分析因子（regr）.html</link><guid isPermaLink="false">术语/回归分析因子（REGR）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:35 GMT</pubDate></item><item><title><![CDATA[回辉人 Utsat]]></title><description><![CDATA[ 
 ]]></description><link>术语\回辉人-utsat.html</link><guid isPermaLink="false">术语/回辉人 Utsat.md</guid><pubDate>Thu, 20 Jun 2024 12:28:06 GMT</pubDate></item><item><title><![CDATA[回族]]></title><description><![CDATA[ 
 <br>回族是中国的一个主要穆斯林民族，他们的祖先是古代丝绸之路上的阿拉伯和波斯商人与当地汉族人的混血后代。回族文化深受伊斯兰教影响，以及中国本土文化的融合。]]></description><link>术语\回族.html</link><guid isPermaLink="false">术语/回族.md</guid><pubDate>Thu, 27 Jun 2024 03:27:22 GMT</pubDate></item><item><title><![CDATA[汇总采样策略（pooled sampling strategy）]]></title><description><![CDATA[ 
 <br>进行采样时，由于样本量过多，不利于进行整体人口统计和描述。因此需要进行抽样调查，这种策略被用于完成上述目标。]]></description><link>术语\汇总采样策略（pooled-sampling-strategy）.html</link><guid isPermaLink="false">术语/汇总采样策略（pooled sampling strategy）.md</guid><pubDate>Mon, 26 Aug 2024 01:39:30 GMT</pubDate></item><item><title><![CDATA[活性氧种(Reactive Oxygen Species,ROS)]]></title><description><![CDATA[ 
 <br>ROS是活性氧种（Reactive Oxygen Species）的缩写。这是一类包括氧自由基和非自由基氧化剂的化学物质，它们在生物体内发挥重要的生理和病理作用。ROS包括超氧根离子（O2-）、过氧化氢（H2O2）、羟自由基（•OH）等。在正常的生理状态下，细胞内会产生一定量的ROS，这对于细胞信号传导、调节生长和凋亡等生理过程是至关重要的。然而，当ROS的产生超出了细胞的清除能力时，就会导致细胞氧化应激，损伤细胞的生物大分子，如DNA、蛋白质和脂质，从而引发疾病发生，如癌症、心血管疾病和神经退行性疾病等。ROS也被认为是细胞衰老的重要因素之一。]]></description><link>术语\活性氧种(reactive-oxygen-species,ros).html</link><guid isPermaLink="false">术语/活性氧种(Reactive Oxygen Species,ROS).md</guid><pubDate>Thu, 20 Jun 2024 12:21:44 GMT</pubDate></item><item><title><![CDATA[基底欧亚人（basal Eurasian ancestry）]]></title><description><![CDATA[ 
 <br>基底欧亚人，是一种假设的有很少或者没有尼安德特人成分的血统成分，但其和其他欧亚人群相比并没有与撒哈拉以南成分享有更多等位基因。<br>
出于其所处的地理位置和分化位置，可以称呼其为老中东成分。现代人群中，贝都因人拥有最高的老中东成分，可能是老中东人群的直接后裔。 ]]></description><link>术语\基底欧亚人（basal-eurasian-ancestry）.html</link><guid isPermaLink="false">术语/基底欧亚人（basal Eurasian ancestry）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:09 GMT</pubDate></item><item><title><![CDATA[基因级稀有变异关联研究（RVAS）]]></title><description><![CDATA[ 
 <br>基因级稀有变异关联研究（RVAS）是一种用于寻找与人类疾病或其他复杂性状相关的稀有遗传变异（通常是单核苷酸多态性或少数个别基因变异）的遗传关联研究方法。RVAS 的目标是识别与特定基因或一组基因中的稀有变异相关的性状或疾病。<br>RVAS的关键特点和步骤包括：<br>
<br>稀有遗传变异分析：首先，研究人员会对大量个体进行全基因组测序，以识别个体之间的稀有遗传变异。这些稀有变异通常不会在广泛的人群中普遍存在，因此需要大样本才能捕获足够的信息。
<br>关联分析：在收集稀有变异信息后，研究人员会对这些变异与感兴趣性状或疾病之间的关联进行统计分析。这些分析可能包括逐个检查每个变异，或者将变异聚合到特定基因或基因集合中进行分析。
<br>关联的统计显著性：RVAS通常要处理多重比较问题，因为需要考虑多个遗传变异。因此，研究人员会使用适当的统计方法来确定与性状或疾病相关的变异是否在统计上显著。通常，这需要进行校正以降低偶然发现的风险。
<br>功能注释：一旦发现与性状或疾病相关的稀有变异，研究人员通常会进行功能注释，以了解这些变异可能如何影响基因功能，从而影响性状或疾病的发展。
<br>RVAS方法的应用范围涉及多种复杂性疾病，如癌症、遗传性疾病、心血管疾病、精神疾病等。它有助于识别那些在常见变异研究中可能被忽略的基因或途径，从而增加了我们对遗传疾病机制的理解。RVAS需要大规模样本，以检测到稀有遗传变异的信号，因此通常需要合并多个研究以增加统计能力。这种方法已经在推动遗传学研究领域的进展中发挥了重要作用]]></description><link>术语\基因级稀有变异关联研究（rvas）.html</link><guid isPermaLink="false">术语/基因级稀有变异关联研究（RVAS）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:36 GMT</pubDate></item><item><title><![CDATA[基因间区域（intergenic regions）]]></title><description><![CDATA[ 
 <br>基因间区域（intergenic regions）是位于两个相邻基因之间的DNA序列，不包含任何已知的基因编码区域。这些区域可能含有调控元件（如启动子、增强子和静默子），对邻近基因的表达起调控作用。基因间区域的长度可以从很短到数千甚至数百万碱基对，这些区域在基因组中占据大量的空间，可能涉及基因组的结构组织和长距离的基因表达调控。]]></description><link>术语\基因间区域（intergenic-regions）.html</link><guid isPermaLink="false">术语/基因间区域（intergenic regions）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:58 GMT</pubDate></item><item><title><![CDATA[基因频率和表达的综合选择 (Integrated Selection on Allele Frequency and Expression，iSAFE)]]></title><description><![CDATA[ 
 <br>一种用于检测基因组中自然选择和基因表达之间相互作用的研究方法。它结合了基因频率和基因表达数据，旨在识别在进化过程中受到积极自然选择的基因，以及这些基因是否与特定表达模式相关联。<br>具体来说，iSAFE通过比较不同种群之间的基因频率和表达差异，寻找那些在某些种群中具有显著频率增加的基因，同时这些基因在表达上也发生了显著变化。这可以暗示这些基因在进化过程中受到了正选择，并且它们的表达变化可能与适应性特征或环境适应有关。<br>iSAFE方法的核心思想是通过综合分析基因频率和基因表达数据，来更全面地理解自然选择对基因组的影响。它可以帮助研究人员鉴定在不同物种或人群中可能受到积极自然选择的基因，以及这些基因如何通过改变表达模式来适应不同的环境条件。这对于深入理解基因组进化和生物适应性具有重要意义。]]></description><link>术语\基因频率和表达的综合选择-(integrated-selection-on-allele-frequency-and-expression，isafe).html</link><guid isPermaLink="false">术语/基因频率和表达的综合选择 (Integrated Selection on Allele Frequency and Expression，iSAFE).md</guid><pubDate>Thu, 20 Jun 2024 12:22:41 GMT</pubDate></item><item><title><![CDATA[基因失活变异（Protein-truncating Loss-of-Function，pLoF）]]></title><description><![CDATA[ 
 <br>蛋白质的缺失或不完整（基因失活变异）]]></description><link>术语\基因失活变异（protein-truncating-loss-of-function，plof）.html</link><guid isPermaLink="false">术语/基因失活变异（Protein-truncating Loss-of-Function，pLoF）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:58 GMT</pubDate></item><item><title><![CDATA[基因适应（Exaptation）]]></title><description><![CDATA[ 
 <br>又被称为基因驯化（Domestication）。<br>
转座子原本具有自我复制和移动能力，且最初其功能可能与其在宿主中的现有功能无关，但经过时间的积累和进化压力的作用，被宿主基因组“俘获”或“征用”用于新的功能。转座子失去了原本的移动性，其基因部分被宿主基因组整合，并赋予了新的生物学功能。]]></description><link>术语\基因适应（exaptation）.html</link><guid isPermaLink="false">术语/基因适应（Exaptation）.md</guid><pubDate>Mon, 21 Oct 2024 01:58:05 GMT</pubDate></item><item><title><![CDATA[基因水平转移（horizontal gene transfer，HGT）]]></title><description><![CDATA[ 
 <br>基因水平转移（英语：horizontal gene transfer，缩写：HGT）又称水平基因克隆、"横向转基因"或基因侧向转移（lateral gene transfer，缩写：LGT），指生物个体之间互相遗传物质而通过生殖将其传给子代的过程。基因水平转移对于细菌的进化至关重要，但高等生物也会发生基因水平转移。<br>在细菌之中，基因水平转移的常见途径包括接合、转导及转化。质粒与温和噬菌体是常见的细菌基因水平转移的载体。例如，在细菌获得抗生素抗药性过程中，抗药性基因可通过基因水平转移迅速在细菌之间传播，最终使整个菌群快速获得对抗生素的抗药性。<br>
<br>接合（英文：Conjugation，又译结合），又称为接合作用、细菌接合，是发生于原核生物间的现象，指的是两个细菌之间发生的一种遗传物质交换现象，属于细菌有性生殖的一个重要阶段。在接合现象发生时，两个细胞直接接合或者通过类似于桥一样的通道接合，并且发生基因的转移。这种现象是在1946年被Joshua Lederberg和Edward Tatum所发现，接合与转化和转导都被称作基因水平转移机制，注意的是这种机制并不一定需要两个细胞-细胞间的直接接触。
<br>转导（英语：Transduction）是指因病毒（即噬菌体）入侵而将一个细菌的 DNA 片段转置到另一细菌中的过程，亦可指透过病毒载体把外来 DNA 带入到细菌中的过程。“转导作用”与摄取外源遗传物质改变染色体的“转化作用”、以及两个细菌碰触后交换遗传物质的“接合作用”，是目前已知3种细菌交换基因的方式.
<br>转化（英语：Transformation）又译转形，即细胞通过摄取外源遗传物质(DNA 或 RNA)而发生遗传学改变的过程。在转化过程中，转化的 DNA 片段称为转化因子。受体菌只有处在感受态时才能够摄取转化因子。转化因子通常是质粒 DNA。而质粒融合或病毒感染是导致引入外源 DNA 的原因。动物细胞的转化又被称为“转染”（transfection）。转基因植物的产生通常也被认为是一种转化。
<br>生物学史上的经典实验之一的格里菲斯实验中，无毒性的R型肺炎链球菌与高温杀灭的有毒性的S型肺炎链球菌混合后注射入小鼠体内，R型肺炎链球菌会转化成有毒性的S型肺炎链球菌将小鼠杀死。只是当时的人们尚不清楚这一现象是由基因水平转移造成的，也不知道这一现象背后的机制就是R型肺炎链球菌摄取了S型肺炎链球菌的质粒进而转变成了S型肺炎链球菌。<br>直到1951年，科学家才第一次真正发现基因水平转移现象。当时，困扰医学界的一个问题是，许多白喉患者很早就感染了病原体白喉棒杆菌但并不发病，而是在某一个时间节点后才突然发病。在对这一现象的研究过程中，巴斯德研究所的安德列·利沃夫团队发现这背后的原理是一个病毒基因转入白喉棒杆菌后，弱毒性的白喉棒杆菌菌株会转变成强毒性的菌株，因此使病人突然患上白喉。安德列·利沃夫后来因为这项工作获得了1965年的诺贝尔生理医学奖。<br>1959年，科学家从不同物种的细菌之间传递抗生素抗药性的过程中发现了细菌与细菌之间的基因水平转移。]]></description><link>术语\基因水平转移（horizontal-gene-transfer，hgt）.html</link><guid isPermaLink="false">术语/基因水平转移（horizontal gene transfer，HGT）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:54 GMT</pubDate></item><item><title><![CDATA[基因突变（Gene mutation）]]></title><description><![CDATA[ 
 <br><a data-href="基因突变（Gene mutation）" href="术语\基因突变（gene-mutation）.html" class="internal-link" target="_self" rel="noopener nofollow">基因突变（Gene mutation）</a>:在一定的外界环境条件或生物内部因素作用下，DNA在复制过程中发生偶然差错，使个别碱基发生替换（subsititution）、缺失（Deletion）、插入（Insertion），因而改变遗传信息，形成基因突变。通俗的说，即DNA分子中发生碱基对变异，引起基因结构的改变。再通俗的说，某人出生的时候某先天基因序列应该是ACT，后天突然变成了AGT，这就叫突变。]]></description><link>术语\基因突变（gene-mutation）.html</link><guid isPermaLink="false">术语/基因突变（Gene mutation）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:41 GMT</pubDate></item><item><title><![CDATA[基因组测序技术]]></title><description><![CDATA[ 
 <br>测序成本：未来越来越便宜，当价格不变时，约18-24月集成电路器件数目增加一倍，性能提升一倍。<br>
<br>第一代：sanger法
<br>第二代：NGS（新一代测序技术）读长比较短。
<br>第三代：单分子测序技术，错误率高，成本高，也叫做<a data-href="从头测序技术" href="从头测序技术" class="internal-link" target="_self" rel="noopener nofollow">从头测序技术</a>。
<br>
其实严格来说，第三代测序技术进行改良之后，错误率和成本也在逐年下降。
<br><img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230907090112.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230907090118.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230907090126.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>基因组测序的2种策略：<br>
<br>逐步克隆法：按照大分子DNA克隆绘制的物理图谱分别在单个DNA克隆内部进行测序。
<br>全基因组霰弹法（鸟枪法）：速度更快。<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230907090220.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230907090226.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>基因组测序和拼接的三种基本方式：<br>
<br>De novo （从头测序富集）：

<br>测序一个完全新的模式物种的基因
<br>大部分用BAC BY BAC的拼装
<br>质量最高，人力物力财力花费巨大。


<br>Reference-guided（参考序列指导富集）：

<br>测序相近的物种或者亚种，并用已测序的模式基因组作为参考进行指导
<br>测序数据mapping到模式生物上推测可能的基因组序列


<br>RE-SEQUENCING mapping（再测序）：

<br>以病人、突变体、近亲的基因等为研究对象
<br>以鉴定变异位点、SNP、群体关联分析为目的
<br>大部分用第二代高通量测序。


<br><img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230907090631.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<a data-href="测序覆盖度（Sequencing Coverage）" href="术语\测序覆盖度（sequencing-coverage）.html" class="internal-link" target="_self" rel="noopener nofollow">测序覆盖度（Sequencing Coverage）</a>：基因组每个位置平均覆盖读段的条数。<br>基因组拼接质量评估：<br>
<br>基本统计: contigs个数,contigs总长,contigs平均和中值长度,最长aontig的大小(越多长contigs 、越少短contigs，效果越好)
<br>N50是拼接质量评估的重要参数: 将contigs按其长度从大到小排列，然后从大到小相加，当恰好加到该基因组长度的50%，即为Contig N50，数值越大说明组装的质量越好 (N90类似)Scaffold和chromosome的拼接涉及很多人为因素，参考性不大
<br>例子：<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230907090811.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>长读长测序（long-read sequencing)：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230907090828.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\基因组测序技术.html</link><guid isPermaLink="false">术语/基因组测序技术.md</guid><pubDate>Thu, 20 Jun 2024 12:24:38 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230907090112.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230907090112.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[基因组进化速率分析（Genomic Evolutionary Rate Profiling，GERP）]]></title><description><![CDATA[ 
 <br>解释: GERP 是一种用于评估基因组中序列保守性的评分系统，保守性意味着该区域在不同物种中通过进化长期保持不变。保守性高的区域通常指示该区域具有重要的功能，变异可能对生物体产生不利影响。]]></description><link>术语\基因组进化速率分析（genomic-evolutionary-rate-profiling，gerp）.html</link><guid isPermaLink="false">术语/基因组进化速率分析（Genomic Evolutionary Rate Profiling，GERP）.md</guid><pubDate>Tue, 08 Oct 2024 01:48:21 GMT</pubDate></item><item><title><![CDATA[基因组重复区域]]></title><description><![CDATA[ 
 <br>

<br>Segmental duplications and their variation in a complete human genome. Science. 2022 Apr;

<br>人类基因组最重要的特征之一是存在大量重复序列；人类基因组中50%以上的区域含有重复序列，其中60-80%是中度、高度重复序列。根据其特征和分布方式，人类基因组中的重复序列可以分为以下几类：<br>
<br>串联重复序列（Tandem Repeats）
<br>散布重复序列（Dispersed Repeats）
<br>低复杂度序列（Low Complexity Regions）
<br>重复基因家族（Gene Families）
<br><img alt="849bc439ea2c96562c7039e155babc0a.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202411031040915.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br>卫星重复序列（Satellite Repeats）是指基因组中由重复的DNA序列组成的区域。这些重复序列因其在密度梯度离心中形成的卫星峰而得名：<br>
<br>卫星DNA：由长的重复单元组成，每个重复单元长度通常为数百到数千碱基对。
<br>小卫星（Minisatellites）：由中等长度的重复单元组成，每个重复单元长度通常为7-64 bp。
<br>微卫星（Microsatellites）：由短的重复单元组成，每个重复单元长度通常为1-6 bp。也叫简单重复序列（Simple Sequence Repeats, SSRs）。
STR（Short Tandem Repeats，短串联重复序列）属于卫星重复序列的一种。
卫星DNA是指由长度从几个核苷酸到几百个核苷酸的序列组成的长串联重复序列，这些重复序列在基因组中多处分布。STR特指那些由2到6个核苷酸组成的短序列重复多次的DNA片段，这些通常分布在染色体的特定区域，如端粒和着丝粒。<br>
STR在遗传学研究和法医学中具有重要应用，因为它们的高度多态性使它们成为理想的遗传标记。在人类基因组中，这些短串联重复序列因其高度可变性常用于DNA指纹识别和亲子鉴定等领域。


<br><br>
<br>高重复性：这些序列在基因组中高度重复，可以形成大片的重复区域。
<br>特定分布：卫星重复序列通常位于染色体的特定区域，如着丝粒（centromeres）和端粒（telomeres）。
<br>变异性：重复单元的数量在不同个体之间可以有很大差异，这种变异性使它们在遗传学研究中具有重要应用。
<br><br>
<br>染色体结构：卫星重复序列在维持染色体结构和功能中起重要作用。例如，着丝粒卫星 DNA 在染色体分离过程中起关键作用。
<br>基因调控：某些卫星重复序列可能参与基因调控，影响基因的表达和功能。
<br>遗传标记：由于其高变异性，微卫星和小卫星被广泛用于遗传标记、亲子鉴定、种群遗传学和进化生物学研究。
<br>疾病研究：某些卫星重复序列的扩增或突变与人类疾病（如亨廷顿病和某些癌症）有关，研究这些序列对于理解疾病机制具有重要意义。
<br><br><br>短散布核元件（Short Interspersed Nuclear Elements, SINEs）是一类非编码DNA序列，广泛存在于真核生物的基因组中。在哺乳动物基因组中，<a data-href="Alu元件" href="术语\alu元件.html" class="internal-link" target="_self" rel="noopener nofollow">Alu元件</a> 是最著名的一类SINEs。Alu序列在人类基因组中大约有100万个拷贝，占据了基因组的约10%。SINEs在基因组进化和功能方面具有重要意义。<br><br>
<br>长度较短：通常在100-300bp。
<br>高拷贝数：在基因组中以多拷贝形式存在，拷贝数可以达到数千到数百万。
<br>非编码性质：不编码蛋白质，但可能在基因调控和基因组结构中发挥作用。
<br>散布分布：在基因组中随机散布，不集中在特定区域。
<br>依赖性：依赖于其他转座子（如 LINEs）的逆转录酶进行插入和扩增。
<br><br>长散布核元件（Long Interspersed Nuclear Elements, LINEs）是一类长的、散布在真核生物基因组中的转座子。在人类基因组中，LINE-1（L1）是最著名的一类LINEs。L1序列在人类基因组中大约有50万个拷贝，占据了基因组的约17%。LINEs在基因组进化和功能方面具有重要意义。<br><br>
<br>长度较长：通常为6-8kb。
<br>高拷贝数：在基因组中以多拷贝形式存在，拷贝数可以达到数千到数百万。
<br>编码能力：LINEs 通常编码逆转录酶和其他与逆转录相关的蛋白质，这些蛋白质使它们能够在基因组中自我复制和插入。
<br>散布分布：在基因组中随机散布，不集中在特定区域。
<br>自我复制：具有自我复制和插入的能力，不依赖于其他转座子的逆转录酶。
<br><br>
<br>转录：LINEs 首先被转录为 RNA 分子。
<br>逆转录：这些 RNA 分子被逆转录酶逆转录为 cDNA。
<br>插入：cDNA 被插入到基因组的新的位置。
<br><br><a data-href="长末端重复元件（Long Terminal Repeat elements, LTR）" href="术语\长末端重复元件（long-terminal-repeat-elements,-ltr）.html" class="internal-link" target="_self" rel="noopener nofollow">长末端重复元件（Long Terminal Repeat elements, LTR）</a>是一类具有长末端重复序列的转座子，广泛存在于真核生物的基因组中。这些元件在结构和功能上与逆转录病毒相似，因此也被称为<a data-href="内源性逆转录病毒（endogenous retroviruses, ERVs）" href="术语\内源性逆转录病毒（endogenous-retroviruses,-ervs）.html" class="internal-link" target="_self" rel="noopener nofollow">内源性逆转录病毒（endogenous retroviruses, ERVs）</a>。LTR元件通过逆转录机制在基因组中进行复制和插入。<br><br>
<br>长末端重复序列：LTR 元件在其两端具有长度为几百 bp 碱基的重复序列，这些重复序列在逆转录和插入过程中起关键作用。
<br>内部结构：LTR 元件通常包含编码逆转录酶、整合酶和其他与逆转录相关的基因，这些基因使它们能够在基因组中自我复制和插入。
<br>逆转录机制：LTR 元件通过逆转录机制进行复制和插入。首先，它们被转录为 RNA 分子，然后这些 RNA 分子被逆转录为 cDNA，最后 cDNA 被插入到基因组的新位置。
<br>内源性逆转录病毒：由于与逆转录病毒的相似性，许多 LTR 元件被认为是古老的逆转录病毒在基因组中留下的痕迹。
<br>分布广泛：LTR 元件在基因组中广泛分布，数量可以达到数千到数百万。
<br><br><br>反向重复序列（Inverted Repeats, IRs）是指在基因组中存在的两个相同或相似的序列，但它们的方向相反，中间通常有一段非重复序列。反向重复序列在基因组结构和功能中具有重要作用，特别是在基因调控、DNA修复和基因组稳定性方面。<br><br>
<br>结构：反向重复序列由两个相同或相似的序列组成，这两个序列的方向相反，通常中间隔有一段非重复序列。
<br>长度：反向重复序列的长度可以从几对碱基到几百对碱基不等。
<br>形成发卡结构：当反向重复序列在单链DNA中存在时，它们可以通过碱基配对形成发卡结构（hairpin structure）。
<br><br>
<br>简单反向重复：由两个相对较短的反向重复序列组成，中间隔有一段非重复序列。
<br>复杂反向重复：由多个反向重复序列组成，可能包含嵌套的重复序列和复杂结构。
<br><br>
<br>基因调控：反向重复序列可以形成二级结构，如发卡结构，这些结构在基因调控中起重要作用。例如，某些转录因子可以识别和结合这些结构，从而调控基因表达。
<br>DNA修复：反向重复序列在DNA修复过程中起作用，特别是在同源重组修复机制中。
<br>基因组稳定性：反向重复序列可以影响基因组的稳定性。它们可能导致基因组重排、缺失或重复，从而引发基因组变异。
<br>转座子活动：某些转座子（如DNA转座子）在其末端具有反向重复序列，这些序列在转座过程中起关键作用。
<br><br>低复杂度重复序列（Low Complexity Repeats, LCRs）是指DNA序列中由少数几种不同的碱基组成的重复序列。这些序列通常缺乏显著的复杂性和多样性，在基因组中可以以多种形式存在。低复杂度重复序列在基因组中的分布和功能具有一定的特点和重要性。<br><br>
<br>简单组成：低复杂度重复序列由少数几种不同的碱基（如 A、T、C、G）组成，通常缺乏复杂的序列模式。
<br>重复性：这些序列在基因组中以重复的形式存在，重复单元可以是单个碱基对或短的碱基对序列。
<br>广泛分布：低复杂度重复序列在基因组中广泛分布，既可以出现在编码区，也可以出现在非编码区。
<br>高变异性：由于其简单的组成和重复性，低复杂度重复序列在进化过程中容易发生变异，如插入、缺失和复制滑动。
<br><br>
<br>滑动重复（Slipped-strand Repeats）：如CAG重复序列，这种序列的扩增与亨廷顿病等神经退行性疾病有关。
<br><br>重复基因家族（Gene Families）是由同一祖先基因通过基因重复过程产生的一组基因。这些基因在序列上具有高度相似性，并且通常执行相似或相关的功能。基因家族在基因组进化、功能多样化和适应性方面具有重要意义。<br><br>
<br>共同祖先：基因家族中的基因起源于一个共同的祖先基因，通过基因重复事件（如不等交换、基因复制）产生。
<br>序列相似性：家族成员在核苷酸序列或氨基酸序列上具有高度相似性。
<br>功能相关性：基因家族中的基因通常执行相似或相关的生物学功能，但也可能通过进化产生新的功能。
<br><br>基因家族可以根据不同的标准进行分类，如结构特征、功能或进化模式。常见的分类包括：<br>
<br>结构基因家族：基因家族成员在结构上具有相似的特征，如蛋白质结构域。
<br>功能基因家族：基因家族成员执行相似的生物学功能，如酶家族、受体家族。
<br>进化基因家族：基因家族成员通过特定的进化模式产生，如串联重复基因家族、全基因组复制基因家族。
<br><br>
<br>基因重复：基因家族的形成通常源于基因重复事件，包括不等交换、串联重复、全基因组复制等。
<br>基因转换：基因转换事件可以导致基因家族成员之间的序列相似性增加，维持家族成员的相似性。
<br>基因丢失和伪基因化：在进化过程中，部分基因家族成员可能丢失或变成伪基因，导致家族成员数量变化。
<br><br>
<br>基因冗余：基因家族提供了基因冗余，增加了生物体对突变和环境变化的耐受性。
<br>功能多样化：基因家族成员可以通过进化产生新的功能，促进生物体适应不同的环境和生态位。
<br>调控复杂性：基因家族成员可能具有不同的表达模式和调控机制，增加了基因调控的复杂性。
<br>进化创新：基因家族的扩展和功能多样化是生物进化创新的重要驱动力。
<br><br>Segmental duplications (SDs)，也称为低拷贝重复序列（low-copy repeats，LCRs），是指基因组中长度通常大于1 kb的重复序列，这些序列在基因组中存在两次或多次，并且每个拷贝之间的序列相似度通常高于90%。人类基因组中约有5%至10%的序列是SDs，这些序列在染色体的特定区域（如染色体的中心粒和端粒附近）特别丰富。SDs在基因组结构变异、进化和疾病中起着重要作用。<br><br>
<br>长度：SDs 通常长度在 1 到数百 kb 之间。
<br>相似度：SDs 之间的序列相似度通常高于90%，有些甚至高达99%。
<br>分布：SDs 在基因组中可以是串联重复或散布重复，存在于染色体的不同位置。
<br>内容：SDs 可以包含基因、基因片段或非编码序列。
<br><br>
<br>基因组结构变异：SDs 是基因组结构变异的重要来源，包括染色体重排、缺失、重复和倒位等。
<br>基因创新：SDs 通过基因复制和重组为基因创新提供了素材，有助于新基因和新功能的产生。
<br>进化研究：SDs 在物种进化中起重要作用，通过比较不同物种的 SDs，可以揭示基因组进化的机制和历史。
<br>疾病关联：SDs 与多种人类疾病（如自闭症、精神分裂症和某些遗传病）有关，研究这些重复序列有助于理解疾病的分子机制。
<br><br>Human Chained Self Alignments&nbsp;是指通过对人类基因组进行自我比对（self-alignment），识别出基因组内相似或重复的序列，并将这些相似区域用链（chain）连接起来的过程。通过自我比对，可以识别出基因组内的重复序列，如Segmental duplications（SDs）、串联重复（tandem repeats）和散布重复（dispersed repeats）。这种分析方法在研究基因组结构变异、重复序列、基因家族和进化等方面具有重要意义。<br>研究方法：<br>
<br>序列比对工具：使用序列比对工具（如BLAST、LASTZ、MUMmer等）进行自我比对，识别出基因组内的相似区域。
<br>链连接算法：使用链连接算法（如axtChain工具）将相邻或重叠的相似区域连接成链，以便更好地理解这些重复序列的结构和分布。
<br>可视化工具：使用可视化工具（如UCSC Genome Browser）展示和分析自我比对的结果，帮助研究人员更直观地理解基因组内的重复序列和结构变异。
<br><br>核线粒体序列（Nuclear Mitochondrial DNA Sequences，简称NUMTs）是指线粒体DNA（mtDNA）片段在进化过程中插入到核基因组中的序列。这些序列在核基因组中表现为线粒体DNA的伪基因。NUMTs的存在对线粒体基因组研究、进化生物学和医学研究有着重要影响。<br><br>来源：NUMTs 是线粒体 DNA 片段通过非同源重组或其他机制插入到核基因组中的结果。<br>
分布：NUMTs 可以分布在核基因组的各个区域，通常没有特定的插入位点。<br>
相似性：NUMTs 与线粒体 DNA 序列高度相似，但由于长期在核基因组中积累突变，可能与原始线粒体序列存在差异。<br>
进化速度：NUMTs 在核基因组中的进化速度通常比线粒体 DNA 更慢，因为核 DNA 的突变率较低。<br><br>
<br>进化研究：NUMTs 的存在提供了线粒体和核基因组之间相互作用的证据，有助于研究基因组进化和物种间的进化关系。
<br>基因组注释：在进行基因组注释时，识别和区分 NUMTs 与真正的线粒体 DNA 序列至关重要，以避免错误注释。
<br>医学研究：NUMTs 可能在某些遗传疾病中发挥作用，研究这些序列有助于理解疾病的分子机制。
<br>法医学：在法医学中，NUMTs 的存在可能干扰线粒体 DNA 的分析，因此在进行法医鉴定时需要特别注意。
<br><br>
<br>人类基因组中的 NUMTs：人类核基因组中存在多个 NUMTs 片段，这些片段长度不一，有的仅为几十个碱基对，有的则长达几千个碱基对。
<br>动物基因组中的 NUMTs：许多动物（如灵长类、鸟类、鱼类等）的核基因组中也发现了 NUMTs，这些序列在不同物种中的数量和分布有所不同。
<br><br>RNA重复序列是指在RNA分子中存在的重复序列，这些重复序列可以在不同类型的RNA（如mRNA、tRNA、rRNA、lncRNA等）中发现。RNA重复序列在基因表达调控、RNA稳定性、翻译调控和疾病机制中起着重要作用。<br><br>
<br>重复单元长度：RNA重复序列的长度可以变化，从短的单个碱基对重复到长的多碱基对重复。
<br>高重复性：这些序列在RNA分子中高度重复，形成明显的重复区域。
<br>特定分布：RNA重复序列可以在RNA分子的不同区域出现，如编码区、非编码区、5'非翻译区（5' UTR）、3'非翻译区（3' UTR）等。
<br>变异性：重复单元的数量在不同个体或不同细胞类型之间可以有所不同，这种变异性可能影响RNA的功能和稳定性。
<br><br>
<br>基因表达调控：RNA重复序列可以通过影响RNA的转录、剪接、运输、翻译和降解等过程来调控基因表达。例如，某些重复序列可以作为转录因子的结合位点，调控基因的转录。
<br>RNA结构和稳定性：重复序列可以影响RNA的二级结构和稳定性，从而影响RNA的功能。例如，某些重复序列可以形成发夹结构，影响RNA的稳定性和翻译效率。
<br>翻译调控：某些RNA重复序列可以影响翻译起始或延伸，从而调控蛋白质的合成。
<br>疾病关联：某些RNA重复序列的扩增或突变与人类疾病（如神经退行性疾病和癌症）有关，研究这些序列对于理解疾病机制具有重要意义。
]]></description><link>术语\基因组重复区域.html</link><guid isPermaLink="false">术语/基因组重复区域.md</guid><pubDate>Sun, 03 Nov 2024 03:34:27 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202411031040915.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202411031040915.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[激活转录因子(Activating Transcription Factor, ATF)]]></title><description><![CDATA[ 
 <br>是一种转录因子家族的成员。这些转录因子在调控基因表达、细胞生长、分化和应对细胞应激等过程中起着关键作用。ATF家族成员通过识别并结合到DNA上的特定序列（通常为CRE，即cAMP响应元件），从而激活或抑制下游基因的转录。]]></description><link>术语\激活转录因子(activating-transcription-factor,-atf).html</link><guid isPermaLink="false">术语/激活转录因子(Activating Transcription Factor, ATF).md</guid><pubDate>Tue, 13 Aug 2024 07:13:23 GMT</pubDate></item><item><title><![CDATA[嵴连接（Crista junction, CrJ）]]></title><description><![CDATA[ 
 <br>嵴连接（Crista junction, CrJ）是线粒体内膜上一个重要的结构特征。它是连接线粒体内膜中的嵴（cristae）和内膜其他部分的区域。这些连接区域在维持嵴的结构完整性和功能方面发挥着关键作用。<br>嵴是内膜折叠形成的突起结构，增加了内膜的表面积，从而提供更多的空间来容纳电子传递链和ATP合酶等关键蛋白质复合物。嵴连接则确保了这些嵴结构的适当排列和功能性连接，支持线粒体的高效能量生产和其他生物功能。<br>嵴连接不仅在结构上重要，还参与调控线粒体内不同区域之间的物质交换和信号传递，因此在整体线粒体功能中起着至关重要的作用。]]></description><link>术语\嵴连接（crista-junction,-crj）.html</link><guid isPermaLink="false">术语/嵴连接（Crista junction, CrJ）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:07 GMT</pubDate></item><item><title><![CDATA[伽马分布（Gamma distribution,Γ）]]></title><description><![CDATA[ 
 <br>伽马分布是一种常见的概率分布，用于描述正值的随机变量。它在统计学和概率论中经常被用来建模连续的随机现象，如等待时间、寿命、金融收益等。伽马分布具有以下形式的概率密度函数（PDF）：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230814111957.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
在这里， 是随机变量的取值， 是形状参数， 是尺度参数， 是伽马函数，它是阶乘的一种推广形式。<br>
伽马分布的形状受参数和的影响。当时，分布的形状呈现出右偏，尾部较长。当时，伽马分布简化为指数分布。伽马分布的均值为，方差为。<br>伽马分布在贝叶斯统计中经常用作先验分布，特别是对于正值的参数。在贝叶斯分析中，可以基于已有的信息选择适当的伽马分布参数，然后根据观测数据来更新分布，从而得到后验分布。这种方法可以帮助推断参数的不确定性，并为建立统计模型提供基础。]]></description><link>术语\伽马分布（gamma-distribution,γ）.html</link><guid isPermaLink="false">术语/伽马分布（Gamma distribution,Γ）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:29 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230814111957.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230814111957.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[嘉莱族（Giarai, Jarai）]]></title><description><![CDATA[ 
 <br>嘉莱族（嘉莱语：Jarai，越南语：Người Gia Rai）是越南官方认定的54个民族之一，分布在越南的中央高地一带，主要集中在嘉莱省、昆嵩省，以及多乐省部分地区和柬埔寨的腊塔纳基里省。<br>嘉莱族与占族人、马来人以及菲律宾人关系密切，以嘉莱语为母语，嘉莱语属于南岛语系马来-波利尼西亚语族。由于其世居土地被京族人强占、民族文化遭到越南官方严重打压，嘉莱族人对越南的国家认同很淡薄，在历史上，曾联合巴拿族、埃地族、格贺族成立“被压制民族斗争统一战线”，发动过多次抵抗运动，试图实行区域自治。]]></description><link>术语\嘉莱族（giarai,-jarai）.html</link><guid isPermaLink="false">术语/嘉莱族（Giarai, Jarai）.md</guid><pubDate>Tue, 29 Oct 2024 12:58:07 GMT</pubDate></item><item><title><![CDATA[嘉绒藏族]]></title><description><![CDATA[ 
 <br>嘉绒在甘孜州丹巴县、康定县部分地区，阿坝州金川、小金、马尔康、理县、黑水、红原和汶川部分地区，以及雅安市、凉山州等地。]]></description><link>术语\嘉绒藏族.html</link><guid isPermaLink="false">术语/嘉绒藏族.md</guid><pubDate>Thu, 20 Jun 2024 12:27:02 GMT</pubDate></item><item><title><![CDATA[甲基化]]></title><description><![CDATA[ 
 <br>DNA甲基化是一种常见的表观遗传学修饰，它涉及到DNA分子中的甲基基团（CH3）的添加。甲基化在调控基因表达、细胞分化和生长等生物学过程中发挥重要作用。以下是DNA甲基化的一些主要类型：<br>CpG甲基化：这是最常见的DNA甲基化类型。在CpG位点（胞嘧啶-C-鸟嘌呤-G-的组合）上的甲基化是指在胞嘧啶（C）碱基上添加甲基基团。CpG岛是一种富含CpG位点的DNA区域，通常位于基因的启动子附近。CpG甲基化在基因的调控中起到关键作用。<br>非CpG甲基化：除了CpG位点外，DNA的甲基化也可以发生在其他碱基上，如甲基胞嘧啶（mC）和甲基腺嘌呤（mA）。非CpG甲基化在一些生物体中也很常见，如干细胞和大脑组织。<br>全甲基化：全甲基化是指DNA分子上的每个CpG位点都被甲基化。这种类型的甲基化通常发生在某些微生物中，但在哺乳动物中很罕见。<br>半甲基化：半甲基化是指DNA分子上的一半CpG位点被甲基化，而另一半没有。这种类型的甲基化可能在某些情况下发挥调控作用。<br>非对称甲基化：非对称甲基化是指DNA链的两个互补链上的CpG位点被甲基化的方式不同。这种非对称性可以导致不同链上的碱基互补性发生变化。<br>5-甲基胞嘧啶转化为5-羟甲基胞嘧啶：在DNA甲基化中，甲基化的胞嘧啶可以被氧化为5-羟甲基胞嘧啶（5hmC），这是一种反映DNA活性状态的表观遗传标志。<br>6-甲基胞嘧啶：在某些细菌和古代真核生物中，DNA可以发生6-甲基胞嘧啶（m6dC）甲基化，这是一种不同于CpG甲基化的甲基化类型。<br>这些不同类型的DNA甲基化在生物体内起到不同的生物学功能，包括基因的调控、表观遗传信息的传递以及细胞分化和发育过程的调控。研究DNA甲基化有助于深入了解基因表达和细胞功能的调控机制。]]></description><link>术语\甲基化.html</link><guid isPermaLink="false">术语/甲基化.md</guid><pubDate>Thu, 20 Jun 2024 12:21:20 GMT</pubDate></item><item><title><![CDATA[贾湖遗址]]></title><description><![CDATA[ 
 <br>贾湖遗址，位于<a data-href="河南" href="河南" class="internal-link" target="_self" rel="noopener nofollow">河南</a>省舞阳县北舞渡镇西南1.5公里的贾湖村，是中国新石器时代前期重要遗址，C14、释光测年结果显示其距今约9000―7500年，保护区面积5.5万平方米，始发现于20世纪60年代初。]]></description><link>术语\贾湖遗址.html</link><guid isPermaLink="false">术语/贾湖遗址.md</guid><pubDate>Thu, 20 Jun 2024 12:20:21 GMT</pubDate></item><item><title><![CDATA[假阳性（False positive）]]></title><description><![CDATA[ 
 <br>在医学上指因为种种原因，把不具备阳性症状的人检测出阳性的结果。在分子遗传学上是指把不应该是SNP的位点，被判断为SNP位点。]]></description><link>术语\假阳性（false-positive）.html</link><guid isPermaLink="false">术语/假阳性（False positive）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:30 GMT</pubDate></item><item><title><![CDATA[假阴性（False negative）]]></title><description><![CDATA[ 
 <br>医学检验里常有阴性/阳性之分。通俗的说，假阴性是指症状者实际已经具有某种病症，但相关数据却没有反映出来。在分子遗传学上是指应该是SNP的位点没有判断出来]]></description><link>术语\假阴性（false-negative）.html</link><guid isPermaLink="false">术语/假阴性（False negative）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:30 GMT</pubDate></item><item><title><![CDATA[简鼻亚目（Haplorrhini）]]></title><description><![CDATA[ 
 <br>简鼻亚目（Haplorrhini）是包括眼镜猴及所有类人猿的灵长目。<br>简鼻亚目与<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E5%8E%9F%E7%8C%B4%E4%BA%9A%E7%9B%AE" rel="noopener nofollow" class="external-link" title="原猴亚目" href="https://zh.wikipedia.org/wiki/%E5%8E%9F%E7%8C%B4%E4%BA%9A%E7%9B%AE" target="_blank">原猴亚目</a>约于6300万年前<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E6%BC%94%E5%8C%96" rel="noopener nofollow" class="external-link" title="演化" href="https://zh.wikipedia.org/wiki/%E6%BC%94%E5%8C%96" target="_blank">演化</a>分开。约于5800万年前，<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E8%B7%97%E7%8C%B4%E5%9E%8B%E4%B8%8B%E7%9B%AE" rel="noopener nofollow" class="external-link" title="跗猴型下目" href="https://zh.wikipedia.org/wiki/%E8%B7%97%E7%8C%B4%E5%9E%8B%E4%B8%8B%E7%9B%AE" target="_blank">跗猴型下目</a>从其他简鼻亚目分支开来，现存的跗猴型下目就只有<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E7%9C%BC%E9%8F%A1%E7%8C%B4%E7%A7%91" rel="noopener nofollow" class="external-link" title="眼镜猴科" href="https://zh.wikipedia.org/wiki/%E7%9C%BC%E9%8F%A1%E7%8C%B4%E7%A7%91" target="_blank">眼镜猴科</a>。]]></description><link>术语\简鼻亚目（haplorrhini）.html</link><guid isPermaLink="false">术语/简鼻亚目（Haplorrhini）.md</guid><pubDate>Thu, 20 Jun 2024 12:27:20 GMT</pubDate></item><item><title><![CDATA[江苏]]></title><description><![CDATA[ 
 <br>江苏省，简称苏，是中华人民共和国东部沿海的一个省份，省会南京。]]></description><link>术语\江苏.html</link><guid isPermaLink="false">术语/江苏.md</guid><pubDate>Thu, 20 Jun 2024 12:19:21 GMT</pubDate></item><item><title><![CDATA[结构变异（Structural Variations, SVs）的机制]]></title><description><![CDATA[ 
 <br>结构变异（Structural Variations, SVs）包括插入、删除、倒置、复制和易位等多种类型。这些变异是通过多种不同的机制产生的。<br>
<br>非等位基因同源重组（Non-Allelic Homologous Recombination,NAHR）：（其实就是同源重组 HR）NAHR 是一种利用 DNA 序列之间的同源性进行的重组过程。当具有高度同源性的序列在基因组不同位置时，它们可以成为重组事件的靶标，导致染色体结构的重排，如倒置和易位。NAHR 是导致一些遗传疾病的主要机制，比如杜氏肌肉营养不良和威廉斯综合症。
为什么是非等位？不是等位？
因为等位基因的同源重组有另一个名字——交叉互换。


<br>移动元件插入（Mobile Element Insertion,MEI）：移动元件或转座子是基因组内可以移动的DNA序列。它们通过“跳跃”到基因组的新位置来增加遗传多样性。这些元件的插入可以打断基因或调控区域，导致结构变异和功能改变。
<br>非同源末端连接（Non-Homologous End Joining,NHEJ）：NHEJ是一种修复DNA双链断裂的机制，不依赖于同源序列。该过程涉及直接连接断裂的两端，可能导致插入或缺失，从而产生结构变异。NHEJ是细胞对DNA损伤反应的一部分，但其不精确的修复性质可能导致基因组不稳定。
<br>复制叉停滞和模板切换/微同源介导的断裂诱导复制（Replication Fork Stalling and Template Switching, FoSTeS/MMBIR）：FoSTeS和MMBIR是近年来提出的解释复杂结构变异产生的模型。这些机制涉及DNA复制过程中的复制叉停滞，随后通过利用微同源序列在不同位置的模板切换来恢复复制。这种模式可以导致插入、倒置和复杂的重组事件，是导致某些复杂基因组重排和多重复合体变异的潜在机制。<br>
1.  复制叉停滞：在DNA复制过程中，复制叉是沿DNA双螺旋前进的结构，负责拷贝遗传信息。然而，当复制叉遇到DNA上的障碍物，如紧密结合的蛋白质、DNA损伤或特别稳定的DNA二级结构时，复制叉可能会停滞。这种停滞可以阻碍DNA的正常复制，导致复制过程中断。<br>
2. 模板切换：当复制叉停滞后，为了继续复制过程，细胞会采用一种机制，即模板切换。在这个过程中，复制叉的DNA聚合酶会暂时离开原始的模板DNA链，寻找一个新的模板，通常是一个具有微小同源序列的邻近区域。聚合酶在新模板上继续复制一段DNA后，可能会返回到原始模板上，或者在其他地方再次进行模板切换。这种切换过程可以跨越基因组中的不同区域，导致DNA序列的重排和变异。
什么反复横跳？

]]></description><link>术语\结构变异（structural-variations,-svs）的机制.html</link><guid isPermaLink="false">术语/结构变异（Structural Variations, SVs）的机制.md</guid><pubDate>Thu, 20 Jun 2024 12:21:59 GMT</pubDate></item><item><title><![CDATA[截短突变（truncating mutations）]]></title><description><![CDATA[ 
 <br>截短突变，顾名思义，由于突变导致编码蛋白的密码子变短了（提前终止编码），翻译的蛋白也只有一部分了（截断变短了），会影响蛋白功能。]]></description><link>术语\截短突变（truncating-mutations）.html</link><guid isPermaLink="false">术语/截短突变（truncating mutations）.md</guid><pubDate>Sun, 08 Sep 2024 09:59:35 GMT</pubDate></item><item><title><![CDATA[解剖学意义上现代人(anatomically modern human, AMH)]]></title><description><![CDATA[ 
 ]]></description><link>术语\解剖学意义上现代人(anatomically-modern-human,-amh).html</link><guid isPermaLink="false">术语/解剖学意义上现代人(anatomically modern human, AMH).md</guid><pubDate>Tue, 20 Aug 2024 12:41:22 GMT</pubDate></item><item><title><![CDATA[近似贝叶斯计算 (Approximate Bayesian Computation, ABC)]]></title><description><![CDATA[ 
 <br>近似贝叶斯计算（ABC）是一种用于复杂模型参数估计的统计方法，特别是在直接计算后验分布困难时。ABC通过模拟数据集，并将其与观测数据进行比较，来推断模型参数。]]></description><link>术语\近似贝叶斯计算-(approximate-bayesian-computation,-abc).html</link><guid isPermaLink="false">术语/近似贝叶斯计算 (Approximate Bayesian Computation, ABC).md</guid><pubDate>Mon, 26 Aug 2024 03:24:50 GMT</pubDate></item><item><title><![CDATA[粳稻]]></title><description><![CDATA[ 
 <br>粳稻原产于中国，在中国的种植历史至少有7000年左右，在中国主要分布有黑龙江、吉林、辽宁、江苏、浙江和安徽。 粳稻具有耐旱、耐寒、耐弱光的习性，株形紧凑、分禁力较弱、茎秆强壮不易倒伏。主要繁殖方式是通过天然自花受精进行有性繁殖，也可以通过剥露进行无性繁殖。<br>田螺山遗址稻作遗存研究成果：粳稻（jing dào）起源在中国。<br>
2004开始发掘的余姚田螺山遗址，由浙江省文物考古研究所与北京大学考古文博学院合作进行的《余姚田螺山遗址的自然遗存综合研究》研究课题，取得了重要学术成果。其中“从长江下游小穗轴基盘看稻的驯化进程和驯化速度”这一研究成果已在3月20日出版的美国《科学》(Science)杂志发布。]]></description><link>术语\粳稻.html</link><guid isPermaLink="false">术语/粳稻.md</guid><pubDate>Thu, 20 Jun 2024 12:26:04 GMT</pubDate></item><item><title><![CDATA[精子发生过程]]></title><description><![CDATA[ 
 <br>人类精子形成的过程被称为精子发生，也称为精子生成或精子成熟。这个过程发生在男性的生殖系统中，主要在睾丸内进行。精子发生包括一系列细胞分裂和分化的步骤，主要分为以下几个阶段：<br>
<br>
精子母细胞阶段（Spermatogonial Phase）：

<br>在睾丸的生殖小结构（精原小结）中，精原细胞（spermatogonia）经历一系列细胞分裂，其中一些细胞继续保持为精原细胞，而另一些则进入下一个阶段。


<br>
精子发生阶段（Spermatocytic Phase）：

<br>精原细胞进入精子发生阶段，经历两次分裂，形成四个细胞，每个细胞包含23条染色体（半数染色体数），这四个细胞中的一个将发展成成熟的精子。


<br>
精子形成阶段（Spermiogenesis）：

<br>在这个阶段，发生了一系列细胞分化和形态变化，将形成的四个细胞中的一个转变为成熟的精子。这个过程包括细胞形状的改变、细胞器的丧失和尾巴的形成，最终形成具有运动能力的成熟精子。


<br>
精子成熟（Sperm Maturation）：

<br>成熟的精子通过输精管进入附睾，那里它们将继续成熟，获得游离能力。最终，成熟的精子将储存在附睾，等待在射精时进入尿道，以寻找卵子进行受精。


<br>整个精子发生过程涉及一系列复杂的细胞分化和形态变化，确保在受精时精子具备足够的运动能力和遗传信息。]]></description><link>术语\精子发生过程.html</link><guid isPermaLink="false">术语/精子发生过程.md</guid><pubDate>Thu, 20 Jun 2024 12:23:19 GMT</pubDate></item><item><title><![CDATA[净化选择（purifying selection）]]></title><description><![CDATA[ 
 <br>又名负向选择（negative selection）]]></description><link>术语\净化选择（purifying-selection）.html</link><guid isPermaLink="false">术语/净化选择（purifying selection）.md</guid><pubDate>Mon, 29 Jul 2024 06:27:30 GMT</pubDate></item><item><title><![CDATA[旧石器时代]]></title><description><![CDATA[ 
 ]]></description><link>术语\旧石器时代.html</link><guid isPermaLink="false">术语/旧石器时代.md</guid><pubDate>Thu, 20 Jun 2024 12:20:25 GMT</pubDate></item><item><title><![CDATA[居延海]]></title><description><![CDATA[ 
 <br>居延海，汉代称“居延泽”，后也称“西海”，唐代以来一直称“居延海”，是曾位于内蒙古自治区阿拉善盟额济纳旗北部的一个内流湖，现已大部干涸。西居延海称嘎顺淖尔，东居延海称苏古诺尔，是穿越巴丹吉林沙漠和大戈壁通往漠北的重要通道。古代认为这里就是《尚书》所谓的“流沙”。目前，东居延海为国家级水利风景区。西汉至唐时期为河西走廊的一部分，属张掖郡（甘州），西夏时期建有黑水城（喀喇浩特），明初废弃，位于嘉峪关以北，为通向草原丝绸之路的常经之地，也是军事战略要地，曾出土过西汉中期至东汉晚期的居延汉简。东汉曾在此建立过西海郡；东突厥复国后，安北都护府迁于此地。<br>据野外踏勘，史前时期居延海面积达2600平方公里。汉时称为居延泽，面积726平方公里。<br>古居延海由东、西居延海和京斯图淖尔三部分组成，额济纳河，又称黑水、黑河，自甘肃省张掖（古称甘州）往北流，改称弱水，至上流青山头再分成两条支流；西为穆林河，注入西居延泽（嘎顺诺尔）；东为纳林河，注入东居延泽（索果诺尔），在丰水期时居延海合成一湖。与蒙古族土尔扈特部世代相伴。居延海总面积约720平方公里，飞鸟栖息，波光粼粼，“鸭浮绿波、碧水青天”。<br>该地区年蒸发量约3000毫米，而降雨量不足40毫米，完全靠额济纳河（黑河）补给，清代诗人任万年称“巨浪滔天大石浮，龙形滚滚向东流”。东居延海的海拔为907米。居延海是在东西断裂形成的条带状洼地的基础上形成，再加上风力剥蚀作用使洼地范围扩大形成居延海湖盆。湖盆内有巨厚的侏罗纪沉积。第四纪早期造成静水沉积的环境，说明为温暖湿润的淡水湖泊。更新世－全新世以来气候转为干旱。]]></description><link>术语\居延海.html</link><guid isPermaLink="false">术语/居延海.md</guid><pubDate>Thu, 20 Jun 2024 12:20:06 GMT</pubDate></item><item><title><![CDATA[聚合酶链式反应（PCR）]]></title><description><![CDATA[ 
 <br>PCR（聚合酶链式反应）是一种用于复制和增加DNA片段的技术。PCR是利用DNA在体外摄氏95°高温时变性会变成单链，低温（经常是60°C左右）时引物与单链按碱基互补配对的原则结合，再调温度至DNA聚合酶最适反应温度（72°C左右），DNA聚合酶沿着磷酸到五碳糖(5'-3')的方向合成互补链。基于聚合酶制造的PCR仪实际就是一个温控设备，能在变性温度，复性温度，延伸温度之间很好地进行控制。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312082137456.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>PCR反应还有以下几个方面的延伸：<br>
<br>RT-PCR（逆转录聚合酶链式反应）：是一种特殊的PCR，用于从RNA模板合成DNA。

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312082138097.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>qPCR（定量聚合酶链式反应）：是一种PCR变体，它能够实时监测PCR反应的进程。

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312082139958.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>Real-time PCR和real-time qPCR是同一种技术的不同称呼，都指的是能够实时监测PCR反应过程的方法。
<br>PCR是一种DNA复制技术，RT-PCR是从RNA合成DNA的PCR，qPCR或real-time PCR/real-time qPCR则是能够实时监测PCR反应的技术，可以用来定量检测DNA或RNA样本中的特定序列的数量。]]></description><link>术语\聚合酶链式反应（pcr）.html</link><guid isPermaLink="false">术语/聚合酶链式反应（PCR）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:23 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312082137456.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312082137456.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[均匀分布]]></title><description><![CDATA[ 
 <br>均匀分布（Uniform Distribution）是一种简单的概率分布，其中每个可能的取值在一定的范围内具有相同的概率。换句话说，均匀分布将所有可能的取值平均地分布在一个给定的区间内，每个取值的概率是相等的。<br>均匀分布的概率密度函数（PDF）可以表示为：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230814112448.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>其中， 是分布的下界， 是分布的上界， 是随机变量的取值。在区间 内，概率密度函数的值为 ，在区间之外，概率密度函数的值为 0。<br>均匀分布具有以下特点：<br>所有可能的取值在指定的区间内具有相等的概率，因此分布是均匀的；<br>
均匀分布的均值是 ，方差是 ；<br>
均匀分布在统计推断、随机模拟、随机采样等许多领域中都有重要应用。<br>
在实际应用中，均匀分布常常用作一种简单的模型，特别是在没有更多信息可用时，或者在需要对一组可能取值进行随机抽样时。例如，抛硬币的结果、掷骰子的点数、随机数生成器的输出等都可以用均匀分布进行建模。]]></description><link>术语\均匀分布.html</link><guid isPermaLink="false">术语/均匀分布.md</guid><pubDate>Thu, 20 Jun 2024 12:22:40 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230814112448.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230814112448.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[卡夫泽（Qafzeh）]]></title><description><![CDATA[ 
 ]]></description><link>术语\卡夫泽（qafzeh）.html</link><guid isPermaLink="false">术语/卡夫泽（Qafzeh）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:08 GMT</pubDate></item><item><title><![CDATA[卡拉苏克文化（Karasuk culture）]]></title><description><![CDATA[ 
 <br>卡拉苏克文化（英语：Karasuk culture, 俄语：Карасукская культура）分布的范围大约是从咸海、窝瓦河一带到叶尼塞河上游，时间约为3500年到2800年前，为<a data-href="阿凡纳谢沃文化（Afanasievo）" href="术语\阿凡纳谢沃文化（afanasievo）.html" class="internal-link" target="_self" rel="noopener nofollow">阿凡纳谢沃文化（Afanasievo）</a>之后的<a data-href="青铜时期（Bronze Age，BA）" href="术语\青铜时期（bronze-age，ba）.html" class="internal-link" target="_self" rel="noopener nofollow">青铜时期（Bronze Age，BA）</a>。挖掘出大量完整的坟墓，目前至少有2000个坟墓是已知的。这个文化中重要的贸易区域则是从中国北部、<a data-href="贝加尔湖" href="术语\贝加尔湖.html" class="internal-link" target="_self" rel="noopener nofollow">贝加尔湖</a>地区一直到黑海、乌拉山地区，造成了这区域文化的相似性。<br>在经济上，他们是农业与畜牧业混合的型态，主要饲养的牲畜是绵羊。<br>他们对金属的制造已经相当熟练了，曾发现过弯曲的青铜刀及缰绳。其中，他们的陶器被认为与内蒙古、中国内陆相近，而青铜刀则是与中国东北类似。<br>他们居住在类似竖穴式的房屋中，而将死者放入石棺，埋进库尔干式的坟墓中，并用长方形的石板围住坟墓。<br>有些学者认为，此文化有可能是起源于蒙古、中国北部、韩国一带，也有些学者认为此文化与使用叶尼塞语系或布鲁夏斯基语的人有关，甚至提出了卡拉苏克语系的说法，而所发现的骸骨则是显示了此文化与中亚的高加索人有所关联。<br>接续在卡拉苏克文化后的是塔加尔文化，两文化所使用的埋葬地点重叠，这显示了居住地也很相近。]]></description><link>术语\卡拉苏克文化（karasuk-culture）.html</link><guid isPermaLink="false">术语/卡拉苏克文化（Karasuk culture）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:28 GMT</pubDate></item><item><title><![CDATA[康巴藏族]]></title><description><![CDATA[ 
 <br>习惯上将西藏丹达山以东的地区，与四川西昌，雅安地区和阿坝藏羌自治州相连，北与青海省玉树、果洛两州相连的地域称为康区。具体包括：西藏昌都地区、云南迪庆州、四川甘孜州、青海玉树州以及那曲东南一线。]]></description><link>术语\康巴藏族.html</link><guid isPermaLink="false">术语/康巴藏族.md</guid><pubDate>Fri, 21 Jun 2024 07:17:55 GMT</pubDate></item><item><title><![CDATA[空间复杂度（Space Complexity，SC）]]></title><description><![CDATA[ 
 <br>空间复杂度表示一个算法在执行过程中所需的内存空间。它反映了随着输入规模的增加，算法对内存的需求如何增长。]]></description><link>术语\空间复杂度（space-complexity，sc）.html</link><guid isPermaLink="false">术语/空间复杂度（Space Complexity，SC）.md</guid><pubDate>Sun, 22 Sep 2024 07:43:44 GMT</pubDate></item><item><title><![CDATA[库尔干（Kurgan）]]></title><description><![CDATA[ 
 <br>库尔干（俄语：курга́н）（也被认为是突厥语单词）是一种构建于坟墓上的坟冢，通常的特征是包含单个人体以及墓葬器皿、武器和马匹。最初在东欧大草原上使用，公元前3千纪进入中亚大部分地区以及东欧、西欧和北欧。<br>
与之对应的是<a data-href="库尔干假说（Kurgan hypothesis）" href="术语\库尔干假说（kurgan-hypothesis）.html" class="internal-link" target="_self" rel="noopener nofollow">库尔干假说（Kurgan hypothesis）</a>。]]></description><link>术语\库尔干（kurgan）.html</link><guid isPermaLink="false">术语/库尔干（Kurgan）.md</guid><pubDate>Thu, 12 Sep 2024 06:01:22 GMT</pubDate></item><item><title><![CDATA[库尔干假说（Kurgan hypothesis）]]></title><description><![CDATA[ 
 <br>有关印欧起源问题的假说之一，该假说认为印欧人起源于“坟冢文化”，即东欧大草原上亚姆纳文化（意为“坑墓文化”）及其前身这一考古文化。<br>
该假说又被成为<a data-href="草原假说（Steppe Hypothesis）" href="术语\草原假说（steppe-hypothesis）.html" class="internal-link" target="_self" rel="noopener nofollow">草原假说（Steppe Hypothesis）</a><br>
另一个反驳的观点是<a data-href="安纳托利亚假说（Anatolian Hypothesis）" href="术语\安纳托利亚假说（anatolian-hypothesis）.html" class="internal-link" target="_self" rel="noopener nofollow">安纳托利亚假说（Anatolian Hypothesis）</a>。<br>推荐阅读：<a data-href="乌俄大草原或许是印欧人的神秘故乡" href="文献及报道\报道\乌俄大草原或许是印欧人的神秘故乡.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="🏇" aria-label="🏇" data-icon="🏇" aria-hidden="true" style="transform: translateY(0px);"></span>乌俄大草原或许是印欧人的神秘故乡</a><img class="emoji" draggable="false" alt="🏇" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f3c7.svg" height="18px" style="max-width: 100%;">。]]></description><link>术语\库尔干假说（kurgan-hypothesis）.html</link><guid isPermaLink="false">术语/库尔干假说（Kurgan hypothesis）.md</guid><pubDate>Thu, 12 Sep 2024 06:06:45 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f3c7.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f3c7.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[参考文献]]></title><description><![CDATA[ 
 <br><a data-href="1988 Nature 前往波利尼西亚的特快列车" href="文献及报道\文献\2024年阅读\1-6月\1988-nature-前往波利尼西亚的特快列车.html" class="internal-link" target="_self" rel="noopener nofollow">1988 Nature 前往波利尼西亚的特快列车</a><br>
澳洲学者贝尔伍德(Peter.A.Bellwood)则利用白乐思等语言学家建立起的一个南岛语言演化的大略时空架构,提出南岛语族在太平洋岛屿上的迁徙与扩散路径,即“Express-Train”(快车)模型<a data-footref="1" href="about:blank#fn-1-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>。<br>
“Express-Train”模型认为南岛语族起源于台湾,从台湾开始,经菲律宾、印度尼西亚东部,而后快速向波利尼西亚扩散。<br><br><br>
<br>
<br>Diamond J. M.,“The express train to Polynesia,”Nature, 1988(336), pp. 307−308.<a href="about:blank#fnref-1-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>术语\快车模型(express-train).html</link><guid isPermaLink="false">术语/快车模型(Express-Train).md</guid><pubDate>Tue, 16 Jul 2024 07:28:22 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[扩展贝叶斯天际线图（Extended Bayesian Skyline Plot，EBSP）]]></title><description><![CDATA[ 
 <br>EBSP是 <a data-href="贝叶斯天际线图（Bayesian Skyline Plot, BSP）" href="术语\贝叶斯天际线图（bayesian-skyline-plot,-bsp）.html" class="internal-link" target="_self" rel="noopener nofollow">贝叶斯天际线图（Bayesian Skyline Plot, BSP）</a> 的扩展版本，考虑了更多种群动态的复杂性。与BSP不同，EBSP允许种群大小在时间上有变化，具有更高的灵活性。它可以应用于更广泛的时间范围内的种群动态估计，包括较长的时间段。<br>总的来说，EBSP相比BSP更为灵活和复杂，可以更准确地估计更广泛时间范围内的种群历史动态。选择使用哪种方法取决于研究的时间尺度和对种群动态复杂性的需求。]]></description><link>术语\扩展贝叶斯天际线图（extended-bayesian-skyline-plot，ebsp）.html</link><guid isPermaLink="false">术语/扩展贝叶斯天际线图（Extended Bayesian Skyline Plot，EBSP）.md</guid><pubDate>Thu, 18 Jul 2024 08:22:44 GMT</pubDate></item><item><title><![CDATA[扩展单倍型同源性（ extended haplotype homozygosity，EHH）]]></title><description><![CDATA[ 
 <br>是一种用于研究遗传多样性和种群历史的统计方法。它用于分析基因组上的扩展单倍型，即在一个特定的位点上，一系列连续的遗传标记（如SNP）在种群中呈现出高度同源性。EHH可以帮助揭示选择压力、种群分化以及人类迁徙等事件对基因组的影响。在基因组学和人类遗传学研究中，EHH是评估单倍型扩展程度和检测可能的选择信号的一种<br>
重要工具。]]></description><link>术语\扩展单倍型同源性（-extended-haplotype-homozygosity，ehh）.html</link><guid isPermaLink="false">术语/扩展单倍型同源性（ extended haplotype homozygosity，EHH）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:48 GMT</pubDate></item><item><title><![CDATA[垃圾注释残余变异不耐受评分（Junk Annotation Residual Variation Intolerance Score，JARVIS）]]></title><description><![CDATA[ 
 <br>解释: JARVIS 是一种专门用于评估非编码区域中遗传变异影响的评分系统。非编码区域不直接编码蛋白质，但参与基因调控。JARVIS 通过计算某个非编码区域在群体中承受变异的能力，帮助识别哪些非编码区域受到强烈的功能性约束，说明这些区域在基因调控中可能至关重要。]]></description><link>术语\垃圾注释残余变异不耐受评分（junk-annotation-residual-variation-intolerance-score，jarvis）.html</link><guid isPermaLink="false">术语/垃圾注释残余变异不耐受评分（Junk Annotation Residual Variation Intolerance Score，JARVIS）.md</guid><pubDate>Tue, 08 Oct 2024 01:48:55 GMT</pubDate></item><item><title><![CDATA[拉帕努伊（Rapa Nui）]]></title><description><![CDATA[ 
 <br>太平洋的一个国家。靠近南美洲。]]></description><link>术语\拉帕努伊（rapa-nui）.html</link><guid isPermaLink="false">术语/拉帕努伊（Rapa Nui）.md</guid><pubDate>Sun, 15 Sep 2024 07:40:45 GMT</pubDate></item><item><title><![CDATA[拉皮塔文化]]></title><description><![CDATA[ 
 ]]></description><link>术语\拉皮塔文化.html</link><guid isPermaLink="false">术语/拉皮塔文化.md</guid><pubDate>Tue, 16 Jul 2024 07:38:03 GMT</pubDate></item><item><title><![CDATA[黎族（Li）]]></title><description><![CDATA[ 
 <br>黎族，是<a data-href="海南" href="术语\海南.html" class="internal-link" target="_self" rel="noopener nofollow">海南</a>岛最早的居民，黎族语言属汉藏语系壮侗语族黎语支。大多数黎族人都能兼说汉语，过去黎族没有本民族文字，通用汉文，1957年在党和政府帮助下创制了以拉丁字母为基础的黎文，信仰仍处在原始宗教阶段。<br>
黎族主要聚居在海南省的陵水、保亭、三亚、乐东、东方、昌江、白沙、琼中、五指山等县市，其余散居在海南省境内的万宁、儋州、屯昌、琼海等县市以及贵州等省。]]></description><link>术语\黎族（li）.html</link><guid isPermaLink="false">术语/黎族（Li）.md</guid><pubDate>Thu, 20 Jun 2024 12:27:24 GMT</pubDate></item><item><title><![CDATA[连锁不平衡（linkage disequilibrium，LD）]]></title><description><![CDATA[ 
 <br>连锁不平衡（Linkage Disequilibrium，简称LD）是遗传学中的一个概念，指的是两个或多个基因座（位点）之间的遗传联系不随机地分布在一个群体中。换句话说，当两个或多个基因座之间的特定基因型组合在群体中出现的频率高于随机组合时，就存在连锁不平衡。<br>通常，基因座之间的连锁不平衡是由于这些基因座位于同一染色体上，并且不经常经历重组，从而导致它们在后代中保持相对稳定的遗传联系。连锁不平衡可以是正的（即特定基因型组合的频率高于预期），也可以是负的（即特定基因型组合的频率低于预期），或者可能没有明显的连锁不平衡。<br>连锁不平衡在遗传研究中具有重要意义，因为它可以提供有关基因座之间相互作用、群体演化、疾病易感性等方面的信息。通过分析不同基因座之间的连锁不平衡模式，研究人员可以了解这些基因座在进化过程中的演化轨迹，以及它们在群体中的遗传分布情况。连锁不平衡还可以用于关联研究，帮助识别与特定疾病或性状相关的基因变异。<br>总之，连锁不平衡是一种描述基因座之间遗传联系的现象，对于遗传学、进化生物学和医学研究都具有重要意义。]]></description><link>术语\连锁不平衡（linkage-disequilibrium，ld）.html</link><guid isPermaLink="false">术语/连锁不平衡（linkage disequilibrium，LD）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:29 GMT</pubDate></item><item><title><![CDATA[连续进化附带杂交假说]]></title><description><![CDATA[ 
 ]]></description><link>术语\连续进化附带杂交假说.html</link><guid isPermaLink="false">术语/连续进化附带杂交假说.md</guid><pubDate>Thu, 20 Jun 2024 12:23:30 GMT</pubDate></item><item><title><![CDATA[联合衍生等位基因频率谱（joint Derived Allele Frequency spectrum， joint DAF）]]></title><description><![CDATA[ 
 <br>DAF，即 Derived Allele Frequency，指的是在给定的基因组样本中衍生等位基因（Derived Alleles）的频率。在遗传学中，衍生等位基因是相对于祖先等位基因（Ancestral Allele）而言的，它是通过突变从祖先等位基因中产生的较新的等位基因。因此，DAF 是衡量这些较新等位基因在某个种群或样本中分布频率的一种方式。<br><br>Joint DAF 是指同时考虑两个或多个种群（或样本）的衍生等位基因频率分布的情况，以构建一个联合频率谱。这种联合频率谱能够反映出两个种群之间的遗传差异和共同特征，是研究种群间遗传分化、迁移和混合等人口遗传学现象的重要工具。<br><br>假设我们在研究两个人群（种群A和种群B）的基因组数据，并且我们关注于某个具体的基因座（位点）。<br>
<br>在这个位点上，祖先等位基因是G，而衍生等位基因是A。
<br>在种群A的样本中，我们发现A的频率为0.2（20%的个体携带衍生等位基因A），即DAF=0.2。
<br>在种群B的样本中，A的频率为0.5（50%的个体携带衍生等位基因A），即DAF=0.5。
<br>如果我们构建一个 Joint DAF，我们会同时考虑这两个种群的 DAF 数据。例如，我们可以创建一个矩阵或表格，其中一个维度表示种群 A 的衍生等位基因数量（或频率），另一个维度表示种群 B 的衍生等位基因数量（或频率）。这样，每个单元格的值就表示在这两个种群中具有特定衍生等位基因数量组合的位点数量。<br>设想一个简化的情形，我们只考虑每个种群中有或没有衍生等位基因A的情况：<br>
<br>d0_0表示在种群A中没有衍生等位基因A的位点数；
<br>d0_1表示在种群A中有衍生等位基因A的位点数；
<br>d1_0表示在种群B中没有衍生等位基因A的位点数；
<br>d1_1表示在种群B中有衍生等位基因A的位点数。
<br>如果我们发现某个位点在种群 A 中没有衍生等位基因 A（即 d0_0），但在种群 B 中有（即 d1_1），这个组合的计数会增加。通过分析这样的联合 DAF 数据，研究者可以揭示两个种群间的遗传差异和相似性，从而深入理解它们的遗传历史和演化关系。]]></description><link>术语\联合衍生等位基因频率谱（joint-derived-allele-frequency-spectrum，-joint-daf）.html</link><guid isPermaLink="false">术语/联合衍生等位基因频率谱（joint Derived Allele Frequency spectrum， joint DAF）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:54 GMT</pubDate></item><item><title><![CDATA[镰刀型细胞贫血病]]></title><description><![CDATA[ 
 <br>镰刀型细胞贫血病又称镰刀状细胞型贫血、镰状细胞贫血，是一种遗传性血红蛋白病&nbsp;，因β-肽链第6位氨基酸谷氨酸被缬氨酸所代替，构成镰状血红蛋白，取代了正常血红蛋白。临床表现为慢性溶血性贫血、易感染和再发性疼痛危象引起慢性局部缺血从而导致器官组织损害。主要通过输血、药物治疗等方法进行治疗。纯合子患者预后较差，杂合子患者预后相对较好。<br>本病为遗传性血红蛋白病，因β链第6位氨基酸谷氨酸被缬氨酸代替，形成了异常的血红蛋白S（HbS），取代了正常血红蛋白（HbA），氧分压下降时血红蛋白S分子之间相互作用，成为螺旋形多聚体，使红细胞扭曲成镰状细胞（即镰变现象）。镰变的红细胞可发生溶血、堵塞毛细血管等，引起相关症状。<br>患者刚出生时，因胚胎血红蛋白（HbF）比例高，镰变现象不明显，3～4个月后才出现头晕、乏力等贫血症状及黄疸，6个月后可见肝、脾大，发育迟缓。因镰状细胞在微循环内淤滞，造成血管阻塞及受累组织器官的功能障碍，临床上表现为急性发生的骨痛、胸痛和（或）腹痛、血尿等，称为疼痛危象，可在疾病过程中反复出现。若大量血液滞留在肝、脾，将会出现肝脾进行性肿大而发生低血容量性休克。微小血管闭塞引起局部组织缺氧和炎症反应，可引起手足关节肿胀、充血、疼痛，称手足综合征。此外，镰刀型细胞贫血病还可能影响神经系统而出现智力低下。<br>J. B. S.霍尔丹（J. B. S. Haldane）便是第一批能够认识到这一点的人之一。60多年前，他就提出，某些群体，特别是具有镰状细胞贫血或地中海贫血（也是一种遗传性血液病）遗传倾向的人，对疟疾具有更好的自然抵抗力。<br>
J. Lederberg. 1999. J. B. S. Haldane (1949) on infectious disease and evolution.&nbsp;Genetics&nbsp;153(1):1–3. For a biographical account of Haldane and his ideas see pages 141–223 in M. Kohn,&nbsp;A Reason for Everything: Natural Selection and the English Imagination&nbsp;(London: Faber and Faber, 2004).
]]></description><link>术语\镰刀型细胞贫血病.html</link><guid isPermaLink="false">术语/镰刀型细胞贫血病.md</guid><pubDate>Thu, 20 Jun 2024 12:21:27 GMT</pubDate></item><item><title><![CDATA[良渚文化]]></title><description><![CDATA[ 
 <br>良渚文化，距今5300年至4000年期间，中国新石器时代考古学文化之一，出现于约发展于长江下游环太湖地区，共发现500多处遗址，以良渚遗址附近的莫角山为中心区。良渚文化最主要特征是玉器的使用和随葬，包括大件的玉琮、玉璧、玉钺。玉琮是工艺最精、最具权威性的玉器，往往刻有精致的兽面纹，是神灵的图象，玉钺则是军权、王权的象征。良渚文化的政治体为酋邦，亦有学者认为已出现国家雏形，能动员大量劳动力，各酋邦间结成联盟，神权色彩浓厚，建造大型祭祀场所、城墙及防洪土墙，社会成员地位分化，形成贵族和普通平民阶层。<br>
良渚文化的先民们前无古人，后无来者，建筑水平，狂热信仰。<br>
良渚先民善用石犁耕作，稻米开始成为主要粮食来源，并有原始文字。良渚文化被视为中国史前文明的重要摇篮，良渚玉器标示文明时代已经到来，与北方龙山文化交流密切。<br><a data-href="稻（Oryza sativa L.）" href="术语\稻（oryza-sativa-l.）.html" class="internal-link" target="_self" rel="noopener nofollow">稻（Oryza sativa L.）</a>作农业是良渚文化的根基。<br>良渚文化结束于酋邦或国家解体，农业衰落，玉器失传，继后的<a data-href="马桥文化" href="术语\马桥文化.html" class="internal-link" target="_self" rel="noopener nofollow">马桥文化</a>倒退回自给自足、狩猎与采摘的经济状态，回复比较分散的部落社会。]]></description><link>术语\良渚文化.html</link><guid isPermaLink="false">术语/良渚文化.md</guid><pubDate>Thu, 20 Jun 2024 12:26:47 GMT</pubDate></item><item><title><![CDATA[亮岛]]></title><description><![CDATA[ 
 <br>亮岛人遗址：<br>位于福建省连江县北竿乡桥仔村东北的亮岛上。现存面积约90平方米。2011～2015年4次发掘。  <br>发现的最重要遗迹为两座墓葬。墓葬距地表30～40厘米，墓坑平面呈不规则长椭圆形，未见葬具。墓主遗骸保存状况良好，葬式为仰身屈肢葬。1号墓的墓主为30～35岁的成年男性，面朝东，墓中随葬有贝壳。年代距今8185～8035年。2号墓的墓主可能为约30岁的成年女性，头朝东，面朝北。年代距今7620～7570年。通过对墓主骨骼特征的分析，判断1号墓墓主为澳美人种，2号墓墓主为蒙古人种。出土遗物主要有陶器、石器、骨器和贝壳。陶器以夹砂陶为主、泥质陶为辅，陶胎以黄褐色为主。可辨器形有陶罐、陶钵和陶杯等，纹饰有刻划纹、压印纹、附加堆纹等。石器多为打制石器，包括蚝蛎啄、砍砸器、石锤、石砧、石核、石片和石料等。骨器有鱼叉、骨镞、骨刀、骨饰及骨料等。亮岛人的发现，为探索东南沿海地区的人地关系及台湾海峡两岸沿海地区新石器时代的起源提供了新的线索。]]></description><link>术语\亮岛.html</link><guid isPermaLink="false">术语/亮岛.md</guid><pubDate>Thu, 20 Jun 2024 12:19:55 GMT</pubDate></item><item><title><![CDATA[临床研究中基线信息的统计分析与统计图表]]></title><description><![CDATA[ 
 <br>
<a data-tooltip-position="top" aria-label="https://zhuanlan.zhihu.com/p/48696595" rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/48696595" target="_blank">临床研究中基线信息的统计分析与统计图表 - 知乎 (zhihu.com)</a>
<br>1 基线信息的概念与内容<br>“基线”并无严格的定义，Segen医学词典给临床研究语境中基线（baseline）的解释是：基线是研究人群在前瞻性研究中最开始时的健康状况，是研究对象在接受试验组或对照组干预措施前的“0”时刻。药物的安全性和有效性可从基线数据的变化中评估，基线数据组间分布的差异或对结果评估造成偏倚。通常所谓的“基线”实则相对“随访”而言，专用于前瞻性研究设计，不过其它研究设计类型也可用“基线“泛指研究人群的基本情况。基线信息包括两方面的内容：（1）研究人群的入选排除过程。先用入选标准粗略圈定分析人群，再用排除标准修正分析人群；（2）研究人群基线特征的描述与比较。基线特征常常包括社会人口学特征、临床特征、实验室检查指标、以及疾病史和用药史等内容。<br>2 基线信息的展示形式<br>研究人群的入选排除情况，常用的展示形式是研究人群流程图，即文章中的“图1”。不同研究设计类型在具体的入排流程上有所不同，此前的文章中已有提及，也展示过相应实例 ，此处不再赘述。研究人群基线特征的描述与比较常用基线表格展示，即文章中的“表1”。 “表1”在具体展示时，依据研究情形的不同，有不同的形式：干预性研究中，按实验组和对照组分组展示，如PLANTO、CHANCE等大型随机对照临床试验；观察性研究中，按不同的暴露因素分组，如CNSR II 研究中评估急性脑卒中合并非瓣膜房颤患者出院使用华法令的影响因素时按是否房颤分组去描述、比较基线信息， 或按暴露因素的不同水平分组展示，如CKB研究组在研究肥胖和卒中发生的关系时，基线表格里按暴露因素BMI的18.0、20.5、23.0、25.0、27.5、30.0六个切点分成七组。上述两种思维均为从因到果的逻辑顺序，适用于前瞻性的研究设计。若为回顾性研究设计，则按从果到因的逆向逻辑顺序，依据结局分“病例”和“对照”组，如Fox等在探讨冠心病与儿童时期卒中危险因素关系时，以是否患冠心病分为病例组和对照组来描述和比较基线信息。若不分组，可将所有研究人群作为单组描述，但这种情形较为少见，如跟着指南走（GWTG）的台湾登记研究。<br>3 基线信息的统计方法<br>研究人群的入选排除，只需统计每个排除标准的频数和百分比即可，但应采用层次排除法，以避免因不同的排除标准统计的人数有交叉致使合计排除人数与实际排除人数不一致。所谓层次排除法即分层次去统计每一个排除标准所排除的人数和百分比。如NRMI 2研究中研究急性心梗病人的急救医疗服务与后续护理质量时，其人群排除过程即采用了层次排除法[。<br>基线特征的描述与比较，需依据变量的不同特性（如连续变量、分类变量，正态、非正态），组别数（两组、三组及以上）选择相应的描述形式和检验方法。连续变量采用“均数±标准差 ”或者 “中位数（四分位数间距）”描述，两组时采用t检验或Wilcoxon秩和检验，三组时采用方差分析或Kruskal-Wallis检验。分类变量采用“频数（百分比）”描述，卡方检验评估组间均衡性。传统的假设检验采用P值评估协变量的组间均衡性，但大样本时容易出现假阳性，且采用P值评估无法给出量化的差异，因此大样本的随机对照临床试验直接看均数和百分比，并不报告组间比较的P值，转而采用标化的组间差值或者Hodges-Lehmann估计数评估两组间均数或中位数的差异。<br><img src="https://pic1.zhimg.com/80/v2-924a8ec3aca2ca9e6d1aaf08e88f04ec_720w.webp" referrerpolicy="no-referrer"><br>标化的组间差值和Hodges-Lehmann估计数目前国内的研究者使用较少，在此做一简要介绍。连续变量的标化组间差值计算公式如下：<br><img src="https://pic2.zhimg.com/80/v2-eb5e2deb053124886e1bb75ff0b81575_720w.webp" referrerpolicy="no-referrer"><br>Xe和Xne分别表示暴露组和非暴露某连续变量的均数，Se和Sne分别表示暴露组和非暴露组某连续变量的标准差。分类变量的标化组间差值计算公式如下：<br><img src="https://pic1.zhimg.com/80/v2-29c345d1e430de2f26a642b936d564a0_720w.webp" referrerpolicy="no-referrer"><br>其中，Pe和Pne分别表示暴露组和非暴露某分类变量某一水平的组内百分占比。标化差值的绝对值超过10相当于传统假设检验的P&lt;0.05,可认为两组间协变量的差异具有统计学意义，小于10可认为组间均衡。Hodges-Lehmann估计数的想法简单，即计算两组数据配对后差值的中位数。其中Yj,Xj分别表示两组某变量的观测值，n1,n2表示两组的观测个数。<br><img src="https://pic2.zhimg.com/80/v2-c611c6ecd11b8dcabc50035c563499dd_720w.webp" referrerpolicy="no-referrer"><br>4 常用的统计分析工具<br>研究人群入选流程图的绘制，可先借助统计软件，按层次排除法统计出各排除标准排除的人数和百分比，再借助传统的流程图绘制软件（如Visio） 或者办公软件（MS Office/Power point）,甚至一些小巧的在线工具如ProcessON(<a data-tooltip-position="top" aria-label="https://link.zhihu.com/?target=https%3A//www.processon.com/" rel="noopener nofollow" class="external-link" href="https://link.zhihu.com/?target=https%3A//www.processon.com/" target="_blank">https://www.processon.com/</a>)、<a data-tooltip-position="top" aria-label="https://link.zhihu.com/?target=http%3A//draw.io%28https%3A//www.draw.io/%29" rel="noopener nofollow" class="external-link" href="https://link.zhihu.com/?target=http%3A//draw.io%28https%3A//www.draw.io/%29" target="_blank">http://draw.io(https://www.draw.io/)</a>等绘制流程图，再导出合适格式的图片。<br>基线特征的描述与比较，借助传统统计分析软件（如SPSS、SAS、R、Stata）的默认菜单或者模块基本上均可实现，但在操作难易度、便利性、可重复性、代码留痕等方面各有优劣。表 2 简要例举了SAS里常用的基线表格统计分析工具。<br><img src="https://pic1.zhimg.com/80/v2-0f41141599158df36639d4e62f4edfb0_720w.webp" referrerpolicy="no-referrer"><br>此外，还可借助一些基于上述软件的二次开发工具包更方便快捷的获得基线统计表。如SAS软件平台里可借助笔者开发的基线表格宏程序%ggBaseline一键式自动生成适合学术期刊的RTF或PDF格式的统计表格。%ggBaseline生成的统计表格，涵盖单组、多组，用P值或者用标化的组间差值/Hodges-Lehmann估计数评估组间均衡性等多种形式，具体样式如图1所示。其它软件平台，如R的qwraps2软件包里面的summary_table() 函数亦可尝试。<br><img src="https://pic1.zhimg.com/80/v2-28eac7428fb873869600898c02eb506c_720w.webp" referrerpolicy="no-referrer"><br>临床研究基线信息是研究结果的重要部分，是研究人群社会人口学特征的基本刻画，是同类研究结果互相比较的基础，同时也是对随机对照研究随机化过程的一种评价方法，此外，基线信息组间均衡性的比较也为后续多因素模型校正的效应评估提供参考依据。]]></description><link>术语\临床研究中基线信息的统计分析与统计图表.html</link><guid isPermaLink="false">术语/临床研究中基线信息的统计分析与统计图表.md</guid><pubDate>Thu, 20 Jun 2024 12:24:23 GMT</pubDate><enclosure url="https://pic1.zhimg.com/80/v2-924a8ec3aca2ca9e6d1aaf08e88f04ec_720w.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://pic1.zhimg.com/80/v2-924a8ec3aca2ca9e6d1aaf08e88f04ec_720w.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[磷酸二羟丙酮]]></title><description><![CDATA[ 
 <br>磷酸二羟丙酮是糖酵解过程中的一个重要中间产物，也是脂质生物合成的出发物。其在长期新冠患者中的减少可能反映了这些患者糖酵解和脂质代谢过程的扰乱。]]></description><link>术语\磷酸二羟丙酮.html</link><guid isPermaLink="false">术语/磷酸二羟丙酮.md</guid><pubDate>Thu, 20 Jun 2024 12:21:46 GMT</pubDate></item><item><title><![CDATA[琉球群岛（ Ryūkyū islands）]]></title><description><![CDATA[ 
 <br>琉球群岛（日语：琉球列島／りゅうきゅうれっとう Ryūkyū rettō /?），是太平洋西部的一系列岛屿群，位于台湾与九州之间，包括冲绳群岛、大隅群岛、吐噶喇群岛、奄美群岛（以上合称萨南群岛）、先岛群岛（包含宫古群岛和八重山群岛）、大东群岛等群岛，并且包含了日本单方面宣称拥有的尖阁诸岛（即钓鱼岛及其附属岛屿，与中华人民共和国、台湾有主权争议）。居住人口以世居于此的琉球族为主。现今由日本管辖，当中萨南群岛属鹿儿岛县管辖，其余隶属冲绳县。<br>琉球群岛的特殊地理位置，使其自古以来成为东北亚和东南亚邻近国家的贸易枢杻。其历史上曾建有琉球国等国家，与中国明朝、清朝及古代日本均有朝贡关系。17世纪末期，琉球国被位于日本九州南部的萨摩藩侵略，失去奄美群岛之领土。日本明治维新之后，1871年将琉球国编为令制国，次年改设琉球藩，正式纳入日本版图。1879年，日本废除琉球藩，在奄美群岛除外的琉球群岛岛群设置冲绳县管辖，奄美群岛则另划归鹿儿岛县。太平洋战争期间，琉球群岛成为唯一被盟军攻占的日本领土，战后被美国接管，之后在1952年4月1日与1972年5月14日分阶段交还日本。]]></description><link>术语\琉球群岛（-ryūkyū-islands）.html</link><guid isPermaLink="false">术语/琉球群岛（ Ryūkyū islands）.md</guid><pubDate>Thu, 20 Jun 2024 12:37:33 GMT</pubDate></item><item><title><![CDATA[琉球王国（Ryukyu Kingdom）]]></title><description><![CDATA[ 
 <br>琉球王国（Ryukyu Kingdom）是位于日本冲绳群岛的一个历史上的独立国家，存在于14世纪至19世纪期间。琉球王国的领土包括了今天的冲绳县以及邻近的一些小岛，它在东亚地区的海上贸易和文化交流中扮演了重要角色。<br>琉球王国的政治体制是以君主制为基础的，君主称为“国王”（也称“尚王”），他是政治和宗教的领袖。琉球王国与中国、日本以及其他邻近国家保持着经济、文化和外交关系，是一个独特的文化中心。它发展了自己独特的文化、语言、音乐、舞蹈和艺术，受到了中国、日本和其他亚洲国家的影响。<br>琉球王国在17世纪和18世纪达到了巅峰时期，在这个时期，它成为了东亚地区的一个重要贸易中心，进行了广泛的海上贸易和文化交流。然而，19世纪初，琉球王国逐渐受到了日本和中国的影响和压力，最终在1879年被日本吞并，成为了日本的一部分，琉球地区也演变成了现代的冲绳县。<br>琉球王国的历史和文化对于研究东亚地区的历史、文化和国际关系具有重要意义，它在当今冲绳地区仍然保留着丰富的文化遗产和传统]]></description><link>术语\琉球王国（ryukyu-kingdom）.html</link><guid isPermaLink="false">术语/琉球王国（Ryukyu Kingdom）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:45 GMT</pubDate></item><item><title><![CDATA[硫酸乙酰肝素（Keratan sulfate，KS）]]></title><description><![CDATA[ 
 <br>硫酸乙酰肝素（Heparan sulfate）是一种大分子多糖，属于糖胺聚糖家族的一员，存在于所有动物的细胞表面和细胞外基质中。它由重复的二糖单元组成，这些二糖单元可以在多个位置进行硫酸化。硫酸乙酰肝素通过与各种蛋白质相互作用，参与多种生物学过程，包括细胞增殖、细胞分化、细胞信号传导、血液凝固、炎症反应以及病毒入侵等。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403312249293.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\硫酸乙酰肝素（keratan-sulfate，ks）.html</link><guid isPermaLink="false">术语/硫酸乙酰肝素（Keratan sulfate，KS）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:47 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403312249293.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403312249293.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[龙山文化]]></title><description><![CDATA[<a class="tag" href="?query=tag:单倍群" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#单倍群</a> <a class="tag" href="?query=tag:单倍群" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#单倍群</a> 
 <br>龙山文化，又称为黑陶文化。黑陶就是黑色的陶。公元前3000年繁荣。也就是距今5000年。<br>
<img alt="龙山文化" src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Longshan_cultures_and_centres.svg/1050px-Longshan_cultures_and_centres.svg.png" referrerpolicy="no-referrer"><br>龙山文化的意义是什么？
19世纪和20世纪初，对于中国文化和文明的起源，存在着对立的观点：西方起源与本土起源。史前中国文化“西方起源”最具代表性的说法之一是由J·G·安德森（J.G.Andersson，1874-1960）于1921年发掘河南仰韶新石器时代遗址时提出的。仰韶出土的陶瓷中，有不少是彩绘的。陶器碎片。安德森认为仰韶彩陶起源于西方，与中亚的阿瑙和东欧的特里皮利亚有联系。这种观点存在严重缺陷，长期以来一直被学术界抛弃。龙山文化遗址驳斥了上述观点。
<br><br>龙山文化遗址中，mtDNA 单倍群多样性：D4,B4,D5a,F2,F4,都存在。 <a href=".?query=tag:单倍群" class="tag" target="_blank" rel="noopener nofollow">#单倍群</a> <br><br>龙山文化遗址中，Y 染色体存在 C2，O2，O3。 <a href=".?query=tag:单倍群" class="tag" target="_blank" rel="noopener nofollow">#单倍群</a> ]]></description><link>术语\龙山文化.html</link><guid isPermaLink="false">术语/龙山文化.md</guid><pubDate>Tue, 10 Sep 2024 13:54:00 GMT</pubDate><enclosure url="https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Longshan_cultures_and_centres.svg/1050px-Longshan_cultures_and_centres.svg.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Longshan_cultures_and_centres.svg/1050px-Longshan_cultures_and_centres.svg.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[鲁凯（Rukai）]]></title><description><![CDATA[ 
 <br>为台湾原住民族。]]></description><link>术语\鲁凯（rukai）.html</link><guid isPermaLink="false">术语/鲁凯（Rukai）.md</guid><pubDate>Tue, 29 Oct 2024 12:59:20 GMT</pubDate></item><item><title><![CDATA[卵母细胞闭锁（follicular atresia）]]></title><description><![CDATA[ 
 <br>卵母细胞闭锁是指在卵母细胞发育过程中，部分卵泡（包含卵母细胞的结构）由于无法达到成熟状态而经历的退化或凋亡过程。卵母细胞闭锁是<a data-href="细胞竞争（cell competition）" href="术语\细胞竞争（cell-competition）.html" class="internal-link" target="_self" rel="noopener nofollow">细胞竞争（cell competition）</a>的一种具体表现，在哺乳动物中表现尤为明显。]]></description><link>术语\卵母细胞闭锁（follicular-atresia）.html</link><guid isPermaLink="false">术语/卵母细胞闭锁（follicular atresia）.md</guid><pubDate>Fri, 02 Aug 2024 01:43:53 GMT</pubDate></item><item><title><![CDATA[罗百氏傍人（Paranthropus robustus）]]></title><description><![CDATA[ 
 <br>罗百氏傍人估计是属于200-120万年前。它有大的矢状嵴、颚骨、颚肌及后犬齿牙齿，故适合生活在干旱的环境。<br>罗百氏傍人是较鲍氏傍人及埃塞俄比亚傍人更早发现的人科粗壮种。布鲁姆的这个发现是首个粗壮南方古猿，并是继达特的非洲南猿后第二个南方古猿。布鲁姆从南方古猿发现智人的演化并非单一直线，而是复杂的分化而成。]]></description><link>术语\罗百氏傍人（paranthropus-robustus）.html</link><guid isPermaLink="false">术语/罗百氏傍人（Paranthropus robustus）.md</guid><pubDate>Thu, 20 Jun 2024 12:27:22 GMT</pubDate></item><item><title><![CDATA[导入]]></title><description><![CDATA[ 
 <br><br>生活中，常常存在这样的例子：<br>
<br>在某段时间内，交通信号灯的颜色变化序列是：红色 - 黄色 - 绿色 - 红色。
<br>在某个星期天气的变化状态序列：晴朗 - 多云 - 雨天。
<br>像交通信号灯一样，某一个状态只由前一个状态决定，这就是一个一阶马尔可夫模型。<br>而像天气这样，天气状态间的转移仅依赖于前 n 天天气的状态，即状态间的转移仅依赖于前 n 个状态的过程。<br>这个过程就称为n 阶马尔科夫模型。<br>不通俗的讲，马尔可夫模型（Markov model）描述了一类重要的随机过程，随机过程又称随机函数，是随时间而随机变化的过程。<br>举个例子，假如小明每天早上会选择下列两种食物的一种：<br>
<br>包子
<br>煎饼果子
<br>如果某一天选择了包子，那么第二天有40%的概率继续选择包子，60%的概率选择煎饼果子；如果某一天选择了煎饼果子，那么第二天有50%的概率继续选择煎饼果子，50%的概率选择包子。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031635787.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>马尔可夫链的核心三要素：<br>
<br>状态空间StatesSpace
<br>无记忆性Memorylessness

<br>P(St|St-1,St-2,St-3......)=P(St|St-1)


<br>转移矩阵Transition Matrix<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031637896.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">
<br>通过持续的推演，就可以发现，标准的马尔科夫链最终的稳态分布不受初始的状态影响。<br><br>存在一类重要的随机过程：如果一个系统有 N 个状态，S1,S2......S3,等，随着时间的推移，该系统从某一状态转移到另一状态。<br>如果用表示系统在时间 qt 的状态变量，那么 t 时刻的状态取值为Sj(1&lt;=j&lt;=N)的概率取决于前 t-1 个时刻(1, 2, …, t-1)的状态，该概率为：<br>
p(qt=Sj|qt-1=Si,qt-2=Sk,...)
<br>
<br>假设一：如果在特定情况下，系统在时间 t 的状态只与其在时间 t-1 的状态相关，则该系统构成一个离散的一阶马尔可夫链。
<br>假设二：如果只考虑独立于时间 t 的随机过程，状态与时间无关，那么
<br>
p(qt=Sj|qt-1=Si)=aij,1≤i，j≤N
<br>即：t 时刻状态的概率取决于前 t-1 个时刻(1, 2, …, t-1)的状态,且状态的转换与时间无关，则该随机过程就是马尔可夫模型。<br>基于普通的马尔科夫模型，发展出了<a data-href="隐马尔科夫模型（Hiden Markov Model）" href="术语\隐马尔科夫模型（hiden-markov-model）.html" class="internal-link" target="_self" rel="noopener nofollow">隐马尔科夫模型（Hiden Markov Model）</a>。]]></description><link>术语\马尔科夫链（markov-chain）.html</link><guid isPermaLink="false">术语/马尔科夫链（Markov Chain）.md</guid><pubDate>Thu, 20 Jun 2024 12:25:20 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031635787.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031635787.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[马尔科夫链蒙特卡罗（Markov Chain Monte Carlo，MCMC）]]></title><description><![CDATA[ 
 <br>是一种计算方法，用于从参数的后验分布中采样，以便近似地估计参数的不确定性和模型的后验概率分布。<br>马尔科夫链蒙特卡罗（Markov Chain Monte Carlo，MCMC）方法是马尔科夫链家族的一员，正确理解基础的马尔科夫模型/<a data-href="马尔科夫链（Markov Chain）" href="术语\马尔科夫链（markov-chain）.html" class="internal-link" target="_self" rel="noopener nofollow">马尔科夫链（Markov Chain）</a>至关重要。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031659906.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">]]></description><link>术语\马尔科夫链蒙特卡罗（markov-chain-monte-carlo，mcmc）.html</link><guid isPermaLink="false">术语/马尔科夫链蒙特卡罗（Markov Chain Monte Carlo，MCMC）.md</guid><pubDate>Thu, 20 Jun 2024 12:25:17 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031659906.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031659906.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[马家窑文化]]></title><description><![CDATA[ 
 ]]></description><link>术语\马家窑文化.html</link><guid isPermaLink="false">术语/马家窑文化.md</guid><pubDate>Thu, 20 Jun 2024 12:26:55 GMT</pubDate></item><item><title><![CDATA[马桥文化]]></title><description><![CDATA[ 
 <br>马桥文化，发现于今中华人民共和国江南地区的一种新石器文化，被视为太湖流域（包括杭州湾地区）的一个典型遗存，因此类遗存最早发现于上海马桥遗址中层，故1982年定名为马桥文化，与越国历史重叠，与百越相关。<br>马桥文化距今约3900-3200年历史，于1959年在原上海县马桥镇东俞塘村发现，1982年被命名。马桥文化来源于浙江西南 。和中原龙山文化后的岳石文化及二里头文化一样，覆盖着小于或等于良渚文化的地域广度。<br>从年代上来讲，马桥文化紧接着良渚文化，但文化面貌上截然不同。马桥文化继承了少量良渚文化的文化因素，而且整类良渚文化因素在马桥文化中不占主导地位。<br>马桥文化的文化特征出现返老还祖现象。如在马桥古文化遗址中只发现了粗陋的陶器杂件，却并没有出土同时期其他文化已出现的，包括玉器，带细刻图案的陶器、象牙器等的精美物件。因此推断马桥文化和良渚文化是不同来源的两种文化。此外，作为马桥文化原始文字的形器结构和表意方式，比上距千年的良渚文字更为简单。出现这种现象，考古界认为除社会发展因素外，很大程度是受生态环境的影响。石器仍然为主要的生产工具，重要的是出现刀、凿、镞等小件青铜器。虽未发现铸铜工具，但预示著古上海及长江下游开始进入青铜器时代。]]></description><link>术语\马桥文化.html</link><guid isPermaLink="false">术语/马桥文化.md</guid><pubDate>Thu, 20 Jun 2024 12:26:56 GMT</pubDate></item><item><title><![CDATA[梅勒氏卡盘]]></title><description><![CDATA[ 
 <br>梅勒氏卡盘是细胞生物学中的一个概念，用于描述细胞内线粒体（mitochondria）的 DNA（线粒体 DNA 或 mtDNA）复制方式。梅勒氏卡盘原理是根据线粒体DNA复制的模式而提出的，该模式是由细胞生物学家乔尔·梅勒（Joel Melnick）和肯尼斯·梅勒（Kenneth Melnick）首次描述的。<br>在梅勒氏卡盘模型中，线粒体DNA复制的过程被比喻为一个卡盘。这个卡盘由线粒体DNA的两条链分开，就像在复制DNA时进行分离。一旦两条链被分开，新的DNA碱基可以与每条链上的互补碱基配对，形成两条新的DNA链。这个复制过程类似于分子复制，其中每个DNA链作为模板用于合成新的DNA链。<br>梅勒氏卡盘的模型有助于解释线粒体DNA复制的机制，以及线粒体DNA如何维护其完整性和稳定性。线粒体DNA复制的过程与细胞核DNA复制有很大不同，因为线粒体是细胞内的细胞器，具有自己的DNA和独特的复制机制。梅勒氏卡盘概念有助于科学家更好地理解线粒体功能和线粒体疾病的发生机制。]]></description><link>术语\梅勒氏卡盘.html</link><guid isPermaLink="false">术语/梅勒氏卡盘.md</guid><pubDate>Thu, 20 Jun 2024 12:21:19 GMT</pubDate></item><item><title><![CDATA[梅山文化（蚩尤文化）]]></title><description><![CDATA[ 
 <br><br>梅山是一个以湘中梅山为核心的古老历史地域的称谓，其范围包括今天的湘中娄底以及益阳、邵阳、湘潭的部分市县，而以宋时的新化、安化为核心。梅山文化至今仍集中保存于湖南中部、西南部，包含丰富的人类原始信息，记录了人类心智发展并成型的过程，是一种古老的原始的、神秘的地域文化。<br>以北宋熙宁五年（公元1072年）为界，开梅山以前的梅山文化为早期的苗瑶族文化，其文化源流可以上溯到远古的九黎、三苗，因此具有一般地域文化都不具备的“独立根性”；“旧不与中国通”的封闭的地理环境，使它很少受到外来文化的影响，因之保留了丰富的本土原生态文化内涵，成为宝贵的历史文化遗产。前期梅山文化的影响不仅深入到了湘南、湘西南、广东，也辐射到广西、贵州、重庆、四川、云南乃至东南亚地区， 并成为部分湘西南雪峰山文化的根脉。后期的梅山文化是汉人的移民文化，是外来先进文化与本地土著文明融合、渗透而形成的一种复合文化，后来 发展成为近、现代湖湘文化的重要源头。<br>梅山被认为是国际性民族瑶族以及苗族、畲族等西南地区少数民族的祖山，在这方地域上一定曾经发生过我们现有的研究尚未探及的一段历史进程，并给今天生活在这片土地上的我们留下了许多扑朔迷离的表象。随着研究的不断深入，我们将廓清迷雾，逐渐解开其中的一些迷团，还原那一段充满魅力的历史。研究过程中，我们将可能直接面对两个命题：一、环洞庭湖文明是中华文明的最重要的发祥地之一，而资江流域在其中产生过重要的影响。二、湖南是世界水稻的起源与传播中心之一，而苗族的先祖是我国最早由渔猎转入水田稻作农业的民族。包括梅山文化在内的苗楚文化作为先进的稻作文化的代表，历史上对黄河文明进行了主体基因输入。]]></description><link>术语\梅山文化（蚩尤文化）.html</link><guid isPermaLink="false">术语/梅山文化（蚩尤文化）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:43 GMT</pubDate></item><item><title><![CDATA[美拉尼西亚]]></title><description><![CDATA[ 
 <br>美拉尼西亚人（Melanesians），太平洋西南部美拉尼西亚群岛的民族集团，包括所罗门人、瓦努阿图人、新喀里多尼亚人、斐济人以及巴布亚新几内亚的美拉尼西亚人，共约110万人（1978），属澳大利亚人种美拉尼西亚类型，皮肤黝黑，头发卷曲，阔脸宽鼻，颌部突出，使用多种语言，属南岛语系-美拉尼西亚语族，崇拜图腾和首领，迷信巫术和占卜，有专职巫师和祭司，但后来部分人改信基督教。<br>美拉尼西亚人的祖先可能早在5000年前从<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E4%B8%9C%E5%8D%97%E4%BA%9A/390261?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E4%B8%9C%E5%8D%97%E4%BA%9A/390261?fromModule=lemma_inlink" target="_blank">东南亚</a>陆续迁入。19世纪初英、法等<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E6%AE%96%E6%B0%91%E8%80%85/7557127?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E6%AE%96%E6%B0%91%E8%80%85/7557127?fromModule=lemma_inlink" target="_blank">殖民者</a>侵入时，社会处于<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E5%8E%9F%E5%A7%8B%E5%85%AC%E7%A4%BE%E5%88%B6/860187?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E5%8E%9F%E5%A7%8B%E5%85%AC%E7%A4%BE%E5%88%B6/860187?fromModule=lemma_inlink" target="_blank">原始公社制</a>解体的不同阶段，<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E4%B8%9C%E5%8D%97%E5%9C%B0%E5%8C%BA/9952689?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E4%B8%9C%E5%8D%97%E5%9C%B0%E5%8C%BA/9952689?fromModule=lemma_inlink" target="_blank">东南地区</a>已出现严格的<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E7%AD%89%E7%BA%A7%E5%88%B6%E5%BA%A6/7259935?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E7%AD%89%E7%BA%A7%E5%88%B6%E5%BA%A6/7259935?fromModule=lemma_inlink" target="_blank">等级制度</a>和早期国家，一般仍保留氏族部落组织。<br>美拉尼西亚人保留丹尼索瓦人<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/DNA/98123?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/DNA/98123?fromModule=lemma_inlink" target="_blank">DNA</a><br>据一项新的研究提示，尽管在所有非<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E9%9D%9E%E6%B4%B2/81619?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E9%9D%9E%E6%B4%B2/81619?fromModule=lemma_inlink" target="_blank">非洲</a>现代人群中都能找到尼安德特人的DNA，但美拉尼西亚人体内还含有明显的从丹尼索瓦人传下来的基因成分。在过去，许多现代人群的祖先曾经与其他原始人种进行杂交，而那些原始人种——如尼安德特人和丹尼索瓦人——后来灭绝了。绘制出来自这些物种以及其他可能的原始人物种尚存的基因序列的<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E5%9F%BA%E5%9B%A0%E6%B5%81/8072430?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E5%9F%BA%E5%9B%A0%E6%B5%81/8072430?fromModule=lemma_inlink" target="_blank">基因流</a>动可帮助阐明人类遗传学模式以及过去发生的这一物种杂交是如何影响<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E4%BA%BA%E7%B1%BB%E8%BF%9B%E5%8C%96/2657033?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E4%BA%BA%E7%B1%BB%E8%BF%9B%E5%8C%96/2657033?fromModule=lemma_inlink" target="_blank">人类进化</a>的。<br><img src="https://bkimg.cdn.bcebos.com/pic/f9198618367adab44388d5f781d4b31c8701e42e?x-bce-process=image/resize,m_lfit,w_440,limit_1" referrerpolicy="no-referrer"><br>美拉尼西亚人(4张)<br>](<a rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/pic/%E7%BE%8E%E6%8B%89%E5%B0%BC%E8%A5%BF%E4%BA%9A%E4%BA%BA/3454993/1327124808/f9198618367adab44388d5f781d4b31c8701e42e?fr=lemma&amp;fromModule=lemma_content-image" target="_blank">https://baike.baidu.com/pic/%E7%BE%8E%E6%8B%89%E5%B0%BC%E8%A5%BF%E4%BA%9A%E4%BA%BA/3454993/1327124808/f9198618367adab44388d5f781d4b31c8701e42e?fr=lemma&amp;fromModule=lemma_content-image</a> "美拉尼西亚人")<br>为了更多地了解尼安德特人和丹尼索瓦人遗传学在现代人类中的影响力和<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E7%AA%81%E5%87%BA%E6%80%A7/55133843?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E7%AA%81%E5%87%BA%E6%80%A7/55133843?fromModule=lemma_inlink" target="_blank">突出性</a>，Benjamin Vernot等人对全球各地1523个人的<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E5%9F%BA%E5%9B%A0%E7%BB%84/2746983?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E5%9F%BA%E5%9B%A0%E7%BB%84/2746983?fromModule=lemma_inlink" target="_blank">基因组</a>进行了分析。他们的结果显示，所有非非洲人群的基因组中有大约1.5%~4%的基因来自尼安德特人，但美拉尼西亚人是他们所检查的人群中唯一还带有显著丹尼索瓦人血统的人群，因为美拉尼西亚人的基因组中有1.9%至3.4%的基因来自丹尼索瓦人。研究人员接着对尼安德特人和丹尼索瓦人基因序列的基因流动进行了绘制；他们发现，在现代人的历史中，他们与尼安德特人的杂交混合至少发生在3个不同的时期。相反，现代人与丹尼索瓦人的杂交混合可能只发生了一次。进一步的分析揭示，现代人基因组的某些区域——包括那些在发育皮层和成人<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E7%BA%B9%E7%8A%B6%E4%BD%93/6018382?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E7%BA%B9%E7%8A%B6%E4%BD%93/6018382?fromModule=lemma_inlink" target="_blank">纹状体</a>内发挥作用的基因组区域——尤其缺乏这些远古的遗传谱系。这些发现对人类演化和基因流动提供了新的了解。]]></description><link>术语\美拉尼西亚.html</link><guid isPermaLink="false">术语/美拉尼西亚.md</guid><pubDate>Thu, 20 Jun 2024 12:19:34 GMT</pubDate><enclosure url="https://bkimg.cdn.bcebos.com/pic/f9198618367adab44388d5f781d4b31c8701e42e?x-bce-process=image/resize,m_lfit,w_440,limit_1" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://bkimg.cdn.bcebos.com/pic/f9198618367adab44388d5f781d4b31c8701e42e?x-bce-process=image/resize,m_lfit,w_440,limit_1"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[美索美洲（Mesoamerica）]]></title><description><![CDATA[ 
 <br>美索美洲是一个文化和历史上非常丰富的区域，覆盖了今天的墨西哥中部和南部、危地马拉、伯利兹、萨尔瓦多和洪都拉斯的部分地区。美索美洲是许多重要文明的发源地，包括玛雅文明、阿兹特克文明、奥尔梅克文明和萨波特克文明。这些文明发展了复杂的城市、金字塔建筑、宗教仪式、政治制度以及天文学、数学等科学知识。]]></description><link>术语\美索美洲（mesoamerica）.html</link><guid isPermaLink="false">术语/美索美洲（Mesoamerica）.md</guid><pubDate>Sun, 22 Sep 2024 03:12:10 GMT</pubDate></item><item><title><![CDATA[美洲]]></title><description><![CDATA[ 
 <br><a data-href="南美洲（South America）" href="术语\南美洲（south-america）.html" class="internal-link" target="_self" rel="noopener nofollow">南美洲（South America）</a>和<a data-href="北美洲（North America）" href="术语\北美洲（north-america）.html" class="internal-link" target="_self" rel="noopener nofollow">北美洲（North America）</a>的合称。<br>
位于太平洋东岸、大西洋西岸。美洲位于西半球，自然地理分为北美洲、中美洲和南美洲，南纬60°~北纬80°，西经30°~西经160°，面积达4206.8万平方公里，占地球地表面积的8.3%、陆地面积的28.4%，美洲地区拥有大约9.5亿居民，占到了人类总数的13.5%。是唯一一个整体在西半球的大洲。北美洲和南美洲，以巴拿马运河为界，总称亚美利加洲，简称美洲，美洲又被称为“新大陆”。]]></description><link>术语\美洲.html</link><guid isPermaLink="false">术语/美洲.md</guid><pubDate>Thu, 20 Jun 2024 12:20:18 GMT</pubDate></item><item><title><![CDATA[美洲原住民（Native Americans (NAs)）]]></title><description><![CDATA[ 
 <br>美洲原住民（英语：Indigenous peoples of the Americas），是指在前哥伦布时期就已经生活在北美洲、中美洲和南美洲的民族及其后代。美洲原住民在距今一万到两万年前抵达美洲，在遗传上，亦被证实为古西伯利亚人的直系后裔，[3]经过长期的不断迁移与推进，最终散布到美洲全境。美洲原住民并非单一民族，亦非单一语系，而有数十种以上的语系。受地理环境、自然条件等各方面的影响，逐渐形成了许多不同语言、不同习俗、不同文化的部落。]]></description><link>术语\美洲原住民（native-americans-(nas)）.html</link><guid isPermaLink="false">术语/美洲原住民（Native Americans (NAs)）.md</guid><pubDate>Fri, 19 Jul 2024 02:46:59 GMT</pubDate></item><item><title><![CDATA[蒙古语系(Mongolic)]]></title><description><![CDATA[ 
 <br>Mongolic，或汉语中称为“蒙古语系”，是世界主要语系之一，主要分布在蒙古国、中国、俄罗斯等地。使用人口约900多万。<br>蒙古语系的语言包括：<br>
<br>蒙古语：是蒙古国和中国内蒙古自治区的官方语言，也是世界上使用人数最多的蒙古语系语言。
<br>布里亚特语：主要分布在俄罗斯布里亚特共和国和中国内蒙古自治区。
<br>鄂温克语：主要分布在俄罗斯、中国和蒙古国。
<br>达斡尔语：主要分布在中国内蒙古自治区和黑龙江省。
<br>土族语：主要分布在中国青海省。
<br>东乡语：主要分布在中国甘肃省。
<br>保安语：主要分布在中国甘肃省。
<br>蒙古语系的特征：<br>
<br>黏着语：词缀附着在词干上，表示不同的语法意义。
<br>元音和谐：相邻的元音必须遵循一定的规则。
<br>语音丰富：有丰富的辅音和元音。
<br>词汇丰富：有大量词汇，特别是与游牧生活相关的词汇。
<br>蒙古语系的起源：<br>蒙古语系起源于中亚，大约在公元前1000年左右形成。之后，随着蒙古民族的迁徙，蒙古语系逐渐传播到东亚和北亚。<br>蒙古语系的重要性：<br>蒙古语系是世界上重要的语系之一，是蒙古民族和中国部分少数民族的母语。蒙古语系也是研究中亚历史和文化的重要工具。]]></description><link>术语\蒙古语系(mongolic).html</link><guid isPermaLink="false">术语/蒙古语系(Mongolic).md</guid><pubDate>Thu, 20 Jun 2024 12:27:41 GMT</pubDate></item><item><title><![CDATA[蒙古族]]></title><description><![CDATA[ 
 <br>蒙古族是以成吉思汗及其后代建立的蒙古帝国而闻名的民族，分布在中国的内蒙古自治区及蒙古国。他们有着悠久的游牧传统，文化中包含了丰富的歌唱和马术元素。]]></description><link>术语\蒙古族.html</link><guid isPermaLink="false">术语/蒙古族.md</guid><pubDate>Thu, 27 Jun 2024 03:27:11 GMT</pubDate></item><item><title><![CDATA[蒙自人]]></title><description><![CDATA[ 
 <br>最早于1989年在云南省红河哈尼族彝族自治州蒙自市郊文澜镇一个采石场被发现。抢救性发掘最终起获一个较为完整的人类头盖骨化石、3片头盖骨化石碎片和人类下颌骨、牙齿化石，以及大量灰烬、烧红土、柴炭、烧骨炭、兽骨等各类化石。由于洞中发现大量大型鹿类化石，考古人员后来将遗址命名为“马鹿洞”，在此曾经生活的古人类被命名为“马鹿洞人”。]]></description><link>术语\蒙自人.html</link><guid isPermaLink="false">术语/蒙自人.md</guid><pubDate>Fri, 27 Sep 2024 13:52:53 GMT</pubDate></item><item><title><![CDATA[孟-高棉（Mon-Khmer）]]></title><description><![CDATA[ 
 <br>居住在东南亚大陆部分地区的一组民族和语言群体。这个名称来源于两个较为突出的群体：<a data-href="孟人（Mon）" href="术语\孟人（mon）.html" class="internal-link" target="_self" rel="noopener nofollow">孟人（Mon）</a>和<a data-href="高棉人（Khmer）" href="术语\高棉人（khmer）.html" class="internal-link" target="_self" rel="noopener nofollow">高棉人（Khmer）</a>。<br><a data-href="孟-高棉语系（Mon-Khmer languages）" href="术语\孟-高棉语系（mon-khmer-languages）.html" class="internal-link" target="_self" rel="noopener nofollow">孟-高棉语系（Mon-Khmer languages）</a>属于<a data-href="南岛语系（Austroasiatic language family）" href="术语\南岛语系（austroasiatic-language-family）.html" class="internal-link" target="_self" rel="noopener nofollow">南岛语系（Austroasiatic language family）</a>的一支，这个语系包括了多种语言，其中许多语言在今天的越南、老挝、柬埔寨、泰国和缅甸被使用。孟-高棉人群具有丰富的文化遗产，包括独特的建筑风格、舞蹈、音乐和宗教习俗。<br>总的来说，孟-高棉人群对东南亚的历史、文化和语言多样性做出了重要贡献，并继续影响着该地区的社会和文化格局。]]></description><link>术语\孟-高棉（mon-khmer）.html</link><guid isPermaLink="false">术语/孟-高棉（Mon-Khmer）.md</guid><pubDate>Sun, 14 Jul 2024 14:47:10 GMT</pubDate></item><item><title><![CDATA[孟-高棉语系（Mon-Khmer languages）]]></title><description><![CDATA[ 
 <br>属于<a data-href="南岛语系（Austroasiatic language family）" href="术语\南岛语系（austroasiatic-language-family）.html" class="internal-link" target="_self" rel="noopener nofollow">南岛语系（Austroasiatic language family）</a>的一支，这个语系包括了多种语言，其中许多语言在今天的越南、老挝、柬埔寨、泰国和缅甸被使用。孟-高棉人群具有丰富的文化遗产，包括独特的建筑风格、舞蹈、音乐和宗教习俗。]]></description><link>术语\孟-高棉语系（mon-khmer-languages）.html</link><guid isPermaLink="false">术语/孟-高棉语系（Mon-Khmer languages）.md</guid><pubDate>Sun, 14 Jul 2024 14:47:15 GMT</pubDate></item><item><title><![CDATA[孟德尔随机化分析（Mendelian Randomization, MR）]]></title><description><![CDATA[ 
 <br>是一种利用遗传变异作为工具变量来评估某一暴露因素对某一结果影响的因果推断方法。<br>
举例说明：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401061437494.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>横坐标（X轴）：代表特定单核苷酸多态性（SNP）对暴露因素（例如嗜中性粒细胞数量）的影响大小，即每个SNP变异对嗜中性粒细胞数量变化的效应大小。


<br>纵坐标（Y轴）：代表同样这些SNP对结果变量（如线粒体DNA拷贝数，mtCN）的影响大小，即每个SNP变异对mtCN变化的效应大小。

每个点代表一个SNP。如果这些点大致沿着对角线排列，则意味着暴露因素（嗜中性粒细胞数量）与结果（线粒体DNA拷贝数）之间可能存在因果关系。斜率的方向和强度提供了关于因果效应方向和大小的信息。
<br>如果斜率为正，则表明SNP导致的暴露因素增加与结果的增加是相关的，即嗜中性粒细胞数量的增加与线粒体DNA拷贝数的增加相关。
<br>如果没有明显的趋势或点散布无序，则表明暴露和结果之间可能没有直接的因果关系。
]]></description><link>术语\孟德尔随机化分析（mendelian-randomization,-mr）.html</link><guid isPermaLink="false">术语/孟德尔随机化分析（Mendelian Randomization, MR）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:42 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401061437494.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401061437494.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[孟德尔遗传（Mendelian laws of inheritance）]]></title><description><![CDATA[ 
 <br>"孟德尔遗传形式"是指遵循孟德尔遗传定律（Mendelian laws of inheritance）的遗传模式。这些定律是由奥地利生物学家格雷戈尔·约翰·孟德尔在19世纪中叶发现的，他通过研究豌豆的遗传特征，首次系统性地描述了遗传性状的传递方式。<br>根据孟德尔遗传定律，遗传性状是由一对基因（一个来自母亲，一个来自父亲）控制的，而这些基因可以是显性的（dominant）或隐性的（recessive）。不同基因组合会导致不同的表现型（外观特征）。孟德尔遗传定律形成了现代遗传学的基础，也被称为遗传学的"经典遗传"。]]></description><link>术语\孟德尔遗传（mendelian-laws-of-inheritance）.html</link><guid isPermaLink="false">术语/孟德尔遗传（Mendelian laws of inheritance）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:44 GMT</pubDate></item><item><title><![CDATA[孟人（Mon）]]></title><description><![CDATA[ 
 <br>孟人是东南亚历史上的一个重要民族，主要分布在今天的缅甸下缅甸地区和泰国西部。他们的历史可以追溯到公元前，对东南亚的历史文化有着深远的影响。]]></description><link>术语\孟人（mon）.html</link><guid isPermaLink="false">术语/孟人（Mon）.md</guid><pubDate>Sun, 14 Jul 2024 14:46:22 GMT</pubDate></item><item><title><![CDATA[弥生人]]></title><description><![CDATA[ 
 <br>弥生人（日语：弥生人／やよいじん Yayoi-jin），是指在弥生时代（西元前10世纪到西元3世纪）抵达<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>列岛的移民集团，与<a data-href="绳文人" href="术语\绳文人.html" class="internal-link" target="_self" rel="noopener nofollow">绳文人</a>无论在文化上还是体质上都有明显区别。两群人(和后来的<a data-href="古坟人" href="古坟人" class="internal-link" target="_self" rel="noopener nofollow">古坟人</a>)融合成为现代<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>人。<br><a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>分子人类学家崎谷满表示单倍群O1b2主要常见于<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>人、朝鲜人和满人，O1则在长江文明的男性身上找到。长江文明没落后分成几个部落分别向西和向北迁移，其中一支到达山东半岛、朝鲜半岛和<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>列岛。]]></description><link>术语\弥生人.html</link><guid isPermaLink="false">术语/弥生人.md</guid><pubDate>Fri, 21 Jun 2024 07:17:55 GMT</pubDate></item><item><title><![CDATA[弥生时代（Yayoi period）]]></title><description><![CDATA[ 
 <br>弥生时期（Yayoi period）是日本考古学中的一个时期，大约从公元前300年到公元3世纪中叶。这一时期得名于日本茨城县弥生町的遗址，是日本考古学家在20世纪初发现的一个重要考古遗址。<br>弥生时期标志着日本社会和文化的重要变革。在这个时期，日本开始从旧石器时代的狩猎采集经济逐渐过渡到农耕经济。人们开始种植稻谷和其他农作物，养殖家畜，农耕和农业生产成为日本社会的主要经济活动。<br>此外，弥生时期还见证了社会的分层化和政治权力的集中。人们开始使用铁器和铜器，制作陶器也更加精细，社会内部分工增多，出现了更多不同的手工艺和职业。这一时期还有大量的考古遗址，如弥生时期的居住遗址、财物埋葬、祭祀遗址等，这些遗址提供了研究弥生时期社会、经济、文化和宗教的重要信息。<br>总之，弥生时期是日本历史上一个重要的转折点，标志着农耕经济的兴起和社会结构的变革，对于理解日本古代社会和文化的发展具有重要意义。]]></description><link>术语\弥生时代（yayoi-period）.html</link><guid isPermaLink="false">术语/弥生时代（Yayoi period）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:37 GMT</pubDate></item><item><title><![CDATA[米斯利亚洞穴（Misliya Cave）]]></title><description><![CDATA[ 
 ]]></description><link>术语\米斯利亚洞穴（misliya-cave）.html</link><guid isPermaLink="false">术语/米斯利亚洞穴（Misliya Cave）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:17 GMT</pubDate></item><item><title><![CDATA[苗瑶语（Hmong–Mien languages）]]></title><description><![CDATA[ 
 <br>苗瑶语系是苗、瑶、畲等族群所使用的有共同来源的语系。学术界对于苗瑶语的语言系属分类有不同看法：大部分学者多认为苗瑶语是独立语系，即苗瑶语系，部分中国学者则认为苗瑶语是属于汉藏语系的语族，即苗瑶语族。<br>苗瑶语的使用者分布于中国的中南和西南地区，以及中南半岛北部邻近中国的地区，主要为苗族、瑶族和畲族。这三个民族大约有1300万人口，其中使用苗瑶语的约占四分之三。<br>苗瑶语具体包括各地苗族使用的苗语、巴那语，各地瑶族使用的勉语、布努语、巴哼语、优诺语、炯奈语，以及极少数粤东畲族使用的畲语，等等。一般可以分为苗语支（族）和瑶语支（族），也有学者增加一个独立的畲语支。<br>西方学者多称瑶语支为“勉语族”（英语：Mienic languages），同时称苗瑶语为“苗勉语”（英语：Hmong–Mien languages）。]]></description><link>术语\苗瑶语（hmong–mien-languages）.html</link><guid isPermaLink="false">术语/苗瑶语（Hmong–Mien languages）.md</guid><pubDate>Thu, 20 Jun 2024 12:27:41 GMT</pubDate></item><item><title><![CDATA[摩梭人（Mosuo）]]></title><description><![CDATA[ 
 <br>摩梭人是中国大陆最后的母系人口，人口约 53,000 人（2010 年人口普查），主要分布在云南省和四川省交界的泸沽湖周边。]]></description><link>术语\摩梭人（mosuo）.html</link><guid isPermaLink="false">术语/摩梭人（Mosuo）.md</guid><pubDate>Thu, 20 Jun 2024 12:19:19 GMT</pubDate></item><item><title><![CDATA[磨沟遗址]]></title><description><![CDATA[ 
 <br>中国甘肃省甘南<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>自治州临潭县陈旗（今王旗）乡磨沟村境内遗址。<br>磨沟遗址及墓群，位于中国甘肃省甘南<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>自治州临潭县陈旗(今王旗)乡磨沟村,出土的墓葬以齐家文化、寺哇文化墓葬为主，还有零星的明清墓葬，总面积约40万平方米。<br>磨沟遗址是甘南地区发现最早的人类居址，也是洮河流域发现的<a data-href="仰韶文化" href="术语\仰韶文化.html" class="internal-link" target="_self" rel="noopener nofollow">仰韶文化</a>和<a data-href="马家窑文化" href="术语\马家窑文化.html" class="internal-link" target="_self" rel="noopener nofollow">马家窑文化</a>分布最西端的一个遗址，对研究三种文化的分布及延续变异关系具有重要价值。墓葬区，研究齐家文化的性质、丧葬习俗及阶级的起源具有较高学术价值。<br>磨沟遗址被中国社会科学院考古学论坛列为 “2008年度中国六大考古新发现之一”，被国家文物局评为“2008年度全国十大考古新发现之一”。2013年由省级重点文物保护单位晋升为国家重点文物保护单位。<br>位于临潭县陈旗乡磨沟村眺河西岸阳田川台地西南角。面积250 X 250平方米，文化层厚1.8～2.6米。陶片分泥质陶和夹砂陶两种，器形有重唇口尖底瓶、敛口钵、平沿尖底瓶、夹砂红陶罐、高领罐、双大耳罐等，彩陶纹饰有变体鸟纹、勾叶纹、圆点纹、网纹、三角纹、弧线纹、带纹等，其它纹饰有绳纹、附加堆纹、篮纹等，生产工具有石斧、石凿、带孔石刀、石球、骨锥、陶纺轮等。装饰品有石环、陶环、赤铁矿石。札器有玉壁等。发现房址两座，系圆形竖穴式，属<a data-href="仰韶文化" href="术语\仰韶文化.html" class="internal-link" target="_self" rel="noopener nofollow">仰韶文化</a>庙底沟类型，是甘南地区发现最早的人类居址。<br>遗址包含<a data-href="仰韶文化" href="术语\仰韶文化.html" class="internal-link" target="_self" rel="noopener nofollow">仰韶文化</a>、<a data-href="马家窑文化" href="术语\马家窑文化.html" class="internal-link" target="_self" rel="noopener nofollow">马家窑文化</a>、齐家文化的不同遗存，为洮河流域发现的<a data-href="仰韶文化" href="术语\仰韶文化.html" class="internal-link" target="_self" rel="noopener nofollow">仰韶文化</a>和<a data-href="马家窑文化" href="术语\马家窑文化.html" class="internal-link" target="_self" rel="noopener nofollow">马家窑文化</a>分布最西端的一个遗址，对研究三种文化的分布及延续变异关系具有重要价值。同时发现的基葬区，面积396 x 650平方米，埋葬密集，互相叠压，属齐家文化和寺洼文化墓区。所清理的一号墓，系长方形抹角竖穴式，墓主为男性，居墓中。仰身直肢，其左侧葬成年1具、少年1具，右侧葬少年1具、儿童5具，均骨殖不全或错置.墓中出土铜镯1只，陶器2个，大小骨珠100多个，骨制臂9111只，动物牙齿化石1个。墓为齐家文化殉人墓，墓主不同寻常的葬式、丰富的殉葬品尤其是贵重的铜镯，表明其据有的权力和拥有的财富，儿童占很高比例的人殉，可能是战争掠夺来的奴隶。此墓对研究齐家文化的性质、丧葬习俗及阶级的起源具有较高学术价值。为省级文物保护单位。<img alt="磨沟遗址" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%A3%A8%E6%B2%9F%E9%81%97%E5%9D%80.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\磨沟遗址.html</link><guid isPermaLink="false">术语/磨沟遗址.md</guid><pubDate>Thu, 20 Jun 2024 12:20:17 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%A3%A8%E6%B2%9F%E9%81%97%E5%9D%80.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%A3%A8%E6%B2%9F%E9%81%97%E5%9D%80.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[末次冰消期（last deglaciation）]]></title><description><![CDATA[ 
 <br>在<a data-href="末次盛冰期 (Last Glacial Maximum,LGM)" href="术语\末次盛冰期-(last-glacial-maximum,lgm).html" class="internal-link" target="_self" rel="noopener nofollow">末次盛冰期 (Last Glacial Maximum,LGM)</a>之后，冰川消融，时间大概在（19.0–11.5 kya）期间。]]></description><link>术语\末次冰消期（last-deglaciation）.html</link><guid isPermaLink="false">术语/末次冰消期（last deglaciation）.md</guid><pubDate>Tue, 20 Aug 2024 12:44:13 GMT</pubDate></item><item><title><![CDATA[末次盛冰期 (Last Glacial Maximum,LGM)]]></title><description><![CDATA[ 
 <br>末次冰盛期（英语：Last Glacial Maximum，缩写为LGM），又译末次巅冰期，是指末次冰期中气候最为寒冷、冰川规模达到最大的时期，距今约2.65至1.9～2万年。<br>
在这一时期，末次冰期达到极盛，北欧大部、北美北部以及北亚的一部分均被大陆冰盖覆盖。末次冰盛期对地球气候产生了深远的影响，引发了干旱、沙漠化以及海平面的大幅下降。<br>
<a data-tooltip-position="top" aria-label="http://www.sciencemag.org/cgi/content/short/325/5941/710" rel="noopener nofollow" class="external-link" href="http://www.sciencemag.org/cgi/content/short/325/5941/710" target="_blank">The Last Glacial Maximum</a>. Peter U. Clark, Arthur S. Dyke, Jeremy D. Shakun, Anders E. Carlson, Jorie Clark, Barbara Wohlfarth, Jerry X. Mitrovica, Steven W. Hostetler, A. Marshall McCabe. American Association for the Advancement of Science. 7 August 2009: Vol. 325. no. 5941, pp. 710 - 714.&nbsp;[2010-01-27].&nbsp;<a data-tooltip-position="top" aria-label="https://dx.doi.org/10.1126%2Fscience.1172873" rel="noopener nofollow" class="external-link" href="https://dx.doi.org/10.1126%2Fscience.1172873" target="_blank">doi:10.1126/science.1172873</a>
<br>
Mithen, Steven.&nbsp;<a data-tooltip-position="top" aria-label="https://archive.org/details/aftericeglobalhu00mith" rel="noopener nofollow" class="external-link" href="https://archive.org/details/aftericeglobalhu00mith" target="_blank">After the Ice</a>. Cambridge, Massachusetts: Harvard University Press. 2004:&nbsp;<a data-tooltip-position="top" aria-label="https://archive.org/details/aftericeglobalhu00mith/page/n22" rel="noopener nofollow" class="external-link" href="https://archive.org/details/aftericeglobalhu00mith/page/n22" target="_blank">3</a>.&nbsp;<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0674015703" rel="noopener nofollow" class="external-link" title="Special:网络书源/0674015703" href="https://zh.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0674015703" target="_blank">ISBN&nbsp;0674015703</a>.
]]></description><link>术语\末次盛冰期-(last-glacial-maximum,lgm).html</link><guid isPermaLink="false">术语/末次盛冰期 (Last Glacial Maximum,LGM).md</guid><pubDate>Mon, 04 Nov 2024 06:30:35 GMT</pubDate></item><item><title><![CDATA[母系氏族]]></title><description><![CDATA[ 
 <br>母系制度是以母系亲属为世系继承的亲属制度。<br>
在近现代部落民族中，仍有少数维持完全的母系社会，如<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E5%8C%97%E7%BE%8E" rel="noopener nofollow" class="external-link" title="北美" href="https://zh.wikipedia.org/wiki/%E5%8C%97%E7%BE%8E" target="_blank">北美</a>的易洛魁部落和<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E9%9C%8D%E7%9A%AE%E6%97%8F" rel="noopener nofollow" class="external-link" title="霍皮族" href="https://zh.wikipedia.org/wiki/%E9%9C%8D%E7%9A%AE%E6%97%8F" target="_blank">霍皮族</a>、<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9C%8B" rel="noopener nofollow" class="external-link" title="中国" href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9C%8B" target="_blank">中国大陆</a><a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E4%BA%91%E5%8D%97" rel="noopener nofollow" class="external-link" title="云南" href="https://zh.wikipedia.org/wiki/%E4%BA%91%E5%8D%97" target="_blank">云南</a><a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E6%91%A9%E6%A2%AD%E4%BA%BA" rel="noopener nofollow" class="external-link" title="摩梭人" href="https://zh.wikipedia.org/wiki/%E6%91%A9%E6%A2%AD%E4%BA%BA" target="_blank">摩梭人</a>、<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E8%87%BA%E7%81%A3" rel="noopener nofollow" class="external-link" title="台湾" href="https://zh.wikipedia.org/wiki/%E8%87%BA%E7%81%A3" target="_blank">台湾</a><a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E9%98%BF%E7%BE%8E%E6%97%8F" rel="noopener nofollow" class="external-link" title="阿美族" href="https://zh.wikipedia.org/wiki/%E9%98%BF%E7%BE%8E%E6%97%8F" target="_blank">阿美族</a>等。<br><a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E6%91%A9%E6%A2%AD%E4%BA%BA/4746847?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E6%91%A9%E6%A2%AD%E4%BA%BA/4746847?fromModule=lemma_inlink" target="_blank">摩梭人</a>最后一块母系<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E6%B0%8F%E6%97%8F/1700235?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E6%B0%8F%E6%97%8F/1700235?fromModule=lemma_inlink" target="_blank">氏族</a>“活化石”，摩梭人属<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E7%BA%B3%E8%A5%BF%E6%97%8F/130795?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E7%BA%B3%E8%A5%BF%E6%97%8F/130795?fromModule=lemma_inlink" target="_blank">纳西族</a>，主要居住在金沙江东部的云南省<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E5%AE%81%E8%92%97%E5%8E%BF/1200423?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E5%AE%81%E8%92%97%E5%8E%BF/1200423?fromModule=lemma_inlink" target="_blank">宁蒗县</a>以及四川盐源、木里等县，人口约四万余人。宁蒗境内摩梭人口15000多人，主要聚居在泸沽湖畔的永宁坝子。摩梭人的语言、服饰、婚姻习俗跟金沙江西部的纳西族有差异。<br>中文名<br>现代母系氏族社会<br>分布区域<br>云南省<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E5%AE%81%E8%92%97%E5%8E%BF/1200423?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E5%AE%81%E8%92%97%E5%8E%BF/1200423?fromModule=lemma_inlink" target="_blank">宁蒗县</a>以及四川盐源、木里等县<br>宁蒗县摩梭人的家庭组织在与其他民族杂居的翠玉、新营盘、大兴、红旗、红桥等地，以父系家庭为多，而泸沽湖畔的永宁聚居区，还保留着母系家庭对偶婚的残余，子女从母居，血统世系按<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E6%AF%8D%E7%B3%BB/0?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E6%AF%8D%E7%B3%BB/0?fromModule=lemma_inlink" target="_blank">母系</a>计算，男不娶，女不嫁，只缔结“阿夏”（情侣）关系。<br>摩梭人习惯依山傍水而居，房屋全用木材垒盖而成，当地俗称“<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E6%9C%A8%E6%A5%9E%E6%88%BF/0?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E6%9C%A8%E6%A5%9E%E6%88%BF/0?fromModule=lemma_inlink" target="_blank">木楞房</a>”。传统风味食品有猪膘肉、<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E8%85%8C%E9%85%B8%E9%B1%BC/0?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E8%85%8C%E9%85%B8%E9%B1%BC/0?fromModule=lemma_inlink" target="_blank">腌酸鱼</a>、苏理玛酒等。摩梭人传统节日有春节、端午节、朝山节、祭祖节、祭牧神节、祭土地节等，其中以春节和朝山节最为隆重。每年农历7月25日，永宁的摩梭人要身着盛装步行或骑马，去朝拜泸沽湖畔的格姆女神山，这叫“转女山”。其间还要举行赛马、摔跤、对歌等活动，并在山上野餐，摩梭青年男妇趁机结交阿夏。<br>摩梭人的<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E5%8E%9F%E5%A7%8B%E5%AE%97%E6%95%99/2749556?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E5%8E%9F%E5%A7%8B%E5%AE%97%E6%95%99/2749556?fromModule=lemma_inlink" target="_blank">原始宗教</a>称为“达巴教”，与丽江纳西族的东巴教有密切联系，不过达巴教的发展比东巴教缓慢，其形态亦比东巴教原始，基本上保持着原始部落宗教的特征。达巴教因巫师达巴而得名，它没有系统的教义和经书，也无宗教组织和寺庙，只有几十部（回）口诵经，另有一种占卜经（俗称算日子书），是用32个不同形体的原始图画文字书写的。<br>摩梭人能歌善舞，较为流行的是“甲蹉舞”（俗称打跳），“甲”为美好之意，“蹉”便是跳舞的意思，意即为美好的时辰而舞蹈。摩梭人的民间音乐和舞蹈是传统文化的一部分。摩梭人的音乐，除了丧葬词，一般来说，都是比较高亢豪放的，固定的音乐曲调有《阿哈巴拉》、《玛答打》、《打麦调》、《绩麻调》、《丧葬调》、《摇篮曲》、《赞美格姆女神歌》、《甲搓括》即《打跳曲》等，摩梭人吸收了藏、汉音乐，尤其是受藏传佛教音乐的影响，将本民族的一些音乐曲调有所改变，而有些古老的曲调现已失传。<br>摩梭人的乐器有笛子、葫芦笙、锁呐、鼓、钹、拨郎鼓、手摇铜铃、口弦等。在这些乐器中，较为普遍会使用的乐器，主要是笛子，男子都会吹，七八岁的牧童也会吹，笛子还是永宁赶马人旅途中消解孤独寂寞的不离伙伴。葫芦笙是打跳时少数人会使用的乐器。其它乐器主要有祭师达巴、喇嘛在举行祭祀仪式中使用的乐器。<br>摩梭舞蹈，多姿多彩，内容丰富，具有鲜明的摩梭舞蹈色彩和浓郁的民族特色。有句俗话说，是摩梭人就会跳七十二种舞，说明摩梭人的舞蹈种类是丰富的。<br>人类社会发展到21世纪的今天，泸沽湖畔仍保留着母权制家庭形式，被人们称之为“神秘的女儿国”，这是引起中外学者和游人最感神秘最感兴趣的摩梭文化现象之一。<br>母系家庭中母亲主宰一切，女性在家庭中有着崇高的地位。家庭里的成员都是一个母亲或祖母的后代。家庭中无男子娶妻，无女子出嫁，女子终生生活在母亲身边。男子夜晚去女阿夏家，清早回自己母亲家生产生活，这叫摩梭人的“走婚”。而女子在家，夜晚等男阿夏来走访，家庭成员都是母性血缘的亲人，没有父亲血缘的成员。财产按母性继承，家庭成员的血统完全以母系计算，家里没有翁婿、婆媳、妯娌、姑嫂、叔侄等关系。家庭里姐妹的孩子都是自己最亲的孩子，不分彼此母亲的姐妹也称作妈妈，对自己的生父则称为“舅舅”。<br>母系家庭的特点之二是“舅掌礼仪母掌财”，这是母系家庭权力分工的形式。家庭的喜庆祭典，较大的交换或买卖，除婚姻爱情以外的社会交往，都由舅舅或其他有本事的男性成员作主，家庭财产的保管使用、生产生活安排、一般家务及接待宾客则由母亲或家庭中聪明能干有威望的妇女作主。摩梭人有句格言：“天上飞的鹰最大，地上走的舅舅最大”。从格言可看出舅舅的社会地位。摩梭母系大家庭的男女成员是平等的，而且体现了家庭成员的合理分工。他们认为，整个社会的合理分工必然会使社会安定发展，一个家庭的合理分工必然促进这个家庭的经济发展和文明程度。<br>母系大家庭的第三个特点是，摩梭人认为，由于家庭全部成员都是同一母系血缘。加之摩梭人显著的道德意识，即崇母观念的流传弘扬，全部家庭成员亲切和睦，尊老爱幼、礼让为先，宽怀谦恭。摩梭人地方的社会风尚未，从纵横关系来看，都讲文明礼貌，养成了摩梭人从小就温柔热情，举止端庄规矩，男子豪爽而重义，女子多情而内向，社会团结、和睦。<br>其第四个特点是：母系家庭一般不分家或很少分家，母系家庭一般来说人口较多，少则十几人，多则几十人。人多了有利于家庭劳动的分工，可以从事各方面的工作，家庭容易富裕。在摩梭人的传统观念中，分家意味着对祖辈老人的不恭，意味着争财产，这是十分耻辱的事，会受到世人训斥。所以，即使是几十人的母系大家庭，也充满了欢乐祥和的气氛。孩子们有着欢乐的童年，得到众多母亲的爱，老人们安度晚年，无愧地享受天伦之乐。<br>进入21世纪的文明时代，无论外国和中国，不少家庭“舌战”不断，暴力不断，充满家庭“战争”，以至老幼受虐待，生活没有保障。然而，泸沽湖畔的摩梭人却仍保留着古老的美好母系大家庭，这里仍然家庭和睦，社会和谐，更无情杀和母系家庭中的暴力，一片和谐祥和的气氛，不愧为是“东方母系文化家园的最后一朵红玫瑰”。]]></description><link>术语\母系氏族.html</link><guid isPermaLink="false">术语/母系氏族.md</guid><pubDate>Thu, 20 Jun 2024 12:27:14 GMT</pubDate></item><item><title><![CDATA[纳-德内人（Na-Dené）]]></title><description><![CDATA[ 
 <br>纳-德内人包括一些位于加拿大西部、美国阿拉斯加和西南部（如纳瓦霍和阿帕奇）的原住民群体。纳-德内语言家族中的主要语言有阿萨巴斯卡语、纳瓦霍语和阿帕奇语。<br>
纳-德内人群是一个语言学和文化上多样化的群体，语言和文化之间存在很大差异。<br>
一个有趣的特点是，纳-德内语言群体与西伯利亚语言群体有一些联系，这为研究者提供了关于早期人类迁徙的线索。纳瓦霍人在历史上与北美的西班牙殖民者及美军有过许多接触，他们在二战期间的“风语者”计划中发挥了关键作用，使用纳瓦霍语作为加密通信语言。]]></description><link>术语\纳-德内人（na-dené）.html</link><guid isPermaLink="false">术语/纳-德内人（Na-Dené）.md</guid><pubDate>Mon, 07 Oct 2024 02:23:59 GMT</pubDate></item><item><title><![CDATA[南岛语系（Austroasiatic language family）]]></title><description><![CDATA[ 
 ]]></description><link>术语\南岛语系（austroasiatic-language-family）.html</link><guid isPermaLink="false">术语/南岛语系（Austroasiatic language family）.md</guid><pubDate>Thu, 20 Jun 2024 12:27:25 GMT</pubDate></item><item><title><![CDATA[南美洲（South America）]]></title><description><![CDATA[ 
 <br>南美洲（South America）是南亚美利加洲的简称，位于西半球、南半球。东临大西洋，西临太平洋，北临加勒比海。北部和北美洲以巴拿马运河为界，南部和南极洲隔德雷克海峡相望。<br>
南美洲是陆地面积第四大的大洲，陆地面积1784万平方千米。安第斯山脉几乎纵贯整个南美洲西部，拥有美洲最高的山峰——阿空加瓜山。安第斯山脉东部就是面积广大的亚马孙河盆地，占地超过700万平方千米，大部分地区都是热带雨林。]]></description><link>术语\南美洲（south-america）.html</link><guid isPermaLink="false">术语/南美洲（South America）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:00 GMT</pubDate></item><item><title><![CDATA[内边界膜（Inner Boundary Membrane, IBM）]]></title><description><![CDATA[ 
 <br>内边界膜是内线粒体膜（IMM）的一部分，平行于 <a data-href="线粒体外膜（Outer Mitochondrial Membrane，OMM）" href="术语\线粒体外膜（outer-mitochondrial-membrane，omm）.html" class="internal-link" target="_self" rel="noopener nofollow">线粒体外膜（Outer Mitochondrial Membrane，OMM）</a>。IBM与线粒体嵴相连，形成独特的膜结构，用于隔离线粒体内部的功能区。]]></description><link>术语\内边界膜（inner-boundary-membrane,-ibm）.html</link><guid isPermaLink="false">术语/内边界膜（Inner Boundary Membrane, IBM）.md</guid><pubDate>Mon, 26 Aug 2024 01:58:16 GMT</pubDate></item><item><title><![CDATA[内含子]]></title><description><![CDATA[ 
 <br>内含子是基因序列中的非编码区域，它们位于编码蛋白质的外显子之间。在基因表达的过程中，内含子会被转录成初级转录本的一部分，但在成熟mRNA形成之前，内含子会通过剪接过程被移除。内含子的存在允许同一个基因通过不同的剪接方式产生多个不同的mRNA变体，这种机制称为剪接变异，可以增加蛋白质的多样性。]]></description><link>术语\内含子.html</link><guid isPermaLink="false">术语/内含子.md</guid><pubDate>Thu, 20 Jun 2024 12:20:52 GMT</pubDate></item><item><title><![CDATA[内涵体分选复合体（Endosomal Sorting Complex Required for Transport，ESCRT）]]></title><description><![CDATA[ 
 <br>ESCRT复合体是一组蛋白质复合体，主要功能是介导细胞内膜的重塑和蛋白质的分选过程。ESCRT在各种细胞过程中发挥重要作用，包括多泡体（MVBs）内囊泡的形成、细胞质膜修复、胞质分裂、病毒出芽以及微自噬等。通过膜的弯曲和切割，ESCRT复合体帮助将特定蛋白质或膜片段封装到囊泡中，并运送至溶酶体或其他细胞器进行降解或再利用。]]></description><link>术语\内涵体分选复合体（endosomal-sorting-complex-required-for-transport，escrt）.html</link><guid isPermaLink="false">术语/内涵体分选复合体（Endosomal Sorting Complex Required for Transport，ESCRT）.md</guid><pubDate>Mon, 26 Aug 2024 02:13:13 GMT</pubDate></item><item><title><![CDATA[内体隔室（Endosomal compartment）]]></title><description><![CDATA[ 
 <br>内体隔室（Endosomal compartment）是细胞内部的一种膜结构，主要负责处理细胞通过内吞作用摄入的物质。内体系统包括早期内体、晚期内体和溶酶体，它们在细胞内物质转运、分解和循环中起着关键作用。这个系统不仅参与了物质的回收和降解，也在细胞信号传递、病原体入侵的防御和跨膜运输等多个生物学过程中发挥作用。<br>
<br>早期内体：细胞表面通过内吞作用摄入的物质首先被运输到早期内体。早期内体具有轻微酸性环境，可以对摄入的物质进行初步的排序和处理。部分物质可以从早期内体回收到细胞膜，而另一些则继续向下游的内体隔室转运。
<br>晚期内体：随着内体从早期向晚期转变，其内部环境变得更加酸性，这有利于更多的酶参与到物质的处理中。晚期内体是细胞内部向溶酶体转运物质的重要中转站。
<br>溶酶体：溶酶体是内体系统的一个关键组成部分，具有高度酸性的环境，内含大量的水解酶，能够分解蛋白质、多糖、脂质和核酸等生物大分子。溶酶体不仅负责降解由内体系统送达的物质，也处理那些通过自噬作用带入的细胞内组分。
<br>内体隔室在细胞的物质摄取、处理和利用中起着至关重要的作用。通过这一系统，细胞能够对环境变化做出响应，调节其内部环境，维持细胞的正常功能。此外，内体隔室在许多疾病的发生发展中也扮演着重要角色，包括感染性疾病、神经退行性疾病和癌症等，因此成为了现代生物医学研究的一个重要领域。]]></description><link>术语\内体隔室（endosomal-compartment）.html</link><guid isPermaLink="false">术语/内体隔室（Endosomal compartment）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:51 GMT</pubDate></item><item><title><![CDATA[内亚山区走廊（Inner Asian Mountain Corridor, (IAMC))]]></title><description><![CDATA[ 
 <br>内亚山区走廊（IAMC）是一条古老的交流路线，从西伯利亚的阿尔泰山脉到兴都库什山脉（今阿富汗和巴基斯坦北部），形成于公元前3千年。<br>
IAMC在公元前4千年为移动畜牧业的发展做出了贡献。<br>
青铜时代的流动牧民通过IAMC充当中亚文化和南亚文化之间的代理人，将驯化的小麦从南亚和东亚传播到内亚。青铜时代的牧民也在欧洲和中国之间传播了骑马和青铜技术，但也传播到南亚。]]></description><link>术语\内亚山区走廊（inner-asian-mountain-corridor,-(iamc)).html</link><guid isPermaLink="false">术语/内亚山区走廊（Inner Asian Mountain Corridor, (IAMC)).md</guid><pubDate>Thu, 20 Jun 2024 12:19:08 GMT</pubDate></item><item><title><![CDATA[内源性逆转录病毒（endogenous retroviruses, ERVs）]]></title><description><![CDATA[ 
 <br>也被称为<a data-href="长末端重复元件（Long Terminal Repeat elements, LTR）" href="术语\长末端重复元件（long-terminal-repeat-elements,-ltr）.html" class="internal-link" target="_self" rel="noopener nofollow">长末端重复元件（Long Terminal Repeat elements, LTR）</a>。<br>
是一类具有长末端重复序列的转座子，广泛存在于真核生物的基因组中。这些元件在结构和功能上与逆转录病毒相似，因此也被称为内源性逆转录病毒（endogenous retroviruses, ERVs）。LTR 元件通过逆转录机制在基因组中进行复制和插入。]]></description><link>术语\内源性逆转录病毒（endogenous-retroviruses,-ervs）.html</link><guid isPermaLink="false">术语/内源性逆转录病毒（endogenous retroviruses, ERVs）.md</guid><pubDate>Sun, 03 Nov 2024 03:14:28 GMT</pubDate></item><item><title><![CDATA[尼安德特人（Neanderthal）]]></title><description><![CDATA[ 
 <br>最早在德国的尼安德特河谷中发现的一个洞穴中，认为现代智人和其发生过杂交。<br>
现代智人与其发生的杂交的时间大概在距今6万年前。刚好是现代智人走出非洲，到达欧亚大陆的时候。后来又多次发生杂交，例如距今4万年前的东南亚。]]></description><link>术语\尼安德特人（neanderthal）.html</link><guid isPermaLink="false">术语/尼安德特人（Neanderthal）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:10 GMT</pubDate></item><item><title><![CDATA[尼格利陀人 (Negritos)]]></title><description><![CDATA[ 
 ]]></description><link>术语\尼格利陀人-(negritos).html</link><guid isPermaLink="false">术语/尼格利陀人 (Negritos).md</guid><pubDate>Tue, 20 Aug 2024 12:36:26 GMT</pubDate></item><item><title><![CDATA[宁夏]]></title><description><![CDATA[ 
 <br><a data-href="线粒体/树/M8" href="线粒体\树\M8" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/M8</a>, <a data-href="线粒体/树/Z" href="线粒体\树\Z" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/Z</a>, and <a data-href="线粒体/树/Y" href="线粒体\树\Y" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/Y</a>频率高。]]></description><link>术语\宁夏.html</link><guid isPermaLink="false">术语/宁夏.md</guid><pubDate>Thu, 20 Jun 2024 12:19:17 GMT</pubDate></item><item><title><![CDATA[努拉吉（Nuragic culture）]]></title><description><![CDATA[ 
 <br>努拉吉文化（Nuragic culture）是撒丁岛上的一种史前文化，约从青铜时代中期（公元前18世纪左右）开始，一直持续到罗马帝国时期（公元1世纪）。该文化的名称来源于撒丁岛上典型的石制塔形建筑——“努拉吉”（nuraghe）。这些建筑是努拉吉文化的标志性遗迹，通常为圆锥形或塔形，使用巨大的石块建造，具有军事防御、宗教仪式或社会聚会的功能。<br>努拉吉文化不仅以这些石塔著称，还以其精湛的青铜工艺、陶器制作以及复杂的社会组织闻名。考古学家认为，努拉吉文化社会可能是由酋长或部落联盟统治的，以农业、牧业和贸易为主要经济活动。]]></description><link>术语\努拉吉（nuragic-culture）.html</link><guid isPermaLink="false">术语/努拉吉（Nuragic culture）.md</guid><pubDate>Mon, 02 Sep 2024 09:10:01 GMT</pubDate></item><item><title><![CDATA[努桑塔奥海上贸易和通信网络（Nusantao Maritime Trading and Communication Networks）]]></title><description><![CDATA[ 
 <br>“努桑塔奥”这一概念是由菲律宾人类学家威廉·亨利·斯科特（William Henry Scott）提出的，用以描述早期的东南亚海上贸易和文化交流网络。该术语源自两个词： "Nusantara"，意指印尼群岛或马来群岛的地区；和 "tao"，在菲律宾语中意为“人”。因此，“努桑塔奥”大致可以被理解为“群岛之人”。<br>努桑塔奥网络描述的是从史前时期到历史时期，一系列基于水域的交流和贸易活动，覆盖了从台湾到东南亚，甚至更远的区域。这些活动包括了人员、商品、技术、文化元素以及农业和金属技术的迁移和交换。<br>这一概念也用来支持一种假设，即南岛语系的扩散主要通过这种类型的海上贸易和文化交流而非大规模的人口迁移来实现。这种网络显示了一个复杂的多文化互动模式，强调了区域内的互联性和交流的重要性。]]></description><link>术语\努桑塔奥海上贸易和通信网络（nusantao-maritime-trading-and-communication-networks）.html</link><guid isPermaLink="false">术语/努桑塔奥海上贸易和通信网络（Nusantao Maritime Trading and Communication Networks）.md</guid><pubDate>Sun, 14 Jul 2024 14:49:01 GMT</pubDate></item><item><title><![CDATA[排湾族（Paiwan）]]></title><description><![CDATA[ 
 <br>台湾原住民之一。]]></description><link>术语\排湾族（paiwan）.html</link><guid isPermaLink="false">术语/排湾族（Paiwan）.md</guid><pubDate>Tue, 29 Oct 2024 13:01:57 GMT</pubDate></item><item><title><![CDATA[嘌呤核苷酸磷酸化酶(Purine Nucleoside Phosphorylase,PNP)]]></title><description><![CDATA[ 
 <br>PNP（Purine Nucleoside Phosphorylase）是一种酶，参与嘌呤核苷类似物的代谢。它在嘌呤核苷酸的降解过程中发挥作用，将嘌呤核苷（如腺嘌呤核苷和鸟苷）分解成游离的嘌呤和核糖。这是一种重要的代谢过程，与DNA和RNA的合成以及能量代谢相关。]]></description><link>术语\嘌呤核苷酸磷酸化酶(purine-nucleoside-phosphorylase,pnp).html</link><guid isPermaLink="false">术语/嘌呤核苷酸磷酸化酶(Purine Nucleoside Phosphorylase,PNP).md</guid><pubDate>Thu, 20 Jun 2024 12:20:57 GMT</pubDate></item><item><title><![CDATA[平埔族群（Pingpu）]]></title><description><![CDATA[ 
 <br>平埔族群是早在汉人于17世纪移民来台湾移垦前，便已分布在北部的宜兰、基隆一直到恒春的台湾西部沿海平原地带上，并存有各个不同文化、不同语言、不同部落认同的社会群体。<br>平埔族群北自苏澳与泰雅族交界，南自枋寮与排湾族交界，后来受汉人压迫部分移入他地，如恒春、埔里、花东等。]]></description><link>术语\平埔族群（pingpu）.html</link><guid isPermaLink="false">术语/平埔族群（Pingpu）.md</guid><pubDate>Thu, 20 Jun 2024 12:27:07 GMT</pubDate></item><item><title><![CDATA[平均成对核苷酸差异数（π值）]]></title><description><![CDATA[ 
 <br>定义：指的是任意两条序列之间的平均核苷酸差异数。<br>
公式：<br>其中， 是样本数， 是第 i 对序列之间的差异数。<br>
意义：核苷酸多样性反映了一个种群的遗传多样性水平，数值越大说明种群内的基因变异越多。]]></description><link>术语\平均成对核苷酸差异数（π值）.html</link><guid isPermaLink="false">术语/平均成对核苷酸差异数（π值）.md</guid><pubDate>Mon, 26 Aug 2024 03:19:22 GMT</pubDate></item><item><title><![CDATA[平行进化（Parallel Evolution）]]></title><description><![CDATA[ 
 <br>平行进化是指在相似的生态环境中，具有共同祖先的不同物种或种群独立演化出相似的生物特征的现象。与趋同进化不同，平行进化中的物种通常具有较近的共同祖先，这意味着它们起始时就具有较为相似的遗传背景。<br>一个典型的平行进化的例子可以在北美洲的棘豆属（Prosopis）和澳大利亚的金合欢属（Acacia）之间找到。这两个属中的植物都适应了类似的干旱环境，展示出了一系列相似的形态和生理特征，如深根系统和减少的叶片面积以降低水分蒸发。<br>尽管棘豆属和金合欢属属于不同的亚科，它们在演化过程中都独立地发展出了对干旱环境的适应性特征。这些特征的相似性不是因为趋同演化（即不同祖先在相似环境压力下演化出相似特征），而是因为它们都源自于一个相对较近的共同祖先，在这个祖先的基础上分别演化出适应干旱的特征，体现了平行进化的过程。<br>请区别于<a data-href="趋同进化（Convergent evolution）" href="术语\趋同进化（convergent-evolution）.html" class="internal-link" target="_self" rel="noopener nofollow">趋同进化（Convergent evolution）</a>]]></description><link>术语\平行进化（parallel-evolution）.html</link><guid isPermaLink="false">术语/平行进化（Parallel Evolution）.md</guid><pubDate>Sun, 29 Sep 2024 06:32:40 GMT</pubDate></item><item><title><![CDATA[瓶颈效应（bottleneck）]]></title><description><![CDATA[ 
 <br>很简单，随便举个例子：比如有一种动物，长得高的、瘦的、矮的、胖的…长得什么样的个体都有→然后某一天，冰河时代来临，把这种动物的绝大部分个体都冻死了，剩下幸存的几只都是小个子个体→在熬过冰河时代后，这少数几个个体重新繁衍开了，形成了数以万计、十万计的大种群→然而它们继承的基因都是源于那少数幸存下来的小个子个体→于是这十万计的个体几乎全都是小个子。<br><img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-39c734a42c16ec00b0de0696b7fc397f_720w.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
比如现存的猎豹繁衍十分困难，其主要原因就是在上一个冰河时期中经历了严重的种群瓶颈，只有少数个体幸存下来，导致保存下来的基因库基因多样性非常低。彼此反复交配后，亲缘关系太近，使得繁殖十分困难而美洲的美洲狮也存在非常类似的现象与此同时，与冰河时期、瓶颈效应相对应的，还有一个生态学上的概念叫<a data-href="避难所（Refuge）" href="术语\避难所（refuge）.html" class="internal-link" target="_self" rel="noopener nofollow">避难所（Refuge）</a>：指的是在这些特殊的时期，在某种/某些生物大量灭绝的时候，有一些特定的地点/区域，因为其特殊的环境/气候条件，使得生活在那里的这种/这些生物能够幸存下来，并在灾难过后，从这些地点/区域出发，重新繁衍开来——这些特殊的地点/区域，便是所谓的避难所。]]></description><link>术语\瓶颈效应（bottleneck）.html</link><guid isPermaLink="false">术语/瓶颈效应（bottleneck）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:14 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-39c734a42c16ec00b0de0696b7fc397f_720w.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-39c734a42c16ec00b0de0696b7fc397f_720w.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[泊松分布（Poisson Distribution）]]></title><description><![CDATA[ 
 <br>公式：
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020231021173305.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
等号的左边：<br>
P 表示概率<br>
N表示某种函数关系<br>
t 表示时间<br>
n 表示数量<br>
等号的右边：<br>
λ 表示事件的频率。<br>
举例：已知每小时出生3个婴儿，请问下一个小时会出生几个？<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020231021173836.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>当以下假设有效时，则称为泊松分布：<br>
<br>任何一个成功的事件都不应该影响另一个成功的事件。
<br>在短时间内成功的概率必须等于在更长的间内成功的概率。
<br>时间间隔很小时，在给间隔时间内成功的概率趋向于零。
<br>举个例子：

<br>医院在一天内录制的紧急电话的数量：

<br>如果我们把一天分成24个小时，或者24x60分钟，或者24x3600秒。时间分的越短，这个时间段里来病人的概率就越小（比如说医院在正午12点到正午12点又一毫秒之间来病人的概率是不是很接近于零？）。 条件一符合。另外如果我们把时间分的很细很细，是不是同时来两个病人（或者两个以上的病人）就是不可能的事件？即使两个病人同时来，也总有一个人先迈步子跨进医院大门吧。条件二也符合。倒是条件三的要求比较苛刻。应用到实际例子中就是说病人们来医院的概率必须是相互独立的，如果不是，则不能看作是poisson分布。


<br>某个地区在一天内报告的失窃的数量
<br>在一小时内抵达沙龙的客户人数
<br>书中每一页打印错误的数量。 泊松分布适用于在随机时间和空间上发生事件的情况，其中，我们只关注事件发生的次数

]]></description><link>术语\泊松分布（poisson-distribution）.html</link><guid isPermaLink="false">术语/泊松分布（Poisson Distribution）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:05 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020231021173305.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020231021173305.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[葡萄糖-6-磷酸脱氢酶缺乏症(Glucose-6-Phosphate Dehydrogenase deficiency, G6PDD）]]></title><description><![CDATA[ 
 <br>葡萄糖六磷酸脱氢酵素缺乏症 ，又名G6PD缺乏症（英语：Glucose-6-Phosphate Dehydrogenase deficiency, G6PDD），俗称蚕豆症，是一种先天代谢缺陷，容易引发溶血反应。大多数时候病患不会有症状，但假如受到特定刺激就会引发一些症状，像是黄疸、深色尿液、呼吸急促或感到倦意复合症状可能包含贫血、新生儿黄疸。至于某些患者可能从未出现症状。<br>蚕豆症是一种X性联隐性遗传疾病，病因是葡萄糖-6-磷酸脱氢酶缺陷，导致无法正常分解葡萄糖。溶血反应可能由感染、特定药物所引起。除此以外，部分药物和化学物如蚕豆、樟脑丸、龙胆紫（紫药水）、薄荷脑都会令患者出现急性溶血反应，症状包括黄疸、精神不佳，严重时会出现呼吸急速、心脏衰竭，甚至休克而有生命危险。症状的严重程度会随着基因特定突变差异而不同。临床则依据不同症状、血液检验和基因检测来诊断。<br>避免刺激症状是重要的。急性症状的处置可能包含药物治疗、停止刺激性药物或输血。新生儿黄疸需要其他特殊处置。通常会建议病患使用特定药物前（例如：伯氨喹）要接受蚕豆症检验。<br>全球约有4亿人口有这种症状。盛行于部分地区如：非洲、亚洲、地中海地区和中东。男性比女性更易得病。2015年时约造成3万3千人口死亡。然而蚕豆症基因带原者可能对疟疾有部分抵抗能力。]]></description><link>术语\葡萄糖-6-磷酸脱氢酶缺乏症(glucose-6-phosphate-dehydrogenase-deficiency,-g6pdd）.html</link><guid isPermaLink="false">术语/葡萄糖-6-磷酸脱氢酶缺乏症(Glucose-6-Phosphate Dehydrogenase deficiency, G6PDD）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:24 GMT</pubDate></item><item><title><![CDATA[齐家文化]]></title><description><![CDATA[ 
 <br>齐家文化，是以甘肃为中心的新石器时代晚期文化，并且已经进入铜石并用阶段，名称来自其主要遗址甘肃广河县齐家坪遗址。是分布在河西走廊地区的一支重要的早期青铜时代的考古学文化。 时间跨度约为公元前2200年至公元前1600年（距今4400-3600年前，是黄河上游地区一支具有特殊价值的考古学文化，也是华夏文明的重要来源。<br>
齐家文化源自<a data-href="马家窑文化" href="术语\马家窑文化.html" class="internal-link" target="_self" rel="noopener nofollow">马家窑文化</a>和常山下层文化，马家窑文化和常山下层文化都是<a data-href="仰韶文化" href="术语\仰韶文化.html" class="internal-link" target="_self" rel="noopener nofollow">仰韶文化</a>庙底沟类型发展而来。齐家文化是寺洼文化和卡约文化的来源之一。<br>
三星堆遗址3号坑、4号坑发现的玉琮来自甘青地区齐家文化。齐家坪遗址于1924年 ， 由考古学家安特生所发现。<br>
齐家文化分为三个地域类型：柳湾类型、皇娘娘台类型和磨沟类型。柳湾类型主要分布在河湟地区；皇娘娘台类型的分布北到武威兰州一带，南到临夏地区；磨沟类型主要分布在洮河上游地区，其最早的遗存相当于皇娘娘台类型第三段。<br>
齐家文化距今4000年左右。其制陶业比较发达，已掌握了复杂的烧窑技术。在墓葬中发现的红铜制品，反映了当时生产力水平的提高，为后来青铜文化的发展奠定了基础。<br>
齐家文化的房屋多为半地穴式建筑，居室铺一层白灰面，既坚固美观，又防潮湿。]]></description><link>术语\齐家文化.html</link><guid isPermaLink="false">术语/齐家文化.md</guid><pubDate>Thu, 20 Jun 2024 12:26:56 GMT</pubDate></item><item><title><![CDATA[奇和]]></title><description><![CDATA[ 
 <br>奇和洞遗址，位于中华人民共和国福建省龙岩市漳平市象湖镇灶头村东侧，是一座旧石器时期至新石器时期的史前人类生活遗址。该遗址于2008年的第三次全国文物普查中被发现，共发掘出三个史前文化层。2013年，该遗址入选全国重点文物保护单位。<br>该遗址的导览解说词介绍说：“奇和洞遗址2号探坑于2011年1月3日，出土了一具较为完整的距今约8400年前的成人颅骨，考古工作取得重大成果”；“2018年，中科院古脊椎动物与古人类研究所付巧妹团队通过共同改进、创新古基因组技术，成功从样本中捕获古基因组，同期获取的还包括福建毗邻的亮岛<a data-href="亮岛" href="术语\亮岛.html" class="internal-link" target="_self" rel="noopener nofollow">亮岛</a>和锁港及北方山东等10具遗骸的古基因组。研究人员通过比对发现，8400年前的奇和洞人和<a data-href="南岛语系（Austroasiatic language family）" href="术语\南岛语系（austroasiatic-language-family）.html" class="internal-link" target="_self" rel="noopener nofollow">南岛语系（Austroasiatic language family）</a>人群相关，证实了南岛语系人群的中国南方起源；与台湾岛的阿美族和泰雅族人群具有最强的遗传联系，反映出现今族群之间的联系”。]]></description><link>术语\奇和.html</link><guid isPermaLink="false">术语/奇和.md</guid><pubDate>Thu, 18 Jul 2024 01:28:57 GMT</pubDate></item><item><title><![CDATA[前西班牙（pre-Hispanic）]]></title><description><![CDATA[ 
 <br>“前西班牙时期”（Pre-Hispanic period）是指在西班牙征服美洲之前的历史阶段，尤其是指哥伦布于1492年到达美洲以及西班牙随后对美洲的殖民扩张之前的时期。在这个时期，美洲大陆上存在着许多本地文明。<br>在墨西哥，前西班牙时期的历史主要与<a data-href="美索美洲（Mesoamerica）" href="术语\美索美洲（mesoamerica）.html" class="internal-link" target="_self" rel="noopener nofollow">美索美洲（Mesoamerica）</a>和<a data-href="阿里多美洲（Aridoamerica）" href="术语\阿里多美洲（aridoamerica）.html" class="internal-link" target="_self" rel="noopener nofollow">阿里多美洲（Aridoamerica）</a>两个文化区相关。在这段时期内的著名文明包括玛雅人、阿兹特克人、托尔特克人和萨波特克人等。这个时期结束于1519年，当时西班牙征服者埃尔南·科尔特斯（Hernán Cortés）开始了对阿兹特克帝国的征服，标志着西班牙殖民统治的开始。]]></description><link>术语\前西班牙（pre-hispanic）.html</link><guid isPermaLink="false">术语/前西班牙（pre-Hispanic）.md</guid><pubDate>Sun, 22 Sep 2024 03:11:19 GMT</pubDate></item><item><title><![CDATA[羌族]]></title><description><![CDATA[ 
 <br><a data-href="羌族" href="术语\羌族.html" class="internal-link" target="_self" rel="noopener nofollow">羌族</a>，是古羌人的后裔之一，自称尔玛。“羌”是他称，源于其以牧羊维生，是中国西南的一个少数民族，总人口30万。有口语，文字失落。羌族至今仍保留自己独特的民族传统、生活文化与巫觋宗教，信奉天神“阿爸”，也兼信别神，信奉天神、地神、山神、山神娘娘和树神等多神崇拜，使用马、猴、羊等图腾，也有很多人信仰藏传佛教。其语言属于汉藏语系藏缅语族羌语支。]]></description><link>术语\羌族.html</link><guid isPermaLink="false">术语/羌族.md</guid><pubDate>Thu, 20 Jun 2024 12:27:22 GMT</pubDate></item><item><title><![CDATA[切穆尔切克文化（克尔木齐文化，Chemurchek）]]></title><description><![CDATA[ 
 <br><img alt="Pasted image 20230804103644" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804103644.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
切穆尔切克文化是蒙古西部和邻国边界的考古文化，例如新疆准噶尔盆地和哈萨克斯坦东部。切穆尔切克墓葬的特点是围绕集体坟墓建造的大型矩形石栅栏。死者的太平间位置（仰卧位，双腿弯曲）与<a data-href="阿凡纳谢沃文化（Afanasievo）" href="术语\阿凡纳谢沃文化（afanasievo）.html" class="internal-link" target="_self" rel="noopener nofollow">阿凡纳谢沃文化（Afanasievo）</a>相似。在坟墓的东侧，在坟墓旁边竖立了拟人化的立石。在墓葬中，已经发现了文物，例如石碗，骨器，陶瓷或金属首饰。]]></description><link>术语\切穆尔切克文化（克尔木齐文化，chemurchek）.html</link><guid isPermaLink="false">术语/切穆尔切克文化（克尔木齐文化，Chemurchek）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:26 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804103644.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804103644.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[青铜时期（Bronze Age，BA）]]></title><description><![CDATA[ 
 ]]></description><link>术语\青铜时期（bronze-age，ba）.html</link><guid isPermaLink="false">术语/青铜时期（Bronze Age，BA）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:34 GMT</pubDate></item><item><title><![CDATA[轻链启动子（Light Strand Promoter,LSP）]]></title><description><![CDATA[ 
 <br>线粒体DNA上有两个主要的转录起始位点，分别是"Light Strand Promoter"（LSP）和"Heavy Strand Promoter"（HSP），它们分别用于启动线粒体DNA的不同链的转录。]]></description><link>术语\轻链启动子（light-strand-promoter,lsp）.html</link><guid isPermaLink="false">术语/轻链启动子（Light Strand Promoter,LSP）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:26 GMT</pubDate></item><item><title><![CDATA[标准]]></title><description><![CDATA[ 
 <br><br>一个单倍群可以被定义为某个特定地区 R 的特有单倍群（Region-Specific Haplogroup, RSH），当且仅当满足以下三个条件<a data-footref="1" href="about:blank#fn-1-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>：<br>
<br>地区特有性：单倍群中的所有线粒体DNA（mtDNA）样本的来源必须局限于地区 R，并且在其他地区没有出现。
<br>基因组多样性：单倍群必须包含至少&nbsp;n&nbsp;个不同的线粒体基因组（亚单倍型），其中&nbsp;n≥2。
<br>稳定突变的存在：单倍群在系统发育树的根部必须包含至少一个稳定突变，且该突变在树的其他地方不重复出现。这个稳定的突变是单倍群在地区 R 中特有的标志，它只在的祖先（即系统发育树的根部）发生，并且没有在其他地区的单倍群中再次出现。
<br>假设你想确认单倍群 H 是否为地区 R 的特有单倍群，你可以按照以下步骤进行验证：<br>
<br>地区特有性：确认单倍群 H 的所有 mtDNA 样本都只出现在地区 R 中，而不在其他地区存在。
<br>基因组多样性：检查单倍群 H 内是否有至少 n 个不同的线粒体基因组。如果 n≥2，且这些基因组之间存在差异，则满足多样性要求。
<br>稳定突变的存在：寻找单倍群 H 的系统发育树根部是否存在独特且稳定的突变，并确认这个突变不会在其他地区的单倍群中重复出现。
<br><br><br>
<br>
<br><a data-href="2017 MBE 撒丁岛人的线粒体基因组多样性" href="文献及报道\文献\2024年阅读\7-12月\2017-mbe-撒丁岛人的线粒体基因组多样性.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="LiThumbsUp" aria-label="LiThumbsUp" data-icon="LiThumbsUp" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" width="18px" height="18px" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide-thumbs-up"><path d="M7 10v12"></path><path d="M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2a3.13 3.13 0 0 1 3 3.88Z"></path></svg></span>2017 MBE 撒丁岛人的线粒体基因组多样性</a><a href="about:blank#fnref-1-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>术语\区域特异性的单倍群.html</link><guid isPermaLink="false">术语/区域特异性的单倍群.md</guid><pubDate>Mon, 02 Sep 2024 09:46:41 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[屈家岭文化]]></title><description><![CDATA[ 
 <br>屈家岭文化，是分布于中国长江中游地区的江汉平原的新石器时代文化，因最早在湖北京山屈家岭遗址发堀而得名。该文化源自油子岭文化，影响范围较广，东到湖北东部的黄冈、鄂州，西至三峡地区，北到河南南阳，南至洞庭湖滨，西北延伸至陕西南部的丹江流域。屈家岭文化年代约为公元前2500年～公元前约2200年前。<br>屈家岭遗址最早在1955年至1957年被发堀，其后学者又在湖北各地发堀了更多屈家岭文化的遗址，并在其中许多遗址如枝江关庙山遗址中发现其与前后期文化的关系，认定其为是更早期长江中游的大溪文化的继承者，而后被更晚期的青龙泉文化所继承。<br>从遗址中可发现屈家岭文化稻作的痕迹，动物方面有鸡、羊、狗、猪等遗留，出土的大量陶纺轮证明其纺织甚为发达。建筑方面，烧土块作为建材已十分成熟。此外发现大量墓葬建筑，多有陶器随葬。陶器继承大溪文化的圈足器，但有更多的鼎器。<br>屈家岭文化大部分陶器相当朴素，有些则有压印或彩绘图案。屈家岭文化仿效大溪文化，出现许多带有圈足、底座支柱的陶器。陶器上出现的许多纺锤状螺旋涡纹图案显示当时织品纺织可能十分盛行。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061049113.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\屈家岭文化.html</link><guid isPermaLink="false">术语/屈家岭文化.md</guid><pubDate>Thu, 20 Jun 2024 12:27:54 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061049113.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061049113.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[趋同进化（Convergent evolution）]]></title><description><![CDATA[ 
 <br>趋同进化是指在不同的进化线上，由于生物面对相似的环境压力或生态位，独立地演化出相似的生理或行为特征的现象。这种进化过程表明，生物在相似的选择压力下，即使它们的起源和进化历史不同，也可能发展出类似的解决方案来适应环境。<br>例如，海豚（哺乳动物）和鲨鱼（鱼类）在外形和游泳方式上都非常相似，这是因为它们都适应了快速游泳捕食的生活方式，但它们在进化树上的位置却相距甚远。这种现象就是一个典型的趋同进化示例。<br>请区别于<a data-href="平行进化（Parallel Evolution）" href="术语\平行进化（parallel-evolution）.html" class="internal-link" target="_self" rel="noopener nofollow">平行进化（Parallel Evolution）</a>。]]></description><link>术语\趋同进化（convergent-evolution）.html</link><guid isPermaLink="false">术语/趋同进化（Convergent evolution）.md</guid><pubDate>Sun, 29 Sep 2024 06:31:25 GMT</pubDate></item><item><title><![CDATA[趋异进化]]></title><description><![CDATA[ 
 <br>趋异进化又称为分歧进化。生物进化过程中，由于共同祖先适应于不同环境，向两个或者以上方向发展的过程。如果某一类群的趋异向着辐射状的多种方向不断发展，则称为适应辐射。趋异产生的物种在形态结构，生理机能方面没有普遍提高，进化处于同一水平。趋异进化是分化式（生物类型由少到多）进化的基本方式，是生物多样化的基础。]]></description><link>术语\趋异进化.html</link><guid isPermaLink="false">术语/趋异进化.md</guid><pubDate>Thu, 20 Jun 2024 12:23:29 GMT</pubDate></item><item><title><![CDATA[全基因组测序（Whole Genome Sequencing，WGS）]]></title><description><![CDATA[ 
 <br>这是一种生物学和遗传学技术，旨在测定一个生物体（通常是一个个体）的完整基因组的DNA序列。全基因组测序涵盖了一个生物体的所有基因和非编码区域的DNA序列。<br>WGS是一项强大的技术，可以提供大量的遗传信息，包括：<br>基因识别和功能预测：通过WGS，可以确定一个生物体的所有基因，从而有助于理解这些基因的功能以及它们如何影响生物体的生理和疾病。<br>突变检测：WGS可以用于检测基因组中的突变，包括致病性突变，这对于诊断遗传疾病和癌症等疾病非常重要。<br>种群遗传学：通过比较不同个体或不同种群的基因组，可以揭示遗传多样性、人类迁徙和种群历史等方面的信息。<br>药物反应和个性化医学：WGS可以帮助确定个体对药物的反应，从而支持个性化医学的发展。<br>疾病研究：WGS可用于研究与遗传相关的疾病，如癌症、遗传病和复杂性疾病的发病机制。<br>总之，全基因组测序是一项强大的工具，已经在生物学、医学和遗传学领域广泛应用，有助于我们更深入地理解基因组和生物体的遗传特征。]]></description><link>术语\全基因组测序（whole-genome-sequencing，wgs）.html</link><guid isPermaLink="false">术语/全基因组测序（Whole Genome Sequencing，WGS）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:31 GMT</pubDate></item><item><title><![CDATA[人口扩散(demic diffusion)]]></title><description><![CDATA[ 
 <br>人口扩散指的是人群从一个地理区域向其他区域的迁移过程，这种迁移通常伴随着基因流的交换。在人口扩散的过程中，迁移人群不仅带来他们的遗传特征，也可能引入新的文化元素和技术，但关键是这种扩散是通过实际的人群移动来实现的。这种人口迁移可以通过考古学证据（如定居点的扩散）和遗传学证据（如DNA标记的地理分布）来追踪。<br>区别于<a data-href="文化扩散(cultural diffusion)" href="术语\文化扩散(cultural-diffusion).html" class="internal-link" target="_self" rel="noopener nofollow">文化扩散(cultural diffusion)</a>]]></description><link>术语\人口扩散(demic-diffusion).html</link><guid isPermaLink="false">术语/人口扩散(demic diffusion).md</guid><pubDate>Sun, 14 Jul 2024 14:43:15 GMT</pubDate></item><item><title><![CDATA[2017 年 Sequencing moves to the twenty-first century&nbsp;测序迈向二十一世纪]]></title><description><![CDATA[ 
 <br>
<a data-tooltip-position="top" aria-label="https://www.nature.com/immersive/d42859-020-00099-0/index.html" rel="noopener nofollow" class="external-link" href="https://www.nature.com/immersive/d42859-020-00099-0/index.html" target="_blank">Milestones in Genomic Sequencing (nature.com)</a>
<br><br>Since its development in the late 1970s, DNA sequencing has become one of the most&nbsp;influential&nbsp;tools in&nbsp;biomedical&nbsp;research, with technologies evolving continuously and new applications emerging over time.&nbsp;<a data-tooltip-position="top" aria-label="https://www.nature.com/articles/d42859-020-00100-w" rel="noopener nofollow" class="external-link" href="https://www.nature.com/articles/d42859-020-00100-w" target="_blank">Read more.</a><br>
自 20 世纪 70 年代末发展以来，DNA 测序已成为生物医学研究中最具影响力的工具之一，技术不断发展，新的应用不断涌现。<br>
To&nbsp;commemorate&nbsp;the 40th&nbsp;anniversary&nbsp;of Sanger sequencing, in 2017 Anand Jagatia spoke with National Human&nbsp;Genome&nbsp;Research Institute Director Eric Green on the impact and&nbsp;potential&nbsp;of DNA sequencing in&nbsp;biomedical&nbsp;research.&nbsp;<a data-tooltip-position="top" aria-label="https://www.nature.com/articles/d42859-020-00118-0" rel="noopener nofollow" class="external-link" href="https://www.nature.com/articles/d42859-020-00118-0" target="_blank">Listen to the interview.</a><br>
为了纪念桑格测序 40 周年，2017 年，Anand Jagatia 与国家人类基因组研究所所长 Eric Green 讨论了 DNA 测序在生物医学研究中的影响和潜力。听听采访。<br><br>Launched in 1990, the Human Genome Project set out to identify the order, that is,&nbsp;sequence, of all DNA bases to&nbsp;obtain&nbsp;the ‘genetic&nbsp;blueprint’ of humans. In 2001, two&nbsp;pivotal&nbsp;publications reported the first&nbsp;draft&nbsp;of the human&nbsp;genome, obtained by&nbsp;shotgun&nbsp;sequencing, setting the stage for the genomic&nbsp;era. The second&nbsp;phase&nbsp;of the project, which moved from the&nbsp;draft&nbsp;to an&nbsp;essentially&nbsp;finished&nbsp;reference&nbsp;genome, was completed in 2003.&nbsp;<a data-tooltip-position="top" aria-label="https://www.nature.com/articles/d42859-020-00101-9" rel="noopener nofollow" class="external-link" href="https://www.nature.com/articles/d42859-020-00101-9" target="_blank">Read more.</a><br>
人类基因组计划于1990年启动，旨在确定所有 DNA 碱基的顺序，即序列，以获得人类的“基因蓝图”。 2001 年，两份重要出版物报道了通过鸟枪法测序获得的人类基因组初稿，为基因组时代奠定了基础。该项目的第二阶段于 2003 年完成，从草稿转向基本完成的参考基因组。了解更多。<br><br>The large amount of genomic data generated by sequencing required new approaches for storing, visualizing and&nbsp;integrating&nbsp;sequence&nbsp;data and its annotations. Genome browsers such as Ensembl and the UCSC Genome&nbsp;Browser&nbsp;emerged&nbsp;to offer a new way of accessing and searching the genomes of&nbsp;multiple&nbsp;species.<br>
测序产生的大量基因组数据需要新的方法来存储、可视化和整合序列数据及其注释。 Ensembl 和 UCSC Genome Browser 等基因组浏览器的出现提供了一种访问和搜索多个物种基因组的新方法。<br><br>The International HapMap Project set out to develop a&nbsp;haplotype&nbsp;map (HapMap) of the human&nbsp;genome&nbsp;that describes the common patterns of human DNA&nbsp;sequence&nbsp;variation. A stepping stone for (and later&nbsp;superseded&nbsp;by) large-scale&nbsp;human&nbsp;genetics&nbsp;projects such as the 1000 Genomes Project, HapMap enabled the&nbsp;discovery&nbsp;of millions of single-nucleotide&nbsp;polymorphisms and served as a&nbsp;reference&nbsp;dataset for many&nbsp;genome-wide&nbsp;association&nbsp;studies in disease research.<br>
国际 HapMap 项目着手开发人类基因组的单倍型图谱 (HapMap)，以描述人类 DNA 序列变异的常见模式。作为千人基因组计划等大规模人类遗传学项目（后来被其取代）的垫脚石，HapMap 发现了数百万个单核苷酸多态性，并作为疾病研究中许多全基因组关联研究的参考数据集。<br>Related article:&nbsp;<a data-tooltip-position="top" aria-label="https://www.nature.com/articles/nature04226" rel="noopener nofollow" class="external-link" href="https://www.nature.com/articles/nature04226" target="_blank">A&nbsp;haplotype&nbsp;map of the human&nbsp;genome</a><br>
相关文章：人类基因组的单倍型图谱<br><br>Two&nbsp;revolutionary&nbsp;studies introduced high-throughput, massively&nbsp;parallel&nbsp;sequencing technologies able to&nbsp;sequence&nbsp;a bacterial&nbsp;genome&nbsp;at a&nbsp;fraction&nbsp;of the cost and time of traditional Sanger sequencing techniques.&nbsp;<a data-tooltip-position="top" aria-label="https://www.nature.com/articles/d42859-020-00103-7" rel="noopener nofollow" class="external-link" href="https://www.nature.com/articles/d42859-020-00103-7" target="_blank">Read more.</a><br>
两项革命性研究引入了高通量、大规模并行测序技术，能够以传统桑格测序技术的一小部分成本和时间对细菌基因组进行测序。阅读更多。<br><br>Two studies reported the genomes of an African individual and an Asian individual,&nbsp;respectively, using a new massively&nbsp;parallel&nbsp;sequencing approach based on&nbsp;reversible&nbsp;terminator dyes.&nbsp;Demonstrating&nbsp;the feasibility and resource value of human&nbsp;genome&nbsp;sequences, these studies and the technology they presented&nbsp;paved&nbsp;the way for population-scale&nbsp;genome&nbsp;sequencing.&nbsp;<a data-tooltip-position="top" aria-label="https://www.nature.com/articles/d42859-020-00105-5" rel="noopener nofollow" class="external-link" href="https://www.nature.com/articles/d42859-020-00105-5" target="_blank">Read more.</a><br>
两项研究分别使用基于可逆终止染料的新型大规模并行测序方法报告了非洲个体和亚洲个体的基因组。这些研究及其提出的技术证明了人类基因组序列的可行性和资源价值，为群体规模的基因组测序铺平了道路。阅读更多。<br><br>As&nbsp;genome&nbsp;sequencing became more affordable and&nbsp;widespread, its applications&nbsp;rapidly&nbsp;expanded, driving the development of new&nbsp;computational&nbsp;tools to accommodate the requirements of transcriptomics, metagenomics or&nbsp;genetic&nbsp;variant&nbsp;discovery. Read mapping tools such as Bowtie and BWA or the&nbsp;splice-aware aligner TopHat were able to&nbsp;align&nbsp;millions of short reads to the&nbsp;reference&nbsp;genome, and&nbsp;downstream&nbsp;analysis&nbsp;software, such as SAMtools and BreakDancer,&nbsp;facilitated&nbsp;the detection of&nbsp;genetic&nbsp;variants.<br>
随着基因组测序变得更加便宜和广泛，其应用迅速扩展，推动了新计算工具的开发，以满足转录组学、宏基因组学或遗传变异发现的要求。 Bowtie 和 BWA 等读长映射工具或剪接感知对齐器 TopHat 能够将数百万个短读长与参考基因组对齐，而 SAMtools 和 BreakDancer 等下游分析软件则有助于检测遗传变异。<br><br>Long-read sequencing technologies began to&nbsp;shed&nbsp;light on hidden parts of the human&nbsp;genome&nbsp;by sealing gaps in existing assemblies, allowing modified bases to be detected on&nbsp;native&nbsp;DNA or RNA, and revealing the&nbsp;complexity&nbsp;of the transcriptome.&nbsp;<a data-tooltip-position="top" aria-label="https://www.nature.com/articles/d42859-020-00108-2" rel="noopener nofollow" class="external-link" href="https://www.nature.com/articles/d42859-020-00108-2" target="_blank">Read more.</a><br>
长读长测序技术开始通过密封现有组装中的间隙来揭示人类基因组的隐藏部分，允许在天然 DNA 或 RNA 上检测到修饰的碱基，并揭示转录组的复杂性。阅读更多。<br><br>Moving from genomic analysis of tissues or cells in&nbsp;bulk&nbsp;to performing single-cell sequencing provided a whole new&nbsp;perspective&nbsp;on gene&nbsp;regulation, cell-to-cell heterogeneity and&nbsp;developmental&nbsp;or disease processes. The&nbsp;difficulty&nbsp;of performing analyses at such&nbsp;resolution&nbsp;required many experimental and&nbsp;computational&nbsp;innovations.&nbsp;<a data-tooltip-position="top" aria-label="https://www.nature.com/articles/d42859-020-00111-7" rel="noopener nofollow" class="external-link" href="https://www.nature.com/articles/d42859-020-00111-7" target="_blank">Read more.</a><br>
从大量组织或细胞的基因组分析转向进行单细胞测序，为基因调控、细胞间异质性以及发育或疾病过程提供了全新的视角。在如此分辨率下进行分析的难度需要许多实验和计算创新。阅读更多。<br><br>The&nbsp;publication&nbsp;of the first&nbsp;draft&nbsp;genome&nbsp;of a Neanderthal in 2010 marked a turning point for the palaeogenomics field, making it possible to&nbsp;assemble&nbsp;an ancient genome from next-generation&nbsp;sequencing reads by&nbsp;overcoming&nbsp;previous&nbsp;limitations&nbsp;in ancient DNA research such as limited starting material, contamination and&nbsp;degradation.&nbsp;<a data-tooltip-position="top" aria-label="https://www.nature.com/articles/d42859-020-00112-6" rel="noopener nofollow" class="external-link" href="https://www.nature.com/articles/d42859-020-00112-6" target="_blank">Read more.</a><br>
2010 年尼安德特人第一份基因组草图的发表标志着古基因组学领域的一个转折点，使得通过克服古代 DNA 研究中有限的起始材料、污染等限制，从下一代测序读取组装古代基因组成为可能和退化。阅读更多。<br><br>Pan-genome&nbsp;studies in a&nbsp;variety&nbsp;of&nbsp;species&nbsp;— from&nbsp;microorganisms&nbsp;to plants to humans — have shown that a large amount of&nbsp;genetic&nbsp;variation&nbsp;can be found in the&nbsp;dispensable&nbsp;genome. This&nbsp;observation&nbsp;has called into question our&nbsp;reliance&nbsp;on single&nbsp;reference&nbsp;genomes for assembling and&nbsp;analysing&nbsp;genomes.&nbsp;<a data-tooltip-position="top" aria-label="https://www.nature.com/articles/d42859-020-00115-3" rel="noopener nofollow" class="external-link" href="https://www.nature.com/articles/d42859-020-00115-3" target="_blank">Read more.</a><br>
对各种物种（从微生物到植物再到人类）的泛基因组研究表明，在可有可无的基因组中可以发现大量遗传变异。这一观察结果使我们对单一参考基因组组装和分析基因组的依赖产生了质疑。阅读更多。<br><br>2020 saw the&nbsp;publication&nbsp;of the first gapless,&nbsp;telomere-to-telomere&nbsp;assembly&nbsp;of a human&nbsp;chromosome, the X chromosome. This&nbsp;discovery&nbsp;brought together sequencing technologies and&nbsp;computational&nbsp;tools that had been developed in the preceding decade.&nbsp;<a data-tooltip-position="top" aria-label="https://www.nature.com/articles/d42859-020-00117-1" rel="noopener nofollow" class="external-link" href="https://www.nature.com/articles/d42859-020-00117-1" target="_blank">Read more.</a><br>
2020 年，人类染色体（X 染色体）的第一个无间隙端粒到端粒组装的发表。这一发现汇集了前十年开发的测序技术和计算工具。阅读更多。]]></description><link>术语\人类基因组计划二十年基石.html</link><guid isPermaLink="false">术语/人类基因组计划二十年基石.md</guid><pubDate>Thu, 20 Jun 2024 12:21:43 GMT</pubDate></item><item><title><![CDATA[意义]]></title><description><![CDATA[ 
 <br>日期随机化检验（Date Randomization Tests, DRTs）是评估分子钟假设是否在特定数据集中得到支持的有效工具，特别是在古代 DNA 研究中。在这种检验中，通过随机打乱样本的时间标签，然后重新分析数据来观察时间信息对推断的影响。如果打乱日期后得到的系统发生关系（如分支长度和拓扑结构）与实际日期标签的分析结果显著不同，这表明时间数据对系统发生推断是重要的，并且分子钟假设在该数据集中是合理的。<br><br>
<br>验证时间信息的影响：通过比较日期随机化前后的系统发生树，可以评估外部时间信息对树的影响程度。
<br>检验分子钟假设：分子钟假设是很多进化分析中的一个基本假设，通过 DRTs 可以检验这一假设在特定数据集中的适用性。
<br>提高结果的鲁棒性：在科学发表中，能够展示通过这些额外的检验步骤，可以使结果更加可信。
]]></description><link>术语\日期随机化检验（date-randomization-tests,-drts）.html</link><guid isPermaLink="false">术语/日期随机化检验（Date Randomization Tests, DRTs）.md</guid><pubDate>Wed, 11 Sep 2024 07:11:28 GMT</pubDate></item><item><title><![CDATA[融生型民族]]></title><description><![CDATA[ 
 <br>由已经成为民族的众多民族的成分，由于某种原因发生融合，而形成的民族。]]></description><link>术语\融生型民族.html</link><guid isPermaLink="false">术语/融生型民族.md</guid><pubDate>Wed, 26 Jun 2024 08:08:29 GMT</pubDate></item><item><title><![CDATA[如何构思论文？]]></title><description><![CDATA[ 
 <br>1 介绍<br>
背景与问题<br>
问题的定义<br>
经济提示？<br>
研究目的<br>
研究重要性<br>
提出解决办法<br>
2 回顾文献<br>
3 理论框架<br>
概念框架<br>
研究策略<br>
研究设计<br>
研究方法<br>
分析技术<br>
样本规模<br>
仪器设备<br>
测试<br>
分析<br>
参与<br>
伦理<br>
4 数据<br>
数据收集<br>
数据分析<br>
结论简要<br>
时间计划<br>
5 讨论发现<br>
结论<br>
讨论<br>
推荐<br>
未来<br>
贡献<br>
6 最终<br>
参考文献<br>
书籍<br>
附录<br><img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230816103904.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\如何构思论文？.html</link><guid isPermaLink="false">术语/如何构思论文？.md</guid><pubDate>Thu, 20 Jun 2024 12:24:40 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230816103904.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230816103904.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[塞门德（Semende）]]></title><description><![CDATA[ 
 <br>Semende是一个典型的母系居住群体（matrilocal group）。在母系居住制度中，婚后夫妻通常居住在妻子的家庭或村落中。这种制度意味着家庭和财产的传承主要通过母系进行，女性在家庭中占据重要地位。母系居住模式通常会导致mtDNA的多样性较低，因为女性在本地居住并传承其线粒体DNA，而男性则可能来自不同的群体，从而增加了基因混合的可能性。]]></description><link>术语\塞门德（semende）.html</link><guid isPermaLink="false">术语/塞门德（Semende）.md</guid><pubDate>Wed, 03 Jul 2024 07:41:55 GMT</pubDate></item><item><title><![CDATA[赛拉特 (Selatar)]]></title><description><![CDATA[ 
 <br>赛拉特族是马来西亚和新加坡地区的一个土著群体，属于马来族群的一部分。他们传统上以渔业为生，主要居住在沿海和岛屿地区。]]></description><link>术语\赛拉特-(selatar).html</link><guid isPermaLink="false">术语/赛拉特 (Selatar).md</guid><pubDate>Tue, 20 Aug 2024 12:36:59 GMT</pubDate></item><item><title><![CDATA[三苗部落]]></title><description><![CDATA[ 
 <br>三苗，出自缙云氏，是中国汉族传说中黄帝至尧舜禹时代的一古国名，也被称为有苗、有苗氏、苗民，是炎黄集团的平民。<br>三苗主要分布于长江中下游一带，战国时人认为上古三苗部落位于古洞庭湖与鄱阳湖之间。但也有观点认为上古三苗位于今河南省境内，钱穆在其书《国史大纲》中言至三苗：“……后被舜、禹征伐，驱至甘肃境内，魏策吴起之言曰：“昔三苗之居，左彭蠡之波，右洞庭之水，汶山在其南，衡山在其北。”后世误谓在湖湘之间。惟洞庭、彭蠡地位既左右互易，又古衡山不指湖南，且不当在三苗北。古河域亦有名彭蠡者（见吕氏春秋爱类、淮南人间训）。江北汉水流域亦有名洞庭者（楚辞所咏洞庭是也）。春秋河东有茅戎，又有陆浑蛮氏，亦称戎蛮子。杜注云：“在河南新城县。”苗与茅、蛮同声。古三苗疆域大率南北以此为度，正与虞、夏壤地杂处。舜、禹驱逼苗民，渐迁而西，所谓“窜三苗于三危，以变西戎”也。若三苗在湖湘间，不应驱至今甘肃境。旧说又谓：三苗，姜姓之别。尚书吕刑言及苗民制刑，吕国河南南阳，正古代四岳姜姓居地，本古昔苗土，顾引以为戒尔。（范氏后汉书西羌传：“西羌之本出自三苗姜姓之别，其国近南岳。”汉人多指南阳衡山为南岳也。）”。<br>三苗有十分悠久的历史。早在黄帝时，三苗部落就参加过九黎的部落联盟，有的文献说三苗是“九黎之后”，三苗可能在这时参加了尧的部落联盟。有文献说三苗的首领驩兜是“尧臣”，被称为“诸侯”。尧时，因为三苗反对尧禅位于舜，于是三苗作乱，尧发兵征讨，作战于丹水（今丹江），打败三苗，尧遂将他们的一部分人众流放到西北的三危山，将其首领驩兜流放到崇山。舜成为部落联盟首领以后，三苗逐渐南移于江、汉一带，发展迅速，日益强大，对舜领导的部落联盟又有不服。舜于是整军振旅，没有经过战争而臣服了三苗。为防止再发生冲突，又把三苗迁徙到偏远的三危，但其三苗部分退至南方地区。传说中三苗是一个较为先进的部落，已有“君子”、“小人”之分，开始有了阶级分化。《墨子·兼爱下》载有《禹誓》，即禹征三苗时的誓师之词。禹又与不服的三苗进行了一场历时70天的大战，大败苗师，从此三苗衰微下去。此后，史籍中便鲜见三苗的活动了。<br><br>近年来，有学者认为三苗即现在苗族的祖先，唯一的原因是认为今日岜沙的苗族人以麻跟头发一起挽髻的做法与《淮南子》三苗人“髽首”相同；但也有学者认为三苗与今之苗族并没有关系，如陈国均、章炳麟、凌纯声，芮逸夫等学者不认同今日之苗族是来源于古三苗。<br>有学者认为今日的苗、瑶、黎、彝等少数民族是上古迁于“三危”的华夏平民（三苗）的后裔，他们由三危又迁至大西南，慢慢便形成了一个个小民族。]]></description><link>术语\三苗部落.html</link><guid isPermaLink="false">术语/三苗部落.md</guid><pubDate>Thu, 20 Jun 2024 12:27:55 GMT</pubDate></item><item><title><![CDATA[记忆方法]]></title><description><![CDATA[ 
 <br>三羧酸循环（TCA 循环），也称为柠檬酸循环或克雷布斯循环，是细胞内部一个重要的能量产生过程，对于几乎所有需氧生物来说都是必不可少的。TCA 循环在细胞的线粒体基质中进行，是有氧呼吸的一部分，负责氧化有机燃料分子（如葡萄糖、脂肪酸和氨基酸），以产生二氧化碳、还原型辅酶 NADH、还原型辅酶 FADH2和 ATP。这些产物是细胞能量的重要来源。以下是 TCA 循环的详细步骤：<br>
<img alt="2560px-Citric_acid_cycle_with_aconitate_2_zh.svg.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311311862.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>三羧酸循环口诀：    <br>
<br>天龙八部  
<br>宁异勿同  
<br>二虎言平  
<br>一同平虎  
<br>两虎一能<br>
（总共8个步骤，前两句话8个字分别对应8个产物，一同平虎是说：产生H+]的4种物质，两虎一能：琥珀酰辅酶A变成琥珀酸释放一个能量 GTP（大家一定要记住这几句话，笔者再三叮嘱，记住可以省很多事，相信我）  
<br>另一个口诀：领一桶壶壶锁果仙<br>
柠檬酸，异柠檬酸，同戊二酸，琥珀先副酶 A，琥珀酸，延胡索酸，苹果酸，草酰乙酸。<br><br>
<br>起始物质：乙酰辅酶A（Acetyl-CoA）+草酰乙酸（Oxaloacetate）
<br>产物：柠檬酸（Citrate）
<br>酶：柠檬酸合成酶
<br>描述：乙酰辅酶A与草酰乙酸结合，生成六碳的柠檬酸，这是TCA循环的第一步，也是启动整个循环的关键反应。
<br><br>
<br>产物：异柠檬酸（Isocitrate）
<br>酶：柠檬酸异构酶
<br>描述：柠檬酸被重排为异柠檬酸。
<br><br>
<br>产物：α-酮戊二酸（α-Ketoglutarate）
<br>酶：异柠檬酸脱氢酶
<br>描述：异柠檬酸经过脱羧氧化反应，产生五碳的α-酮戊二酸和第一个二氧化碳分子，同时产生NADH。
<br><br>
<br>产物：琥珀酰辅酶A（Succinyl-CoA）
<br>酶：α-酮戊二酸脱氢酶复合体
<br>描述：α-酮戊二酸进一步脱羧氧化为琥珀酰辅酶A，产生第二个二氧化碳和另一个NADH。
<br><br>
<br>产物：琥珀酸（Succinate）
<br>酶：琥珀酰辅酶A合成酶
<br>描述：琥珀酰辅酶A转化为琥珀酸，这一步产生GTP或ATP（根据细胞类型的不同）。
<br><br>
<br>产物：呋喃丙酮酸（Fumarate）
<br>酶：琥珀酸脱氢酶
<br>描述：琥珀酸被氧化为呋喃丙酮酸，产生FADH2。
<br><br>
<br>产物：苹果酸（Malate）
<br>酶：呋喃丙酮酸水合酶
<br>描述：呋喃丙酮酸加水生成苹果酸。
<br><br>
<br>产物：草酰乙酸
<br>酶：苹果酸脱氢酶
<br>描述：苹果酸被氧化为草酰乙酸，产生NADH，此过程再次形成TCA循环的起始物质草酰乙酸，循环得以继续。
<br><br>
<br>能量产生：通过产生NADH和FADH2，TCA循环为细胞的ATP产生（通过电子传递链）提供了关键的电子供体。
<br>代谢中心：TCA循环是碳代谢的中心，连接了糖、脂肪和蛋白质的代谢途径。
<br>合成前体：TCA循环提供了许多生物合成过程的前体，如某些氨基酸的合成。
<br>TCA循环是细胞生理和能量代谢的核心部分，它的正常运转对于维持细胞和整个生物体的能量平衡至关重要。]]></description><link>术语\三羧酸循环（tca）.html</link><guid isPermaLink="false">术语/三羧酸循环（TCA）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:46 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311311862.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311311862.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[三星堆遗址]]></title><description><![CDATA[ 
 <br>三星堆遗址位于中国四川省广汉市城西三星堆镇的鸭子河畔，属青铜时代文化遗址。由于其古域内有起伏相连的三个黄土堆而得名，有“三星伴月”之美名。遗址年代为公元前2,800年至公元前1,100年，分为四期，第一期为宝墩文化（前蜀，前2,500年至公元前1,750年），第二、三期为三星堆文化（古蜀，公元前2,000年至公元前1,400年，同时期的中原为夏商时期），四期为十二桥文化（古蜀，主要遗存在金沙遗址，中原为商末周初时期）。1987年1月16日公布为四川省第二批文物保护单位。1988年1月13日列为第三批全国重点文物保护单位。目前三星堆遗址正联合金沙遗址申请成为世界遗产。三星堆遗址证明了长江流域在上古时期并非是蛮荒之地，而与黄河流域一样拥有高度文明。]]></description><link>术语\三星堆遗址.html</link><guid isPermaLink="false">术语/三星堆遗址.md</guid><pubDate>Thu, 20 Jun 2024 12:19:52 GMT</pubDate></item><item><title><![CDATA[桑巴基（Sambaquis）]]></title><description><![CDATA[ 
 <br>指<a data-href="南美洲（South America）" href="术语\南美洲（south-america）.html" class="internal-link" target="_self" rel="noopener nofollow">南美洲（South America）</a>东海岸的一种古代土著文化群体。这些社会在晚<a data-href="全新世（Holocene epoch）" href="全新世（Holocene epoch）" class="internal-link" target="_self" rel="noopener nofollow">全新世（Holocene epoch）</a>（约公元前6,000年至公元前1,500年）存在，主要分布在巴西的东南部和南部海岸地区。这些社会的特点之一是他们建造的大型贝壳堆积遗址，被称为"Sambaquis"<a data-href="贝冢（贝丘遗址）" href="术语\贝冢（贝丘遗址）.html" class="internal-link" target="_self" rel="noopener nofollow">贝冢（贝丘遗址）</a>。这些遗址是由古代土著人通过堆积贝壳、动物骨骼和其他遗物所形成的。Sambaqui社会是狩猎采集型社群，他们依赖于海洋资源和采集活动维持生计。这些社会在晚期可能逐渐与内陆种植农业社会发生接触和交流，形成了复杂的文化互动历史。]]></description><link>术语\桑巴基（sambaquis）.html</link><guid isPermaLink="false">术语/桑巴基（Sambaquis）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:43 GMT</pubDate></item><item><title><![CDATA[山顶洞人]]></title><description><![CDATA[ 
 <br>山顶洞人指发现于中国北方的晚期智人化石。因化石地点在周口店龙骨山顶部，北京猿人洞穴上方的“山顶洞”内而得名。其重要化石及遗物均在1941年二次世界大战期间随同北京猿人标本一起丢失而下落不明。山顶洞堆积已全部挖光，原来的洞顶已被挖掉。今后也不会再有新的发现。虽然山顶洞人化石已难于寻觅，但当时对重要的化石均制作了品质精良的模型。原始模型目前保存在中国科学院古脊椎动物与古人类研究所，科学家基本可以通过对模型的观测研究化石提供的信息。]]></description><link>术语\山顶洞人.html</link><guid isPermaLink="false">术语/山顶洞人.md</guid><pubDate>Thu, 20 Jun 2024 12:26:11 GMT</pubDate></item><item><title><![CDATA[山戎]]></title><description><![CDATA[ 
 <br><a data-href="夏家店上层文化" href="夏家店上层文化" class="internal-link" target="_self" rel="noopener nofollow">夏家店上层文化</a>。]]></description><link>术语\山戎.html</link><guid isPermaLink="false">术语/山戎.md</guid><pubDate>Thu, 20 Jun 2024 12:27:05 GMT</pubDate></item><item><title><![CDATA[上山文化]]></title><description><![CDATA[ 
 <br>上山遗址位于钱塘江支流浙江省金华市浦阳江上游的浦江县黄宅镇境内，已被公布为全国重点文物保护单位。<br>浙江浦江上山遗址，代表了一种新发现的、更为原始的新石器时代文化类型，这种新颖的地域文化可以命名为“上山文化”。距今约11000到8500年，是浙江乃至整个中国东南地区年代最早的<a data-href="新石器时代（Neolithic）" href="术语\新石器时代（neolithic）.html" class="internal-link" target="_self" rel="noopener nofollow">新石器时代（Neolithic）</a>文化。<br>浙江省文物考古研 究 所、浦 江博 物馆：《浙江 浦 江 县 上 山 遗 址 发 掘 简 报 》 ，《 考 古 》 2007年 第9期]]></description><link>术语\上山文化.html</link><guid isPermaLink="false">术语/上山文化.md</guid><pubDate>Thu, 20 Jun 2024 12:26:20 GMT</pubDate></item><item><title><![CDATA[肾透明细胞癌(clear cell renal cell carcinomas , ccRCCs)]]></title><description><![CDATA[ 
 ]]></description><link>术语\肾透明细胞癌(clear-cell-renal-cell-carcinomas-,-ccrccs).html</link><guid isPermaLink="false">术语/肾透明细胞癌(clear cell renal cell carcinomas , ccRCCs).md</guid><pubDate>Thu, 15 Aug 2024 09:02:53 GMT</pubDate></item><item><title><![CDATA[生灭模型(birth-death model)]]></title><description><![CDATA[ 
 <br>生灭模型（Birth-Death Model）是一种在生物学、进化生物学和传染病学等领域中常用的模型，用于描述种群的出生和死亡过程，以及这些过程对种群数量变化的影响。该模型通常用于研究物种的进化、物种的分化和灭绝，以及传染病的传播和流行病学。<br>在生灭模型中，通常假设以下几个基本假设：<br>
<br>出生和死亡是随机事件：每个个体都有一定的概率在一段时间内出生，也有一定的概率在同一段时间内死亡。
<br>种群内的每个个体是独立的：一个个体的出生或死亡不会影响其他个体的生存状态。
<br>模型是时齐的（时间均匀）：出生和死亡的概率在时间上是恒定的。
<br>生灭模型可以有不同的变体，包括纯生灭模型（Pure Birth-Death Model）和扩张生灭模型（Birth-Death-Expansion Model）。在纯生灭模型中，种群数量只受到出生和死亡的影响，没有其他的影响因素。在扩张生灭模型中，还考虑了种群的扩张或缩小过程。<br>生灭模型的应用非常广泛，可以用于估计物种的分化时间、物种的灭绝率、传染病的基本再生数等。该模型的参数估计通常使用统计方法，例如贝叶斯推断，来根据观测数据对模型的参数进行估计，从而了解种群或物种的演化和变化过程。]]></description><link>术语\生灭模型(birth-death-model).html</link><guid isPermaLink="false">术语/生灭模型(birth-death model).md</guid><pubDate>Thu, 20 Jun 2024 12:23:17 GMT</pubDate></item><item><title><![CDATA[生态学十大法则]]></title><description><![CDATA[ 
 <br>
<br>竞争排斥原理
<br>Gause's Principle<br>这一原理基于实验观察，指出当两个物种在没有其他干扰的情况下完全竞争同一资源时，其中一个物种最终会被另一个物种完全排斥出生存环境。这是因为在有限的资源条件下，不能有两个物种共享完全相同的生态位。<br>
<br>瓦尔特法则
<br>Walter's Law<br>描述了物种在不同季节变化中如何沿着环境梯度（例如温度和湿度）移动以找到其适应的生态位。例如，一些植物在旱季可能会向湿润的地方迁移，而在雨季则可能向干燥地方迁移。<br>
<br>r/K 选择理论
<br>r/K Selection Theory<br>这一理论描述了物种如何在数量和质量之间做出生殖策略的选择。r-选型物种更倾向于生产大量后代，但对每个后代的投资较少，而K-选型物种则倾向于生产较少但质量更高的后代，并对每个后代投入更多的关心。<br>
<br>岛屿生物地理学理论
<br>Island Biogeography Theory<br>由MacArthur和Wilson提出，这个理论解释了岛屿上物种多样性与岛屿面积及与大陆的距离之间的关系。简而言之，大的岛屿和离大陆近的岛屿往往具有更高的物种丰富度。<br>
<br>食物链稳定性假说
<br>Food Chain Stability Hypothesis<br>这一假说指出，食物链中的物种数量越多，系统的稳定性就越低。这是因为物种间的相互作用和依赖关系增加，导致食物链中的扰动更容易影响到其他物种。<br>注意
一方面，如食物链稳定性假说所述，物种数量过多可能导致系统更易受扰动影响。另一方面，物种数量过少也会导致生态系统的不稳定，这可以从以下几个角度来理解：1. 功能多样性：每个物种在生态系统中都扮演特定的角色，例如授粉者、食物资源、捕食者等。物种数目较少时，某些关键功能可能没有物种来执行，这会影响生态系统的整体功能和稳定性。 2. 抵御外部扰动的能力：多样性较高的系统通常能更好地抵御外部环境的变化（例如气候变化、病害等）。每个物种对环境变化的适应能力不同，因此物种多样性越丰富，生态系统越有可能包含能够在新环境下生存的物种。 3. 物种间的相互依赖：物种之间存在食物网和其他形式的相互依赖关系。物种数目过少可能打破这些平衡关系，导致生态系统功能的丧失。4. 冗余物种：在物种丰富的系统中，多个物种可能执行相似的生态功能。这种“冗余性”使得某些物种的灭绝不会立即导致生态功能的丧失，因为其他物种能够填补这个空缺。简而言之，生态系统的稳定性取决于物种多样性和物种间相互作用的平衡。过多或过少的物种都可能破坏这种平衡，从而影响系统的稳定性。这表明，生态系统的稳定性是一个多因素、动态平衡的结果。
<br>
<br>中度干扰假说
<br>Intermediate Disturbance Hypothesis<br>这一假说认为中度的环境干扰（例如定期的火灾或飓风）会促进生态系统的物种多样性，因为这既可以防止主导物种完全占据生态位，也可以为其他物种提供空间。<br>
<br>李比希最小因子定律
<br>Liebig's Law of the Minimum<br>这一法则由19世纪的化学家李比希提出，指出植物的生长是受限于最稀缺的那个资源，而不是所有资源的总量。换句话说，只需一个关键资源的短缺就能限制植物的生长。<br>短板效应。<br>
<br>Tilman资源比率假说
<br>Tilman's Resource Ratio Hypothesis<br>这一假说由生态学家David Tilman提出，他认为物种之间的竞争结果与其对不同资源的需求比率有关。当两个物种对同一资源的需求比率相似时，竞争会更为激烈。<br>
<br>伯格曼法则
<br>Bergmann's Rule<br>这一生物地理学规则指出，某物种在寒冷地区的个体体型往往比在温暖地区的体型大。这可能是因为较大的体型有助于减少热量损失，从而在寒冷地区获得适应性优势。<br>
<br>艾伦法则
<br>Allen's Rule<br>这一规则指出，在寒冷地区的物种或种群，其耳朵和四肢往往比在温暖地区的相对短小。这有助于减少身体表面积，从而减少热量损失]]></description><link>术语\生态学十大法则.html</link><guid isPermaLink="false">术语/生态学十大法则.md</guid><pubDate>Thu, 20 Jun 2024 12:23:16 GMT</pubDate></item><item><title><![CDATA[生长分化因子15（Growth Differentiation Factor 15，GDF15）]]></title><description><![CDATA[ 
 <br>
<br>GDF15是属于转化生长因子β（TGF-β）超家族的一员，它在多种组织中表达，尤其在应激或组织损伤时表达量增加。
<br>GDF15在调节炎症反应、细胞生长和细胞死亡过程中起作用。
<br>在线粒体疾病中，GDF15的水平也可能因为线粒体功能障碍而增加。研究表明，GDF15是反应线粒体损伤的敏感指标，因此在诊断和监测线粒体相关的疾病中具有重要价值。
]]></description><link>术语\生长分化因子15（growth-differentiation-factor-15，gdf15）.html</link><guid isPermaLink="false">术语/生长分化因子15（Growth Differentiation Factor 15，GDF15）.md</guid><pubDate>Mon, 24 Jun 2024 05:28:28 GMT</pubDate></item><item><title><![CDATA[绳文人]]></title><description><![CDATA[ 
 <br>绳文人（日语：縄文人／じょうもんじん Jōmon-jin）是<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>列岛在绳文时代的原住民团体，他们与之后的<a data-href="弥生人" href="术语\弥生人.html" class="internal-link" target="_self" rel="noopener nofollow">弥生人</a>在人类学上有著显著区别。<br>绳文人生活于<a data-href="旧石器时代" href="术语\旧石器时代.html" class="internal-link" target="_self" rel="noopener nofollow">旧石器时代</a>后期，约自前145世纪至前10世纪左右，分布于整个<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>列岛。这个时代被称为<a data-href="绳文时代" href="术语\绳文时代.html" class="internal-link" target="_self" rel="noopener nofollow">绳文时代</a>。绳文人按照地域可以分为4到9个集团。<br>后来<a data-href="弥生人" href="术语\弥生人.html" class="internal-link" target="_self" rel="noopener nofollow">弥生人</a>自<a data-href="朝鲜" href="朝鲜" class="internal-link" target="_self" rel="noopener nofollow">朝鲜</a>半岛迁入并征服了<a data-href="绳文人" href="术语\绳文人.html" class="internal-link" target="_self" rel="noopener nofollow">绳文人</a>，与<a data-href="绳文人" href="术语\绳文人.html" class="internal-link" target="_self" rel="noopener nofollow">绳文人</a>不断融合混血形成了今日的<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a><a data-href="大和民族" href="大和民族" class="internal-link" target="_self" rel="noopener nofollow">大和民族</a>。而<a data-href="弥生人" href="术语\弥生人.html" class="internal-link" target="_self" rel="noopener nofollow">弥生人</a>也把<a data-href="绳文人" href="术语\绳文人.html" class="internal-link" target="_self" rel="noopener nofollow">绳文人</a>驱往虾夷地（北海道）和西南诸岛、琉球等地，该地居民仍旧保持著与绳文文化类似的文化与人种，分别为擦文文化和贝冢文化。      <br><a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>国立科学博物馆与国立遗传学研究所、东京大学等组成的研究团队成功完成了绳文人的全基因组解读。由此可以推断绳文人是在3.8万～1.8万年前从大陆集团中分离出来的。在人类学研究中引入最新的基因组解析的趋势在世界上也被推进，目前已经诞生了改变传统观念的划时代成果。通过对绳文人基因组的完全解读，探寻<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>人起源的研究有望加速。<br>现代<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>人的基因主要来自古时迁居<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>列岛绳文人和弥生人，<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>国立科学博物馆率领的研究团队解构了一具女性绳文人遗骸的DNA，推定绳文人大约从3.8万年至1.8万年前从亚洲大陆去到<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>。<br>研究团队化验在北海道礼文岛出土、有3500至3800年历史的女性绳文人骸骨，以现代高精度科技采取其大臼齿的DNA。解析结果显示，绳文人的基因与现今的南北韩人、<a data-href="台湾" href="术语\台湾.html" class="internal-link" target="_self" rel="noopener nofollow">台湾</a>原住民等族群相近；他们抵达<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>后，过着小规模群居生活，主要以狩猎维生。<br>研究亦发现，绳文人有较黄的肤色、褐色眼瞳、毛发幼细。据指，绳文人能适应高脂肪的饮食，同时具有较强的酒精耐受性。据指，现代本州人从绳文人继承了15%基因，冲绳人继承了30%，北海道爱奴族人更继承了70%。]]></description><link>术语\绳文人.html</link><guid isPermaLink="false">术语/绳文人.md</guid><pubDate>Thu, 20 Jun 2024 12:27:21 GMT</pubDate></item><item><title><![CDATA[失义或功能丧失（LoF）]]></title><description><![CDATA[ 
 <br>失义或功能丧失（LoF）是指一个基因中的突变或变异导致该基因产生的蛋白质失去正常功能或完全失去功能。这通常是由于基因中的变异导致蛋白质编码序列中的一个或多个密码子发生改变，使其编码一个不正常的氨基酸，或者提前终止蛋白质合成。这种变异可能导致蛋白质无法完成其正常的生物学功能。<br>失义或功能丧失变异通常对生物体产生不利影响，因为它们可能导致关键的代谢途径、信号传导通路或细胞功能的中断或受损。在人类基因中，失义突变通常与遗传疾病和疾病风险相关，因为它们可能导致不正常的蛋白质或缺乏特定的蛋白质，从而影响生理过程。<br>然而，在一些情况下，失义突变也可能对生物体产生有益的影响，因为它们可能导致一些有害蛋白质功能的减弱，或者通过引发一些生理适应反应来提供保护。因此，失义或功能丧失突变的影响可能会因基因和环境条件而异。]]></description><link>术语\失义或功能丧失（lof）.html</link><guid isPermaLink="false">术语/失义或功能丧失（LoF）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:16 GMT</pubDate></item><item><title><![CDATA[石峁遗址]]></title><description><![CDATA[ 
 <br>位于<a data-href="中国北方" href="术语\中国北方.html" class="internal-link" target="_self" rel="noopener nofollow">中国北方</a><a data-href="陕西" href="陕西" class="internal-link" target="_self" rel="noopener nofollow">陕西</a>北部的神木境内，面积广大，达到了400万平米。甚至超过了<a data-href="良渚文化" href="术语\良渚文化.html" class="internal-link" target="_self" rel="noopener nofollow">良渚文化</a>的建筑，距今4300年，延续了300年。]]></description><link>术语\石峁遗址.html</link><guid isPermaLink="false">术语/石峁遗址.md</guid><pubDate>Thu, 20 Jun 2024 12:20:14 GMT</pubDate></item><item><title><![CDATA[石垣诸岛]]></title><description><![CDATA[ 
 <br>石垣岛（日语：石垣島／いしがきじま Ishigaki-jima，琉球语：石垣／イシガチ Isigaci）位于日本琉球列岛的八重山群岛的南方，为八重山群岛的政治、经济、教育和交通中心，面积222.6平方公里是冲绳县内仅次于冲绳岛和西表岛的第三大岛，也是日本面积第21大岛。岛上人口约4万5千人。<br>行政上属于冲绳县石垣市，也是冲绳县八重山支厅所在地。知名虽然石垣岛属于冲绳县，但距离冲绳县厅所在地的那霸市有410公里的距离，离东京更是有近2,000公里的距离。在地理上，比起日本多数地区，反而离中国台湾比较近，距离台湾本岛只有270公里。<br>岛中央为于茂登岳，海拔526米，是冲绳县内的最高峰。石垣岛南部多为珊瑚礁隆起的平地，人口多集中于此。人物夏川里美出身于此岛。]]></description><link>术语\石垣诸岛.html</link><guid isPermaLink="false">术语/石垣诸岛.md</guid><pubDate>Thu, 20 Jun 2024 12:19:26 GMT</pubDate></item><item><title><![CDATA[时间复杂度（Time Complexity，TC）]]></title><description><![CDATA[ 
 <br>时间复杂度是用于衡量一个算法在输入规模变化时，执行所需时间增长速率的指标。它反映了算法的效率，通常使用“大 O”符号（O）来表示，描述在最坏情况下算法的运行时间如何随着输入规模的变化而增长。<br>类似的概念包括：<a data-href="空间复杂度（Space Complexity，SC）" href="术语\空间复杂度（space-complexity，sc）.html" class="internal-link" target="_self" rel="noopener nofollow">空间复杂度（Space Complexity，SC）</a>。]]></description><link>术语\时间复杂度（time-complexity，tc）.html</link><guid isPermaLink="false">术语/时间复杂度（Time Complexity，TC）.md</guid><pubDate>Sun, 22 Sep 2024 07:43:37 GMT</pubDate></item><item><title><![CDATA[菽（Glycine max）]]></title><description><![CDATA[ 
 <br>大豆（学名：Glycine max）是豆科大豆属植物，其种子含有丰富的蛋白质，此名词一般都指其种子而言。<br>
中国境内驯化的时间可能比<a data-href="粟（millet）" href="术语\粟（millet）.html" class="internal-link" target="_self" rel="noopener nofollow">粟（millet）</a>要晚一些，不太清楚。距今4000年来就出现了栽培大豆。<br>大豆是东亚的原生种植物，果实呈椭圆形、球形。因品系不同，而种皮颜色有黄色、淡绿色、黑色、棕色，所以又别名为黄豆（黄大豆）、青豆（是指青大豆，不是指豌豆）、黑豆（黑大豆）；此外，另有茶大豆。毛豆是尚未成熟的食用大豆，约在荚果种子生长至八分熟时采收。毛豆一词，可指此鲜豆荚或鲜豆荚内的八分熟种子。因为此时期的豆荚外皮尚有很多细毛，所以得名；待毛豆成熟后，豆荚就会干而脆，种子也会脱水、变小、变硬而成为大豆，过熟则豆荚干枯开裂，豆粒会洒落。大豆可以制成大豆油、豆豉，在联合国粮食及农业组织（FAO）的分类中，甚至将大豆列为含油种子而不是豆类。无脂肪的豆粕是动物饲料中常见及廉价的蛋白质来源，像植物组织蛋白就在一些餐点中代替肉。每单位面积，种豆可以产生的蛋白质较其他利用方式都要高。]]></description><link>术语\菽（glycine-max）.html</link><guid isPermaLink="false">术语/菽（Glycine max）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:04 GMT</pubDate></item><item><title><![CDATA[黍（Panicum miliaceum）]]></title><description><![CDATA[ 
 <br>又称黄米。与<a data-href="粟（millet）" href="术语\粟（millet）.html" class="internal-link" target="_self" rel="noopener nofollow">粟（millet）</a>相比，其更加耐寒，也更加容易被驯化。所以最初的古人驯化<a data-href="黍（Panicum miliaceum）" href="术语\黍（panicum-miliaceum）.html" class="internal-link" target="_self" rel="noopener nofollow">黍（Panicum miliaceum）</a>。<br>
驯化时间大概距今10000年。<br>
有趣的是，黍定义了长度单位——尺：100粒黍横排。]]></description><link>术语\黍（panicum-miliaceum）.html</link><guid isPermaLink="false">术语/黍（Panicum miliaceum）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:05 GMT</pubDate></item><item><title><![CDATA[竖穴墓]]></title><description><![CDATA[ 
 <br>就是从地面直接向下挖出墓室，埋葬死者。]]></description><link>术语\竖穴墓.html</link><guid isPermaLink="false">术语/竖穴墓.md</guid><pubDate>Thu, 20 Jun 2024 12:20:18 GMT</pubDate></item><item><title><![CDATA[双重假说]]></title><description><![CDATA[ 
 <br><a class="internal-link" data-href="藏族.md" href="术语\藏族.html" target="_self" rel="noopener nofollow">藏族</a>藏人的双重假说指的是关于藏族人适应高海拔环境的遗传演化有两种可能的来源。第一种是藏族人可能直接从古代高原人群继承了适应高海拔的基因变异；第二种是他们可能通过与其他古代人群的混合，例如与低地的汉族人群，获得了这些适应性特征。这个假说基于藏族人特有的生理特征和遗传标记的分析，旨在解释他们是如何适应高海拔环境的复杂生态系统的。<br>扩展：<a class="internal-link" data-href="文献及报道/报道/藏族人群在高原缺氧环境中保持高生殖力的遗传机制.md" href="文献及报道\报道\藏族人群在高原缺氧环境中保持高生殖力的遗传机制.html" target="_self" rel="noopener nofollow">藏族人群在高原缺氧环境中保持高生殖力的遗传机制</a>]]></description><link>术语\双重假说.html</link><guid isPermaLink="false">术语/双重假说.md</guid><pubDate>Thu, 20 Jun 2024 12:22:35 GMT</pubDate></item><item><title><![CDATA[顺式遗传调控作用(cis-acting genetic control)]]></title><description><![CDATA[ 
 <br>"顺式遗传调控作用"是指在同一染色体上的一个基因或一个基因区域对另一个基因的表达产生影响，而这两个基因处于相同的染色体上。这种调控方式是通过染色体的空间结构和相互作用来实现的，而不是通过转录因子或其他分子中介来实现的。<br>在上下游基因的顺序排列中，上游基因可能会对下游基因的表达产生影响。这种影响可以是积极的（增强下游基因的表达）或消极的（抑制下游基因的表达）。这种顺式遗传调控可以通过染色体的三维结构中的相互作用来实现，例如染色体环域的接触和调节。这种调控方式在基因调控网络中起着重要作用，有助于确保基因的适当表达和功能。]]></description><link>术语\顺式遗传调控作用(cis-acting-genetic-control).html</link><guid isPermaLink="false">术语/顺式遗传调控作用(cis-acting genetic control).md</guid><pubDate>Thu, 20 Jun 2024 12:23:41 GMT</pubDate></item><item><title><![CDATA[瞬时受体电位粘液脂蛋白（Transient Receptor Potential Mucolipin, TRPML）]]></title><description><![CDATA[ 
 <br>一类位于溶酶体和内涵体膜上的阳离子通道蛋白，属于瞬时受体电位（TRP）通道家族。TRPML通道在调节溶酶体内的钙离子释放、细胞内的膜交通、以及在溶酶体功能和细胞稳态维持中发挥重要作用。TRPML1是其中的一个亚型，尤其与溶酶体功能和线粒体间的通信有关。]]></description><link>术语\瞬时受体电位粘液脂蛋白（transient-receptor-potential-mucolipin,-trpml）.html</link><guid isPermaLink="false">术语/瞬时受体电位粘液脂蛋白（Transient Receptor Potential Mucolipin, TRPML）.md</guid><pubDate>Mon, 26 Aug 2024 02:10:45 GMT</pubDate></item><item><title><![CDATA[斯虎尔（Skhul）]]></title><description><![CDATA[ 
 <br>斯虎尔人，英文Skhul man。其最早是在中东发现的早期智人（尼人）化石。因为化石形态的较大差异，斯虎尔人曾被认为是属于两种不同的人。<br>
一种较近西欧尼人；另一种较近澳大利亚古代人。<br>后经进一步研究认为，应为同一种人，是尼安德特人和克罗马农人之间的类型。根据放射性碳的分析，斯虎尔人距今大约4.5万年，相当于玉木冰期的第二部分。]]></description><link>术语\斯虎尔（skhul）.html</link><guid isPermaLink="false">术语/斯虎尔（Skhul）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:14 GMT</pubDate></item><item><title><![CDATA[四坝文化（Siba culture）]]></title><description><![CDATA[ 
 <br>四坝文化，也称为火烧沟文化（火烧沟），是一种青铜时代的考古文化，大约在 3900 年至 3500 年前在中国西北部甘肃省的河西走廊蓬勃发展。1984年在山丹县四坝滩发现。 四坝型陶器与甘肃的其他陶器不同。四坝制作了带有彩色装饰的彩绘陶器;这些是在船只被发射后涂漆的。西面哈密盆地的天山贝鲁文化也使用了类似的陶器。<br>
四坝文化可能是后来西北的<a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>人群的祖先。<br>
四坝人从事小米养殖和养猪等农业活动。他们的冶金技术高度发达。<br>四坝文化主要分布在甘肃走廊以西。地点分布在永昌、民越、酒泉、玉门等县。四坝文化东与齐家文化接壤。<a data-href="齐家文化" href="术语\齐家文化.html" class="internal-link" target="_self" rel="noopener nofollow">齐家文化</a>与四坝文化非常接近。四坝文化可能是独立发展的。<br>酒泉甘古亚遗址已被发掘。<br>在东惠山、火绍沟和甘古亚3个出土遗址的埋葬习俗和文物比较中观察到显著差异。<br>四坝文化在东西方文化之间起了中介作用。还与欧亚草原有联系。研究表明，在这个广阔的地理区域内，农业和畜牧/狩猎社区之间有着密切的互动;牧业/狩猎社区也拥有许多金属文物。]]></description><link>术语\四坝文化（siba-culture）.html</link><guid isPermaLink="false">术语/四坝文化（Siba culture）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:30 GMT</pubDate></item><item><title><![CDATA[四色问题]]></title><description><![CDATA[ 
 <br>1852年，毕业于伦敦大学的弗南西斯.格思里来到一家科研单位搞地图着色工作时发现：每幅地图都可以用四种颜色着色，使得有共同边界的国家都被着上不同的颜色。<br>1872年，英国当时最著名的数学家凯利正式向伦敦数学学会提出了这个问题，于是四色猜想成了世界数学界关注的问题。1976年，美国数学家阿佩尔与哈肯在美国伊利诺斯大学的两台不同的电子计算机上，用了1200个小时，做了100亿种判断，终于完成了四色定理的证明。不过不少数学家并不满足于计算机取得的成就，他们认为应该有一种简捷明快的书面证明方法。]]></description><link>术语\四色问题.html</link><guid isPermaLink="false">术语/四色问题.md</guid><pubDate>Thu, 20 Jun 2024 12:22:38 GMT</pubDate></item><item><title><![CDATA[一、四种方法比较]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://www.yuque.com/wusheng/gw7a9p/kmcp00" rel="noopener nofollow" class="external-link" href="https://www.yuque.com/wusheng/gw7a9p/kmcp00" target="_blank">原文链接</a><br>前言：NJ法，ML法，BI法是目前主流的建树方法，MP法目前相对用得较少，每种方法都有它一定的优点，同时也存在着缺点。对于相同的数据集，推荐用两种及两种以上的方法建系统发育树进行分析，互相比照。<br>
<a data-href="MrBayes：贝叶斯方法建树" href="软件\beast\mrbayes：贝叶斯方法建树.html" class="internal-link" target="_self" rel="noopener nofollow">MrBayes：贝叶斯方法建树</a><br>
<a data-href="GUIDANCE2 Server ：多序列比对置信软件" href="软件\其它生信软件\a-j\guidance2-server-：多序列比对置信软件.html" class="internal-link" target="_self" rel="noopener nofollow">GUIDANCE2 Server ：多序列比对置信软件</a><br><br><br><br><br><br>Model-based algorithms (Bayesian inference, BI or maximum likelihood, ML) would be preferred to use to draw pertinent conclusions, because they are more robust than the Neighbor Joining (NJ) algorithm, which is a genetic distance-based method. &nbsp;  <br>To draw pertinent conclusions, more robust model-based phylogenetic algorithms, such as Bayesian inference (BI) or maximum likelihood (ML), would be preferred to use instead of Neighbor joining (NJ), which is a genetic distance-based method.  <br>The only reason I can think of to use neighbor joining (NJ) is that the authors have purely distance data with no access to primary sequence data. Thus, the authors should use more robust reconstruction methods (i.e. ML and Bayesian algorithms) to draw pertinent conclusions.]]></description><link>术语\四种建树方法比较.html</link><guid isPermaLink="false">术语/四种建树方法比较.md</guid><pubDate>Fri, 23 Aug 2024 08:35:46 GMT</pubDate></item><item><title><![CDATA[松嫩平原]]></title><description><![CDATA[ 
 <br>松嫩平原是由松花江和嫩江冲积而成的平原，位于黑龙江省西南部和吉林省西北部。南以松辽分水岭为界，与辽河平原相隔；北与小兴安岭山脉相连；西起大兴安岭东麓；东至张广才岭等东部山地。海拔150-200米，面积约18万平方公里，约为东北平原面积的一半以上，其中耕地面积5.6万平方公里。松嫩平原与辽河平原由位于长春市附近的侵蚀低丘——松花江、辽河的分水岭隔开，又合称为松辽平原，是东北平原的主体。<br>松嫩平原以其广阔、肥沃的黑土地著称，与乌克兰大草原、美国密西西比河流域黑土带并称世界三大黑土带之一；但由于美国的黑土带在1970年代被龙卷风暴横扫后变得贫瘠，而乌克兰的在切尔诺贝利核电厂爆炸后亦变得不适宜种植，现时<a data-href="中国东北" href="术语\中国东北.html" class="internal-link" target="_self" rel="noopener nofollow">中国东北</a>的黑土带变成了世界上唯一适合种植的黑土带。<br>松嫩平原是中国重要的商品粮生产基地之一，盛产大豆、高粱、马铃薯、小麦、玉米、亚麻、甜菜、向日葵等。此外，著名的大庆油田也位于松嫩平原腹地。这里是扶余族发源地。]]></description><link>术语\松嫩平原.html</link><guid isPermaLink="false">术语/松嫩平原.md</guid><pubDate>Thu, 20 Jun 2024 12:20:09 GMT</pubDate></item><item><title><![CDATA[粟（millet）]]></title><description><![CDATA[ 
 <br>又称小米。驯化时间大概距今8000年，与<a data-href="黍（Panicum miliaceum）" href="术语\黍（panicum-miliaceum）.html" class="internal-link" target="_self" rel="noopener nofollow">黍（Panicum miliaceum）</a>相比，不太耐寒。适合比较干旱的环境。]]></description><link>术语\粟（millet）.html</link><guid isPermaLink="false">术语/粟（millet）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:03 GMT</pubDate></item><item><title><![CDATA[溯祖理论（coalescent theory）]]></title><description><![CDATA[ 
 <br>用于描述和预测基因样本的历史模型。这个理论基于随机遗传漂变，解释了遗传标记（如基因或DNA序列）如何随时间在一个群体中传递和变化。溯祖理论特别强调了这些基因或遗传标记的共同祖先的概念。]]></description><link>术语\溯祖理论（coalescent-theory）.html</link><guid isPermaLink="false">术语/溯祖理论（coalescent theory）.md</guid><pubDate>Tue, 16 Jul 2024 08:35:55 GMT</pubDate></item><item><title><![CDATA[随机最小生成树（Randomized Minimum Spanning Tree，RMST）]]></title><description><![CDATA[ 
 <br>随机最小生成树通过在随机化的最小生成树算法中，反复随机地从数据中抽样以创建多棵生成树，生成稳定的单倍型网络。]]></description><link>术语\随机最小生成树（randomized-minimum-spanning-tree，rmst）.html</link><guid isPermaLink="false">术语/随机最小生成树（Randomized Minimum Spanning Tree，RMST）.md</guid><pubDate>Sun, 22 Sep 2024 07:36:04 GMT</pubDate></item><item><title><![CDATA[塔岛技术悲剧]]></title><description><![CDATA[ 
 <br>塔岛技术悲剧指的是在澳大利亚大陆的东南方向有一个岛屿，这个岛屿的原住民生活很原始。但是考古学家发现，第一批的原住民曾经拥有骨制工具盒技术，但是在过去的1万年到4000年，技术慢慢消失，所以他们经历了可怕的技术倒退。<br>
原理上来说，人口群体越多，技术的掌握人数就越多，教学相长，技术的传承和创新就更加容易；反之则容易失传。]]></description><link>术语\塔岛技术悲剧.html</link><guid isPermaLink="false">术语/塔岛技术悲剧.md</guid><pubDate>Thu, 20 Jun 2024 12:22:43 GMT</pubDate></item><item><title><![CDATA[塔里木盆地（Tarim Basin）]]></title><description><![CDATA[ 
 <br>塔里木盆地位于中国新疆南部 ，是中国面积最大的内陆盆地。盆地处于天山、昆仑山和阿尔金山之间。南北最宽处520千米，东西最长处1400千米，面积约40多万平方千米 。海拔高度在800到1300米之间，地势西高东低。]]></description><link>术语\塔里木盆地（tarim-basin）.html</link><guid isPermaLink="false">术语/塔里木盆地（Tarim Basin）.md</guid><pubDate>Thu, 20 Jun 2024 12:19:17 GMT</pubDate></item><item><title><![CDATA[拓扑学(topology)]]></title><description><![CDATA[ 
 <br>是研究几何图形或空间在连续改变形状后还能保持不变的一些性质的学科。它只考虑物体间的位置关系而不考虑它们的形状和大小。在拓扑学里，重要的拓扑性质包括连通性与紧致性。<br>著名的“<a data-href="四色问题" href="术语\四色问题.html" class="internal-link" target="_self" rel="noopener nofollow">四色问题</a>”也是与拓扑学发展有关的问题。<br>
而德国数学家莫比乌斯（1790～1868）在1858年发现了莫比乌斯曲面。这种曲面不能用不同的颜色来涂满。莫比乌斯曲面是一种“不可定向的”空间。可定向性是一种拓扑性质。这意味着，不可能把一个不可定向的空间连续的变换成一个可定向的空间。]]></description><link>术语\拓扑学(topology).html</link><guid isPermaLink="false">术语/拓扑学(topology).md</guid><pubDate>Thu, 20 Jun 2024 12:22:57 GMT</pubDate></item><item><title><![CDATA[陶寺文化]]></title><description><![CDATA[ 
 <br>陶寺文化是中原地区<a data-href="龙山文化" href="术语\龙山文化.html" class="internal-link" target="_self" rel="noopener nofollow">龙山文化</a>时代的区域考古学文化。&nbsp;<br>陶寺文化主要分布于汾河下游及其支流浍河流域。在山西地区内的临汾、襄汾、侯马、曲沃、翼城、绛县等地共发现陶寺类型的遗址75处。各个遗址规模一般在数万或10余万平方米以上，最大的则超过了100万平方米，陶寺遗址总面积已达300万平方米。<br>陶寺文化的早期<a data-tooltip-position="top" aria-label="https://baike.baidu.com/item/%E9%99%B6%E5%99%A8/1492145?fromModule=lemma_inlink" rel="noopener nofollow" class="external-link" href="https://baike.baidu.com/item/%E9%99%B6%E5%99%A8/1492145?fromModule=lemma_inlink" target="_blank">陶器</a>多为手制和模制，轮制的较少，以夹砂灰陶为主，次为泥质灰陶，黑陶极少。纹饰以绳纹为主，器形以平底和小平底器为主，有少量的圈足器和三足器，以“釜灶”，扁壶、折腹单，小口折肩罐，折腹盆最具有特征性。晚期轮制陶增多，泥质灰陶大增，纹饰中绳纹数量下降，但仍居首位，篮纹显著增多，陶器群的主要器类有各种形态的鬲，如双銴鬲、单把鬲、高领鬲。新出现了陶甗和陶鬲，其他器类还有甑、深腹盆、篮纹镂孔圈足罐、扁腹壶、豆、碗以及单把杯等。<br>
<img alt="石峁遗址和陶寺遗址" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%9F%B3%E5%B3%81%E9%81%97%E5%9D%80%E5%92%8C%E9%99%B6%E5%AF%BA%E9%81%97%E5%9D%80.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\陶寺文化.html</link><guid isPermaLink="false">术语/陶寺文化.md</guid><pubDate>Thu, 20 Jun 2024 12:26:51 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%9F%B3%E5%B3%81%E9%81%97%E5%9D%80%E5%92%8C%E9%99%B6%E5%AF%BA%E9%81%97%E5%9D%80.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%9F%B3%E5%B3%81%E9%81%97%E5%9D%80%E5%92%8C%E9%99%B6%E5%AF%BA%E9%81%97%E5%9D%80.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[体细胞镶嵌型（somatic mosaicism）]]></title><description><![CDATA[ 
 <br>Somatic mosaicism refers to&nbsp;the occurrence of two genetically distinct populations of cells within an individual, derived from a postzygotic mutation. In contrast to inherited mutations, somatic mosaic mutations may affect only a portion of the body and are not transmitted to progeny.]]></description><link>术语\体细胞镶嵌型（somatic-mosaicism）.html</link><guid isPermaLink="false">术语/体细胞镶嵌型（somatic mosaicism）.md</guid><pubDate>Sun, 08 Sep 2024 09:48:38 GMT</pubDate></item><item><title><![CDATA[替换积累速率（substitutions accumulate）]]></title><description><![CDATA[ 
 <br><a data-href="系统发育率（phylogenetic rate）" href="术语\系统发育率（phylogenetic-rate）.html" class="internal-link" target="_self" rel="noopener nofollow">系统发育率（phylogenetic rate）</a>估计得出的，也称为替换率。]]></description><link>术语\替换积累速率（substitutions-accumulate）.html</link><guid isPermaLink="false">术语/替换积累速率（substitutions accumulate）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:58 GMT</pubDate></item><item><title><![CDATA[田园洞人]]></title><description><![CDATA[ 
 <br>田园洞人是最早生活于东亚地区的现代人类之一，但并非现代东亚人的直接祖先。其化石于2003年在北京周口店西南6公里的田园洞洞穴地层中被发现。<br>2007年在对田园洞人骨骼化石进行放射性碳定年法分析后表明，田园洞人的生存年代距今约4.2万年至3.85万年，比发现地点相近的山顶洞人早1万多年，是至今为止欧亚大陆东部最早的现代人类遗骸。2013年德国马克斯·普朗克进化人类学研究所与中国科学院合作对田园洞人化石进行的DNA测试进一步表明，田园洞人与许多现代亚洲人以及美洲原住民间存在遗传学上的亲缘关系，但已与现代欧洲人的祖先分离。]]></description><link>术语\田园洞人.html</link><guid isPermaLink="false">术语/田园洞人.md</guid><pubDate>Thu, 20 Jun 2024 12:26:17 GMT</pubDate></item><item><title><![CDATA[铁器时代（Iron Age，IA）]]></title><description><![CDATA[ 
 ]]></description><link>术语\铁器时代（iron-age，ia）.html</link><guid isPermaLink="false">术语/铁器时代（Iron Age，IA）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:28 GMT</pubDate></item><item><title><![CDATA[铁死亡（ferroptosis）]]></title><description><![CDATA[ 
 <br>铁死亡（Ferroptosis） 是一种非凋亡性细胞死亡形式，其特征是依赖铁的过氧化脂质积累。与其他细胞死亡方式（如凋亡）不同，铁死亡通过氧化应激、铁积累和脂质过氧化来损伤细胞膜，最终导致细胞死亡。]]></description><link>术语\铁死亡（ferroptosis）.html</link><guid isPermaLink="false">术语/铁死亡（ferroptosis）.md</guid><pubDate>Tue, 17 Sep 2024 08:05:17 GMT</pubDate></item><item><title><![CDATA[同义突变（Synonymous Mutation）]]></title><description><![CDATA[ 
 <br>同义突变是一种基因突变，其中一个或多个核苷酸的改变不会导致蛋白质编码的氨基酸序列发生改变。<br>这意味着虽然DNA序列发生了变化，但蛋白质的氨基酸序列保持不变，因此对蛋白质的结构和功能通常没有直接影响。<br>同义突变有时被称为"<a data-href="沉默突变" href="术语\沉默突变.html" class="internal-link" target="_self" rel="noopener nofollow">沉默突变</a>"，因为它们在蛋白质编码中没有明显的影响。]]></description><link>术语\同义突变（synonymous-mutation）.html</link><guid isPermaLink="false">术语/同义突变（Synonymous Mutation）.md</guid><pubDate>Mon, 21 Oct 2024 03:42:24 GMT</pubDate></item><item><title><![CDATA[同源型变异]]></title><description><![CDATA[ 
 <br>同源型变异是指在一个个体的一对同源染色体上，某一基因座上存在的两个等位基因是相同的。在同源型变异的情况下，个体的同源染色体上的两个等位基因是相似的，而不是不同的。这是由于同源染色体来自于个体的父母，分别传递给个体的父亲和母亲。如果在某一基因座上，一个个体从父亲那里继承了一个特定的等位基因，而从母亲那里也继承了相同的等位基因，那么在该基因座上就形成了同源型变异。<br>同源型变异在基因座上的表现可能包括相同的基因型或等位基因，导致基因座上的两个拷贝是相似的。相反，异源型变异是指在同一基因座上，一个个体从父亲那里继承了一个等位基因，而从母亲那里继承了另一个等位基因，导致基因座上的两个拷贝是不同的。<br>在遗传学和基因组学的研究中，同源型变异的检测和分析对于理解基因座的遗传特征和个体遗传背景非常重要。]]></description><link>术语\同源型变异.html</link><guid isPermaLink="false">术语/同源型变异.md</guid><pubDate>Thu, 20 Jun 2024 12:20:54 GMT</pubDate></item><item><title><![CDATA[同源重组区域（recombination of homologous,ROH）]]></title><description><![CDATA[ 
 <br>一、同源重组概述<br>同源重组是一种生物过程中，涉及到DNA的交换和重排。它发生在两个具有相同或高度相似序列的DNA分子之间，通过形成交叉点并交换链部分而实现。这个过程被称为重组，导致了DNA序列的变化。同源重组主要发生在特定的细胞周期阶段，如S期和G2期。此外，它也在DNA修复和基因打靶等生物学过程中发挥重要作用。<br>二、同源重组的机制<br>
<br>同源配对
<br>首先，两个DNA分子通过寻找彼此的同源序列进行配对。这个过程被称为同源配对或联会。在配对过程中，DNA分子的双螺旋结构被解开，使得碱基对暴露并相互识别。同源配对的区域被称为重组节点。<br>
<br>交叉点的形成
<br>一旦配对完成，交叉点的形成便开始。这些交叉点是同源重组过程中的关键步骤。它们是由DNA酶切割和交叉连接酶（如Rad51）催化形成的。交叉点处的DNA链交换使得两个DNA分子之间的序列得以重排。<br>
<br>重组复合体的形成
<br>在交叉点形成后，一系列蛋白质复合物开始聚集，形成重组复合体。这个复合体负责完成重组过程，包括DNA修复和重排。其中一些关键成分包括Mre11、Rad50、Xrs2和Rad51等蛋白质。<br>
<br>DNA修复和重排
<br>随着重组复合体的形成，DNA修复和重排开始发生。DNA修复涉及到错误或受损DNA序列的修正，而DNA重排则涉及到序列的重新排列。这些过程依赖于多种酶和辅助蛋白，如Rad51、Rad52和Rad54等。<br>三、同源重组的应用<br>同源重组在多个领域具有广泛的应用价值。例如，在基因打靶和基因治疗中，同源重组被用于特定基因的删除、替换或插入。在免疫编辑中，同源重组被用于生成突变或编辑免疫细胞的基因组。此外，同源重组也在合成生物学和进化研究中发挥重要作用。<br>总之，同源重组是一种复杂的生物过程，它涉及到DNA的交换和重排。本文通过图解的方式详细介绍了同源重组的机制以及其在生物学中的应用。随着科学技术的发展，我们对同源重组的理解将不断深入，其在实践中的应用也将更加广泛]]></description><link>术语\同源重组区域（recombination-of-homologous,roh）.html</link><guid isPermaLink="false">术语/同源重组区域（recombination of homologous,ROH）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:55 GMT</pubDate></item><item><title><![CDATA[统一流形近似和投影（Uniform Manifold Approximation and Projection,UMAP）]]></title><description><![CDATA[ 
 <br>
<br>原理：UMAP 构建了一个距离保持映射，即尽量使原数据中相近的点在低维空间中也相近。这种方法基于流形学习的理论，可以视为对高维数据结构的近似。
<br>优势：在保持局部结构的同时，也较好地保持全局结构。计算效率比t-SNE高，适应性强，可以用于更大的数据集。
<br>局限：参数调整仍然较为复杂，且解释性不如PCA明确。
]]></description><link>术语\统一流形近似和投影（uniform-manifold-approximation-and-projection,umap）.html</link><guid isPermaLink="false">术语/统一流形近似和投影（Uniform Manifold Approximation and Projection,UMAP）.md</guid><pubDate>Thu, 20 Jun 2024 12:25:51 GMT</pubDate></item><item><title><![CDATA[透彻理解p值与假设检验]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://mp.weixin.qq.com/s?__biz=MzU0MzEwOTE2MQ==&amp;mid=2247483746&amp;idx=1&amp;sn=a7013df7dfa1deec93bbcb67f7cbd3c0&amp;chksm=fb113824cc66b1327a9cc01e7339806d9ff1d767179d18e5c86684dd29865f685147166c84f3&amp;mpshare=1&amp;scene=1&amp;srcid=0212Gh1RmSAE1DbTlBxfP2wd&amp;sharer_shareinfo=fde27699bd6dbdf1973b480b434c546f&amp;sharer_shareinfo_first=fde27699bd6dbdf1973b480b434c546f#rd" rel="noopener nofollow" class="external-link" href="https://mp.weixin.qq.com/s?__biz=MzU0MzEwOTE2MQ==&amp;mid=2247483746&amp;idx=1&amp;sn=a7013df7dfa1deec93bbcb67f7cbd3c0&amp;chksm=fb113824cc66b1327a9cc01e7339806d9ff1d767179d18e5c86684dd29865f685147166c84f3&amp;mpshare=1&amp;scene=1&amp;srcid=0212Gh1RmSAE1DbTlBxfP2wd&amp;sharer_shareinfo=fde27699bd6dbdf1973b480b434c546f&amp;sharer_shareinfo_first=fde27699bd6dbdf1973b480b434c546f#rd" target="_blank">透彻理解p值与假设检验 (qq.com)</a><br><br>统计学把拒绝H0犯的错误叫做α错误，也叫做I型错误，而把接受H0所犯的错误叫做β错误，也叫II型错误。<br><br>小张同学，去考数学考试，考了140分（满分为150分）。<br>他的数学老师看到此成绩，不禁眉飞色舞，喜上心头，当场放话：这个学生是块好材料，他肯定是个数学天才，我要好好培养！<br>有一位名叫“零博士”的统计学家刚好来此校见习，见状，十分鄙夷，开始对这位无知的数学老师大放狠话：此人真是毫无科学素养与怀疑精神，他真是个蠢货！<br>实际上，零博士认为小张同学是一名“数学庸才”的可能性是完全存在的。据此，二人在对小王的数学能力判断上，形成了不同的观点：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402180919183.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
数学老师感到不服，觉得自己20年教龄的权威受到了挑战。而零博士紧接着表达了自己的理由，他说：你怎么能够确信小张这一回不是超常发挥呢？<br>零博士表达的质疑实际上十分质朴，相信每一位读者都会深表赞同，那么我们如何统计学的方式去回应“零博士”的质疑呢？<br><br>在讲第一类错误之前，我们先要交代一下我们的假设：正态分布假设。这个假设认为，我们关注的大多数变量（例如智力）都呈正态分布。放到这一具体的故事情境中，我们可以假设：如果找一群被“诊断”为数学庸才的人进行数学考试，那么他们的成绩分布会如下图所示——一个以100分为均数/中心的正态分布。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402180920436.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
基于如上的分布，假设小王也是数学庸才群体中的一员。那么，遇上一个考出140分甚至更高的数学分数的数学庸才，是一件多难的事情呢？有过一定概率论基础的同学会知道，正态分布曲线下的特定区间所覆盖的面积代表了这一区间的数学分数出现的概率。那么参考下图140分位置右边的面积，我们可以看到，这一概率仅为2%左右。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402180920888.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
如果屏幕前的你和我一样理性的话，相信你会和我一样对以上的推论进行总结：如果我假设小王是个数学庸才，我只有2%的概率获得这样的结果，所以我倾向于认为小王是一个数学天才。<br>基础好的读者可能已经发现，这个2%，或者.02实际上就是我们经常接触的p值。我们通过一个p值较小的结果，拒绝了零博士所作的假设（小王是个数学庸才），而这个假设也就是我们常说的“零假设”。数学老师所持的观点（小王是个数学天才），则为我们常常提到的“备择假设”。<br>此外，p值还有另一个名字，叫作“第一类错误”（Type I error）的概率。“第一类错误”这个名字有点暧昧，还有的人把它称为“假阳性错误”，这一名称就比较直观了。简要来说，“第一类错误”/“假阳性错误”是指：在零假设为真的前提下，我们获得一个让我们“错误地”拒绝零假设的结果。而学术界所规定的p&lt;.05的规则，实际上是认为5%的发生概率可以被称为小概率事件。由此，可以保证大多数科学研究中出现假阳性结果是小概率事件。<br><br>那么我们如何通过这个故事来生动地理解“第二类错误”呢？让我们来更改一下故事的背景。<br>这次小张的运气和实力欠佳，获得了120分，即使他和他的妈妈都很满意，可是挑剔的数学老师埋怨道：这名同学太蠢了！他是个数学庸才，我以后不会关注他了！<br>见到此番情形的零博士，又面露鄙夷之色，对数学老师放出狠话：此人果真毫无科学素养与怀疑精神，他无疑确实真的是个蠢货！<br>我们可以看到，零博士和数学老师的观点产生了对调。零博士还为自己的新观点找到了新论据，他说：小张完全有可能发挥失常啊！<br>还是一样的配方，还是熟悉的味道！那么这次，我们该如何再次运用统计学的方式，来解读这一例子呢？<br>下图是熟悉的“数学庸才”的正态分布，在正态分布的基础上，我们又添加了一个淡蓝色的“数学天才”的正态分布，这一正态分布是我们假想的，我们并不能够确定它均数所落到的具体位置，但是我们假设，它的形状和“数学庸才”的近似，并且落在右边。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402180920121.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
让我们来看一下，120分大概在横轴上的什么位置：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402180920462.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
据此，我们可以问一下自己，对于一名我们假想的数学天才来说，发挥失常从而考到一个120分及以下的分数，从概率论的角度来说，它究竟是一件寻常还是不寻常的事情呢？为了解答这一问题，我们可以看一下在“数学天才”分布中，120分及以下所对应的面积，从图中可以看到，这一部分所对应的面积/概率还是很大的。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402180920966.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402180921332.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
实际上，p &lt; .05它绝不应该是一个科学研究中“教条式的”存在（虽然现在明显是的），在下一篇推文中我们还会提到，p值并不是拿来说明某个假设是对/错的，p值只不过是一个供我们自己修正自己对客观世界所抱持的信念的指标。同时，在统计学的世界里，所有的事情都不是非黑即白的，当我们做下某一种结论时，我们要清楚也存在着另一种结论（小概率事件）发生的可能性。]]></description><link>术语\透彻理解p值与假设检验.html</link><guid isPermaLink="false">术语/透彻理解p值与假设检验.md</guid><pubDate>Thu, 20 Jun 2024 12:23:34 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402180919183.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402180919183.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[突变率（Mutation rate）]]></title><description><![CDATA[ 
 <br><a data-href="突变率（Mutation rate）" href="术语\突变率（mutation-rate）.html" class="internal-link" target="_self" rel="noopener nofollow">突变率（Mutation rate）</a>:是指在一个世代中或其他规定的单位时间内，一个细胞发生某一突变的概率。大约在三千万个碱基对中，会有一个发生突变，换而言之，男性在Y染色体上的SNP突变概率大约为三千万分之一，所以基因突变具有低频性。]]></description><link>术语\突变率（mutation-rate）.html</link><guid isPermaLink="false">术语/突变率（Mutation rate）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:18 GMT</pubDate></item><item><title><![CDATA[突厥]]></title><description><![CDATA[ 
 <br>其实认为，<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>也是<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>的后代。<br>
<br>一开始做柔然的小弟，后来柔然衰败，<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>联合中原，要了柔然的命。<br>
<img alt="突厥和北魏" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%AA%81%E5%8E%A5%E5%92%8C%E5%8C%97%E9%AD%8F.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>运气不错，这个时候，北朝分裂为北周，北齐，南朝三国对峙。都拉拢<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a><br>
<img alt="突厥南朝" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%AA%81%E5%8E%A5%E5%8D%97%E6%9C%9D.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
等到杨坚建立了北方政权隋朝，对着<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>一顿锤。后来隋朝灭亡，李世民建立唐朝，又对着<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>一顿。<br>
<img alt="突厥唐朝" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%AA%81%E5%8E%A5%E5%94%90%E6%9C%9D.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
于是至此，<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>分裂为东<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>和西<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>，东<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>进入大唐，西<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>被打跑了。
]]></description><link>术语\突厥.html</link><guid isPermaLink="false">术语/突厥.md</guid><pubDate>Thu, 20 Jun 2024 12:27:20 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%AA%81%E5%8E%A5%E5%92%8C%E5%8C%97%E9%AD%8F.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%AA%81%E5%8E%A5%E5%92%8C%E5%8C%97%E9%AD%8F.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[突厥语系(Turkic)]]></title><description><![CDATA[ 
 <br>Turkic，或汉语中称为“突厥语系”，是世界主要语系之一，使用人口约1.83亿，主要分布在欧亚大陆，东至中国西北，西至东欧，北至西伯利亚，南至伊朗。<br>突厥语系的语言包括：<br>
<br>土耳其语：是土耳其的官方语言，也是世界上使用人数最多的突厥语系语言。
<br>阿塞拜然语：是阿塞拜然和伊朗阿塞拜疆地区的官方语言。
<br>哈萨克语：是哈萨克斯坦的官方语言。
<br>乌兹别克语：是乌兹别克斯坦的官方语言。
<br>维吾尔语：主要分布在中国新疆维吾尔自治区。
<br>塔塔尔语：主要分布在俄罗斯鞑靼斯坦共和国。
<br>吉尔吉斯语：是吉尔吉斯斯坦的官方语言。
<br>土库曼语：是土库曼斯坦的官方语言。
<br>突厥语系的特征：<br>
<br>黏着语：词缀附着在词干上，表示不同的语法意义。
<br>元音和谐：相邻的元音必须遵循一定的规则。
<br>语音丰富：有丰富的辅音和元音。
<br>词汇丰富：有大量词汇，特别是与游牧生活相关的词汇。
<br>突厥语系的起源：<br>突厥语系起源于中亚，大约在公元前500年左右形成。之后，随着突厥民族的迁徙，突厥语系逐渐传播到欧亚大陆。<br>突厥语系的重要性：<br>突厥语系是世界上重要的语系之一，是土耳其、哈萨克斯坦、乌兹别克斯坦等国家和地区的官方语言。突厥语系也是研究中亚历史和文化的重要工具。]]></description><link>术语\突厥语系(turkic).html</link><guid isPermaLink="false">术语/突厥语系(Turkic).md</guid><pubDate>Thu, 20 Jun 2024 12:27:40 GMT</pubDate></item><item><title><![CDATA[速率矩阵]]></title><description><![CDATA[ 
 <br>在分子进化中，替换模型用于描述DNA序列中核苷酸随时间的改变规律。核苷酸（A、C、G、T）之间的替换可以通过一个数学矩阵来量化，这就是速率矩阵，或称为Q矩阵。<br><br>我们通过图形来认识熟悉的各种替换模型<a data-footref="1" href="about:blank#fn-1-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>：<br><br><br><br><br><br><br><br><br><br><br>
<br>矩阵中的行 代表起始的核苷酸：


<br>矩阵中的列  代表替换后的核苷酸：


<br>矩阵  的元素  ​ 表示从核苷酸  替换为核苷酸  的速率。根据  模型，该速率等于目标核苷酸  的平衡频率 ​，即：


<br><br>我们一个个解读：<br>
<br>JC69 (Jukes-Cantor 1969)： 最简单的模型，假设所有核苷酸之间的替换速率是相同的。因此，其Q矩阵的非对角元素都是1（或同一个常数），表明每种替换的可能性相等。
<br>K80 (Kimura 1980)： 这个模型区分了两种类型的替换：转换（A<img class="emoji" draggable="false" alt="↔" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/2194.svg" height="18px" style="max-width: 100%;">G, C<img class="emoji" draggable="false" alt="↔" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/2194.svg" height="18px" style="max-width: 100%;">T）和颠换（其他）。转换的概率用参数κ表示，颠换则设为1。
<br>F81 (Felsenstein 1981)：此模型引入了核苷酸的频率（π_A, π_C, π_G, π_T），每种核苷酸出现的自然概率。核苷酸的替换速率与目标核苷酸的频率成正比。
替换速率通常与目标核苷酸的频率成正比，因为目标核苷酸频率高的情况下，它被替换的机会也相对较高。

<br>F84： 结合了F81和K80的特点，即考虑核苷酸频率和转换/颠换比率。
<br>HKY85 (Hasegawa-Kishino-Yano)： 进一步发展了F81模型的核苷酸频率与K80模型的转换/颠换比率的概念。
<br>T92 (Tamura 1992)：这是Tamura模型的一种形式，根据GC含量（π_GC）考虑了核苷酸的变化概率。核苷酸频率与替换率结合，反映了生物序列中GC含量的影响。
<br>TN93 (Tamura-Nei 1993)：区分了两种类型的转换和一种颠换。即 C 和 T 之间的概率与 G 和 A 之间的概率是不同的。
<br>GTR (General Time Reversible)： 最通用和最灵活的模型，允许所有类型的替换具有不同的概率。a至g为不同替换类型的速率，π为核苷酸频率。
<br>UNREST (Unrestricted)： 允许每种核苷酸对的替换速率完全不同，是最灵活但参数最多的模型。矩阵展示了所有可能的核苷酸替换组合的速率。
GTR 与 UNREST 区别？
GTR模型假设核苷酸替换过程是时间可逆的，即在进化树的任何方向上。但是UNREST模型不假设替换过程是时间可逆的。这意味着从一个核苷酸到另一个核苷酸的替换可以具有不对称的替换率，更贴近某些特定生物进化过程的实际情况。<br>
UNREST模型的参数更多，具有12个独立的替换率参数。但是GTR模型仅具有六个独立的替换率参数。


<br><br><br>
<br>
<br>PAML: Phylogenetic Analysis by Maximum Likelihood<a href="about:blank#fnref-1-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>术语\图解核苷酸替换模型（nucleotide-substitution-models）.html</link><guid isPermaLink="false">术语/图解核苷酸替换模型（Nucleotide substitution models）.md</guid><pubDate>Mon, 23 Sep 2024 07:55:51 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/2194.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/2194.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[吐火罗语(Tocharian language)]]></title><description><![CDATA[ 
 <br>吐火罗文(Tocharian language)：原始印欧语中的一种独立语言。20世纪初在中国新疆发现了这种语言的残卷。后经考释，此语言有东，西两种方言，习称吐火罗(焉耆语、龟兹语)。所使用的字母是中亚婆罗米斜体字母，时间可能在6至8世纪之间。]]></description><link>术语\吐火罗语(tocharian-language).html</link><guid isPermaLink="false">术语/吐火罗语(Tocharian language).md</guid><pubDate>Thu, 20 Jun 2024 12:27:26 GMT</pubDate></item><item><title><![CDATA[微共线性（microsynteny）]]></title><description><![CDATA[ 
 <br>微共线性（microsynteny）是一个基因组学术语，用来描述在不同物种的基因组中相对较小的DNA片段上，基因的排列顺序和方向保持一致的现象。]]></description><link>术语\微共线性（microsynteny）.html</link><guid isPermaLink="false">术语/微共线性（microsynteny）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:10 GMT</pubDate></item><item><title><![CDATA[维吾尔族]]></title><description><![CDATA[ 
 <br>维吾尔族是主要居住在中国新疆维吾尔自治区的一个民族，有着丰富的文化和历史。他们的祖先被认为是古代游牧民族和定居的绿洲农民的后代，历史上曾建立过多个政权，如回鹘。]]></description><link>术语\维吾尔族.html</link><guid isPermaLink="false">术语/维吾尔族.md</guid><pubDate>Thu, 27 Jun 2024 03:26:16 GMT</pubDate></item><item><title><![CDATA[伪异质性(pseudo-heteroplasmy)]]></title><description><![CDATA[ 
 <br><a class="internal-link" data-href="异质性（Heteroplasmy）.md" href="术语\异质性（heteroplasmy）.html" target="_self" rel="noopener nofollow">异质性（Heteroplasmy）</a>是一个个体线粒体内包含不同类型（变异或野生型）的mtDNA。在正常情况下，一个个体的线粒体应该包含相同类型的mtDNA，但在某些情况下，可能会发生突变或变异，导致某些线粒体带有不同的mtDNA。<br>
而由于实验或测序过程中的技术偏差、错误或者特殊情况所导致的。这些技术偏差或错误可能会导致某些线粒体被错误地识别为异质的，这种现象被称为伪异质性。]]></description><link>术语\伪异质性(pseudo-heteroplasmy).html</link><guid isPermaLink="false">术语/伪异质性(pseudo-heteroplasmy).md</guid><pubDate>Thu, 20 Jun 2024 12:22:22 GMT</pubDate></item><item><title><![CDATA[卫藏藏族]]></title><description><![CDATA[ 
 <br>“卫藏”指拉萨、日喀则一带。该地域还包括阿里、山南以及部分林芝及那曲地区。这一地域内的藏族在方言、历史、政治、经济、军事以及文化等方面较统一，是西藏地区传统的核心地域。居住于该地域内的藏族统称为卫藏藏族。]]></description><link>术语\卫藏藏族.html</link><guid isPermaLink="false">术语/卫藏藏族.md</guid><pubDate>Thu, 20 Jun 2024 12:27:01 GMT</pubDate></item><item><title><![CDATA[<strong>1</strong>&nbsp;<strong>统计推断：频率学派和贝叶斯学派</strong>]]></title><description><![CDATA[ 
 <br>在统计学领域，存在着两大主流学派——频率学派和贝叶斯学派。这两个学派采用不同的理论基础和方法论，对未知参数的推断和估计有截然不同的观点。很长时间里，我们从频率论的角度描述统计推断，几乎每本写给本科生的教科书都把频率统计学家的观点作为推断统计理论的核心。事实上，在20世纪的大部分时间里，统计学的频率论观点主导了涉及统计推论的各个学术领域，无论是地理学、生态学还是环境科学，研究者们的大多数做法都是使用频率学派的方法。这是无可厚非的，每个统计学的学生都需要了解这些方法，否则他们将无法理解各种科学论文在讲什么。然而，由于研究问题的复杂性，只依赖频率论的方法进行推断可能会导致误导性的结论，而贝叶斯统计往往更加靠谱。在本系列教程中，我将为你开启统计学世界的第二扇大门——贝叶斯统计。<br><br><br>作为一名了解统计知识的读者，你应该多少学过《概率论与数理统计》。这是一门重要的课程，不仅是中国考研数学的考察内容之一，也是科研工作者必须要掌握的内容，因为概率论与数理统计是统计推断的理论和方法论基础。<br>统计推断是通过样本推断总体的统计方法[1]。总体是通过总体分布的数量特征即参数 (如期望和方差) 来反映的。因此，统计推断包括：&nbsp;对总体的未知参数进行估计；对关于参数的假设进行检查；对总体进行预测预报等。科学的统计推断所使用的样本，通常通过随机抽样方法得到。统计推断的理论和方法论基础，是概率论和数理统计学。<br>显然，概率论≠数理统计，那么，两者的区别是什么呢？也许有很多专著为我们详细介绍了这两部分的知识，但我相信初学者只想知道这是否能用一句话说明。这里，有一张简单的插图解释了两者的区别：<br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_jpg/JCpbp2YJX0ISr415Zibxvm9kyUEZw2zwibRuc2J6MrqNaibOrFmAwQumUceA6MteUUDEkIU7uqaRghsk59icbOET9Q/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer"><br>图1. 概率和统计的区别。<br>一句话而言，统计和概率是方法论上的区别：<br>
<br>演绎推理（deductive reasoning）
<br>归纳推理（inductive reasoning）。<br>
从原因到结果的推论是演绎推理的一个例子，而逆问题，即基于观察到的结果对原因的推论，是归纳推理[2]。从现在的认知来看，演绎和归纳都是统计推断的重要方法。
<br>在哲学上，归纳推理曾受到过极大的质疑，特别是大卫 · 休谟(David Hume) 提出的质疑，他的发现现在通常被称为“休谟的归纳问题”。<br>
举个例子，在一个火鸡饲养场里，有一只火鸡发现，第一天上午9点钟主人给它喂食。然而作为一个卓越的归纳主义者，它并不马上作出结论。它一直等到已收集了有关上午9点给它喂食这一经验事实的大量观察；而且，它是在多种情况下进行这些观察的：雨天和晴天，热天和冷天，星期三和星期四……它每天都在自己的记录表中加进新的观察陈述。最后，它进行归纳推理，得出了下面的结论：“主人总是在上午9点钟给我喂食。”可是，事情并不像它所想像的那样简单和乐观。在感恩节前夕，当主人没有给它喂食，而是把它宰杀的时候，它通过归纳概括而得到的结论终于被无情地推翻了。
<br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_jpg/JCpbp2YJX0ISr415Zibxvm9kyUEZw2zwiblA5d94D03y6jqxQhHPHCQmXUpLW9iaecTBrIsSibDEIb7adF7BsBtoWQ/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer"><br>直至今日，关于统计推断的主张和想法，大体可以纳入到两个体系之内。<br>
<br>其一叫频率学派，其特征是把需要推断的参数θ视作固定且位置的常数，而样本X是随机的，其着眼点在样本空间，有关的概率计算都是针对X的分布。
<br>另一派叫做贝叶斯学派，认为参数θ是随机变量，而样本X是固定的，其着眼点在参数空间，重视参数θ的分布，固定的操作模式是通过参数的先验分布结合样本信息得到参数的后验分布。
<br>在本教程中，我们将避免谈论复杂的数学公式，用通俗的语言来介绍频率学派和贝叶斯学派的差异，以及如何进行贝叶斯数据分析。<br><br>在数据分析时，我们经常使用频率估计概率。举个例子，比如我们想知道某种疾病的生还概率，那么我们可以通过观察100个人，如果发现其中90个都死了，那我们可以简单认为生还概率是0.1。这样的计算结果当然不精准，因为100个人太少了，不具有统计代表性，但如果是1000人、1万人、10万人呢？随着样本容量不断扩大到足够大甚至无穷大时，这个统计结果才有意义。也就是说，频率学派所说的概率表示的是事件发生频率的极限值。当重复试验的次数趋近无穷大时，事件发生的频率会收敛到真实的概率之上[1]。<br>人类的天性是试图降低学习事物的复杂性，使数量离散化，这在现代统计学中尤其如此[3]。频率学派认为，自然界的某些性质会保持不变，这些性质被叫作“参数”的东西记录下来，参数的变量特性是常数，往往是未知而不变的。而这些性质唯一的观测方式就是由带有这个性质的系统产生的变量。<br>例如，人群的身高期望，硬币正面向上的概率等，通过抽一群人测身高，扔一堆硬币，我们可以就可以比较准确的计算人群身高和硬币正面向上概率这两个性质。当我们需要估计任何给定的未知参数时，我们通常会寻找一个最合理的值。大多数实验研究都是使用频率统计来分析的。我们根据样本数据中的频率或比例进行某个参数的估计得出结论，然后将推断到更大的群体中[4]。<br>在这些情况下，我们经常将我们的数据与零假设进行比较——我们的数据是否与这个“无差异”假设兼容？我们得到一个 p 值，它衡量我们的数据与这个假设的（不）兼容性。这些方法严重依赖于点值，例如均值和中位数。这是我们经常做的频率学派语境下的统计推断（图2）。<br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_jpg/JCpbp2YJX0ISr415Zibxvm9kyUEZw2zwibtpKaD93JdWAZzL2vhFwricC1QWRLxrVrgiaibdKMjUB9CNcMKMDNPvvmg/640?wx_fmt=other&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer"><br>图2. 简单的统计推断。<br>这就是频率学派（传统学派）的观点，他们认为样本信息来自总体，通过对样本信息的研究可以合理地推断和估计总体信息，并且随着样本的增加，推断结果会更加准确。频率学派的代表性人物是罗纳德·费希尔（图2）。<br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_jpg/JCpbp2YJX0ISr415Zibxvm9kyUEZw2zwib5cCyayyY3XTWib70ukG2F0VQD9FMqlmibiay7S3hpHib70tnccr0s9hrgg/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer"><br>图3. 罗纳德·费希尔（Ronald Fisher）于1946年由沃尔特·斯通曼（Walter Stoneman）拍摄的照片。<br>频率学派相信概率是一个确定的值，讨论概率的分布没有意义。虽然没有上帝视角，还不知道具体的概率值，但相信概率就是确定的，它就在那里。而数据是由这个确定的概率产生的，因此数据是随机的。<br>频率学派的核心思想是基于大样本理论，将概率看作频率的极限，以样本观测值的频率为基础进行推断。频率学派注重数据的重复抽样和统计量的性质，比如点估计、<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>和假设检验等。它强调的是通过样本信息来推断总体参数，并将此过程视为客观的、可重复的。<br>
<br>点估计、<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>和假设检验  
<br>这里说明一下几个概念[5]：  <br>
<br>点估计:频率学派使用点估计来估计总体参数值。其中最常见的是极大似然估计（maximum likelihood estimation, MLE）。极大似然估计是通过寻找使得观测数据出现的概率最大的参数值来估计未知参数。例如，在投掷一枚硬币的实验中，我们可以通过极大似然估计来估计正面朝上的概率。
<br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_jpg/JCpbp2YJX0ISr415Zibxvm9kyUEZw2zwibPbn9P6oAZL7Dw2gu4gFKUBbmia2zOrfjv2QE2DCJaeUSWvn5PI9w6Qg/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer"><br>图4.&nbsp;具有正态零分布的单尾P值0.03的图示。<br>
<br><a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>：频率学派使用<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>来估计未知参数的范围。<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>是指总体参数的真实值落在这个区间内的概率。<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>给出了对总体参数估计的不确定性程度的度量。比如，在研究某种治疗方法的有效性时，我们可以利用<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>来估计治疗效果的范围。
<br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_jpg/JCpbp2YJX0ISr415Zibxvm9kyUEZw2zwibmovxhUJVOph6Zh1T867a72prtqdW1JOrcpe8q9C1hgDVz2wyiaS8rLg/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer"><br>图5. <a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>的图示。<br>
<br>假设检验：频率学派使用假设检验来判断某个假设是否为真。假设检验涉及到两个假设：

<br>原假设，是指我们希望验证的假设，
<br>备择假设，是我们希望拒绝原假设的假设。例如，在药物研究中，我们可以使用假设检验来判断某款药物是否比安慰剂更有效。


<br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_png/JCpbp2YJX0ISr415Zibxvm9kyUEZw2zwibuQUMBLjSqWwkIhpCfNHiclkxwJVugQuC7IsV6huOhv9kuo37pv4HBIw/640?wx_fmt=png&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer"><br>图6. 假设检验的类型。<br><br>贝叶斯学派认为任何一个未知量都可以看作是随机的，应该用一个概率分布去描述未知参数，而不是频率派认为的固定值。<br>贝叶斯统计起源于英国学者托马斯·贝叶斯（Thomas Bayes, 1702-1761）在死后发表的著名论文《论有关机遇问题的求解》。在这篇论文中，贝叶斯提出了有关二项式分布概率量化的逆概率问题的解决方案。一些人推测这篇论文的动机是回应大卫·休谟的文章，其中休谟质疑归纳推理的有效性。<br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_gif/JCpbp2YJX0ISr415Zibxvm9kyUEZw2zwibTlibBPiauMbBttqMFxiaJWmARZowcCG8J6dz6W9xnX3Oy2khPfuHnTrQA/640?wx_fmt=png&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1" referrerpolicy="no-referrer"><br>图7. 1936年的一本书中使用的据称是贝叶斯的肖像。<br>贝叶斯学派认为待估计值的概率是随机的变量，而用来估计的数据反过来是确定的常数，讨论观测数据的概率分布才是没有意义的。<br>例如，前面我们说想知道某种疾病的生还概率，假如频率学派通过观察估计概率是0.1，但如果我们从贝叶斯学派的角度出发，结合我们之前的常识或认知（比如我们认为大多数人只要讲卫生就能预防这个疾病），那么我们相信这0.1的概率太低了，至少在0.5以上才对。总之，这个我们认为修正过后的概率才是更真实的。<br>在现实世界里，我们碰到的大量问题，根本找不到足够多的样本（毕竟我们连总体的数量是多少都不知道），还有很多新兴事物，压根没有先例，例如，一种新发现的疾病，一个新的市场营销策略，那怎么判断概率呢？贝叶斯学派的观点是，概率是个主观值，我们可以先估计一个初始概率 ，然后每次根据出现的新情况，掌握的新信息，对这个初始概率进行修正，随着信息的增多，我们就会慢慢逼近真实的概率。贝叶斯学派建立了以前已知的信息（先验信息）与当前数据集之间的联系。<br><br>贝叶斯定理是贝叶斯学派的核心，它描述了在已知一些先验信息的情况下，如何根据新的证据来更新对事件发生概率的估计。换句话说，贝叶斯定理提供了一种更新我们对事物认知的方法。通过结合先验概率和新的证据，我们可以获得更准确的后验概率。这个简单而强大的定理在人工智能、机器学习和数据分析等领域中得到广泛应用。<br>我们来看看贝叶斯定理是什么。假设我们有一个事件A和一个与A相关的事件B。贝叶斯定理可以表示为：<br><br>其中，P(A|B) 表示在给定事件B发生的条件下，事件A发生的概率；P(B|A) 表示在事件A发生的条件下，事件B发生的概率；P(A) 和 P(B) 分别表示事件A和事件B的先验概率。<br>以贝叶斯统计的术语来讲[6]：  <br>
<br>A是命题，B是证据；<br>

<br>P(A)&nbsp;表示命题的先验概率；<br>

<br>P(B)表示证据的先验概率；<br>

<br>P(A|B)&nbsp;称为后验（posterior）；<br>

<br>P(B|A)是似然（likelihood）。
<br>我们可以简单的认为：后验∝先验×似然。换句话说，后验信念是数据和先验信念之间的妥协。为了便于理解，我们把贝叶斯定理改成如下公式[7]：<br><br><br>假设你下班回家后，发现家里的“窗玻璃碎了，大门敞开，电脑也不见了”，即观察到的数据。这时，你的直觉反应一定是“家里被盗了！”，也就是你的信念。用贝叶斯公式表示就是：<br><br>鉴于这种与先验信念的妥协，贝叶斯分析经常被攻击为主观的，并且非常强调先验信念的作用。但不要害怕！<br>
<br>首先，随着数据样本的增加，数据成为后验概率的决定因素。
<br>此外，如果需要，我们可以很容易地指定对后验估计没有影响的先验。其实，贝叶斯推理非常类似人脑在思考问题时所采用的方法：我们原来对某个事情有一种看法，新信息出现后如果和自己原来的看法一致就强化原来的看法，否则就弱化。
<br>近年来,随着计算机技术的进步贝叶斯分析大放异彩，机器学习、人工智能、图像识别等的背后无不采用了贝叶斯公式。
<br><br>这里我们介绍一个经典的例子[8]。假如，我们想仅根据日出时是否有云来预测给定一天下雨的概率。在这个例子中，我们的假设是会下雨，我们的数据是日出时有云。因此，我们回答了这个问题：P(rain | clouds at sunrise)。<br>不幸的是，我们只知道：<br>
<br>所有日子的 25% 都在下雨，或者 ，P(rain) = 25%；<br>

<br>日出时只有15%的日子是多云的，或者，P(clouds at sunrise) = 15%；<br>

<br>根据我们的数据，我们发现在50%的下雨天，日出时有云，或者P(clouds at sunrise | rain) = 50%。<br>

<br>这是贝叶斯定理的经典应用，因为我们有一个关于条件概率所描述信息的数据集！将此问题带入贝叶斯定理的公式：<br><br>通过求解，我们可以得到：P(rain | clouds at sunrise) = 83.33%。<br>这是一个非常有用的结果——如果我们根本没有任何信息，我们只知道下雨的可能性为 25%。然而，通过在日出时观察云，我们知道现在有超过 80%的可能性会下雨！<br><br>我们再来说另一个经典的例子。艾滋病毒（HIV）检测技术的准确度相当惊人。如果一个人真是HIV阳性，血液检测的手段有99.9%的把握把他这个阳性给检查出来而不漏网。如果一个人不携带HIV，那么检测手段的精度更高，达到99.99%——也就是说只有0.01%的可能性会冤枉他。<br>已知一般人群中HIV携带者的比例是0.01%。现在假设我们随便在街头找一个人给他做检查，发现检测结果是HIV阳性，那么请问，这个人真的携带HIV的可能性是多大呢？<br>我们使用贝叶斯定理。A表示“这个人真的携带HIV”，B表示“检测出HIV”，那么根据现有条件，P(A) = 0.01%，P(B|A) = 99.9%，P(B|A) = 0.01%<br><br>带入公式，计算得到P(A|B) = 0.01%  99.9%  (99.9%×0.01% + 0.01%×99.99%) = 50%！<br>答案或许和你的直觉不一致，即使在这么惊人的检测准确度之下，哪怕这个人真的被检测到HIV阳性，他真有HIV的可能性也只有50%。<br>我们看到，如果是一种非常罕见的病毒，人群中只有万分之一的人感染，在这种情况下即使你的检测手段再高，也很有可能会冤枉人。<br>甚至，如误诊率不是0.01%，而是0.1%的话，也就是检测手段再差一档，这个结果就会瞬间从50%降到9%。但是，我们也可以反过来想 ，这么罕见的疾病，一旦被检测出来了，也有50%的概率真的会得，这个跃迁是从万分之一，一下子到了50%。而如果我们假设这个病毒的感染率不是万分之一，而是千分之一，那么在原来的检测精度下，可能性就从50%升到了90%。<br>这其实可以解释为什么我们说一叶知秋，为什么说当你家发现了一只蟑螂，那么你家里一定已经有很多蟑螂了。<br><br>以下内容来自《R速成：统计分析和科研数据分析快速上手》[9]。  <br>贝叶斯分析有许多优点。因为它是基于概率理论的，所以它为统计推断提供了一个全面而连贯的框架，这意味着用户可以使用这个框架为数据集建立定制模型，而不局限于标准的、现成的模型。例如，我们可以很容易地应用于具有不同概率分布的数据，这样就不会局限于服从正态分布的数据，或者找到适当的变换来使数据近似服从正态分布。  <br>贝叶斯方法的另一个重要优势是，它允许我们量化支持原假设的证据，例如，使用贝叶斯因子（Bayes Factors，BF）。这在频率论的方法中是不可能的，我们唯一能希望的就是拒绝原假设。然而，许多科学研究中，越来越多的证据支持这在效应的缺失，例如，假设我们想证明性别对某人的认知能力没有影响，这个事实可能看起来很明显，但却经常受到质疑，通过贝叶斯统计，我们可以收集数据，直到积累了足够的证据来接受原假设或者备择假设。  <br>考虑从经典统计学转换到贝叶斯统计学的另一个重要原因是，许多用于频率论的工具具有严重的缺陷，包括P值和<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>。<br>这些缺点既是理论上的，也是应用上的。例如，已经证明即使是数据分析专家也经常会错误地解释P值。事实上，对P值的误解是一个非常普遍的现象。类似的论点适用于<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>。即使是在应用统计学的教科书中，也经常读到95%的<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>是包含95%概率的真实总体值的区间。这种解释虽然看起来符合逻辑，但却是错误的。正确的定义是，当完全相同的研究被重复多次时，有95%的<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>是包含真实值的，这似乎是反直觉的，以至于它经常被误解。相比之下，与<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>等价的贝叶斯区间（即可信区间），有一个简单而直观的解释就是概率。  <br><br>Marney Pratt等[10]的最近一篇追踪生态学论文趋势的论文显示，贝叶斯统计的使用随着时间的推移而增加。<br>回归是一个包含许多统计方法的统称，自1950年代以来，回归的使用持续快速增长，到2005 年接近相关性。方差分析（ANOVA）和t检验的引用都在2000年左右达到顶峰，而广义线性模型（GLM）的提及频率稳步增加，超过了2004年的t检验。就此类模型的拟合方式而言，最小二乘法（以前占主导地位的范式）在2000 年左右迅速被贝叶斯、最大似然法和信息论 （AIC）项所超越；截至 2010 年，术语贝叶斯的使用频率是最大似然值的两倍以上。结合现代计算能力，马尔可夫链蒙特卡洛抽样方法（MCMC）对应用贝叶斯数据分析的繁荣负有很大贡献。<br><img alt="图片" src="https://mmbiz.qpic.cn/mmbiz_jpg/JCpbp2YJX0ISr415Zibxvm9kyUEZw2zwib2pu2Lkd9KhyhgV3ia3doeJqNTzHicQwFwmcu3e5xPSqeFicmzxkKR34JQ/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" referrerpolicy="no-referrer"><br>图8. 1930 年至 2010 年的数据分析、统计方法和遗传学的词频统计。<br>因此，或许你不必成为贝叶斯主义者，但你可能需要熟悉一些贝叶斯主义者的计算工具，以简化你的前进道路。对于任何给定的研究问题，随着我们对生态学的了解越来越多并收集更多数据，我们将希望在模型中解释更多的东西。这通常会使模型更加复杂，因此可能更难拟合；我们可能需要切换工具才能应对这些新的复杂性。<br><br>通常情况下，贝叶斯数据分析包括以下4个步骤：<br>
<br>为数据设计（或）选择一个模型；<br>

<br>为模型的所有参数指定一个先验的分布；<br>

<br>基于模型和数据集设计模型参数的后验概率；<br>

<br>总结和可视化后验分布。<br>

<br>可以说，第一步是最重要的一步。在经典统计中的标准模型（如普通回归和逻辑回归），都可以用于贝叶斯分析中。然后，我们再按上述步骤进行。一旦指定了模型并选择了先验，就可以用贝叶斯定理计算后验了。这是数学上最困难的一步，其复杂性取决于模型结构。然而，近年来基于随机抽样的复杂近似算法的发展，包括前面提到的MCMC和哈密尔顿蒙特卡洛（Hamiltonian Monte Carlo, HMC）方法，可以使这一步骤几乎完全自动化。最后，一旦计算出参数的后验分布，我们必须对其进行检查、总结和可视化，以便能够对假设做出结论。后验分布是所有模型参数联合空间上的一个函数，给出每个参数值组合的概率。现代工具以模拟后验样本的形式返回这种分布，即从后验分布中抽取大量样本，然后，这些样本被用来近似后验分布。  <br><br>[1]&nbsp;统计推断，频率派和贝叶斯学派 - 简书 (<a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/2c1a07c5cb42" target="_blank">https://www.jianshu.com/p/2c1a07c5cb42</a>)<br>[2] Qian, S.S., DuFour, M.R., &amp; Alameddine, I. (2022). Bayesian Applications in Environmental and Ecological Studies with R and Stan (1st ed.). Chapman and Hall/CRC. <a rel="noopener nofollow" class="external-link" href="https://doi.org/10.1201/9781351018784" target="_blank">https://doi.org/10.1201/9781351018784</a><br>详解贝叶斯学派与频率学派的区别和联系-CSDN博客 (<a rel="noopener nofollow" class="external-link" href="https://blog.csdn.net/yuxiaosmd/article/details/117608303" target="_blank">https://blog.csdn.net/yuxiaosmd/article/details/117608303</a>)<br>[3]&nbsp;Bayesian models in R | R-bloggers （<a data-tooltip-position="top" aria-label="https://www.r-bloggers.com/2019/05/bayesian-models-in-r-2/%EF%BC%89" rel="noopener nofollow" class="external-link" href="https://www.r-bloggers.com/2019/05/bayesian-models-in-r-2/%EF%BC%89" target="_blank">https://www.r-bloggers.com/2019/05/bayesian-models-in-r-2/）</a><br>[4]&nbsp;Marissa Barlaz, PhD&nbsp;(<a rel="noopener nofollow" class="external-link" href="https://marissabarlaz.github.io/portfolio/bayesian/#what-is-bayesian-analysis" target="_blank">https://marissabarlaz.github.io/portfolio/bayesian/#what-is-bayesian-analysis</a>)<br>[5]&nbsp;频率学派与贝叶斯学派：统计学领域的两大学派 (<a rel="noopener nofollow" class="external-link" href="https://baijiahao.baidu.com/s?id=1779292867410400878&amp;wfr=spider&amp;for=pc" target="_blank">https://baijiahao.baidu.com/s?id=1779292867410400878&amp;wfr=spider&amp;for=pc</a>)<br>[6]&nbsp;A Step By Step Guide To Implement Naive Bayes In R | by Sahiti Kappagantula | Edureka | Medium (<a rel="noopener nofollow" class="external-link" href="https://medium.com/edureka/naive-bayes-in-r-37ca73f3e85c" target="_blank">https://medium.com/edureka/naive-bayes-in-r-37ca73f3e85c</a>)<br>[7]&nbsp;用数据更新信念——如何用贝叶斯思维理解世界 - 知乎 (<a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/576850846" target="_blank">https://zhuanlan.zhihu.com/p/576850846</a>)<br>[8] Bayes' Theorem - Data Science Discovery (<a rel="noopener nofollow" class="external-link" href="https://discovery.cs.illinois.edu/learn/Prediction-and-Probability/Bayes-Theorem/" target="_blank">https://discovery.cs.illinois.edu/learn/Prediction-and-Probability/Bayes-Theorem/</a>)<br>[9] (美)迈赫迈特·迈赫梅托格鲁,(美)马蒂亚斯·米特纳.R速成 统计分析和科研数据分析快速上手 编程语言[M].电子工业出版社,2023.<br>[10]&nbsp;Anderson S C , Elsen P R , Hughes B B ,et al.Trends in ecology and conservation over eight decades[J].Frontiers in Ecology and the Environment, 2021.DOI:10.1002/fee.2320.]]></description><link>术语\为什么要学习贝叶斯统计？.html</link><guid isPermaLink="false">术语/为什么要学习贝叶斯统计？.md</guid><pubDate>Thu, 20 Jun 2024 12:24:26 GMT</pubDate><enclosure url="https://mmbiz.qpic.cn/mmbiz_jpg/JCpbp2YJX0ISr415Zibxvm9kyUEZw2zwibRuc2J6MrqNaibOrFmAwQumUceA6MteUUDEkIU7uqaRghsk59icbOET9Q/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://mmbiz.qpic.cn/mmbiz_jpg/JCpbp2YJX0ISr415Zibxvm9kyUEZw2zwibRuc2J6MrqNaibOrFmAwQumUceA6MteUUDEkIU7uqaRghsk59icbOET9Q/640?wx_fmt=jpeg&amp;from=appmsg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[文化搭便车（cultural hitchhiking）]]></title><description><![CDATA[ 
 <br>一个例子是：因为父系群体间的文化竞争导致 Y 染色体多样性的减少，因为 Y 染色体只能通过男性传递给后代。如果一个父系群体的男性成员大量死亡，那么该群体的特定 Y 染色体类型可能会从基因库中消失。它可能导致基因瓶颈，即在一定时间内，由于社会文化过程，种群的遗传多样性显著降低。<br>
这种现象被称为“文化搭便车”（cultural hitchhiking），它可能导致基因瓶颈，即在一定时间内，由于社会文化过程，种群的遗传多样性显著降低。]]></description><link>术语\文化搭便车（cultural-hitchhiking）.html</link><guid isPermaLink="false">术语/文化搭便车（cultural hitchhiking）.md</guid><pubDate>Tue, 09 Jul 2024 10:13:26 GMT</pubDate></item><item><title><![CDATA[文化扩散(cultural diffusion)]]></title><description><![CDATA[ 
 <br>文化扩散则是指文化元素（如语言、宗教、技术、艺术和社会习俗等）在不同人群或社会之间的传播。这种扩散不必伴随着人群的物理移动，而是通过交流、贸易、战争、媒体传播等方式实现。文化扩散可以导致一种文化的特征被其他文化群体吸收和适应，从而在没有直接人口迁移的情况下，文化特征在广泛区域内传播。<br>区别于<a data-href="人口扩散(demic diffusion)" href="术语\人口扩散(demic-diffusion).html" class="internal-link" target="_self" rel="noopener nofollow">人口扩散(demic diffusion)</a>]]></description><link>术语\文化扩散(cultural-diffusion).html</link><guid isPermaLink="false">术语/文化扩散(cultural diffusion).md</guid><pubDate>Sun, 14 Jul 2024 14:43:07 GMT</pubDate></item><item><title><![CDATA[乌斯季伊希姆区（Ust’-Ishim）]]></title><description><![CDATA[ 
 <br>是俄罗斯的一个区，位于该国西南部，由鄂木斯克州负责管辖，面积7,900平方公里，2010年人口13,480，人口密度每平方公里1.71人。<img alt="Pasted image 20230807103146" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230807103146.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\乌斯季伊希姆区（ust’-ishim）.html</link><guid isPermaLink="false">术语/乌斯季伊希姆区（Ust’-Ishim）.md</guid><pubDate>Thu, 20 Jun 2024 12:19:04 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230807103146.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230807103146.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[乌孜别克族]]></title><description><![CDATA[ 
 <br>乌孜别克族主要分布在中亚的乌兹别克斯坦，也有一部分人在新疆。他们的历史可以追溯到14世纪的帖木儿帝国，乌孜别克人以农业和商贸闻名。]]></description><link>术语\乌孜别克族.html</link><guid isPermaLink="false">术语/乌孜别克族.md</guid><pubDate>Thu, 27 Jun 2024 03:26:35 GMT</pubDate></item><item><title><![CDATA[无嘌呤或无嘧啶核酸内切酶1（Apurinic ,Apyrimidinic Endonuclease 1,APEX1)]]></title><description><![CDATA[ 
 <br>是一种核内酶，它在DNA修复中扮演关键角色。APEX1专门负责修复DNA链上的损伤，如去氧核糖核酸（DNA）中的缺失碱基或损坏的碱基。它是细胞内的一种重要DNA修复酶，有助于维护基因组的完整性。]]></description><link>术语\无嘌呤或无嘧啶核酸内切酶1（apurinic-,apyrimidinic-endonuclease-1,apex1).html</link><guid isPermaLink="false">术语/无嘌呤或无嘧啶核酸内切酶1（Apurinic ,Apyrimidinic Endonuclease 1,APEX1).md</guid><pubDate>Thu, 20 Jun 2024 12:21:17 GMT</pubDate></item><item><title><![CDATA[物种分歧时间、分子进化速率计算（TimeTree、PAML mcmctree、codeml 、MEGA )]]></title><description><![CDATA[ 
 <br>进化速率（Evolutionary rate）指分子的进化速率（蛋白质或核酸等大分子中的氨基酸或核苷酸在一定时间内的替换率），也可指某一类群的物种分化速率，甚至可指特定性状的进化速率。因此，笼统地说，进化速率指在进化过程中，单位时间内发生的改变。分子钟的研究与分子进化速率相关。<br><br><a class="internal-link" data-href="分子钟定年方法(molecular dating approach).md" href="术语\分子钟定年方法(molecular-dating-approach).html" target="_self" rel="noopener nofollow">分子钟定年方法(molecular dating approach)</a>的概念源于对蛋白质的研究。Zuckerkandl and Pauling (1962)比较几种动物的血红蛋白、细胞色素C的序列后注意到：这些蛋白质的氨基酸取代速率在不同的种系间大致相同，即分子水平的进化存在恒速现象。Zuckerkandl and Pauling (1965)提出将1962年提出的概念命名为分子钟，分子水平进化存在一个“时钟“， 也即进化速率是近似恒定的。因此，分子钟假设的成立条件是对于给定的任意大分子（DNA序列或者蛋白质序列）在所有进化谱系中有近似恒定的进化速率，如在一个进化分支上所聚集的突变数与该分支的独立进化时间长度成正比，其替代速率在进化过程中近似保持一个恒定的数值。<br><br>分子钟假说成立的条件DNA或者蛋白质序列的替代速率是恒定的。20世纪80年代以来，随着DNA序列数据快速积累，大量的证据表明：在长期进化过程中，很多类群的绝大多数基因或蛋白质的序列替换速率根本不符合分子钟假说。对于蛋白质序列，在物种适应辐射过程中，其进化速度可能会大大加快。因此，以蛋白质为基础的恒定进化速率并非理想的分子钟；对于核酸分子，不同基因的分子钟速率不同；并且同一基因在不同的生物类群间可能有显著差异，因此同一基因的分子异速进化现象是显而易见的。目前分子钟面临的一些挑战也主要与分子异速进化相关，由于分子异速进化的存在，特别是同一级基因在不同生物类群的进化速率可能有显著的差异，这给应用同一分子钟来重建物种系统发育关系及估算物种分歧年代带来了困难，这是分子钟在应用上面临的有一个挑战。<br><br>分子进化是生物分子层次上的进化，分子系统学是从生物大分子（蛋白质、核算）的信息推断生物进化历史，或者说重建系统发育关系，并以系统树的形式表示出来。系统发生树的枝长仅代表每位点的碱基替代数或者遗传距离。基于生物遗传距离所建立的分子进化速率，使得分子钟方法在分子系统学中的应用使得利用片段估算物种的起源和分化时间成为可能，并可用于进一步推测不同生物类群在进化历史上的分歧时间。在速率恒定的假设下，遗传距离是时间的线性函数，为了将遗传距离转化为分歧时间，至少需要一个能够提供时间信息的标定点（calibration point）。常用的校准信息可以分为：<br>
(1)已知的碱基替代速率；<br>
(2)化石校准点；<br>
(3)生物地理事件校准点；<br>
(4)二次校准点]]></description><link>术语\物种分歧时间、分子进化速率计算（timetree、paml-mcmctree、codeml-、mega-).html</link><guid isPermaLink="false">术语/物种分歧时间、分子进化速率计算（TimeTree、PAML mcmctree、codeml 、MEGA ).md</guid><pubDate>Thu, 20 Jun 2024 12:24:55 GMT</pubDate></item><item><title><![CDATA[西辽地区]]></title><description><![CDATA[ 
 <br>西辽地区位于现在的新疆西部和中亚一带。其直辖领土以都城虎思斡耳朵为中心，北至伊犁河，南至锡尔河上游，东至伊塞克湖东南的巴尔思罕，西至塔刺思。西辽的统治区域包括了现今的新疆北部及中亚的部分地区。在突厥语和西方史籍中，它也被称之为哈剌契丹（Qara-Khitay）或喀喇契丹。]]></description><link>术语\西辽地区.html</link><guid isPermaLink="false">术语/西辽地区.md</guid><pubDate>Thu, 20 Jun 2024 12:19:36 GMT</pubDate></item><item><title><![CDATA[系统发育率（phylogenetic rate）]]></title><description><![CDATA[ 
 <br><a data-href="替换积累速率（substitutions accumulate）" href="术语\替换积累速率（substitutions-accumulate）.html" class="internal-link" target="_self" rel="noopener nofollow">替换积累速率（substitutions accumulate）</a>的另外一种说法。<br><a data-href="系统发育树" href="术语\系统发育树.html" class="internal-link" target="_self" rel="noopener nofollow">系统发育树</a>是用来直观表现系统发育率的形式。<br><a data-href="贝叶斯系统发育模型" href="术语\贝叶斯系统发育模型.html" class="internal-link" target="_self" rel="noopener nofollow">贝叶斯系统发育模型</a>如下图所示。]]></description><link>术语\系统发育率（phylogenetic-rate）.html</link><guid isPermaLink="false">术语/系统发育率（phylogenetic rate）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:23 GMT</pubDate></item><item><title><![CDATA[概念]]></title><description><![CDATA[ 
 <br><br>系统发育树（也称为系统发育树或进化树）是一种分支图或树，根据它们的物理或遗传特征的异同说明各种生物物种或其他实体之间的进化关系。 地球上的所有生命都属于一个单一的系统发育树，表明有一个共同的祖先。<br>在有根的系统发育树中，每个具有后代的节点代表这些后代的推断最近的共同祖先，并且在某些树中，边长可以解释为时间估计。 每个节点都称为分类单元。 内部节点通常被称为假设的分类单元，因为它们无法直接观察到。 生物信息学、系统学和系统发育学等生物医学学科发现树木很有价值。 从低级生命形式到高级生命形式（例如存在大链）的阶梯状进展的古老概念产生了生命之树的概念。 早期对“分支”系统发育树的描述包括爱德华希区柯克（1800 年代）著作《基础地质学》中描述植物和动物之间地质关系的“古生物学图表”。查尔斯·达尔文 (Charles Darwin) 在 1859 年出版的《物种起源》(On the Origin of Species) 一书中用图表描绘了一棵进化“树”。 一个多世纪后，进化生物学家继续使用树状图来说明进化，因为它们有效地传达了物种形成是通过谱系的适应性和半随机分裂发生的概念。术语系统发育或系统发育源自古希腊语单词 v (phûlon)，意思是“种族”或“血统”，以及 (génesis)，意思是“起源”或“来源”。<br><br><img alt="Part-of-a-phylogenetic-tree-Li-and-Goldman-1998" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Part-of-a-phylogenetic-tree-Li-and-Goldman-1998.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>分支：系统发育树的分支代表进化谱系或血统。 它们连接节点或发散站点。
<br>Nodes：节点代表从它分化出来的物种或群体的共同祖先。 当节点表示不可观察的共同祖先时，它们可以称为内部节点或内部分支。
<br>树叶：&nbsp;系统发育树的尖端或叶子代表现存或活着的物种或群体。 终端类群是位于分支末端的类群。
<br>Root（根）：系统发育树的根代表所有包括的物种或群体的最近的共同祖先。 通常，它被描绘在树的底部。
<br>分支长度：&nbsp;在系统发育树中，分支长度表示沿特定分支发生的进化时，遗传物质的变化的数量。 就时间（例如，数百万年）或遗传变异（例如，DNA 替换）而言，持续时间可以量化。
<br><br>
<br>系统发育距离：&nbsp;两个物种或群体之间的系统发育距离量化了它们的相关程度。 通常，它是使用遗传或形态差异来估计的。
<br>类群：分类群是构成系统发育树的生物体或物种的类别。 单个物种到更高的分类水平，例如属、科、目，甚至更大的群体。
<br>分支：氏族是系统发育树中的单系实体，由祖先及其所有后代组成。 它们具有源自共同祖先的独特特征。
<br><br><br><img alt="Figure_20_01_01-768x231" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Figure_20_01_01-768x231.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
有根和无根树 | 这两种系统发育树都显示了生命的三个领域（细菌、古细菌和真核生物）之间的关系，但 (a) 有根树试图确定各种物种何时从一个共同祖先中分化出来，而 (b) 无根树则没有。 <br><br>
<br>有根的系统发育树说明了具有共同祖先的类群之间的进化关系。
<br>根代表树中所有分类群共享的最近的祖先。 它通常位于树的底部，并作为解释分类单元之间的分支模式和进化关系的参考点。
<br>有根树揭示了进化的方向性和分歧事件的相对时间线。
<br><img alt="rooted-phylogenetic-tree" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/rooted-phylogenetic-tree.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>
<br>无根系统发育树描述了缺乏指定共同根的分类群之间的进化关系。
<br>无根树不是单一的根，而是将分类关系描述为一系列连接的分支和节点。 无根树无法提供有关进化方向或分歧事件的相对时间线的信息，因为它们缺少根。
<br>无根树主要用于可视化类群之间的关系，但它们也可用于推断进化模式并识别密切相关的类群或群。
<br><img alt="un-rooted-phylogenetic-tree-1" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/un-rooted-phylogenetic-tree-1.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
无根树<br><br><br><img alt="cladogram869610009617971312" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/cladogram869610009617971312.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>分支图是系统发育树的一种形式，它说明了类群之间进化关系的分支模式。 它表示分歧的顺序，而不是时间的数量或已经发生的进化变化。 分支图由在节点处划分的分支组成，代表共同的祖先，并且它们的长度通常相等。<br><br>系统发育图是系统发育树的一种形式，它使用分支长度来表示进化变化的程度。 指示节点之间的相对时间量或进化距离，分支长度可以与遗传或形态差异成正比。 系统图增加了我们对进化变化幅度的理解。<br><img alt="Example-phylogenetic-tree" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Example-phylogenetic-tree.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>时间图，也称为时间树，是一种按比例缩放的系统发育树，描述了物种或群体之间分歧的估计时间。在年表中，分支长度与自发散以来的估计时间成正比，这通常来自化石记录或分子钟分析。计时图提供了一个时间视角，使进化事件时间的可视化成为可能。<br>
<img alt="Comparison-of-a-chronogram-and-a-phylogram-In-a-chronogram-branch-lengths-are-768x357" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Comparison-of-a-chronogram-and-a-phylogram-In-a-chronogram-branch-lengths-are-768x357.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>扇树是系统发育树的一种形式，它通过利用从单个节点发出的多个分支来说明类群之间的关系。 它经常用于表示快速辐射或进化事件，其中多个谱系在短时间内从一个共同祖先出现。 扇树说明了谱系的分歧，但没有指定它们的顺序。<br>
<img alt="fan" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/fan.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="Pasted image 20230808090428" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230808090428.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\系统发育树.html</link><guid isPermaLink="false">术语/系统发育树.md</guid><pubDate>Wed, 11 Sep 2024 09:38:58 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Part-of-a-phylogenetic-tree-Li-and-Goldman-1998.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Part-of-a-phylogenetic-tree-Li-and-Goldman-1998.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[细胞竞争的机制]]></title><description><![CDATA[ 
 <br>细胞竞争（cell competition）是一种生物学过程，通过这一过程，细胞群体中的“健康”或“强壮”细胞可以识别并淘汰“较弱”或“有缺陷”的细胞，从而确保整体组织的健康和功能正常。这一机制在胚胎发育、器官形成以及维持组织稳态中发挥重要作用。<br><br>
<br>
细胞识别与信号传导：

<br>细胞竞争通常涉及细胞之间的直接相互作用，健康细胞通过特定的信号传导途径识别并诱导不健康细胞的凋亡或淘汰。
<br>一些关键的信号通路，例如Hippo信号通路和Myc信号通路，被认为在细胞竞争中发挥了重要作用。


<br>
营养竞争：

<br>健康细胞可能通过占用更多的营养和生长因子，限制有缺陷细胞的生长和生存。


<br>
细胞死亡：

<br>通过细胞凋亡（programmed cell death）途径，有缺陷细胞被清除，确保剩余细胞的正常功能。


]]></description><link>术语\细胞竞争（cell-competition）.html</link><guid isPermaLink="false">术语/细胞竞争（cell competition）.md</guid><pubDate>Fri, 02 Aug 2024 01:42:46 GMT</pubDate></item><item><title><![CDATA[细胞外囊泡（Extracellular Vesicle (EV)）]]></title><description><![CDATA[ 
 <br>细胞外囊泡（Extracellular Vesicles，EVs）是细胞释放到外部环境中的一类小囊泡，它们存在于几乎所有生物体液中，包括血液、尿液、脑脊液等。EVs是细胞间通讯的重要工具，能够携带并传递蛋白质、脂质、RNA和DNA等多种生物分子，从而在多种生理和病理过程中发挥作用。<br><br>EVs可以根据它们的大小、生成机制以及释放路径被分类为以下几种主要类型：<br>
<br>
外泌体（Exosomes）：

<br>大小：约30-150纳米（nm）。
<br>来源：由细胞内的内体（endosomes）产生，内体内的多囊体（multivesicular bodies, MVBs）与细胞膜融合时释放出来。
<br>特点：通常富含内源性膜蛋白如TSG101和Alix。


<br>
微粒（Microvesicles，也称为片段体）：

<br>大小：约100-1000纳米。
<br>来源：直接从细胞膜突出并分裂形成。
<br>特点：成分反映了原始细胞的细胞膜和细胞质内容。


<br>
凋亡小体（Apoptotic bodies）：

<br>大小：约50-5000纳米。
<br>来源：在细胞凋亡过程中，细胞的碎片被包装成凋亡小体。
<br>特点：可以包含细胞核碎片、细胞器以及其他细胞成分。


<br><br>EVs在多种生理功能和病理过程中扮演重要角色：<br>
<br>
细胞间通讯：

<br>EVs可以在细胞间传递信号分子，如蛋白质、脂质和RNA分子，从而调控接收细胞的行为和功能。


<br>
免疫调节：

<br>EVs参与调控免疫系统，例如通过携带免疫抑制或激活分子来影响免疫细胞的活性。


<br>
疾病进展：

<br>在癌症中，肿瘤细胞释放的EVs可以促进肿瘤生长、转移以及与周围环境的交互。
<br>在神经退行性疾病中，EVs可能参与病理蛋白的传播。


<br>
组织修复和再生：

<br>EVs可以携带生长因子和其他修复分子，促进组织修复和再生。


<br>
生物标志物的来源：

<br>由于EVs在疾病状态下的组成与正常状态不同，它们可以作为诊断不同疾病的生物标志物。


<br>细胞外囊泡的研究提供了深入理解细胞通讯机制和发展新型治疗策略的可能性，例如通过工程化EVs来传递药物或治疗分子。]]></description><link>术语\细胞外囊泡（extracellular-vesicle-(ev)）.html</link><guid isPermaLink="false">术语/细胞外囊泡（Extracellular Vesicle (EV)）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:01 GMT</pubDate></item><item><title><![CDATA[细石器（microliths）]]></title><description><![CDATA[ 
 <br>[noun] A small stone tool.<br>
The microscopic acicular components of rocks.]]></description><link>术语\细石器（microliths）.html</link><guid isPermaLink="false">术语/细石器（microliths）.md</guid><pubDate>Sun, 14 Jul 2024 13:10:49 GMT</pubDate></item><item><title><![CDATA[下田原文化（Shimotabaru Culture）]]></title><description><![CDATA[ 
 <br>Shimotabaru Culture（下田原文化）是指日本冲绳地区琉球列岛南部地区的一种考古文化。它是冲绳群岛上的古代居民在特定历史时期的生活和文化表现。<br>Shimotabaru Culture 的时间跨度大约从公元前9世纪到公元13世纪，对应了琉球列岛上的早期历史时期。这个文化阶段的人们主要从事农业、渔业、手工艺和贸易活动。他们制作陶器、石器和骨器，以及从邻近地区进行贸易。Shimotabaru Culture 的考古遗址表明，这个时期的居民有着独特的社会结构、生活方式和文化传统。<br>该文化得名于冲绳群岛中的一个考古遗址，位于日本冲绳县南城市的下田原地区。研究人员通过对这个遗址和其他相关遗址的发掘和研究，逐渐了解了 Shimotabaru Culture 的特征和历史背景。这个文化阶段在琉球列岛历史和考古学研究中具有重要意义，有助于揭示当地人类社会在古代时期的发展和变化。]]></description><link>术语\下田原文化（shimotabaru-culture）.html</link><guid isPermaLink="false">术语/下田原文化（Shimotabaru Culture）.md</guid><pubDate>Thu, 20 Jun 2024 12:26:21 GMT</pubDate></item><item><title><![CDATA[下一代测序（next-generation sequencing，NGS）]]></title><description><![CDATA[ 
 <br>高通量测序，是一种先进的DNA或RNA测序技术。它是第二代测序技术的统称，相对于传统的Sanger测序，NGS技术具有更高的产能和更快的测序速度。<br>NGS技术使用并行化的方法，同时对数百万个DNA或RNA片段进行测序。这种高通量的测序方式使得大规模的基因组和转录组测序成为可能，从而显著降低了测序成本和时间。<br>NGS技术的应用非常广泛，包括但不限于以下领域：<br>基因组学：对个体或物种的基因组进行测序，研究基因组结构和功能。<br>
转录组学：测定细胞中转录的RNA序列，了解基因表达和转录变异。<br>
表观遗传学：研究DNA上的表观修饰，如DNA甲基化。<br>
人类遗传学：研究人类遗传变异与遗传疾病的关联。<br>
癌症研究：探索肿瘤的遗传变异和个性化治疗。<br>NGS技术的发展在生物学和医学研究领域带来了革命性的变革，加速了对生物信息学的理解，为个性化医疗和精准治疗提供了强有力的支持。<br>下面列举几个Next-Generation Sequencing (NGS)的具体方法：<br>
<br><a data-href="Illumina测序" href="术语\illumina测序.html" class="internal-link" target="_self" rel="noopener nofollow">Illumina测序</a>：Illumina是最常用的NGS技术之一。它基于桥式扩增技术，通过将DNA或RNA片段固定在测序流程芯片上，使用碱基逐渐加入的方法进行测序，产生短序列读段。
<br>Ion Torrent测序：Ion Torrent是一种半导体测序技术，通过检测测序过程中释放的氢离子来测定DNA或RNA序列，它不需要光学信号，因此更快速且成本较低。
<br>PacBio测序：PacBio采用单分子实时测序（Single-Molecule Real-Time Sequencing，SMRT）技术，能够直接测序长片段DNA或RNA，具有很高的读长，适用于结构变异和基因组组装。
<br>Nanopore测序：Nanopore测序使用纳米孔技术，通过将DNA或RNA片段传递过纳米孔，并测量通过孔的离子流变化来识别碱基序列。
<br>这些方法各有特点，适用于不同类型的实验设计和科学问题。在NGS技术的持续发展下，越来越多的新方法和技术不断涌现，为生物学和医学研究提供了更多的选择和可能性。]]></description><link>术语\下一代测序（next-generation-sequencing，ngs）.html</link><guid isPermaLink="false">术语/下一代测序（next-generation sequencing，NGS）.md</guid><pubDate>Thu, 20 Jun 2024 12:25:25 GMT</pubDate></item><item><title><![CDATA[夏尔巴人]]></title><description><![CDATA[ 
 <br>夏尔巴人，藏语意为“来自东方的人”，主要散居在中国、尼泊尔、印度和不丹等国边境外的喜马拉雅山脉两侧。<a data-href="夏尔巴人" href="术语\夏尔巴人.html" class="internal-link" target="_self" rel="noopener nofollow">夏尔巴人</a>应该是<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>人的一个比较晚的分支，距今大概1500年，当时正好是吐蕃诞生的前夕，高原上征讨严重。]]></description><link>术语\夏尔巴人.html</link><guid isPermaLink="false">术语/夏尔巴人.md</guid><pubDate>Thu, 20 Jun 2024 12:27:03 GMT</pubDate></item><item><title><![CDATA[先验概率]]></title><description><![CDATA[ 
 <br>]]></description><link>术语\先验概率.html</link><guid isPermaLink="false">术语/先验概率.md</guid><pubDate>Thu, 20 Jun 2024 12:22:31 GMT</pubDate></item><item><title><![CDATA[籼稻]]></title><description><![CDATA[ 
 <br>籼稻，栽培稻的一个亚种，高100厘米左右，叶色淡绿，剑叶长37．4厘米，宽1．7厘米，株型松散适中。穗长20厘米，每穗粒数120左右，结实率80%以上，成穗率80%以上，平均千粒重25．6克，谷粒狭长，颖尖无色，问有短芒。<br>籼稻一般株高多在1m以上，茎秆较软，叶片宽，色泽淡绿，剑叶开度小。叶片茸毛多，有短小茸毛散生于颖壳。大多为无芒或短芒，谷粒细长而稍扁平，一般长度为宽度的二倍以上。谷粒易脱落。较耐湿、耐热和耐强光，但不耐寒。米粒直链淀粉含量较高，胶稠度硬，故蒸煮的米饭不粘。籼稻和粳稻通过杂交也可以获得杂种，但杂种一代的结实率较低。籼稻的许多性状比粳稻更近似于普通野生稻，因而认为籼稻是基本型，而粳稻是变异型。<br>
籼稻，栽培稻的一个亚种。最先由野生稻驯化形成的栽培稻。与粳稻比较：分蘖力较强；叶片较宽，叶色淡绿，叶面茸毛较多；谷粒细长。稃毛短少，成熟时易落粒，出米率稍低；蒸煮的米饭黏性较弱，胀性大；比较耐热和耐强光，耐寒性弱。 [2] 主要分布在中国和南亚、东南亚各国，以及热带非洲。中国主要分布在淮河、秦岭以南地区和云贵高原的低海拔地区]]></description><link>术语\籼稻.html</link><guid isPermaLink="false">术语/籼稻.md</guid><pubDate>Thu, 20 Jun 2024 12:25:56 GMT</pubDate></item><item><title><![CDATA[线粒体靶向的转录激活因子样效应核酸酶 (mitochondrial-targeted transcription activator-like effector nucleases, mitoTALEN)]]></title><description><![CDATA[ 
 <br>线粒体靶向的转录激活因子样效应核酸酶（mitoTALEN）可以想象成一种“基因手术刀”，专门为线粒体DNA设计，用于在特定位置进行“切割”操作。这种“手术刀”非常独特，因为它不仅能精准找到线粒体中的目标DNA片段，还能对其进行有针对性的修改，比如修复突变或删除有害基因片段。<br>工作原理上，mitoTALEN由两个主要部分组成：一个“导航系统”和一个“切割工具”。导航系统就像一位熟悉地图的导游，能识别特定的DNA序列，从而引导核酸酶精确定位到需要编辑的线粒体DNA区域。切割工具则是由一种专门的酶构成，一旦到达指定位置，就会将目标DNA链切开，形成一个“双链断裂”（DSB）。这样的断裂可以触发线粒体的修复机制，去除或替换损伤的DNA段，从而消除某些遗传突变或阻止突变的扩散。]]></description><link>术语\线粒体靶向的转录激活因子样效应核酸酶-(mitochondrial-targeted-transcription-activator-like-effector-nucleases,-mitotalen).html</link><guid isPermaLink="false">术语/线粒体靶向的转录激活因子样效应核酸酶 (mitochondrial-targeted transcription activator-like effector nucleases, mitoTALEN).md</guid><pubDate>Sat, 02 Nov 2024 07:19:02 GMT</pubDate></item><item><title><![CDATA[线粒体的RSRS和rCRS的区别]]></title><description><![CDATA[ 
 <br>RSRS（Reconstructed Sapiens Reference Sequence）和rCRS（revised Cambridge Reference Sequence）都是用于人类线粒体DNA（mtDNA）研究的参考序列。<br><a data-href="RSRS（Reconstructed Sapiens Reference Sequence）" href="术语\rsrs（reconstructed-sapiens-reference-sequence）.html" class="internal-link" target="_self" rel="noopener nofollow">RSRS（Reconstructed Sapiens Reference Sequence）</a>：RSRS是一种以现代人类的线粒体DNA为基础重新构建的参考序列。它的目的是消除线粒体DNA中可能存在的与祖先人类群体分化有关的突变，从而更准确地反映现代人类的共同祖先状态。RSRS通常用于考古遗传学研究，以便更好地比较不同人群之间的线粒体遗传变异。<br><a data-href="rCRS（revised Cambridge Reference Sequence）" href="术语\rcrs（revised-cambridge-reference-sequence）.html" class="internal-link" target="_self" rel="noopener nofollow">rCRS（revised Cambridge Reference Sequence）</a>：rCRS是最早用于人类线粒体DNA研究的参考序列，它是根据1962年剑桥大学的一份人类线粒体DNA样本进行构建的。然而，随着对线粒体DNA序列的更多研究和了解，发现了一些错误和不准确之处，因此rCRS被认为需要修订。RSRS就是其中一个修订版本，更准确地反映了人类线粒体DNA的祖先状态。<br>具体如下所示：<br>]]></description><link>术语\线粒体的rsrs和rcrs的区别.html</link><guid isPermaLink="false">术语/线粒体的RSRS和rCRS的区别.md</guid><pubDate>Thu, 20 Jun 2024 12:21:41 GMT</pubDate></item><item><title><![CDATA[线粒体呼吸链复合物I亚单位3（NADH Dehydrogenase Ubiquinone Flavoprotein 3,NDUFV3) 1]]></title><description><![CDATA[ 
 <br>NDUFV3是线粒体呼吸链复合物I的一部分，它参与调控线粒体内的电子传递链，这是细胞内产生能量的关键过程。]]></description><link>术语\线粒体呼吸链复合物i亚单位3（nadh-dehydrogenase-ubiquinone-flavoprotein-3,ndufv3)-1.html</link><guid isPermaLink="false">术语/线粒体呼吸链复合物I亚单位3（NADH Dehydrogenase Ubiquinone Flavoprotein 3,NDUFV3) 1.md</guid><pubDate>Thu, 20 Jun 2024 12:20:41 GMT</pubDate></item><item><title><![CDATA[线粒体基因组维护外切酶1(Mitochondrial Genome Maintenance Exonuclease 1，MGME1) 1]]></title><description><![CDATA[ 
 <br>MGME1，全称Mitochondrial Genome Maintenance Exonuclease 1，是一种编码蛋白质的基因，其主要作用是在线粒体 DNA（mtDNA）的维护中起着关键作用。它编码的 MGME1 蛋白质是一种外切酶，具有 DNA 修复和加工 mtDNA 的功能。MGME1 负责在 mtDNA 复制和维护中去除不完整或受损的 DNA 片段，确保线粒体 DNA 的稳定性和完整性。<br>这个基因位于人类基因组的某个染色体上，精确位置是根据基因组版本不同而有所变化。MGME1 的功能是维持线粒体 DNA 的健康，因为线粒体 DNA 对于细胞的正常功能至关重要，特别是在能量产生中的重要性。因此，MGME1 在维持细胞功能和防止线粒体疾病方面发挥着重要作用。]]></description><link>术语\线粒体基因组维护外切酶1(mitochondrial-genome-maintenance-exonuclease-1，mgme1)-1.html</link><guid isPermaLink="false">术语/线粒体基因组维护外切酶1(Mitochondrial Genome Maintenance Exonuclease 1，MGME1) 1.md</guid><pubDate>Thu, 20 Jun 2024 12:20:41 GMT</pubDate></item><item><title><![CDATA[线粒体内膜（Inner mitochondrial membrane，IMM）]]></title><description><![CDATA[ 
 <br>又称为内线粒体膜。<br>
内线粒体膜是包围线粒体基质的膜结构，与外线粒体膜（OMM）一起构成线粒体的双层膜结构。IMM是线粒体能量生产的核心场所，包含参与氧化磷酸化（ATP生成）的电子传递链和ATP合酶复合物。]]></description><link>术语\线粒体内膜（inner-mitochondrial-membrane，imm）.html</link><guid isPermaLink="false">术语/线粒体内膜（Inner mitochondrial membrane，IMM）.md</guid><pubDate>Mon, 26 Aug 2024 01:53:52 GMT</pubDate></item><item><title><![CDATA[线粒体融合蛋白2(Mitofusin 2,MFN2) 1]]></title><description><![CDATA[ 
 <br>MFN2代表"线粒体融合蛋白2"（Mitofusin 2）。MFN2是一个蛋白质，它在线粒体融合过程中发挥关键作用。线粒体融合是线粒体维护和功能的一个重要方面，而MFN2是参与调控线粒体融合的蛋白质之一。]]></description><link>术语\线粒体融合蛋白2(mitofusin-2,mfn2)-1.html</link><guid isPermaLink="false">术语/线粒体融合蛋白2(Mitofusin 2,MFN2) 1.md</guid><pubDate>Thu, 20 Jun 2024 12:20:42 GMT</pubDate></item><item><title><![CDATA[线粒体树的标识符]]></title><description><![CDATA[ 
 <br>线粒体树分支后的字母数字组合（例如G2706A）代表突变的位置和突变类型。在这个例子中，"G2706A" 表示在线粒体DNA的第2706个核苷酸位置发生了一个突变，原先的碱基"G"发生了变异，变成了碱基"A"。<br>"G" 表示突变发生前的原碱基。<br>
"2706" 表示突变发生的核苷酸位置。<br>
"A" 表示突变后的新碱基。<br>
这些突变标记在线粒体遗传学研究中用于描述不同线粒体线路之间的差异。通过分析这些突变，研究人员可以重构线粒体树，揭示不同群体、种群或个体之间的遗传关系和演化历史。这对于人类起源、迁徙和种群遗传学研究具有重要意义。<br>每个线粒体分支的末尾的字母数字组合（例如KC985159）代表一个唯一的线粒体基因组序列的标识符。这些标识符通常被称为线粒体DNA序列的GenBank（基因库）或其他数据库中的"Accession Number"（访问号码）或"Accession ID"（访问标识）。每个线粒体基因组序列都有一个独特的标识符，用于区分不同的线粒体基因组。<br>在GenBank或其他数据库中，通过使用这些标识符，可以查找、访问和引用特定的线粒体基因组序列。这些标识符对于科研人员在遗传学、进化学、人类学等领域进行线粒体DNA分析和研究非常重要。它们允许研究人员比较不同个体、种群或物种的线粒体基因组，从而深入了解其遗传关系、进化历史和种群动态。<br>不同的人可以携带相同的线粒体基因组序列的标识符。这通常是因为在人类种群中，存在着一些相同的或非常相似的线粒体基因组序列，被称为"线粒体单倍型"（mitochondrial haplotype）。<br>线粒体基因组的传递方式是通过母系遗传，即母亲将其线粒体DNA传递给子代。由于线粒体基因组相对较小且较简单，不同个体之间可能会发生相同的突变，导致相同的线粒体单倍型在不同个体中出现。<br>这种情况尤其在较为紧密的亲缘关系或同一种群内较常见。因此，尽管存在相同的线粒体基因组序列的标识符，但实际上这些个体可能具有不同的遗传背景、表型和其他遗传变异。这就是为什么在遗传学研究中，除了线粒体基因组序列的标识符外，还需要考虑其他遗传信息，以获得更全面的了解。]]></description><link>术语\线粒体树的标识符.html</link><guid isPermaLink="false">术语/线粒体树的标识符.md</guid><pubDate>Thu, 20 Jun 2024 12:21:38 GMT</pubDate></item><item><title><![CDATA[线粒体外膜（Outer Mitochondrial Membrane，OMM）]]></title><description><![CDATA[ 
 <br>又称为外线粒体膜。<br>
外线粒体膜是包裹线粒体外部的膜，与内线粒体膜（IMM）相对。OMM含有各种通道蛋白，如<a data-href="电压依赖性阴离子通道(Voltage-Dependent Anion Channel, VDAC)" href="术语\电压依赖性阴离子通道(voltage-dependent-anion-channel,-vdac).html" class="internal-link" target="_self" rel="noopener nofollow">电压依赖性阴离子通道(Voltage-Dependent Anion Channel, VDAC)</a>，允许离子和小分子在细胞质和线粒体之间通过。]]></description><link>术语\线粒体外膜（outer-mitochondrial-membrane，omm）.html</link><guid isPermaLink="false">术语/线粒体外膜（Outer Mitochondrial Membrane，OMM）.md</guid><pubDate>Mon, 26 Aug 2024 01:55:57 GMT</pubDate></item><item><title><![CDATA[线粒体外膜通透性（mitochondrial outer membrane permeabilization,MOMP）]]></title><description><![CDATA[ 
 <br>细胞凋亡（程序性细胞死亡）过程中的一个关键事件。它涉及细胞内线粒体外膜的透性改变，使得线粒体之间的膜变得可渗透，从而允许细胞色素c（cytochrome c）和其他凋亡促进因子从线粒体间隙释放到细胞质中。这一过程是由一系列蛋白质，包括Bcl-2家族成员（如Bax和Bak）的调节作用触发的。<br>MOMP的发生标志着细胞凋亡过程的一个不返回点，因为一旦细胞色素c被释放到细胞质中，它会与凋亡蛋白激活因子（Apaf-1）和前Caspase-9结合，形成所谓的“凋亡体”，激活Caspase-9，随后激活Caspase级联反应，导致细胞的程序性死亡。]]></description><link>术语\线粒体外膜通透性（mitochondrial-outer-membrane-permeabilization,momp）.html</link><guid isPermaLink="false">术语/线粒体外膜通透性（mitochondrial outer membrane permeabilization,MOMP）.md</guid><pubDate>Thu, 20 Jun 2024 12:35:10 GMT</pubDate></item><item><title><![CDATA[线粒体未折叠蛋白应激反应（mitochondrial unfolded protein response，UPRmt）]]></title><description><![CDATA[ 
 <br>这是一种细胞应对线粒体内部蛋白质错误折叠累积的应激反应，通过这种机制，细胞试图恢复线粒体功能，并维持细胞的正常生理状态。在此过程中，<a data-href="氧化烟酰胺腺嘌呤二核苷酸（NAD+）" href="术语\氧化烟酰胺腺嘌呤二核苷酸（nad+）.html" class="internal-link" target="_self" rel="noopener nofollow">氧化烟酰胺腺嘌呤二核苷酸（NAD+）</a> 作为一个关键的辅酶和信号分子，在调控该应激反应中扮演着重要角色。]]></description><link>术语\线粒体未折叠蛋白应激反应（mitochondrial-unfolded-protein-response，uprmt）.html</link><guid isPermaLink="false">术语/线粒体未折叠蛋白应激反应（mitochondrial unfolded protein response，UPRmt）.md</guid><pubDate>Tue, 13 Aug 2024 07:21:33 GMT</pubDate></item><item><title><![CDATA[线粒体转录因子A（Transcription Factor A Mitochondrial，TFAM）]]></title><description><![CDATA[ 
 <br>中文意为"线粒体转录因子A"。TFAM是一种蛋白质，它在线粒体中发挥着重要的角色，参与调控线粒体DNA（mtDNA）的转录和复制。TFAM蛋白质结合到mtDNA上，帮助形成线粒体核心粒（nucleoid）结构，这对于维护和复制mtDNA非常关键。TFAM基因编码的蛋白质在保障线粒体的正常功能和维持细胞能量代谢中起着重要作用。]]></description><link>术语\线粒体转录因子a（transcription-factor-a-mitochondrial，tfam）.html</link><guid isPermaLink="false">术语/线粒体转录因子A（Transcription Factor A Mitochondrial，TFAM）.md</guid><pubDate>Tue, 17 Sep 2024 07:34:01 GMT</pubDate></item><item><title><![CDATA[线粒体DNA（mtDNA）]]></title><description><![CDATA[ 
 ]]></description><link>术语\线粒体dna（mtdna）.html</link><guid isPermaLink="false">术语/线粒体DNA（mtDNA）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:36 GMT</pubDate></item><item><title><![CDATA[线粒体DNA（mtDNA）的突变定义规则]]></title><description><![CDATA[ 
 <br><a class="internal-link" data-href="线粒体DNA（mtDNA）.md" href="术语\线粒体dna（mtdna）.html" target="_self" rel="noopener nofollow">线粒体DNA（mtDNA）</a>的突变定义规则：<br>
Q:<br>
举个例子，（L1'2'3'4'5'6 C146T C182T T4312C T10664C C10915T A11914G G13276A G16230A）代表的是说（C146T C182T T4312C T10664C C10915T A11914G G13276A G16230A）必须同时具备才能被分为L1'2'3'4'5'6 吗？
<br>
A:<br>
是的，您的理解是正确的。在您提供的例子中（L1'2'3'4'5'6 C146T C182T T4312C T10664C C10915T A11914G G13276A G16230A），每一个特定的字母数字组合，如 C146T 或 C182T，代表了线粒体DNA（mtDNA）中的一个特定突变。<br>
要被归类到特定的线粒体DNA单倍群（如 L1'2'3'4'5'6），一个个体的mtDNA需要展示所有列出的突变。这些突变是一组特定的遗传标记，用于定义和区分这个单倍群。每个突变都由三个部分组成：<br>
变化前的核苷酸（比如 C、A、G）：这是在特定位置的原始核苷酸。<br>
数字（比如 146、2758、8701）：表示mtDNA序列中的具体位置。<br>
变化后的核苷酸（比如 T、G、A）：这是取代原始核苷酸的新核苷酸。<br>
因此，一组特定的突变（如 C146T, C182T, T4312C 等）需要全部出现在一个人的mtDNA中，这个人的线粒体DNA才能被归类到对应的单倍群（在这个例子中是 L1'2'3'4'5'6）。这些突变的组合提供了一种用来追踪母系遗传、研究人类迁徙和种群遗传学的重要工具。
<br>
Q:<br>
假如，某个人的mtDNA具备（L1'2'3'4'5'6 C146T C182T T4312C T10664C C10915T A11914G G13276A），但是不具备（G16230A），那么他能够被分为L1'2'3'4'5'6单倍群吗？
<br>
A:<br>
如果某个人的mtDNA具有（L1'2'3'4'5'6 C146T C182T T4312C T10664C C10915T A11914G G13276A）这些突变，但不具有（G16230A）突变，那么他们通常不会被分类为L1'2'3'4'5'6单倍群。<br>
单倍群的分类依赖于一组特定的突变。如果缺少这些定义性突变中的任何一个，那么该个体的mtDNA就不能被完全归类为那个特定的单倍群。在您的例子中，G16230A是L1'2'3'4'5'6单倍群定义中的一个关键突变。没有这个突变，个体可能属于一个与L1'2'3'4'5'6相近但略有不同的单倍群。<br>
这种情况下，遗传学家会进一步分析这个个体的mtDNA，查看是否有其他突变，这些突变可能指向一个不同的，但可能是相关的单倍群。线粒体DNA的分类是基于一个复杂且精细的突变网络，不同单倍群之间的差异有时可能非常细微。
]]></description><link>术语\线粒体dna（mtdna）的突变定义规则.html</link><guid isPermaLink="false">术语/线粒体DNA（mtDNA）的突变定义规则.md</guid><pubDate>Thu, 20 Jun 2024 12:21:36 GMT</pubDate></item><item><title><![CDATA[线粒体DNA编码、在细胞质中翻译的蛋白质（mtDNA-encoded protein arising from cytosolic translation，mPACT）]]></title><description><![CDATA[ 
 ]]></description><link>术语\线粒体dna编码、在细胞质中翻译的蛋白质（mtdna-encoded-protein-arising-from-cytosolic-translation，mpact）.html</link><guid isPermaLink="false">术语/线粒体DNA编码、在细胞质中翻译的蛋白质（mtDNA-encoded protein arising from cytosolic translation，mPACT）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:07 GMT</pubDate></item><item><title><![CDATA[线粒体DNA传播]]></title><description><![CDATA[ 
 <br>单倍群更关注的是共享特定的遗传变异并追溯到共同祖先的群体分类，而单倍型更关注的是描述个体或群体在特定遗传标记上的遗传变异组合。<br>
<a data-href="线粒体/树/线粒体发育树" href="线粒体\树\线粒体发育树" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/线粒体发育树</a><br><img alt="Pasted image 20230803112147" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312241214954.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>以下是Y染色体DNA单倍型类群和线粒体DNA单倍体群大约的相同之处：<br><br>单倍群可以用来定义<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E9%81%BA%E5%82%B3%E5%AD%B8" rel="noopener nofollow" class="external-link" href="https://zh.wikipedia.org/wiki/%E9%81%BA%E5%82%B3%E5%AD%B8" target="_blank">遗传学</a>群体和地理分布。例如，以下是mtDNA单倍群一般性区域分布：<br>线粒体单倍群分为3群，以3个连续的字母L、M、N表示。其中的L3分离成M和N群。M群组成包括人类第一波由离开非洲，顺着南部沿海地区向东的大迁移​​路线。]]></description><link>术语\线粒体dna传播.html</link><guid isPermaLink="false">术语/线粒体DNA传播.md</guid><pubDate>Thu, 20 Jun 2024 12:21:31 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312241214954.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312241214954.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[线粒体DNA结构（mt-DNA structure）]]></title><description><![CDATA[ 
 <br><a class="internal-link" data-href="线粒体DNA（mtDNA）.md" href="术语\线粒体dna（mtdna）.html" target="_self" rel="noopener nofollow">线粒体DNA（mtDNA）</a>由重链和轻链组成。内环通常是重链，而外环是轻链。<br>mtDNA的双链结构
H链编码的蛋白质对线粒体功能至关重要，而L链主要用于RNA合成，以支持线粒体自身的功能。轻链（L链）和重链（H链）的命名与其相对分子量或重量有关。这是由于这两种链在电泳或其他生物化学分离实验中，H链通常具有较高的相对分子量，因此称为“重链”，而L链则具有较低的相对分子量，因此称为“轻链”。<br>
重链（H链）中，碱基组成主要包括腺嘌呤（adenine，A）和胞嘧啶（cytosine，C）。<br>
轻链（L链）则包含鸟嘌呤（guanine，G）和胸腺嘧啶（thymine，T）。<br>
这种差异是因为mtDNA的两条链在碱基组成上相互互补配对。这种特殊的碱基组成有助于维持线粒体DNA结构和功能。
<br><a class="internal-link" data-href="线粒体DNA（mtDNA）.md" href="术语\线粒体dna（mtdna）.html" target="_self" rel="noopener nofollow">线粒体DNA（mtDNA）</a>结构如下图所示：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312241212017.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312241212018.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">]]></description><link>术语\线粒体dna结构（mt-dna-structure）.html</link><guid isPermaLink="false">术语/线粒体DNA结构（mt-DNA structure）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:35 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312241212017.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312241212017.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[线粒体DNA拷贝数（mtCN）]]></title><description><![CDATA[ 
 <br>mtDNA拷贝数（mtDNA copy number，缩写为mtCN）通常指的是一个细胞内线粒体DNA（mtDNA）分子的数量。]]></description><link>术语\线粒体dna拷贝数（mtcn）.html</link><guid isPermaLink="false">术语/线粒体DNA拷贝数（mtCN）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:32 GMT</pubDate></item><item><title><![CDATA[限制性片段长度多态性（RFLP）]]></title><description><![CDATA[ 
 <br>RFLP（限制性片段长度多态性）是一种分子生物学技术，用于分析DNA序列的变异。这种技术依赖于限制性内切酶，这些酶可以识别并切割特定的DNA序列。通过比较不同样本的DNA切割模式，可以识别DNA序列的差异，从而用于研究遗传多样性、遗传病的诊断以及种群遗传结构的分析。RFLP特别适用于那些已知具有变异位点的基因区域的研究。]]></description><link>术语\限制性片段长度多态性（rflp）.html</link><guid isPermaLink="false">术语/限制性片段长度多态性（RFLP）.md</guid><pubDate>Thu, 27 Jun 2024 03:43:17 GMT</pubDate></item><item><title><![CDATA[相近物种混合样本（species mixtures from closely related species）]]></title><description><![CDATA[ 
 <br>aeDNA样本中可能包含来自多个密切相关物种的DNA，这些物种的基因序列非常相似，现有的方法难以将它们准确区分开来。]]></description><link>术语\相近物种混合样本（species-mixtures-from-closely-related-species）.html</link><guid isPermaLink="false">术语/相近物种混合样本（species mixtures from closely related species）.md</guid><pubDate>Sun, 20 Oct 2024 04:20:58 GMT</pubDate></item><item><title><![CDATA[小河墓地（Xiaohe site）]]></title><description><![CDATA[ 
 <br>小河墓地位于罗布泊地区孔雀河下游河谷南约60公里的罗布沙漠中，东距楼兰古城遗址175公里。小河墓地整体由数层上下叠压的墓葬及其它遗存构成，外观为在沙丘比较平缓的沙漠中突兀而起的一个椭圆形沙山。<br>小河墓地给人的第一强烈印象就是墓地沙山上密密麻麻矗立的140多根多棱形、圆形、桨形的胡杨木桩，都4米多高很粗壮，多被砍成7棱体到11棱。小河墓地，被评为2004年中国十大考古发现。<br>到过小河墓地的人，留下的第一个强烈印象就是小河墓地的沙山上密密麻麻矗立的胡杨木柱。<br>
这些木柱有140根，根据死者的性别不同而不同。女性棺前立的是基本呈多棱形的上粗下细的木柱，高度一般1.3－1.5米左右，上部涂红，缠绕毛绳、固定草束；男性棺前则立一外形似木桨的立木，大、小差别很大，大的高达2米、宽0.8米左右，其上涂黑，柄部涂红。<br>为什么要把如此多的木柱立在沙丘上面？它们是做什么用的？1934年，瑞典考古学家贝格曼到达这里时，曾认为立柱上面可能会有屋顶，并且在很久以前就被风吹走了。新疆文物考古研究所小河考古队发掘后，推翻了立柱上面可能有屋顶的推测，并得出一个令人匪夷所思的结论－－－所有的木柱都是死者拥有的纪念物。<br>″多棱形的上粗下细的木柱可能象征男根，桨形立柱则象征女阴。″考古人员说。<br>
矗立在墓地中央的一根高大的、顶部呈尖锥状的立柱有了最终的归属。它是属于一位年长的妇人的。这是目前发掘出的最大的一个″男根″，它通体被涂成红色，上端线条浑圆，中段被雕成9棱形，立在老妇人棺木头部的位置。<br>正如″男根″一样，″女阴″同样以夸张的大比例显示着它的非同凡响。它们和粗壮的″男根″一起，组成了小河墓地神秘而惊世骇俗的生殖崇拜文化景观。一位历史学家说，人类早期文化中对生殖的崇拜在很多民族的遗存中都有发现，但像小河墓地这样极度的崇拜方式却举世罕见。<br>小河墓地的人说的语言一直是个谜，但梅维恒博士认为可能是<a data-href="吐火罗语(Tocharian language)" href="术语\吐火罗语(tocharian-language).html" class="internal-link" target="_self" rel="noopener nofollow">吐火罗语(Tocharian language)</a>，印欧语系中的一个古老分支。塔里木盆地发现过用<a data-href="吐火罗语(Tocharian language)" href="术语\吐火罗语(tocharian-language).html" class="internal-link" target="_self" rel="noopener nofollow">吐火罗语(Tocharian language)</a>写的手稿，这种语言曾在公元500年到900年在该地区用过。虽然在东方出现，对比印度和伊朗的咝音类语言（Satem），吐火罗语更接近与欧洲的颚音类语言（Centum）。这个结论是基于数百个词汇的拉丁语与梵语（Sanskrit）发音的区别。小河墓地的人们生活在距吐火罗语最早记录的2000年前，但其中呈现出“一种清楚的文化连续性”，梅维恒博士说。这种连续性体现在埋葬方式上——与帽子一齐埋葬，这个传统一直延续到公元后前几个世纪。]]></description><link>术语\小河墓地（xiaohe-site）.html</link><guid isPermaLink="false">术语/小河墓地（Xiaohe site）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:03 GMT</pubDate></item><item><title><![CDATA[辛塔什塔游牧文化（Sintashta pastoral cultures）]]></title><description><![CDATA[ 
 <br>辛塔什塔（Sintashta）遗址是上个世纪下半叶欧亚草原考古的一个非常重要的发现，从马和车的殉葬到经济形态的研究，从采矿业与冶金业的集约化生产到城防设施与武器的发达，都有各方面的专题研究。但是如果我们把这个遗址放在整个欧亚草原的开发过程中，就发现这个遗址代表了欧亚草原早期城市化时代的终结，是欧亚草原从早期城市转入到游牧化的一个转折点。从它之后，欧亚草原走上了另一条不同于农业文明发展的道路，直到进入了全面的游牧化社会，才又一次从部落联盟迈入了国家的门槛。]]></description><link>术语\辛塔什塔游牧文化（sintashta-pastoral-cultures）.html</link><guid isPermaLink="false">术语/辛塔什塔游牧文化（Sintashta pastoral cultures）.md</guid><pubDate>Tue, 10 Sep 2024 13:24:51 GMT</pubDate></item><item><title><![CDATA[新疆]]></title><description><![CDATA[ 
 <br>新疆维吾尔自治区，通称新疆，简称新，是中华人民共和国的一个自治区，也是中国面积第一大的省级行政区，世界第八大行政区划。自治区由新疆省改置，成立于1955年，首府位于乌鲁木齐。新疆总面积为1,664,897平方公里，约占中国陆地面积六分之一；陆地边境线达5690.142公里，占中国边界总长度四分之一。<br>新疆地貌为“三山夹两盆”，即拥有高山与盆地相间分布的独特地形特征。南北两端分别为昆仑山脉和阿尔泰山脉，而横亘中部的天山山脉则将新疆大致分为准噶尔盆地和塔里木盆地两大部分，或以北疆和南疆俗称。夏季高温、光照充足以及昼夜温差大的气候特点使得新疆出产各类优质瓜果，如蕃茄、哈密瓜、石榴、葡萄等。炎热干燥的气候和稳定的灌溉水源使南疆成为中国最大的优质棉花生产基地。新疆也是中国油气资源最丰富的省区之一，储量占陆地总储量近三分之一，拥有亿吨级储量油田。所拥有中国战略油气储备基地。克拉玛依油田是中国西部最大的油田。<br>新疆居住着56个民族和19个世居民族，其中包括维吾尔族、汉族、哈萨克族、回族、柯尔克孜族、蒙古族、锡伯族、塔吉克族、东乡族等，自治区境内还有五个民族自治州和六个民族自治县。]]></description><link>术语\新疆.html</link><guid isPermaLink="false">术语/新疆.md</guid><pubDate>Thu, 20 Jun 2024 12:19:19 GMT</pubDate></item><item><title><![CDATA[新生突变率（de novo mutation rate）]]></title><description><![CDATA[ 
 <br>新生突变率和替换率。新生突变率是指在后代中新出现的突变的速率]]></description><link>术语\新生突变率（de-novo-mutation-rate）.html</link><guid isPermaLink="false">术语/新生突变率（de novo mutation rate）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:58 GMT</pubDate></item><item><title><![CDATA[新石器时代（Neolithic）]]></title><description><![CDATA[ 
 <br>新石器时代（Neolithic），在考古学上是石器时代的最后一个阶段，以磨制石器和制作陶器为主。<br>在中国大陆，这个时代出现了许多的<a data-href="中国新石器时代文化" href="术语\中国新石器时代文化.html" class="internal-link" target="_self" rel="noopener nofollow">中国新石器时代文化</a>。]]></description><link>术语\新石器时代（neolithic）.html</link><guid isPermaLink="false">术语/新石器时代（Neolithic）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:25 GMT</pubDate></item><item><title><![CDATA[新石器时代以来的文化表格]]></title><description><![CDATA[ 
 <br>本表列举考古发掘所发现的中国新石器文化列表，分成区域文化区系表与简易时间线。中国考古学研究一般是从1921年瑞典人安特生发现河南三门峡地区的仰韶遗址开始。在研究中国文明形成过程，在近百年的探索中先后有多种认知学说诞生与推翻。本表的文化区分采用中国新石器时代区域文化区系学说，即“六大区系说”（苏秉琦）、“相互作用圈说”（张光直）与“多元一体说”（李学勤、费孝通、严文明）等等学说的结合，文化趋势大致上由满天星斗走向月明星稀。本表的年代时间均为公元前（BC），采用碳14定年法，存在一定的误差。所以文化之间的关系均为大略的相对关系，会随后续最新考古发现与研究而更新与修正。<br>
<img alt="Pasted image 20230804111433" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804111433.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="Pasted image 20230804111415" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804111415.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
中国大约在前1万年就已进入新石器时代。由于地域辽阔，各地自然地理环境很不相同，新石器文化的面貌也有很大区别，大致分为三大类经济文化区：中国东部季风区的黄河流域、海河与辽河等流域形成数个“栗黍农业经济文化区”，这里是粟、黍等旱作农业起源地，很早就饲养猪、狗，以后又养牛、羊等。而中国东部季风区的长江流域形成数个“稻谷农业经济文化区”，本区很早就种植水稻，是稻作农业的重要起源地。早期饲养猪、狗，以后陆续养水牛和羊。这些农业区陆续发展出六大文化区系与两个分离自中原区的亚文化区系，总共为八大文化区系。位于中国东部季风区外围，北至长城以北地区、东北平原、南至华南亚热带到热带地区、西至新疆与青藏高原等地区，大多以渔猎采集经济为主，农业为辅，也形成数个“狩猎采集经济文化区”，这个区域除个别地方外基本上没有农业，细石器特别发达而很少磨制石器，陶器也不甚发达。八大文化区系构成重瓣花朵的内圈花瓣，外围其他文化区系构成重瓣花朵的外圈花瓣。<br><a data-href="粟（millet）" href="术语\粟（millet）.html" class="internal-link" target="_self" rel="noopener nofollow">粟（millet）</a><a data-href="黍（Panicum miliaceum）" href="术语\黍（panicum-miliaceum）.html" class="internal-link" target="_self" rel="noopener nofollow">黍（Panicum miliaceum）</a>农业经济文化区（八大文化区系）：<br>
甘青区：黄河上游流域、长城地带西部地区与青海湖一带，分离自中原区。<br>
代表：马家窑文化、齐家文化<br>
中原区：黄河中游流域、渭河流域区、汾河流域区与淮河流域区。<br>
代表：裴李岗文化、仰韶文化（半坡类型、庙底沟类型）、河南龙山文化、二里头文化（青铜）<br>
海岱区：黄河下游流域、山东半岛与淮河流域区。<br>
代表：大汶口文化、龙山文化、岳石文化（青铜）<br>
燕辽区：海河流域、燕山以北到辽河流域区、辽东半岛?。<br>
代表：红山文化、夏家店下层文化<br>
雁北区：河套平原、陕北高原、晋北、冀北等地区，分离自中原区。<br>
代表：老虎山文化（石峁类型）<br><a data-href="稻（Oryza sativa L.）" href="术语\稻（oryza-sativa-l.）.html" class="internal-link" target="_self" rel="noopener nofollow">稻（Oryza sativa L.）</a>农业经济文化区（八大文化区系）：<br>
巴蜀区：长江上游流域与四川盆地。<br>
代表：哨棚嘴文化、宝墩文化、三星堆文化（青铜）<br>
两湖区：长江中游流域与洞庭湖和汉水流域区。<br>
代表：大溪文化、屈家岭文化、石家河文化<br>
江浙区：长江下游流域与太湖和浙江流域区。<br>
代表：马家浜文化、河姆渡文化、凌家滩文化、良渚文化<br>狩猎采集经济文化区（外围其他文化区系）：<br>
岭南东南区：鄱阳湖、东南丘陵与沿海诸岛、珠江流域与北越等地区。<br>
代表：山背文化、大坌坑文化、石峡文化<br>
西南区：西南云贵高原和藏南纵谷等地区。<br>
代表：卡若文化<br>
东北区：辽东半岛?、东北平原与黑龙江、松花江、嫩江等流域地区。<br>
代表：?<br>
甚至还有新疆区、内蒙（外蒙?）区等文化区。<br>而时间分区的部分，依据栗黍农业经济文化区和稻谷农业经济文化区发展程度的早晚，中国新石器时代又可分成：<br>
<br>中国新石器时代早期：（约公元前10000 - 前7000年）
<br>中国新石器时代中期：（约公元前7000 - 前5000年）
<br>中国新石器时代晚期：（约公元前5000 - 前3500年）
<br>中国铜石并用时期：（约公元前3500 - 前2000年，可不归属新石器时代）<br>
全面进入中国青铜器时代（约公元前2000年）后，上古时代又有如下的考古学文化：
<br>夏代：<br>
王湾三期、王城岗至新砦文化（疑为先夏至夏朝，断代未定）<br>
二里头文化（疑为夏朝，后世商代甲骨文的西邑可能就指夏）<br>
商代：<br>
二里岗至小双桥文化（疑为商朝早中期）<br>
殷墟文化（商朝晚期，出现明确文字“甲骨文”而进入信史时代）<br>
周代：<br>
西周时期早中期<br>
西周晚期（出现明确纪年“共和元年”，即公元前841年）<br>
本表还列出春秋时期、战国时期、秦朝（含西楚）、直至西汉为止。<br>总之，中国农耕文明的起源是多元的，数个经济文化区系齐头并进，互向交流，逐渐由多元文化走向以中原区为核心、以黄河流域和长江流域为主体的多元一体格局，最后逐渐融合形成夏商周三代文明。直至秦统一六国、秦始皇南征北讨后成为政治上统一中国本土，历经西汉七国之乱与汉武帝南征北讨后中国本土才逐渐融合成文化统一的中国。<br><img alt="Pasted image 20230804111604" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804111604.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\新石器时代以来的文化表格.html</link><guid isPermaLink="false">术语/新石器时代以来的文化表格.md</guid><pubDate>Thu, 20 Jun 2024 12:26:41 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804111433.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804111433.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[新世界]]></title><description><![CDATA[ 
 <br>“新世界”通常指的是美洲，包括北美洲和南美洲。这个术语最初由欧洲探险者在15世纪和16世纪发现美洲大陆时使用，用来区分欧洲、亚洲和非洲所构成的“旧世界”。在人类遗传学和考古学的研究中，新世界常常被提到，特别是在讨论早期人类迁移和居民的起源时。]]></description><link>术语\新世界.html</link><guid isPermaLink="false">术语/新世界.md</guid><pubDate>Thu, 27 Jun 2024 02:56:10 GMT</pubDate></item><item><title><![CDATA[新仙女木期（Younger Dryas）]]></title><description><![CDATA[ 
 <br>仙女木在大约12 000年前的瑞典广泛生长似乎表明，在上一个冰期之后，地球上出现的温暖气候被气温骤降的严寒天气中断了。为了纪念这些具有“报警”作用的野花，科学家把这段气候急剧变冷的寒潮期命名为新仙女木期（Younger Dryas）。<br>距今1.28万年-1.15万年的降温时间，地球气温在短期内下降了7-8摄氏度。<br>
近年来的考古学证据认为，这段时期也许比人们想象的短得多，可能只有3年。<br>但在20世纪50年代以前，大多数的科学家都认为，气候变化需要历经数千年，甚至是数十万年。<br>
越来越多的证据表明，气候存在快速变化的可能性。在瑞典，科学家通过研究湖底的淤泥层发现了地球气候曾经发生过剧烈变化的证据，其变化的速度之快出乎当时在场所有人的意料。科学家从距今12 000年的泥芯样本中发现了大量北极野花的花粉，这种野花叫作“仙女木”（Dryas octopetala），通常生长在北极地区，只有在极其寒冷的时期才会在欧洲大陆繁茂生长。<br>新仙女木期提前降临北半球其实已经证明了气候的变化速度比他们预想的要快，尽管这些证据就摆在眼前，但他们却被自己的假定蒙蔽了双眼。<br>
随着新证据的发现，旧的证据被重新审视，科学界达成了全新的共识。到了20世纪70年代，人们普遍开始相信，致使冰期开始和结束的温度变化和气候变化在仅仅几百年内就可能发生。变化的时间跨度从之前认为的数千年缩短到了现在的数百年，由此“数百年”便成为气候“快速”变化的新的时间计量单位。<br>
到了20世纪80年代，通过对这些冰芯的分析，科学家终于证实了新仙女木期的存在，同时认为，这段气温急剧下降的时期开始于13 000年前并持续了1 000多年。然而，这还只是冰山的一角。<br>1989年，一支美国的科学考察团队进行了一次远征探险，在格陵兰岛两英里（约合3.2千米）厚的冰盖上钻了一个直达底部的洞，这些冰盖记录着过去11万年间的气候变化情况。而就在距此地仅20英里（约合32千米）的地方，一支欧洲的考察团队也在进行着类似的研究。4年后，两支<br>
考察队伍的取样设备都到达了冰盖的底层，他们的发现再次改变了“快速”一词的含义。<br>这些冰芯揭示了新仙女木期仅仅持续了3年便宣告结束。从冰期到非冰期的过渡，花费的不是3 000年，也不是300年，而是短短3年。不仅如此，冰芯还揭示出新仙女木期的来临只用了10年的时间。这一次的证据是非常清楚的——快速的气候变化是真实存在的。<br>
S. Bondevik, J. Mangerud, H. H. Birks, et al. 2006. Changes in North Atlantic radiocarbon reservoir ages during the Allerod and Younger Dryas.&nbsp;Science&nbsp;312(5779):1514–1517;<br>
National Research Council (U.S.), Committee on Abrupt Climate Change,&nbsp;Abrupt Climate Change: Inevitable Surprises&nbsp;(Washington, DC: National Academies Press, 2002);<br>
L. Tarasov and W. R. Peltier. 2005. Arctic freshwater forcing of the Younger Dryas cold reversal.&nbsp;Nature&nbsp;435(7042):662–665;<br>
T. Correge, M. K. Gagan, J. W. Beck, et al. 2004. Interdecadal variation in the extent of South Pacific tropical waters during the Younger Dryas event.&nbsp;Nature&nbsp;428(6986):927–929;<br>
C. Singer, J. Shulmeister, and B. McLea. 1998. Evidence against a significant Younger Dryas cooling event in New Zealand.&nbsp;Science&nbsp;281(5378):812–814;<br>
Richard B. Alley, “Abrupt Climate Change,”&nbsp;Scientific American, November 2004.<br>
R. B. Alley,&nbsp;The Two-Mile Time Machine: Ice Cores, Abrupt Climate Change, and Our Future&nbsp;(Princeton, NJ: Princeton University Press, 2000).
]]></description><link>术语\新仙女木期（younger-dryas）.html</link><guid isPermaLink="false">术语/新仙女木期（Younger Dryas）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:24 GMT</pubDate></item><item><title><![CDATA[匈奴]]></title><description><![CDATA[ 
 <br><a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>起源于阴山以南，河套地区。从此，河套地区就是<a data-href="游牧民族" href="术语\游牧民族.html" class="internal-link" target="_self" rel="noopener nofollow">游牧民族</a>和中原争夺的焦点。<br>
<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>自己没有文字没有历史。<br>
<br>秦始皇，蒙恬把<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>彻底赶出了河套地区。
<br>汉朝，<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>出了个人才，叫做冒顿单于，白登之围。百年战争。
<br>汉武帝北征<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>，卫青，霍去病收复阴山。
<br><a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>内乱分裂成南北2波，北<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>一直大汉为敌。东汉被窦宪彻底打垮。南<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>对汉朝很忠诚，三国期间也没出什么岔子。
<br>直到八王之乱，<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>人刘渊在山西建立<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>汉国，造了反，成了霸。
<br>其实在此之前早就已经高度汉化了。
<br>有了农业，谁还游牧。
<br>之后内乱，被后夏取代，短命的胡夏，之后没什么动静了。
<br>不到百年，就没有<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>了。
]]></description><link>术语\匈奴.html</link><guid isPermaLink="false">术语/匈奴.md</guid><pubDate>Thu, 20 Jun 2024 12:27:01 GMT</pubDate></item><item><title><![CDATA[序列质量分数]]></title><description><![CDATA[ 
 <br>序列质量分数通常是通过测序过程中各个碱基被正确识别的置信度来计算的，这个置信度常常以 Phred 质量分数（Q）来表示。Phred 质量分数是一个广泛使用的测序质量评估标准，其计算公式如下：<br><br>P 是一个碱基被错误识别的概率。例如，如果一个碱基被识别错误的概率是1%，那么其 Phred 质量分数为 20:<br><br>
<br>Q30表示错误概率为1/1000，即正确率为99.9%，这通常被认为是高质量的测序数据。
<br>Q20对应于错误概率为1/100，即正确率为99%，这被认为是可接受的质量水平。
<br>随着Phred分数的增加，碱基识别的准确性显著提高。通常，Phred分数在30或以上是目标质量标准，尤其是在高精度要求的应用中，如变异检测。
<br>为什么 <a data-href="核-线片段（nuclear-mitochondrial DNA segments, NUMTs）" href="术语\核-线片段（nuclear-mitochondrial-dna-segments,-numts）.html" class="internal-link" target="_self" rel="noopener nofollow">核-线片段（nuclear-mitochondrial DNA segments, NUMTs）</a>序列质量分数可能低：<br>
<br>序列相似性引起的对齐问题： NUMTs是线粒体DNA序列插入到核DNA中的片段，它们与真正的mtDNA序列高度相似。这种高度的相似性可能导致测序读段在比对到参考基因组时出现对齐错误，尤其是当使用自动化的测序数据分析软件时。对齐错误可能导致某些区域的质量分数估计不准确。
<br>技术限制： 测序技术自身的局限性也可能导致某些序列区域，特别是高GC含量区域或重复序列区域的质量分数较低。由于NUMTs可能位于这些技术上更难以测序和分析的区域，这些区域的序列质量分数可能较低。
<br>测序深度不足： 如果NUMTs区域的测序深度（即特定区域被测序读段覆盖的次数）不足，可能会导致该区域的变异检测不够准确，进而影响序列质量分数的估计。测序深度不足可能是由于样本准备、PCR扩增偏好或测序过程中的选择性损失等原因造成的。
<br>因此，当评估NUMTs区域的变异时，考虑到这些因素，需要特别注意序列质量分数，以确保变异检测的准确性和可靠性。]]></description><link>术语\序列质量分数.html</link><guid isPermaLink="false">术语/序列质量分数.md</guid><pubDate>Sat, 02 Nov 2024 07:26:51 GMT</pubDate></item><item><title><![CDATA[循环一致测序（Circular Consensus Sequencing，CCS）]]></title><description><![CDATA[ 
 <br>是一种用于提高测序质量的技术，通常与<a class="internal-link" data-href="Pacific Biosciences测序技术（SMRT,PacBio）.md" href="术语\pacific-biosciences测序技术（smrt,pacbio）.html" target="_self" rel="noopener nofollow">Pacific Biosciences测序技术（SMRT,PacBio）</a>的单分子实时测序技术相关。CCS 通过多次测序相同 DNA 分子的循环，生成一个一致的序列，以减少随机测序误差，提高数据质量。以下是 CCS 的工作原理：<br>
<br>生成循环模板： 首先，单个 DNA 分子（通常是长分子）被用作循环模板，其中的两端被连接，形成一个循环。
<br>多次测序： 这个循环模板会被多次测序，通常是通过不断通过 DNA 聚合酶进行多次合成反应。每次测序都会在不同的位置开始，产生一系列不同的测序片段。
<br>生成一致序列： 由于每次测序的起始点略有不同，这会导致测序错误分散在不同位置。然后，这些测序片段被比对和整合，以生成一个一致的序列，其中的测序错误被消除或大大减少。
<br>提高数据质量： 由于 CCS 生成的序列是经过多次测序和一致化处理的，因此它们通常具有更高的质量和准确性，尤其是在长序列和低复杂性区域。<br>
CCS 技术特别适用于长读取（long-read）测序平台，如 PacBio 的单分子实时测序，因为它可以减轻长读取测序的随机误差，并提供高质量的测序数据。这种方法在基因组学研究、变异检测、基因组重组等领域中具有广泛的应用。
]]></description><link>术语\循环一致测序（circular-consensus-sequencing，ccs）.html</link><guid isPermaLink="false">术语/循环一致测序（Circular Consensus Sequencing，CCS）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:47 GMT</pubDate></item><item><title><![CDATA[巽他古陆（Sundaland）]]></title><description><![CDATA[ 
 <br>生物地理学概念，指的是末次冰期由于海平面下降而在东南亚地区露出水面并连成一体的陆地。]]></description><link>术语\巽他古陆（sundaland）.html</link><guid isPermaLink="false">术语/巽他古陆（Sundaland）.md</guid><pubDate>Tue, 20 Aug 2024 12:46:05 GMT</pubDate></item><item><title><![CDATA[巽他型牙齿]]></title><description><![CDATA[ 
 <br>出现在东南亚和太平洋诸岛。<br>
出现在古代绳纹人和现代的阿伊努人。<br>
大概在3万年-1.7万年分化于东南亚。]]></description><link>术语\巽他型牙齿.html</link><guid isPermaLink="false">术语/巽他型牙齿.md</guid><pubDate>Thu, 20 Jun 2024 12:26:12 GMT</pubDate></item><item><title><![CDATA[雅鲁藏布江]]></title><description><![CDATA[ 
 ]]></description><link>术语\雅鲁藏布江.html</link><guid isPermaLink="false">术语/雅鲁藏布江.md</guid><pubDate>Thu, 20 Jun 2024 12:19:47 GMT</pubDate></item><item><title><![CDATA[烟酰胺单核苷酸（Nicotinamide Mononucleotide，NMN）]]></title><description><![CDATA[ 
 <br>作为NAD+（烟酰胺腺嘌呤二核苷酸）的前体物质，它在NAD+的生物合成路径中扮演关键角色。在细胞代谢中，NMN的重要性体现在其对维持和增加细胞内NAD+水平的贡献。随着年龄的增长，细胞内的NAD+水平通常会下降，这与多种老化相关的功能下降有关。因此，NMN作为一种补充剂，被研究和使用来提升NAD+水平，以支持细胞功能，改善代谢健康，并有助于延缓老化过程和治疗与老化相关的疾病。<br>在医学和生物学的研究中，NMN的应用正在被广泛探索，尤其是在抗衰老和代谢疾病的研究领域。例如，补充NMN已显示出在动物模型中改善衰老相关的生物标志物和功能衰退，这激发了对其在人类健康中潜在应用的兴趣。]]></description><link>术语\烟酰胺单核苷酸（nicotinamide-mononucleotide，nmn）.html</link><guid isPermaLink="false">术语/烟酰胺单核苷酸（Nicotinamide Mononucleotide，NMN）.md</guid><pubDate>Tue, 13 Aug 2024 07:31:01 GMT</pubDate></item><item><title><![CDATA[颜那亚文化（Yamna culture）]]></title><description><![CDATA[ 
 <br>颜那亚文化又被译为<a data-href="竖穴墓" href="术语\竖穴墓.html" class="internal-link" target="_self" rel="noopener nofollow">竖穴墓</a>文化，是一个铜石并用时代晚期到青铜时代早期的考古学文化，分布在南布格河、德涅斯特河和乌拉尔河地区之间，也就是东欧大草原上，时间可追溯到3300-2600 BC。颜那亚和亚姆纳分别音译自俄语和乌克兰语，意为“坑”，指其特有的埋葬传统：有一个墓室的<a data-href="库尔干（Kurgan）" href="术语\库尔干（kurgan）.html" class="internal-link" target="_self" rel="noopener nofollow">库尔干（Kurgan）</a>。<br>
<img alt="Pasted image 20230804103508" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804103508.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
颜那亚文化的居民很有可能是东欧的狩猎采集者（来自马尔他-布列切文化后代或相似的人群）和近东人（一些研究认为他们是来自高加索地区的狩猎采集者，或者是来自伊朗的铜石并用时代的相似人群）基因混合的结果。颜那亚人的物质文化，与和他们同时代、位于<a data-href="阿尔泰山脉" href="术语\阿尔泰山脉.html" class="internal-link" target="_self" rel="noopener nofollow">阿尔泰山脉</a>的<a data-href="阿凡纳谢沃文化（Afanasievo）" href="术语\阿凡纳谢沃文化（afanasievo）.html" class="internal-link" target="_self" rel="noopener nofollow">阿凡纳谢沃文化（Afanasievo）</a>非常相似，而且基因测试也表明，这两组文化在遗传学上无法区分。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409291115354.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
颜那亚草原牧民的影响 The formation of human populations in South and Central Asia
<br>颜那亚人与后来新石器时代晚期的许多文化的居民都密切相关，遍及整个欧洲和中亚，特别是绳纹器文化，还有贝尔陶器文化以及<a data-href="辛塔什塔游牧文化（Sintashta pastoral cultures）" href="术语\辛塔什塔游牧文化（sintashta-pastoral-cultures）.html" class="internal-link" target="_self" rel="noopener nofollow">辛塔什塔游牧文化（Sintashta pastoral cultures）</a>、<a data-href="安德罗诺沃文化（Andronovo culture）" href="术语\安德罗诺沃文化（andronovo-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">安德罗诺沃文化（Andronovo culture）</a>和Srubna culture的居民。 这些人群保留了许多颜那亚文化的特点，例如：骑马、埋葬风格、某种程度上的牧民经济。遗传学研究也表明，大部分这些人的祖先来自草原。]]></description><link>术语\颜那亚文化（yamna-culture）.html</link><guid isPermaLink="false">术语/颜那亚文化（Yamna culture）.md</guid><pubDate>Sun, 29 Sep 2024 03:15:52 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804103508.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804103508.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[仰韶文化]]></title><description><![CDATA[ 
 <br>仰韶文化，是指黄河中游地区一种重要的<a data-href="新石器时代（Neolithic）" href="术语\新石器时代（neolithic）.html" class="internal-link" target="_self" rel="noopener nofollow">新石器时代（Neolithic）</a>彩陶文化，其持续时间大约在公元前5000年至前3000年（即距今约7000年至5000年，持续时长2000年左右。<br>
<br>仰韶村遗址的发现与发掘影响和意义深远。第一次宣告了中国蕴藏着丰富的新时代文化遗存。证实了中国在阶级社会之前存在着较为发达的<a data-href="新石器时代（Neolithic）" href="术语\新石器时代（neolithic）.html" class="internal-link" target="_self" rel="noopener nofollow">新石器时代（Neolithic）</a>，破除了“中国无石器时代”的谬论，仰韶文化成为中国考古史上第一个被正式命名的远古文化体系。标志着中国史前考古学及中国近代考古学的诞生。揭开了中国田野考古史的第一页，从而使新石器时代的研究扩展到旧石器时代及铜器时代，揭开了中国现代考古学史上的新纪元，为后来发现并被命名的其他新石器时代文化奠定了规范化基础，起到了先河作用;为中国历史研究带来了最新的信息。仰韶文化的发现对当时国古史的研究影响极大，中国史前史的研究有了可靠的实物依据，学术界从疑古走向信古，重新建立了古史研究系统；为考古学工作创立了许多优良传统。开创了在考古中运用地质学的传统，注重了对地质、地形、地貌及环境研究，引用了地质学的测绘手段。注重了地层学和类型学的运用，用了类型学来确定遗存的时间和空间的理论方法。提倡多学科合作研究的方法，在仰韶村考古中首次引人了地质学、生物学等学科的成果，成为了中国考古学的研究传统。
<br>仰韶文化在中国考古史及至世界考古史上有显著的地位。仰韶文化揭开了中国新石器考古事业第一页，揭开了中国考古学研究第一页，揭开了中国原始社会研究第一页，书写了中国田野考古史新篇章，是划时代的里程碑。
<br>仰韶文化研究对于研究中华文明史有重大意义。中国的传说时代，史书记载有炎帝、黄帝、颛顼、帝喾等部族，但由于疑古，中华文明史源头仍不清晰。随着仰韶文化遗址的多处发现，地下遗存验证了史书记载的正确性。因此，仰韶文化研究对于重建古史、探寻中华文明的源头意义重大。夏商周断代工程理清了中国五千年的历史，中华文明探源工程将使中国历史再向前推1000年，这1000年中最重要的一环就是仰韶文化时期。
<br>仰韶文化的发掘和研究对世界的贡献。仰韶文化遗址发现前，世界学术界都持“中国文化西来说”，通过仰韶文化的发掘研究，改变了学术界这一错误认识，中国这一土著文化得到了举世公认，改写了世界历史。
]]></description><link>术语\仰韶文化.html</link><guid isPermaLink="false">术语/仰韶文化.md</guid><pubDate>Thu, 20 Jun 2024 12:26:24 GMT</pubDate></item><item><title><![CDATA[氧化磷酸化系统调节蛋白1（Oxidative Phosphorylation System Regulator 1,OMA1） 1]]></title><description><![CDATA[ 
 <br>OMA1（Oxidative Phosphorylation System Regulator 1）是一种参与调控氧化磷酸化系统（OXPHOS）的蛋白质。氧化磷酸化系统是细胞线粒体内的重要过程，涉及能量生产和ATP合成。OMA1在线粒体中起着重要作用，它可以通过调节线粒体膜蛋白的剪切来调控氧化磷酸化系统的功能。<br>具体来说，OMA1参与线粒体内的蛋白质剪切，这有助于调整线粒体内膜蛋白质的拓扑结构和功能，从而对线粒体的活性和适应性产生影响。OMA1的活性可以受到多种生物学和生理条件的调节，包括线粒体的能量需求、细胞的应激状态等。<br>OMA1的功能对于线粒体的正常运作和能量生产至关重要，因此它在维持细胞内能量平衡和响应不同生理条件下具有重要作用。异常的OMA1功能可能会与线粒体疾病和其他健康问题相关。]]></description><link>术语\氧化磷酸化系统调节蛋白1（oxidative-phosphorylation-system-regulator-1,oma1）-1.html</link><guid isPermaLink="false">术语/氧化磷酸化系统调节蛋白1（Oxidative Phosphorylation System Regulator 1,OMA1） 1.md</guid><pubDate>Thu, 20 Jun 2024 12:20:41 GMT</pubDate></item><item><title><![CDATA[氧化烟酰胺腺嘌呤二核苷酸（NAD+）]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=LmRDCBx42Ew&amp;t=342s" rel="noopener nofollow" class="external-link" href="https://www.youtube.com/watch?v=LmRDCBx42Ew&amp;t=342s" target="_blank">pidyt_12_source_stop (youtube.com)</a><br>
烟酰胺腺嘌呤二核苷酸（英语：nicotinamide adenine dinucleotide，NAD）。简称辅酶Ⅰ，是脱氢酶的辅酶。]]></description><link>术语\氧化烟酰胺腺嘌呤二核苷酸（nad+）.html</link><guid isPermaLink="false">术语/氧化烟酰胺腺嘌呤二核苷酸（NAD+）.md</guid><pubDate>Sun, 15 Sep 2024 08:19:32 GMT</pubDate></item><item><title><![CDATA[遗传混合假说(The genetic admixture hypothesis)]]></title><description><![CDATA[ 
 <br>认为中亚人是欧亚东部和西部人种混合的结果，根据这一假设，人们认为中亚人的遗传成分由东方和西方典型遗传成分的一个子集组成。]]></description><link>术语\遗传混合假说(the-genetic-admixture-hypothesis).html</link><guid isPermaLink="false">术语/遗传混合假说(The genetic admixture hypothesis).md</guid><pubDate>Thu, 27 Jun 2024 03:21:42 GMT</pubDate></item><item><title><![CDATA[遗传力（heritability）]]></title><description><![CDATA[ 
 <br>遗传力（heritability）：是我们理解遗传与环境因素对性状影响的基础，定义为遗传方差占性状方差（总方差）的比值，可以理解为遗传因素对性状的影响，数学上以h2表示。<br>在总表型方差中，遗传方差（VG）所占的比例。一个表型的方差（VP）是遗传方差（VG）和环境方差（VE）之和。<br><br>VP = VG + VE, VP为性状方差，VE为环境方差（也包括测量误差等），而分子的VG为遗传方差。这个公式较为理性地阐述了遗传与环境的关系。<br>
遗传方差VG也可进一步细分为:<br><br>VA是加性遗传效应的方差，VNA是非加性遗传效应的方差 （上位与显性遗传效应）。加性遗传效应是指当两个或多个基因对于某一性状，或是单个基因的不同等位基因对于某一性状的整体作用，等于它们单独作用之和。因为对于绝大多数复杂性状，很少有证据证明有非加性遗传效应存在，所以我们目前聚焦于主要考虑加性遗传效应的狭义遗传力：<br>狭义遗传力 narrow-sense heritability&nbsp;：<br><br><br><br>这是一个非常常见的误解，它源于对遗传力定义的误解。一个遗传力为0.40意味着该性状的所有表型变异中有40%是由于该性状的基因型变异所导致的。<br><br>遗传力是遗传方差占表型方差的百分比，如果这个群体没有变异，那么计算遗传力就为0。但是不能表明不受基因控制。<br><br>遗传力=基因型方差组分/(基因型方差组分+残差方差组分），有可能残差方差很大，比如环境间差异很大，也会导致遗传力偏低。<br><br>遗传力与计算的群体规模、群体类型都有关系，而且随着群体结构的变化，遗传力估计也会改变。所以，要隔一段时间进行遗传评估。<br><br>遗传力量化了表型的遗传信号，并不意味着它能说明该特征的遗传继承方式。无论是一个还是成千上万个基因，无论它们的效应如何，我们都可以得到高或低的遗传力。像眼睛颜色这样的主要-QTL特征，如果被研究的人群只有一种类型的眼睛颜色，遗传力可能很低；如果我们观察到所有类型的颜色，遗传力可能很高。像产量这样的高度定量特征，如果实验进行得好，有适当的复制水平，那么可以有高的遗传力；但如果农艺管理不良，遗传力也可能很低。<br><br>正确的解释：遗传力为0.4，就意味着表型变异中有40%是由基因型变异决定的。]]></description><link>术语\遗传力（heritability）.html</link><guid isPermaLink="false">术语/遗传力（heritability）.md</guid><pubDate>Mon, 26 Aug 2024 01:02:16 GMT</pubDate></item><item><title><![CDATA[遗传漂变（genetic drift）]]></title><description><![CDATA[ 
 <br>遗传漂变（又称基因漂变，英语：genetic drift）是指种群中基因库在代际发生随机改变的一种现象。 由于任何一个个体的生存与繁殖都受到随机因素的影响，繁殖过程可视作一种抽样，子代携带的等位基因即是对亲代抽取的一种样本。 这一过程中的抽样误差使子代中的等位基因频率与亲代并不相等，尤其是在小种群中。]]></description><link>术语\遗传漂变（genetic-drift）.html</link><guid isPermaLink="false">术语/遗传漂变（genetic drift）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:34 GMT</pubDate></item><item><title><![CDATA[异龄联合（heterochronic parabiosis）]]></title><description><![CDATA[ 
 <br>一种将两只不同年龄动物的循环系统连接在一起的外科手术。]]></description><link>术语\异龄联合（heterochronic-parabiosis）.html</link><guid isPermaLink="false">术语/异龄联合（heterochronic parabiosis）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:00 GMT</pubDate></item><item><title><![CDATA[异时性序列（heterochronous sequence）]]></title><description><![CDATA[ 
 ]]></description><link>术语\异时性序列（heterochronous-sequence）.html</link><guid isPermaLink="false">术语/异时性序列（heterochronous sequence）.md</guid><pubDate>Fri, 13 Sep 2024 14:30:17 GMT</pubDate></item><item><title><![CDATA[异质性（Heteroplasmy）]]></title><description><![CDATA[ 
 <br>个体中存在 mtDNA 等位基因的混合物。]]></description><link>术语\异质性（heteroplasmy）.html</link><guid isPermaLink="false">术语/异质性（Heteroplasmy）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:47 GMT</pubDate></item><item><title><![CDATA[因纽特人（Inuit）]]></title><description><![CDATA[ 
 <br>这个词来源于因纽特人的语言，意思是“人们”或“真实的人”，是目前更为尊重的称呼，用于代替“爱斯基摩人”这个旧称，特别是在加拿大和格陵兰地区。]]></description><link>术语\因纽特人（inuit）.html</link><guid isPermaLink="false">术语/因纽特人（Inuit）.md</guid><pubDate>Mon, 07 Oct 2024 02:21:03 GMT</pubDate></item><item><title><![CDATA[导入]]></title><description><![CDATA[ 
 <br><br>对于盲人来说也许不能够直接获取到天气的观察情况，但是他可以通过触摸树叶通过树叶的干燥程度判断天气的状态。于是天气就是一个隐藏的状态，树叶的干燥程度是一个可观察的状态，于是我们就有了两组状态<br>
<br>一个是不可观察、隐藏的状态（天气）
<br>一个是可观察的状态（树叶）
<br>我们希望设计一种算法，在不能够直接观察天气的情况下，通过树叶和马尔可夫假设来预测天气。<br><br>我们可以用一个模型示意图来表示：<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031640981.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
马尔科夫链示意图。其中圆圈代表了不同时间的状态变量xt，方框代表了对应的观测变量yt。箭头代表状态转移，用p（xt|xt-1）表示。从状态到观测可以被称为观测可能性，用p（yt|xt）表示。<br><br>利用隐马尔科夫链可以解决如下三类问题：<br>
<br>滤波 filtering：知道历史观测估计当前状态。

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031651178.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>平滑 smoothing：知道了所有观测值，估计先前某一时刻的状态。

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031654487.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>解码 decoding：已知模型参数和所有观测，求状态联合概率分布的情况。这个通常用Viterbi算法来解决。

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031655380.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br><br>
<br>语音识别

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031657462.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>OCR

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031658023.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>NLP分词
<br>机器翻译
<br>DNA分析
<br><br>马尔科夫链是HMM的基础，前者的状态是可以被观测的。除此之外，马尔科夫链的延伸还有：<br>
<br>马尔科夫随机场（MRF，Money Reserve Fund）：马尔科夫随机场是一种用于描述局部相互作用的随机过程的数学模型，广泛应用于计算机视觉和机器学习中。
<br>马尔科夫决策过程（MDP&nbsp;，Markov Decision Process）：马尔科夫决策过程是一种数学模型，用于描述一个环境在某种策略下从一个状态转移到另一个状态，并从中获得奖励的过程。在人工智能和强化学习中，MDP被用来帮助智能体学习如何在环境中做出最优的决策。
<br>部分可观察的马尔科夫决策过程（POMDP&nbsp;，Partially Observable Markov Decision Process)）：部分可观察的马尔科夫决策过程是马尔科夫决策过程的扩展，用于描述在某些状态不可直接观察的情况下的决策过程。在机器人导航、自然语言处理和其他需要处理不确定性的领域中，POMDP被广泛应用。
<br>马尔科夫链蒙特卡洛方法（MCMC，Markov Chain Monte Carlo）：马尔科夫链蒙特卡洛方法是一种用于从复杂分布中抽样的统计方法。在统计物理、机器学习、贝叶斯统计等领域，MCMC被用来估计复杂模型的参数。
<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031659906.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>马尔科夫链家族<br><br>参考资料：<br>
<br><a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV14R4y1N7iH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=4410d713724fce7981d19f087cc50ee6" rel="noopener nofollow" class="external-link" href="https://www.bilibili.com/video/BV14R4y1N7iH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=4410d713724fce7981d19f087cc50ee6" target="_blank">【HMM隐马尔科夫模型】上帝之手背后的逻辑_哔哩哔哩_bilibili</a>
<br><a data-tooltip-position="top" aria-label="https://zhuanlan.zhihu.com/p/88362664" rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/88362664" target="_blank">隐马尔可夫模型（HMM）详解 - 知乎 (zhihu.com)</a>
]]></description><link>术语\隐马尔科夫模型（hiden-markov-model）.html</link><guid isPermaLink="false">术语/隐马尔科夫模型（Hiden Markov Model）.md</guid><pubDate>Thu, 20 Jun 2024 12:25:14 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031640981.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031640981.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[印度-伊朗语（Indo-Iranian languages）]]></title><description><![CDATA[ 
 <br>又称雅利安语族，印度-雅利安语族。是<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E5%8D%B0%E6%AC%A7%E8%AF%AD%E7%B3%BB" rel="noopener nofollow" class="external-link" title="印欧语系" href="https://zh.wikipedia.org/wiki/%E5%8D%B0%E6%AC%A7%E8%AF%AD%E7%B3%BB" target="_blank">印欧语系</a>今日仍在使用的<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E8%AA%9E%E8%A8%80" rel="noopener nofollow" class="external-link" title="语言" href="https://zh.wikipedia.org/wiki/%E8%AA%9E%E8%A8%80" target="_blank">语言</a>中最东方的一族。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407181449430.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\印度-伊朗语（indo-iranian-languages）.html</link><guid isPermaLink="false">术语/印度-伊朗语（Indo-Iranian languages）.md</guid><pubDate>Thu, 18 Jul 2024 06:50:02 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407181449430.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407181449430.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[印欧语系(Indo-European languages)]]></title><description><![CDATA[ 
 ]]></description><link>术语\印欧语系(indo-european-languages).html</link><guid isPermaLink="false">术语/印欧语系(Indo-European languages).md</guid><pubDate>Thu, 20 Jun 2024 12:27:26 GMT</pubDate></item><item><title><![CDATA[英国生物银行（UK Biobank ,UKB）]]></title><description><![CDATA[ 
 <br>The world’s most important health research database ，世界上最重要的健康研究数据库。<br>英国生物银行是一个大型生物医学数据库和研究资源，包含来自 50 万英国参与者的去识别化遗传、生活方式和健康信息以及生物样本。<br>它是同类中最全面、使用最广泛的数据集，全球范围内从事符合公共利益的健康相关研究的经批准的研究人员都可以访问该数据集，无论他们来自学术、商业、政府还是慈善机构。<br>英国生物银行正在帮助推进现代医学，并更好地了解各种严重和危及生命的疾病的预防、诊断和治疗，包括癌症、心脏病。]]></description><link>术语\英国生物银行（uk-biobank-,ukb）.html</link><guid isPermaLink="false">术语/英国生物银行（UK Biobank ,UKB）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:38 GMT</pubDate></item><item><title><![CDATA[英国十万人基因组计划（100,000 Genomes Project in England）]]></title><description><![CDATA[ 
 <br>Genomics England本身不是一个传统意义上的biobank。它是一个英国政府资助的公司，成立的目的是为了推进100,000 Genomes Project，该项目旨在通过全基因组测序来改善罕见疾病、特定癌症和传染病的诊断和治疗。Genomics England的角色更多地是作为这个项目的管理和运营机构，负责数据收集、存储和分析的整体协调工作。Genomics England的总部位于伦敦。]]></description><link>术语\英国十万人基因组计划（100,000-genomes-project-in-england）.html</link><guid isPermaLink="false">术语/英国十万人基因组计划（100,000 Genomes Project in England）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:38 GMT</pubDate></item><item><title><![CDATA[尤尔模型(Yule model)]]></title><description><![CDATA[ 
 <br>尤尔模型（Yule Model）是一种生物进化和种群动态模型，用于描述物种分化的过程。它最早由英国遗传学家George Udny Yule在20世纪初提出，用于解释物种分化和进化过程中的分枝模式。<br>尤尔模型假设：<br>
<br>物种分化是一个随机事件：每个物种都有一定的概率在一段时间内分化成两个新的物种，形成分枝。
<br>分化发生是独立的：不同的物种分化事件之间是相互独立的。<br>
在尤尔模型中，物种分化形成了一棵分枝树，其中每个分枝点代表一个物种的分化事件，每个分支代表一个物种的存在时期。这个模型通常用于描述单个线ages的分化，而不考虑物种之间的合并（coalescence）。
<br>尤尔模型的应用范围相对较窄，通常用于理论分析或研究物种分化的基本原理。在更复杂的进化和种群动态模型中，可能会考虑更多的因素，如迁移、遗传漂变、选择等。<br>尤尔模型在进化生物学领域具有一定的历史意义，但在实际应用中，由于它的简化假设，往往需要结合更多的现实因素和复杂性来更准确地描述物种分化和演化的过程。]]></description><link>术语\尤尔模型(yule-model).html</link><guid isPermaLink="false">术语/尤尔模型(Yule model).md</guid><pubDate>Thu, 20 Jun 2024 12:22:46 GMT</pubDate></item><item><title><![CDATA[尤皮克人（Yupik）]]></title><description><![CDATA[ 
 <br>“Yupik”意为“真实的人”，他们是生活在阿拉斯加和俄罗斯远东地区的一个土著群体，与因纽特人有密切的文化和语言联系。]]></description><link>术语\尤皮克人（yupik）.html</link><guid isPermaLink="false">术语/尤皮克人（Yupik）.md</guid><pubDate>Mon, 07 Oct 2024 02:21:29 GMT</pubDate></item><item><title><![CDATA[<a data-href="匈奴" href="术语/匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>]]></title><description><![CDATA[ 
 <br><br><a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>起源于阴山以南，河套地区。从此，河套地区就是游牧民族和中原争夺的焦点。<br>
<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>自己没有文字没有历史。<br>
<br>秦始皇，蒙恬把<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>彻底赶出了河套地区。
<br>汉朝，<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>出了个人才，叫做冒顿单于，白登之围。百年战争。
<br>汉武帝北征<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>，卫青，霍去病收复阴山。
<br><a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>内乱分裂成南北2波，北<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>一直大汉为敌。东汉被窦宪彻底打垮。南<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>对汉朝很忠诚，三国期间也没出什么岔子。
<br>直到八王之乱，<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>人刘渊在山西建立<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>汉国，造了反，成了霸。
<br>其实在此之前早就已经高度汉化了。
<br>有了农业，谁还游牧。
<br>之后内乱，被后夏取代，短命的胡夏，之后没什么动静了。
<br>不到百年，就没有<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>了。
<br><br>
<br>现在认为鲜卑的祖先是东胡。
<br>当年<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>崛起，鲜卑被干掉了东北。
<br>东汉后期，北<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>被打跑，草原出现了权力真空，鲜卑控制了整个大漠。
<br>鲜卑在东北，学习打猎射箭，战术高超。
<br>三国后期，鲜卑被曹魏和西晋收拾了几次，于是向中原称臣。
<br>当年西晋和<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>对决，鲜卑一直帮着晋朝打<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>。
<br>直到中原一片大乱，慕容部直接南下，逐鹿中原。
<br>建立了前燕，后燕。
<br>五胡十六国，鲜卑占了5个。
<br>最后统一北方建立起北魏，也是鲜卑。
<br>北魏向南移，进行汉化。
<br><br>
<br>在鲜卑南下的时候，柔然崛起。
<br>柔然的祖先是<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>残部，柔然整天和北魏死磕，花木兰从军就是去打柔然的。
<br>柔然被北魏一顿打，衰败了。
<br><br>
<br>其实认为，<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>也是<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>的后代。
<br>一开始做柔然的小弟，后来柔然衰败，<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>联合中原，要了柔然的命。<br>
找不到“突厥和北魏.png”。<br>
<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>运气不错，这个时候，北朝分裂为北周，北齐，南朝三国对峙。都拉拢<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a><br>
找不到“突厥南朝.png”。<br>
等到杨坚建立了北方政权隋朝，对着<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>一顿锤。后来隋朝灭亡，李世民建立唐朝，又对着<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>一顿。<br>
找不到“突厥唐朝.png”。<br>
于是至此，<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>分裂为东<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>和西<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>，东<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>进入大唐，西<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>被打跑了。
<br><br>刚开始的时候，回鹘帮着大唐打<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>，灭了<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>之后。<br>
安史之乱，帮着大唐平定叛军。<br>
<img alt="回鹘唐朝" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E5%9B%9E%E9%B9%98%E5%94%90%E6%9C%9D.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
但是它自己的治理水平不行，在北方被人灭国，一部分人西迁，一部分人南迁。<br>
柔然，<a data-href="突厥" href="术语\突厥.html" class="internal-link" target="_self" rel="noopener nofollow">突厥</a>，回鹘的影响力不行，比不了鲜卑，也比不了<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>。<br><br>盛唐时期一直跟中原叫板，吐蕃不是游牧民族，只要是农耕。<br>
<img alt="唐朝吐蕃" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E5%94%90%E6%9C%9D%E5%90%90%E8%95%83.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>其实就是鲜卑留下的残部，武则天时期跟唐朝冲突。<br>
<img alt="契丹晋朝" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E5%A5%91%E4%B8%B9%E6%99%8B%E6%9C%9D.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
唐朝五代十国，天下大乱，耶律阿保机建立了辽国，迅速占领了大部分地区。<br>
<img alt="契丹" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E5%A5%91%E4%B8%B9.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
契丹大力汉化，自己取名叫做刘亿，又让皇后都姓萧，致敬萧何。<br>
于是契丹离开了东北去了燕山以南。<br><br>阿骨打，建立女真，战斗力很强，灭了辽国，又灭了北宋。<br>
改名为金国。<br>
迅速汉化。<br>
中华一统，就是金国提出来的。<br>
但是内斗分裂，下一个草原霸主，蒙古就崛起了。<br><br><img alt="Pasted image 20230730081900" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230730081900.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
铁木真能力强，但是中原也没能力制约它。<br>
<img alt="南宋地区" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E5%8D%97%E5%AE%8B%E5%9C%B0%E5%8C%BA.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
蒙古南下，势不可挡，统一了中原，建立了元朝。离开了草原，汉化不彻底，历史没多少年。 ]]></description><link>术语\游牧民族.html</link><guid isPermaLink="false">术语/游牧民族.md</guid><pubDate>Thu, 20 Jun 2024 12:38:30 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E5%9B%9E%E9%B9%98%E5%94%90%E6%9C%9D.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E5%9B%9E%E9%B9%98%E5%94%90%E6%9C%9D.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[有效群体规模 (effective population size，Ne)]]></title><description><![CDATA[ 
 <br>有效群体规模（effective population size）是一个重要的遗传学概念，指的是一个种群在遗传漂变中起作用的等效个体数量。它反映了一个群体中实际参与繁殖的个体数量，而不是总体个体数量。有效群体规模可以用Ne来表示。<br>使用4条单倍型就可以进行MSMC推断有效群体规模。<br>在理想情况下，一个物种的有效群体规模应该是相对稳定的，因为它受到遗传漂变和自然选择的影响。然而，在现实情况下，有效群体规模可能会因多种因素而变化，包括自然灾害、环境变化、人类活动等。<br>有效群体规模对于遗传演化的理解至关重要。较大的有效群体规模意味着有更多的遗传变异可以维持在种群中，减缓了遗传漂变的速率，有助于维持种群的适应性和生存能力。相反，较小的有效群体规模会增加遗传漂变的影响，使得种群更容易受到遗传漂变的影响，可能导致基因多样性的减少和遗传漂变的加速。因此，有效群体规模是评估一个种群遗传健康状况和潜在灭绝风险的重要指标。]]></description><link>术语\有效群体规模-(effective-population-size，ne).html</link><guid isPermaLink="false">术语/有效群体规模 (effective population size，Ne).md</guid><pubDate>Thu, 20 Jun 2024 12:23:01 GMT</pubDate></item><item><title><![CDATA[语言的分类]]></title><description><![CDATA[ 
 <br><br>目前我们的语言由上向下可以分为：<br>
<br>语系
<br>语族
<br>语支：大概可以和民族这个概念对应。
<br>
<br><a data-href="汉藏语系" href="术语\汉藏语系.html" class="internal-link" target="_self" rel="noopener nofollow">汉藏语系</a>：

<br><a data-href="壮侗语（Kra–Dai languages）" href="术语\壮侗语（kra–dai-languages）.html" class="internal-link" target="_self" rel="noopener nofollow">壮侗语（Kra–Dai languages）</a>（存疑）
<br><a data-href="苗瑶语（Hmong–Mien languages）" href="术语\苗瑶语（hmong–mien-languages）.html" class="internal-link" target="_self" rel="noopener nofollow">苗瑶语（Hmong–Mien languages）</a>
<br>汉语族

<br>湘语
<br>粤语
<br>闽语
<br>官话
<br>吴语
<br>晋语
<br>客家话


<br>藏缅语族
<br>白语族


<br><a data-href="印欧语系(Indo-European languages)" href="术语\印欧语系(indo-european-languages).html" class="internal-link" target="_self" rel="noopener nofollow">印欧语系(Indo-European languages)</a>：

<br>拉丁语族
<br>日耳曼语族：

<br>英语
<br>德语
<br>弗拉芒


<br>印度-波斯语族
<br>……


<br><a data-href="南岛语系（Austroasiatic language family）" href="术语\南岛语系（austroasiatic-language-family）.html" class="internal-link" target="_self" rel="noopener nofollow">南岛语系（Austroasiatic language family）</a>
<br><a data-href="阿尔泰语系（Altaic languages）" href="术语\阿尔泰语系（altaic-languages）.html" class="internal-link" target="_self" rel="noopener nofollow">阿尔泰语系（Altaic languages）</a>
<br>……
<br><br>语族则是同一个语系之下的分级。<br><br>通过比较词汇，数字和语法。<br>
我们现在所说的所有方言，都是从中古汉语分化出来的。<br>
<img alt="方言分布图" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%96%B9%E8%A8%80%E5%88%86%E5%B8%83%E5%9B%BE.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
上古汉语和古藏语很像。<br>
反应了无论是汉语的方言还是少数民族的语言，都来自<a data-href="汉藏语系" href="术语\汉藏语系.html" class="internal-link" target="_self" rel="noopener nofollow">汉藏语系</a>，<br>
<img alt="汉藏语族" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%B1%89%E8%97%8F%E8%AF%AD%E6%97%8F.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>汉语和藏语的分化在6000年前，汉语族和苗语的分化只有3000年左右。]]></description><link>术语\语言概览.html</link><guid isPermaLink="false">术语/语言概览.md</guid><pubDate>Thu, 18 Jul 2024 07:56:23 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%96%B9%E8%A8%80%E5%88%86%E5%B8%83%E5%9B%BE.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%96%B9%E8%A8%80%E5%88%86%E5%B8%83%E5%9B%BE.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[元谋人]]></title><description><![CDATA[ 
 <br>教材中认为元谋人距今170万年，但事实上，根据目前的研究，认为其最多就是60万-50万年。]]></description><link>术语\元谋人.html</link><guid isPermaLink="false">术语/元谋人.md</guid><pubDate>Thu, 20 Jun 2024 12:26:07 GMT</pubDate></item><item><title><![CDATA[原猴亚目（Strepsirrhini）]]></title><description><![CDATA[ 
 <br>原猴亚目（学名：Strepsirrhini）是哺乳纲灵长目的一个亚目，通称为原猴，是灵长目的基群，主要分布于非洲的马达加斯加以及东亚和南亚。]]></description><link>术语\原猴亚目（strepsirrhini）.html</link><guid isPermaLink="false">术语/原猴亚目（Strepsirrhini）.md</guid><pubDate>Thu, 20 Jun 2024 12:27:02 GMT</pubDate></item><item><title><![CDATA[原生型民族]]></title><description><![CDATA[ 
 <br>主要是指其民族形成起点是在氏族、部落、部落联盟的基础上，经历了原始社会末期的发展阶段，发展成为民族共同体。]]></description><link>术语\原生型民族.html</link><guid isPermaLink="false">术语/原生型民族.md</guid><pubDate>Wed, 26 Jun 2024 08:08:11 GMT</pubDate></item><item><title><![CDATA[月氏国]]></title><description><![CDATA[ 
 <br>月氏为2700至2000年前的民族名称。始见于先秦史籍，早期以游牧为生，从事玉器贸易，住在今中国的<a data-href="甘肃" href="甘肃" class="internal-link" target="_self" rel="noopener nofollow">甘肃</a>西部和<a data-href="新疆" href="术语\新疆.html" class="internal-link" target="_self" rel="noopener nofollow">新疆</a>东部一带的干草原地区，常与匈奴发生冲突，后来于公元前172年被匈奴攻击，一分为二：西迁至伊犁的，被称为大月氏；居留于中国甘肃及青海的祁连山西北麓一带的，被称为小月氏。这时，月氏开始发展，慢慢具有国家的雏型。由大月氏西迁开始引发的复杂多米诺骨牌效应，在接下来几个世纪中不断向周围辐射，并对亚洲大部分地区的历史产生影响。<br>大月氏取代了原先的塞种土著，后来被乌孙人赶出伊犁河谷，向南辗转经过粟特，在巴克特里亚定居。因此大月氏常被识别为欧洲古典文献中提及的曾攻克希腊-巴克特里亚王国的民族，如Tókharioi（希腊语Τοχάριοι；梵语Tukhāra）和Asii/Asioi。大月氏位处丝绸之路，控制著东西贸易，慢慢变得强大。在公元前1世纪，巴克特里亚最强大的5支大月氏部落之一——贵霜开始征服临近的部落与民族。贵霜帝国在3世纪最为繁盛，其领土北起塔里木盆地吐鲁番，南至印度恒河平原巴连弗邑。贵霜在丝绸之路贸易及佛教传入中国的发展中扮演重要角色。<br>小月氏后来迁徙到青藏高原边缘，一部分人定居在青海并被同化为古羌人，且参与了反抗东汉统治的凉州之乱（西元184–221）。另一支小月氏据说在塔里木盆地东部的昆吾（今哈密）建立了城邦。第四支小月氏可能成为了山西地区羯人的一部分，并参与了319年后赵的建立（有争议）。<br>许多学者认为，月氏人是印欧语系民族。虽然部分学者将他们与塔里木盆地已灭绝文化的文物，如塔里木干尸、记录<a data-href="吐火罗语(Tocharian language)" href="术语\吐火罗语(tocharian-language).html" class="internal-link" target="_self" rel="noopener nofollow">吐火罗语(Tocharian language)</a>的文本等相联系起来，但任何这种联系的证据都仍是间接的]]></description><link>术语\月氏国.html</link><guid isPermaLink="false">术语/月氏国.md</guid><pubDate>Thu, 20 Jun 2024 12:20:09 GMT</pubDate></item><item><title><![CDATA[粘液样脂肪肉瘤（myxoid liposarcoma）]]></title><description><![CDATA[ 
 <br>Myxoid liposarcoma（粘液性脂肪肉瘤）是一种罕见的恶性肿瘤，属于脂肪组织肉瘤的一种亚型。它通常发生在软组织中，尤其是在四肢的肌肉组织中，但也可以发生在其他部位。<br>粘液性脂肪肉瘤的特征之一是在肿瘤内有大量的粘液样物质，这使得肿瘤具有明显的黏性质地。它通常生长较慢，但是有可能侵犯周围的组织和结构。]]></description><link>术语\粘液样脂肪肉瘤（myxoid-liposarcoma）.html</link><guid isPermaLink="false">术语/粘液样脂肪肉瘤（myxoid liposarcoma）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:22 GMT</pubDate></item><item><title><![CDATA[占婆王国（ChămPa Kingdom）]]></title><description><![CDATA[ 
 <br>占婆（越南语：Chăm Pa；占语：Campadesa；天城文：चंपा），又称占波，是占族人于今越南中部地区建立的古国。]]></description><link>术语\占婆王国（chămpa-kingdom）.html</link><guid isPermaLink="false">术语/占婆王国（ChămPa Kingdom）.md</guid><pubDate>Sun, 14 Jul 2024 14:37:16 GMT</pubDate></item><item><title><![CDATA[长程单倍型（long-range haplotypes）]]></title><description><![CDATA[ 
 <br>（特定基因组片段内较长的一系列遗传变异）]]></description><link>术语\长程单倍型（long-range-haplotypes）.html</link><guid isPermaLink="false">术语/长程单倍型（long-range haplotypes）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:39 GMT</pubDate></item><item><title><![CDATA[长读取测序技术]]></title><description><![CDATA[ 
 <br>"长读取测序技术"是指一种DNA测序方法，其中DNA片段的完整长度（通常是几千到几万个碱基对）被测序和记录下来。这种技术与传统的短读取测序技术不同，后者通常只能测序较短的DNA片段，一般在几百个碱基对的范围内。<br>长读取测序技术有许多优点，包括：<br>
<br>解决复杂基因组：它可以帮助研究人员解决复杂基因组的问题，例如存在重复序列或结构变异的基因组。
<br>获得更全面的信息：长读取测序技术可以提供更全面的基因组信息，包括全长基因、结构变异和跨基因区域的信息。
<br>重建长链分子：它可以用于重建长链DNA或RNA分子的全长，有助于研究转录组和RNA分子的功能。
<br>检测等位基因：长读取测序技术可以用于检测等位基因或单核苷酸多态性，这对于遗传学研究和疾病关联研究非常重要。
<br>长读取测序技术包括诸如<a class="internal-link" data-href="Oxford Nanopore Technologies牛津纳米孔测序技术 (ONT).md" href="术语\oxford-nanopore-technologies牛津纳米孔测序技术-(ont).html" target="_self" rel="noopener nofollow">Oxford Nanopore Technologies牛津纳米孔测序技术 (ONT)</a>和<a class="internal-link" data-href="Pacific Biosciences测序技术（SMRT,PacBio）.md" href="术语\pacific-biosciences测序技术（smrt,pacbio）.html" target="_self" rel="noopener nofollow">Pacific Biosciences测序技术（SMRT,PacBio）</a>等方法。这些技术已经在遗传学、基因组学、转录组学和其他领域的研究中发挥了重要作用。]]></description><link>术语\长读取测序技术.html</link><guid isPermaLink="false">术语/长读取测序技术.md</guid><pubDate>Thu, 20 Jun 2024 12:25:09 GMT</pubDate></item><item><title><![CDATA[介绍]]></title><description><![CDATA[ 
 <br>
Method of the Year 2022: long-read sequencing
<br><br>长读测序技术是一种高通量测序技术，它可以对 DNA 或 RNA 进行全面的测序，从而获得更加全面和准确的基因组或转录组信息。长读测序技术的出现，极大地推动了基因组学和转录组学的发展，为生命科学研究提供了更加精确和全面的数据支持。<br>长读测序技术的原理是通过将 DNA 或 RNA 分子拉直，然后通过单分子测序技术进行测序。这种技术可以避免 PCR 扩增等步骤对样本的影响，从而获得更加准确的测序结果。同时，长读测序技术还可以获得更长的读长，从而可以覆盖更多的基因组或转录组区域，提高测序的覆盖度和深度。<br>长读测序技术的应用非常广泛，可以用于基因组学、转录组学、表观遗传学等领域的研究。在基因组学研究中，长读测序技术可以用于解决基因组重复序列的测序难题，从而获得更加准确的基因组信息。在转录组学研究中，长读测序技术可以用于发现新的转录本和剪接变异，从而更加全面地了解基因的表达情况。在表观遗传学研究中，长读测序技术可以用于研究 DNA 甲基化和组蛋白修饰等表观遗传标记的分布情况，从而更加深入地了解表观遗传调控的机制。<br>长读测序技术的发展也带来了一些挑战，比如测序错误率较高、据处理复杂等问题。但是随着技术的不断进步和完善，这些问题也在逐渐得到解决。未来，长读测序技术将继续发挥重要作用，为牛复制命科学研究提供更加精确和全面的数据支持。<br>2022年4月，T2T联盟发表了首个完整的人类基因组。这一成就是通过实验和计算上的一系列创新实现的，而长读长测序正是负责生成T2T数据的主要技术。参与这项工作的加州大学伯克利分校的Nicolas Altemose博士认为：“这些新的长读长DNA测序技术令人难以置信，它们是游戏规则的改变者。”<br>当然，这只是其中的一个例子，说明了长读长测序正帮助科学家从人类及其他物种的基因组、转录组和表观基因组中获得大量见解。考虑到长读长测序的飞跃进步和广泛应用，《Nature Methods》杂志将2022年度方法授予长读长测序。<br>自2005年新一代测序出现以来，技术创新的步伐从未放缓，新型平台不断涌现。不过，早期平台的读长较短，需要依靠强大的算法将重叠序列的短读数连接起来。然而，许多基因组庞大且复杂，这就给完整序列的生成带来了严重的障碍，导致基因组中的许多部分出现缺口。于是，人们着手开发各种长读长测序的策略。<br>目前最广泛使用的两种商业化技术分别是Pacific Biosciences的SMRT测序（HiFi读数的平均读长约为20 kb，准确度&gt;99.9%）和Oxford Nanopore Technologies的纳米孔测序（超长读数的平均读长约为100 kb，R10.4的准确度~99%）。这两种技术的测序原理和数据生成方法不同，因此测序读数的读长、通量和错误率也不同。<br><br>如今，长读长测序技术已应用在多个大型项目中，除了T2T联盟的项目，还有脊椎动物基因组计划（VGP）。在发表了16个脊椎动物物种的高质量基因组后，研究人员总结出，长读长测序技术是保证基因组质量最大化的关键因素。更长的测序读数能最大程度地提高基因组质量，而组装后的结果还能校正先前参考基因组的重大错误。<br>在面对高度重复的基因组区域时，长读长测序具有独特的优势。它们产生的长读数可跨越复杂结构或重复序列，包括短串联重复序列、Alu元件（长约300 bp）、LINE1元件（长约6 kb）、片段重复区域，以及着丝粒和核糖体中的重复片段。长读长测序鉴定结构变异的能力也要优于短读长测序及其他技术。<br>除了基因组，转录组研究也大大受益于长读长测序，因为转录组是动态且组织特异性的。威尔康奈尔医学院的Hagen Tilgner解释说，长读长测序有望揭开转录组隐藏的复杂性，如异构体结构和表达。考虑到异构体多样性在基因调控中的重要作用，这些知识将有助于人们全面了解转录组动态及其潜在机制。<br>同样地，长读长测序也将助力表观基因组学和表观转录组学研究。巴塞罗那科学技术学院的Maria Novoa认为，长读长测序检测DNA和RNA化学修饰的能力将促进这一领域的发展。如今人们通过直接分析纳米孔测序信号就能读取不同类型的修饰，而不再需要繁冗的检测。考虑到还有大量DNA和RNA修饰意义未明，长读长测序为探索其分布和功能打开了一扇大门。<br><br>大多数基因组学项目采用多种技术来解决各种问题，如序列重复、结构变异和缺乏多样化参考基因组等。人类泛基因组参考联盟（HPRC）使用的技术包括PacBio HiFi读数、纳米孔长读数、10x Genomics读数、HiC读数、光学图谱等。浙江大学的张国捷教授认为，准确性是使用多种技术的原因之一。“如果长读长测序更加准确，实验室就不再需要使用多种技术来进行整理和验证，”他说。<br>理想情况是在一个平台上获得所有东西，而不是多个平台。这种一站式的长读长测序世界尚未到来，但目前已经有一些技术配对。Oxford Nanopore Technologies和10x Genomics开发出一种方案，能够利用10x Genomics的平台进行样本制备，然后在PromethION平台上进行测序。因此，这种方案连通了纳米孔测序和10x的单细胞和空间分析。用户不仅能够获得序列数据，还能捕获异构体的转录本丰度以及空间转录组数据。<br>对于实验室来说，成本和准确性都是重要的考虑因素。对于长读长测序平台，许多研究人员都期盼成本能够再降低一点。澳大利亚国立大学的Hardip Patel认为，PacBio的HiFi平台带来了高度准确的长读数，但摊到每个碱基的价格，它比纳米孔测序平台要高。<br>PacBio的首席科学官Jonas Korlach表示，随着时间的推移，长读长测序已经变得产量更高，更容易使用，而成本也在下降。在计算方面，由于处理器和GPU等组件的进步，计算变得更快。“所以我认为长读长测序将不可避免地变得更快速、更便宜且更易用，”他说。<br>当然，准确率也是越高越好。与最初的产品相比，长读长测序平台的准确率已大幅提高。洛克菲勒大学的Erich Jarvis表示：“我们需要更长、更准确的读数，它们在核苷酸准确性上是完美或接近完美的，特别是长的着丝粒区域。”同时，研究人员还希望能够扩大测序规模，最好是每周能够生成数千个完整基因组，以便完成脊椎动物基因组计划的目标。<br>快速组装一个“从端粒到端粒的”基因组也是许多生物学家的梦想。张国捷认为，长读长测序使它成为可能。然而，组装“T2T”基因组仍然很耗时，可能需要手动校正人为引入的结构变异。它的计算成本也很高。他希望长读长测序更快、更长、更便宜。<br>未来，长读长测序有望应用在更多方面，捕获更多信息。新的平台也会不断涌现，Illumina将会在2023年推出它的长读长产品。据介绍，这项技术能够产生30 kb的读数，而DNA起始量为50 ng。]]></description><link>术语\长读长-dna-测序技术.html</link><guid isPermaLink="false">术语/长读长 DNA 测序技术.md</guid><pubDate>Thu, 20 Jun 2024 12:25:11 GMT</pubDate></item><item><title><![CDATA[长距离引物]]></title><description><![CDATA[ 
 <br>长距离引物是一种用于分子生物学和分子遗传学研究的实验技术中的一种工具。它是一种引物（primer）的特殊类型，通常用于聚合酶链反应（PCR）等反应中，以扩增DNA分子的特定区域。与普通引物不同，长距离引物的设计旨在扩增较长的DNA片段。<br>长距离引物通常用于以下情况：<br>
<br>扩增较大的DNA片段：普通引物通常用于扩增数百到数千碱基对的DNA片段，而长距离引物可以扩增更大的DNA片段，通常为数千到数万碱基对。
<br>基因组学研究：在基因组学研究中，科学家需要扩增整个基因组中的特定区域，因此长距离引物是必需的工具。
<br>进化分析：长距离引物可用于比较不同物种的基因组，以进行进化研究和比较基因组学研究。
<br>复杂DNA结构的分析：在某些情况下，DNA中可能存在复杂的结构，如重复序列或难以扩增的区域。长距离引物可以帮助克服这些障碍。
<br>设计长距离引物需要考虑多个因素，包括引物的长度、碱基组成、熔解温度等。这些引物通常由实验室中的分子生物学家或遗传学家精心设计，以确保它们在特定实验中的成功扩增所需的DNA片段。<br>为什么不使用多个（普通引物）短距离引物来代替长距离引物？

<br>多个引物可能导致不稳定的扩增：当使用多个短距离引物时，每个引物都必须在PCR反应中特异性地结合到目标DNA的不同部分。这可能导致引物之间的竞争，不稳定的扩增或不特异的产物。长距离引物可以更容易、更可靠地扩增整个目标区域，因为它们在一个引物的作用下覆盖了整个区域。
<br>避免复杂的实验设计：使用多个引物来扩增较长的DNA片段可能需要更复杂的实验设计，因为您需要确保每个引物都在正确的条件下工作，避免相互之间的相互作用。这增加了实验的复杂性和出错的风险。
<br>成本和时间效率：设计和合成多个短距离引物可能会增加实验的成本，并且可能需要更多的时间。相比之下，使用一个长距离引物更经济，更高效。
<br>难以处理的复杂性：某些DNA区域可能包含复杂的结构，如反复序列、倒置或重复序列，这些结构对于多个引物的设计和PCR扩增来说可能更具挑战性。长距离引物可以更容易地应对这些复杂性。<br>
总之，长距离引物通常更适合扩增较长的DNA片段，因为它们提供了更简单、更可靠和更经济的方法，同时减少了实验中的不稳定性和复杂性。然而，选择引物类型取决于实验的具体需求和目标。

]]></description><link>术语\长距离引物.html</link><guid isPermaLink="false">术语/长距离引物.md</guid><pubDate>Thu, 20 Jun 2024 12:25:12 GMT</pubDate></item><item><title><![CDATA[长末端重复元件（Long Terminal Repeat elements, LTR）]]></title><description><![CDATA[ 
 ]]></description><link>术语\长末端重复元件（long-terminal-repeat-elements,-ltr）.html</link><guid isPermaLink="false">术语/长末端重复元件（Long Terminal Repeat elements, LTR）.md</guid><pubDate>Sun, 03 Nov 2024 03:13:39 GMT</pubDate></item><item><title><![CDATA[长散布核元件(Long Interspersed Nuclear Elements, LINEs)]]></title><description><![CDATA[ 
 <br>属于I类逆转座子（Class 1 Retrotransposons）<br>
<br>特点：LINE序列较长，通常在6000-8000个碱基对之间，能够自主转座。
<br>自主转座：LINE元件编码完成转座过程所需的蛋白质，包括逆转录酶和内切酶。因此，它们能够自行进行“复制-粘贴”式的移动，生成RNA中间体并逆转录为DNA，插入到基因组的新位置。
<br>常见例子：<a data-href="LINE-1 元件（Long Interspersed Nuclear Element-1）" href="术语\line-1-元件（long-interspersed-nuclear-element-1）.html" class="internal-link" target="_self" rel="noopener nofollow">LINE-1 元件（Long Interspersed Nuclear Element-1）</a>是人类基因组中最常见的LINE元件，它仍然具有活跃的转座能力。
<br>功能：LINE不仅可以增加基因组的多样性，还能通过影响邻近基因的表达、参与基因组结构的重排和突变，推动基因组的进化。
]]></description><link>术语\长散布核元件(long-interspersed-nuclear-elements,-lines).html</link><guid isPermaLink="false">术语/长散布核元件(Long Interspersed Nuclear Elements, LINEs).md</guid><pubDate>Mon, 21 Oct 2024 03:36:53 GMT</pubDate></item><item><title><![CDATA[整合应激反应（integrated stress response (ISR)]]></title><description><![CDATA[ 
 <br>整合应激反应（Integrated Stress Response，缩写为ISR）是一种细胞内的生物学机制，用于应对多种环境应激和细胞内异常情况，以维持细胞的平衡和适应性。这种应激反应可以在细胞受到一系列不同的压力和挑战时被激活，如氧气不足、营养不足、突变、病毒感染等。<br>ISR通过调控转录和翻译的方式来产生作用。当细胞感知到应激信号，会引发一系列反应，其中包括抑制蛋白质合成、促进特定蛋白质的合成等，从而帮助细胞适应不利环境。ISR的主要目标是保护细胞免受应激情况造成的损害，并在适应环境压力的同时尽量维持细胞的正常功能。<br>ISR的分子机制涉及多个信号通路和分子调控因子，其中包括一些著名的蛋白质，如eIF2α（eukaryotic initiation factor 2 alpha），ATF4（activating transcription factor 4）等。通过这些分子组件的协同作用，细胞可以在应激情况下进行适应性的调整，以确保生存和适应。<br>总之，整合应激反应是一种细胞内应对环境变化和应激的重要机制，有助于细胞在不利条件下维持生理平衡和功能。<br>当细胞遭受蛋白质合成抑制的应激情况时，整合应激反应（Integrated Stress Response，ISR）会被激活，以帮助细胞适应这种环境挑战。<br>假设细胞中的氧气供应不足，比如在高海拔地区或缺血条件下，这可能会导致氧气感知通路被激活，促使细胞启动ISR。在这种情况下，一个主要的调控因子是eIF2α（eukaryotic initiation factor 2 alpha）。<br>正常情况下，eIF2α在蛋白质合成过程中起着重要作用，它帮助将Met-tRNA（甲硫氨酸转运核糖核酸）送到核糖体，从而启动蛋白质合成。然而，在应激情况下，eIF2α可能被磷酸化，从而降低其功能，这会导致蛋白质合成受到抑制。<br>虽然这会暂时减少细胞中的蛋白质合成，但这种调控实际上有助于细胞应对氧气不足的挑战。因为氧气不足会导致细胞代谢的变化，启动eIF2α的磷酸化有助于减轻蛋白质合成的负担，使细胞能够将有限的能量资源用于更重要的生存需求。同时，eIF2α的磷酸化也可以促进特定的蛋白质合成，如ATF4（activating transcription factor 4），这有助于激活其他适应性基因。<br>这个例子展示了ISR如何通过调整蛋白质合成过程，帮助细胞在不利的环境中适应应激，并在适应过程中保持生存和适应性。]]></description><link>术语\整合应激反应（integrated-stress-response-(isr).html</link><guid isPermaLink="false">术语/整合应激反应（integrated stress response (ISR).md</guid><pubDate>Thu, 20 Jun 2024 12:21:17 GMT</pubDate></item><item><title><![CDATA[正选择（Positive Selection）]]></title><description><![CDATA[ 
 <br>当某个特定基因型或基因变异在个体适应度中具有明显优势时，这种情况被称为正选择。换句话说，正选择会导致有益的遗传变异在种群中逐渐增加，因为这些变异使个体更适应其环境或增加其生存繁殖机会。正选择可以推动有益的遗传变异在种群中迅速传播，从而改变基因频率。]]></description><link>术语\正选择（positive-selection）.html</link><guid isPermaLink="false">术语/正选择（Positive Selection）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:03 GMT</pubDate></item><item><title><![CDATA[直系同源基因（Orthologs）与旁系同源基因（Paralogs）]]></title><description><![CDATA[ 
 <br>
<br>直系同源基因（Orthologs）：

<br>直系同源基因是在不同物种中由于物种分化而保留下来的基因，这些基因在不同物种中的对应基因具有共同的祖先。例如，在图中展示了α链基因在青蛙（frog-a）、人类（human-a）和小鼠（mouse-a）之间是直系同源的。这意味着这些基因都来源于它们共同的祖先，随着时间的推移和物种的演化，这些基因被保留在不同的物种中。


<br>旁系同源基因（Paralogs）：

<br>旁系同源基因是指在同一物种中因基因重复事件产生的基因。这些基因最初来源于同一祖先基因，但由于基因重复，它们在同一基因组内可能演化出不同的功能。在此图中，α链和β链基因在小鼠（mouse-α 和 mouse-β）、人类（human-β）和青蛙（frog-β）中的存在表明它们是旁系同源基因，说明早期的基因复制事件导致了功能的分化。


]]></description><link>术语\直系同源基因（orthologs）与旁系同源基因（paralogs）.html</link><guid isPermaLink="false">术语/直系同源基因（Orthologs）与旁系同源基因（Paralogs）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:14 GMT</pubDate></item><item><title><![CDATA[置信区间]]></title><description><![CDATA[ 
 <br>置信区间（CI）是一种用来估计某个统计参数（如平均值、比例、风险比等）的可信度的范围。它给出了一个范围，我们相信该参数的真实值有一定概率（通常是95%）落在这个范围内。对于 OR 的95% CI 的计算比较复杂，通常需要用到软件或特定的公式进行计算，一个简化的计算方法是：<br><br>这里的ln(OR)是OR的自然对数，±1.96是标准正态分布的95%置信区间对应的z值。计算出的范围再通过指数转换回原来的比率尺度，得到OR的95% CI。<br>意义：CI提供了关于统计估计准确性的信息。如果95% CI不包含1（对OR而言），则认为该结果在统计上显著。CI范围越窄，估计的不确定性越小。<br>总的来说，OR和CI是评估和解释流行病学研究结果非常重要的工具，能够帮助我们理解变量之间的关联性及其统计学意义。]]></description><link>术语\置信区间.html</link><guid isPermaLink="false">术语/置信区间.md</guid><pubDate>Thu, 20 Jun 2024 12:25:29 GMT</pubDate></item><item><title><![CDATA[中国北方]]></title><description><![CDATA[ 
 <br><a data-href="线粒体/树/A" href="线粒体\树\A" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/A</a>,<a data-href="线粒体/树/C" href="线粒体\树\C" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/C</a>,<a data-href="线粒体/树/D" href="线粒体\树\D" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/D</a>,<a data-href="线粒体/树/G" href="线粒体\树\G" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/G</a>,<a data-href="线粒体/树/M8" href="线粒体\树\M8" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/M8</a>,<a data-href="线粒体/树/M9" href="线粒体\树\M9" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/M9</a>,<a data-href="线粒体/树/Z" href="线粒体\树\Z" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/Z</a> 。]]></description><link>术语\中国北方.html</link><guid isPermaLink="false">术语/中国北方.md</guid><pubDate>Thu, 20 Jun 2024 12:18:58 GMT</pubDate></item><item><title><![CDATA[中国南方]]></title><description><![CDATA[ 
 <br>以下单倍群常见： <a data-href="线粒体/树/B" href="线粒体\树\B" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/B</a>,<a data-href="线粒体/树/F" href="线粒体\树\F" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/F</a>,<a data-href="线粒体/树/M7" href="线粒体\树\M7" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/M7</a>,<a data-href="线粒体/树/N" href="线粒体\树\N" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/N</a>,<a data-href="线粒体/树/R" href="线粒体\树\R" class="internal-link" target="_self" rel="noopener nofollow">线粒体/树/R</a>   ]]></description><link>术语\中国南方.html</link><guid isPermaLink="false">术语/中国南方.md</guid><pubDate>Thu, 20 Jun 2024 12:18:59 GMT</pubDate></item><item><title><![CDATA[中国新石器时代文化]]></title><description><![CDATA[ 
 <br><img alt="中国新石器时代文化" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E4%B8%AD%E5%9B%BD%E6%96%B0%E7%9F%B3%E5%99%A8%E6%97%B6%E4%BB%A3%E6%96%87%E5%8C%96.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>
黄河中游：

<br><a data-href="仰韶文化" href="术语\仰韶文化.html" class="internal-link" target="_self" rel="noopener nofollow">仰韶文化</a>：

<br>半坡类型
<br>庙底沟类型
<br>……


<br><a data-href="龙山文化" href="术语\龙山文化.html" class="internal-link" target="_self" rel="noopener nofollow">龙山文化</a>
<br><a data-href="石峁遗址" href="术语\石峁遗址.html" class="internal-link" target="_self" rel="noopener nofollow">石峁遗址</a>


<br>
黄河上游：

<br>大地湾文化
<br><a data-href="齐家文化" href="术语\齐家文化.html" class="internal-link" target="_self" rel="noopener nofollow">齐家文化</a>
<br><a data-href="马家窑文化" href="术语\马家窑文化.html" class="internal-link" target="_self" rel="noopener nofollow">马家窑文化</a>：

<br>马家窑类型
<br>半山类型
<br>马厂类型




<br>
黄河下游：

<br><a data-href="大汶口文化" href="术语\大汶口文化.html" class="internal-link" target="_self" rel="noopener nofollow">大汶口文化</a>
<br><a data-href="龙山文化" href="术语\龙山文化.html" class="internal-link" target="_self" rel="noopener nofollow">龙山文化</a>


<br>
长江中上游：

<br>彭头山文化
<br>大溪文化
<br>……


<br>
长江下游：

<br>河姆渡文化
<br>马桥文化


<br>
东北地区：

<br><a data-href="红山文化" href="术语\红山文化.html" class="internal-link" target="_self" rel="noopener nofollow">红山文化</a>
<br>老虎山文化


<br>
南方地区：

<br>石峡文化
<br>……


<br>在台湾有牛骂头文化、牛稠子文化、圆山文化、店子窝文化、卑南文化与大坌坑文化。马祖列岛有北竿乡亮岛的亮岛人文化、南竿乡福澳遗址及莒光乡炽陇坪遗址。<br>在朝鲜半岛，当地人类文明迎来了栉文土器时代。<br>在日本列岛，当地人类文明进入了绳纹时代。]]></description><link>术语\中国新石器时代文化.html</link><guid isPermaLink="false">术语/中国新石器时代文化.md</guid><pubDate>Thu, 20 Jun 2024 12:26:22 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E4%B8%AD%E5%9B%BD%E6%96%B0%E7%9F%B3%E5%99%A8%E6%97%B6%E4%BB%A3%E6%96%87%E5%8C%96.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E4%B8%AD%E5%9B%BD%E6%96%B0%E7%9F%B3%E5%99%A8%E6%97%B6%E4%BB%A3%E6%96%87%E5%8C%96.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[中国型牙齿]]></title><description><![CDATA[ 
 <br>出现在中国北方，蒙古，韩国，西伯利亚乃至印第安人。<br>
大概在2.5万年-1.8万年，在<a data-href="中国北方" href="术语\中国北方.html" class="internal-link" target="_self" rel="noopener nofollow">中国北方</a>产生。]]></description><link>术语\中国型牙齿.html</link><guid isPermaLink="false">术语/中国型牙齿.md</guid><pubDate>Thu, 20 Jun 2024 12:26:05 GMT</pubDate></item><item><title><![CDATA[中华民族]]></title><description><![CDATA[ 
 <br>
<a rel="noopener nofollow" class="external-link" href="https://www.bilibili.com/video/BV1c14y157oe/?spm_id_from=333.999.0.0&amp;vd_source=4410d713724fce7981d19f087cc50ee6" target="_blank">https://www.bilibili.com/video/BV1c14y157oe/?spm_id_from=333.999.0.0&amp;vd_source=4410d713724fce7981d19f087cc50ee6</a>
<br>现代的土耳其人不过是“突厥化”的希腊人——他们最讨厌的希腊人。<br><img alt="线粒体单倍群迁徙" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%BA%BF%E7%B2%92%E4%BD%93%E5%8D%95%E5%80%8D%E7%BE%A4%E8%BF%81%E5%BE%99.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>如果我们把Y染色体的3个群体：<br>
<br>O1
<br>O2
<br>O3<br>
是否对应了
<br><a data-href="仰韶文化" href="术语\仰韶文化.html" class="internal-link" target="_self" rel="noopener nofollow">仰韶文化</a>
<br><a data-href="红山文化" href="术语\红山文化.html" class="internal-link" target="_self" rel="noopener nofollow">红山文化</a>
<br><a data-href="良渚文化" href="术语\良渚文化.html" class="internal-link" target="_self" rel="noopener nofollow">良渚文化</a><br>
？？
]]></description><link>术语\中华民族.html</link><guid isPermaLink="false">术语/中华民族.md</guid><pubDate>Thu, 20 Jun 2024 12:26:58 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%BA%BF%E7%B2%92%E4%BD%93%E5%8D%95%E5%80%8D%E7%BE%A4%E8%BF%81%E5%BE%99.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E7%BA%BF%E7%B2%92%E4%BD%93%E5%8D%95%E5%80%8D%E7%BE%A4%E8%BF%81%E5%BE%99.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[中华文明本土说]]></title><description><![CDATA[ 
 ]]></description><link>术语\中华文明本土说.html</link><guid isPermaLink="false">术语/中华文明本土说.md</guid><pubDate>Thu, 20 Jun 2024 12:22:20 GMT</pubDate></item><item><title><![CDATA[中亚中心地带假说(Central Asian heartland hypothesis)]]></title><description><![CDATA[ 
 <br>认为中亚是欧洲、美洲和印度遗传多样性的中心地带和储存库，根据这一假设，中亚不仅应该拥有大多数东部和西部欧亚单倍群的创始人类型，而且还应该拥有一些独特的遗传成分。]]></description><link>术语\中亚中心地带假说(central-asian-heartland-hypothesis).html</link><guid isPermaLink="false">术语/中亚中心地带假说(Central Asian heartland hypothesis).md</guid><pubDate>Thu, 27 Jun 2024 03:21:33 GMT</pubDate></item><item><title><![CDATA[中值连接网络（Median-Joining Network，MJN）]]></title><description><![CDATA[ 
 <br>中值连接网络是一种综合了最小生成树和中值网络的算法，适用于高变异的序列数据。该方法通过考虑所有可能的中位点，即未观察到但推测存在的单倍型，来连接观察到的单倍型。MJN 通过生成多个可能的中间节点来处理复杂的进化关系，在多样化序列数据的单倍型推断中非常有效。]]></description><link>术语\中值连接网络（median-joining-network，mjn）.html</link><guid isPermaLink="false">术语/中值连接网络（Median-Joining Network，MJN）.md</guid><pubDate>Sun, 22 Sep 2024 07:35:25 GMT</pubDate></item><item><title><![CDATA[种群分支统计（Population Branch statistic，PBS）]]></title><description><![CDATA[<a class="tag" href="?query=tag:excalidraw" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#excalidraw</a> 
 <br>群体之间频率差异较大的基因是自然选择的潜在目标。<br>
然而，简单的 <a data-href="种群配对Fst值（Population pairwise Fst values）" href="术语\种群配对fst值（population-pairwise-fst-values）.html" class="internal-link" target="_self" rel="noopener nofollow">种群配对Fst值（Population pairwise Fst values）</a>排序并不能揭示哪些种群受到选择的影响。<br>
简单来说，<a data-href="种群配对Fst值（Population pairwise Fst values）" href="术语\种群配对fst值（population-pairwise-fst-values）.html" class="internal-link" target="_self" rel="noopener nofollow">种群配对Fst值（Population pairwise Fst values）</a>只能够提示不同的群体之间有什么差异，而不能够知道谁的差异先发生，谁的差异后发生。<br>
因此，需要通过包括第三个关系较远的人群来估计特定人群等位基因频率的变化。<br>
通过比较三个样本之间的3对<a data-href="种群配对Fst值（Population pairwise Fst values）" href="术语\种群配对fst值（population-pairwise-fst-values）.html" class="internal-link" target="_self" rel="noopener nofollow">种群配对Fst值（Population pairwise Fst values）</a>就可以估计其中某个群体从另一个群体分化以来的频率变化。<br>我们发现这个种群分支统计（PBS）具有强大的能力来检测最近的自然选择。<br>我们对自然选择的推断主要基于一项旨在检测的新统计数据一个群体中等位基因的强烈变化。等位基因频率的成对差异可以使用 <a data-href="种群配对Fst值（Population pairwise Fst values）" href="术语\种群配对fst值（population-pairwise-fst-values）.html" class="internal-link" target="_self" rel="noopener nofollow">种群配对Fst值（Population pairwise Fst values）</a>进行量化。<br>人群的PBS值表示在其历史上（自其与其他两个人群分离以来），在特定位点上等位基因频率的变化量。<br>如图所示，<img alt="Pasted image 20230801192845" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230801192845.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="Pasted image 20230801193055" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230801193055.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
其中T代表population divergence time。<br>计算在<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>和汉族之间的T值，以及<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>、汉族分别与丹麦的T值。<br>
<img alt="Pasted image 20230801194947" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230801194947.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
之所以最后要÷2，是因为从初始人群（Danish）到节点的路算了2次。<br>
<img alt="Pasted image 20230801193037" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230801193037.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<a href=".?query=tag:excalidraw" class="tag" target="_blank" rel="noopener nofollow">#excalidraw</a> <a data-href="PBS" href="PBS" class="internal-link" target="_self" rel="noopener nofollow">PBS</a>]]></description><link>术语\种群分支统计（population-branch-statistic，pbs）.html</link><guid isPermaLink="false">术语/种群分支统计（Population Branch statistic，PBS）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:58 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230801192845.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230801192845.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[种群结构分析（ADMIXTURE）]]></title><description><![CDATA[ 
 <br>ADMIXTURE是用于从多基因座SNP基因型数据集中对单个祖先进行最大似然估计的软件工具。它使用与STRUCTURE相同的统计模型，但是使用快速数值优化算法可以更快地计算估计值。<br>基本假设：<br>在各个亚群内部个体应该符合哈代-温伯格平衡（哈温平衡的概念），那么这个亚群内的基因频率分布应该可通过哈温平衡检验。<br>
基因型位点不能是连锁的。同一个体基因组上的不同SNP可能来源不同亚群体，这是由于杂交混血过程带来的效应。为了达到哈-温平衡，对不同的位点的分类方法是不同的, 软件是对每个位点单独进行分群的<br>
Structure分析，输入的数据就是样本的基因型数据一般来讲是snps，需要注意的是输入的必须是不存在连锁不平衡的独立位点。所以，使用所有的SNP是不对的。如果使用大量存在连锁不平衡的位点，就违背了这个软件最初的假设。需要根据连锁不平衡衰减分析的结果，仅从所有SNP中挑选一部分独立的位点用于structure分析。]]></description><link>术语\种群结构分析（admixture）.html</link><guid isPermaLink="false">术语/种群结构分析（ADMIXTURE）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:59 GMT</pubDate></item><item><title><![CDATA[烛台理论]]></title><description><![CDATA[ 
 <br>认为种族就像是烛台，共用一个底座，但很快就分支了，各自进化成现代人类。]]></description><link>术语\烛台理论.html</link><guid isPermaLink="false">术语/烛台理论.md</guid><pubDate>Thu, 20 Jun 2024 12:23:11 GMT</pubDate></item><item><title><![CDATA[主成分分析（Principal Component Analysis，PCA）]]></title><description><![CDATA[ 
 <br>视频教程：<a data-tooltip-position="top" aria-label="%5Bhttps://www.bilibili.com/video/BV1C7411A7bj/?spm_id_from=333.788.recommend_more_video.0&amp;vd_source=4410d713724fce7981d19f087cc50ee6" rel="noopener nofollow" class="external-link" href="[https:\\www.bilibili.com\video\BV1C7411A7bj?spm_id_from=333.788.recommend_more_video.0&amp;vd_source=4410d713724fce7981d19f087cc50ee6" target="_blank">点这里！！</a><br>主成分分析（Principal Component Analysis，PCA）， 是一种统计方法。通过正交变换将一组可能存在相关性的变量转换为一组线性不相关的变量，转换后的这组变量叫主成分。<br>在实际课题中，为了全面分析问题，往往提出很多与此有关的变量（或因素），因为每个变量都在不同程度上反映这个课题的某些信息。<br>主成分分析首先是由K.皮尔森（Karl Pearson）对非随机变量引入的，而后H.霍特林将此方法推广到随机向量的情形。信息的大小通常用离差平方和或方差来衡量。<br>在用统计分析方法研究多变量的课题时，变量个数太多就会增加课题的复杂性。人们自然希望变量个数较少而得到的信息较多。在很多情形，变量之间是有一定的相关关系的，当两个变量之间有一定相关关系时，可以解释为这两个变量反映此课题的信息有一定的重叠。主成分分析是对于原先提出的所有变量，将重复的变量（关系紧密的变量）删去多余，建立尽可能少的新变量，使得这些新变量是两两不相关的，而且这些新变量在反映课题的信息方面尽可能保持原有的信息。<br>设法将原来变量重新组合成一组新的互相无关的几个综合变量，同时根据实际需要从中可以取出几个较少的综合变量尽可能多地反映原来变量的信息的统计方法叫做主成分分析或称主分量分析，也是数学上用来降维的一种方法。<br><img alt="Pasted image 20230803111541" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004565.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="Pasted image 20230803111546" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004566.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="Pasted image 20230803111549" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004567.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="Pasted image 20230803111619" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004569.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111625" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004570.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111634" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004571.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111640" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004572.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111651" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004573.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111655" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004574.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111658" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004575.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111702" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004576.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111706" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004577.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111711" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004578.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111714" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004579.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111718" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004580.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111721" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004581.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111724" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004582.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111729" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004583.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111734" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004584.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="Pasted image 20230803111745" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004585.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="Pasted image 20230803111750" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004586.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="Pasted image 20230803111755" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004587.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="Pasted image 20230803111801" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004588.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="Pasted image 20230803111807" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004589.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="Pasted image 20230803111811" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004590.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="Pasted image 20230803111816" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004591.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="Pasted image 20230803111820" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004592.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\主成分分析（principal-component-analysis，pca）.html</link><guid isPermaLink="false">术语/主成分分析（Principal Component Analysis，PCA）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:30 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004565.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401291004565.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[转换（transition）]]></title><description><![CDATA[ 
 <br>转换（Transition）：转换是指一种核酸碱基替代，其中一个嘌呤碱基（腺嘌呤 - A或鸟嘌呤 - G）被另一个嘌呤碱基替代，或一个嘧啶碱基（胞嘧啶 - T或鸟嘧啶 - C）被另一个嘧啶碱基替代。例如，A到G或G到A，以及T到C或C到T都被认为是转换。]]></description><link>术语\转换（transition）.html</link><guid isPermaLink="false">术语/转换（transition）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:26 GMT</pubDate></item><item><title><![CDATA[转座酶可访问染色质测定（Assay for Transposase-Accessible Chromatin with high-throughput sequencing，ATAC-seq）]]></title><description><![CDATA[ 
 <br>ATAC-seq（Assay for Transposase-Accessible Chromatin with high-throughput sequencing）是一种用于研究染色质开放性区域的实验方法。通过这种技术，研究人员可以识别出在基因组中染色质结构对转座酶可访问的区域，从而推断出这些区域的基因表达活性和调控机制。<br><br>
<br>细胞制备与核提取：首先需要从样本中提取细胞核，因为染色质结构主要位于细胞核中。
<br>转座酶处理：使用Tn5转座酶处理这些细胞核。Tn5转座酶可以切割开放区域的DNA，并在切割处插入一个测序接头。这意味着转座酶主要靶向染色质的开放区域（即染色质未紧密包装的部分），这些区域通常与基因表达调控区域相关。
<br>PCR扩增和测序：之后，使用PCR技术扩增带有接头的DNA片段，并利用高通量测序技术对这些DNA片段进行测序。
<br>数据分析：最后，通过生物信息学方法分析测序数据，确定哪些基因组区域是开放的，这些开放区域通常富含转录因子结合位点和其他调控元件。
<br><br>
<br>基因表达调控研究：通过识别转录因子和其他调控蛋白的结合位点，帮助解释基因表达的调控机制。
<br>细胞类型鉴定：不同类型的细胞具有不同的染色质开放性模式，ATAC-seq可以用来鉴定和区分不同的细胞类型。
<br>疾病机制研究：比较健康和疾病状态下的染色质开放性差异，有助于揭示疾病的分子机制
]]></description><link>术语\转座酶可访问染色质测定（assay-for-transposase-accessible-chromatin-with-high-throughput-sequencing，atac-seq）.html</link><guid isPermaLink="false">术语/转座酶可访问染色质测定（Assay for Transposase-Accessible Chromatin with high-throughput sequencing，ATAC-seq）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:09 GMT</pubDate></item><item><title><![CDATA[转座元件（Transposable Elements）]]></title><description><![CDATA[ 
 <br>一类能够在基因组内移动的DNA序列。这些元素在许多生物的基因组中占据了大量的比例，能够通过不同的机制（如“剪切粘贴”或“复制粘贴”）在基因组中移动，从而影响基因的表达和基因组的结构。]]></description><link>术语\转座元件（transposable-elements）.html</link><guid isPermaLink="false">术语/转座元件（Transposable Elements）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:25 GMT</pubDate></item><item><title><![CDATA[转座子(Transposable elements, TEs)]]></title><description><![CDATA[ 
 <br>转座子（Transposable elements, TEs）是一类可以在基因组中自主或依赖其他因子进行移动的DNA序列。它们被广泛认为是“基因组寄生虫”，因为它们可以插入到新的基因组位置，打断或改变基因的正常功能。然而，现代基因组学研究揭示了转座子的复杂性，表明它们不仅仅是被动的序列累积者，而是对基因组进化、基因调控和生物体功能具有深远影响的动态元素。<br>根据其转座机制，转座子分为两大类：I类转座子（RNA转座子，retrotransposons）和II类转座子（DNA转座子）。<br>
<br>I类转座子通过RNA中间体进行复制和插入，通常通过逆转录酶将RNA逆转录为DNA并插入基因组新位置
<br>II类转座子则直接通过DNA水平的切割和粘连在基因组中移动。
<br>转座子的活动不仅会导致基因突变、基因组不稳定，还可以通过调控邻近基因的表达、提供顺式调控元件（如增强子、启动子）等方式对基因表达产生积极或消极的影响。此外，转座子可通过在基因组中的扩增与丢失，驱动基因组的大小变化和重排，从而在进化过程中塑造基因组结构。<br>尽管转座子往往与基因组不稳定和疾病如癌症相关，它们也在基因组功能方面发挥了关键作用。转座子序列常被重新利用为基因组调控的工具，成为染色质结构和转录调控网络的重要组成部分，甚至与哺乳动物早期发育和免疫系统的演化密切相关。<br>因此，转座子不仅是基因组中的移动遗传元件，还在基因组演化、调控以及疾病机制中扮演了重要角色。]]></description><link>术语\转座子(transposable-elements,-tes).html</link><guid isPermaLink="false">术语/转座子(Transposable elements, TEs).md</guid><pubDate>Sun, 20 Oct 2024 07:44:25 GMT</pubDate></item><item><title><![CDATA[壮侗语（Kra–Dai languages）]]></title><description><![CDATA[ 
 <br>壮侗语系，又称仡台语系（Kra–Dai languages、仡傣语系）、侗台语系、侗傣语系、侗泰语系（泰、台、傣三字都指泰语支，为了减少泛泰主义的影响而采用了与“泰国”、“泰族”不同的译名）、<br>
是语言学家划分的一个语系，有70种语言，主要分布在东南亚、中国南部，重要语言有壮语、<a data-href="黎语" href="黎语" class="internal-link" target="_self" rel="noopener nofollow">黎语</a>、泰语、老挝语等。这个语系在中国曾被称为“壮侗语族”、“壮傣语族”、“侗台语族”、“侗傣语族”、“台语族”、“黔台语族”等，且长期被认为是汉藏语系的一部分。<br>国际学术界普遍将其视作一个独立的语系。壮侗语系和<a data-href="南岛语系（Austroasiatic language family）" href="术语\南岛语系（austroasiatic-language-family）.html" class="internal-link" target="_self" rel="noopener nofollow">南岛语系（Austroasiatic language family）</a>系有十分密切的关系，有些研究者建议将两者合并构成“澳台语系”，不过该见解在语言学家中仍有争议。<br>一般认为，壮侗语系的发源地在中国浙江、福建、广西、广东一带。<br>从基本词汇的分歧来看，壮侗语系的分化可追溯到距今2500年到3000年前。早期的中国学者一般认为这个语系属于汉藏语系，但当今中国学术界已将壮侗语族将汉藏语系当中分类出来，并将其视为一个独立的语系了。<br>从19世纪至20世纪上半叶，汉藏语言的系属分类经历了从无到有、范围和层次也逐渐清晰的过程。其时，东西方学者的认识基本上差异不算太大，<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E6%9D%8E%E6%96%B9%E6%A1%82" rel="noopener nofollow" class="external-link" title="李方桂" href="https://zh.wikipedia.org/wiki/%E6%9D%8E%E6%96%B9%E6%A1%82" target="_blank">李方桂</a>算是最有代表性的学者。他在1973年的一篇论文中，将汉藏语分为<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E6%BC%A2%E8%AA%9E" rel="noopener nofollow" class="external-link" title="汉语" href="https://zh.wikipedia.org/wiki/%E6%BC%A2%E8%AA%9E" target="_blank">汉语</a>、侗台语族、<a data-href="苗瑶语（Hmong–Mien languages）" href="术语\苗瑶语（hmong–mien-languages）.html" class="internal-link" target="_self" rel="noopener nofollow">苗瑶语（Hmong–Mien languages）</a>与<a data-href="藏缅语（Tibeto-Burman languages）" href="术语\藏缅语（tibeto-burman-languages）.html" class="internal-link" target="_self" rel="noopener nofollow">藏缅语（Tibeto-Burman languages）</a>。<br>不久后，<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9C%8B" rel="noopener nofollow" class="external-link" title="美国" href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9C%8B" target="_blank">美国</a>学者白保罗在另一篇重要的论文里，则提出了另外的见解，认为壮侗语和苗瑶语并不属于<a data-href="汉藏语系" href="术语\汉藏语系.html" class="internal-link" target="_self" rel="noopener nofollow">汉藏语系</a>(<a data-tooltip-position="top" aria-label="https://zh.wikipedia.org/zh-cn/%E5%A3%AF%E4%BE%97%E8%AA%9E%E7%B3%BB#cite_note-8)%E3%80%82%E4%B8%8D%E8%BF%87%EF%BC%8C%E6%9D%8E%E6%96%B9%E6%A1%82%E7%9A%84%E7%9C%8B%E6%B3%95%E4%BC%BC%E4%B9%8E%E6%AF%94%E8%BE%83%E6%9C%89%E6%94%AF%E9%85%8D%E6%80%A7%EF%BC%8C%E4%B9%9F%E6%88%90%E4%BA%86%E5%BE%80%E5%90%8E%E6%95%B0%E5%8D%81%E5%B9%B4%E8%AF%AD%E8%A8%80%E5%AD%A6%E8%80%85%E5%AF%B9%E4%BA%8E%E6%B1%89%E8%97%8F%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%BB%E8%A6%81%E5%88%86%E7%B1%BB%E6%96%B9%E5%BC%8F%E3%80%82" rel="noopener nofollow" class="external-link" href="https://zh.wikipedia.org/zh-cn/%E5%A3%AF%E4%BE%97%E8%AA%9E%E7%B3%BB#cite_note-8)%E3%80%82%E4%B8%8D%E8%BF%87%EF%BC%8C%E6%9D%8E%E6%96%B9%E6%A1%82%E7%9A%84%E7%9C%8B%E6%B3%95%E4%BC%BC%E4%B9%8E%E6%AF%94%E8%BE%83%E6%9C%89%E6%94%AF%E9%85%8D%E6%80%A7%EF%BC%8C%E4%B9%9F%E6%88%90%E4%BA%86%E5%BE%80%E5%90%8E%E6%95%B0%E5%8D%81%E5%B9%B4%E8%AF%AD%E8%A8%80%E5%AD%A6%E8%80%85%E5%AF%B9%E4%BA%8E%E6%B1%89%E8%97%8F%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%BB%E8%A6%81%E5%88%86%E7%B1%BB%E6%96%B9%E5%BC%8F%E3%80%82" target="_blank">https://zh.wikipedia.org/zh-cn/%E5%A3%AF%E4%BE%97%E8%AA%9E%E7%B3%BB#cite_note-8)。不过，李方桂的看法似乎比较有支配性，也成了往后数十年语言学者对于汉藏语言的主要分类方式。</a><br>
<img alt="壮侗语系形成" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E5%A3%AE%E4%BE%97%E8%AF%AD%E7%B3%BB%E5%BD%A2%E6%88%90.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
Matthias Gerner的“东北到西南假说”<br>
Gerner, Matthias. Project Discussion: The Austro-Tai Hypothesis. The 14th International Symposium on Chinese Languages and Linguistics (IsCLL-14) (PDF): 158. 2014 
]]></description><link>术语\壮侗语（kra–dai-languages）.html</link><guid isPermaLink="false">术语/壮侗语（Kra–Dai languages）.md</guid><pubDate>Thu, 18 Jul 2024 01:19:47 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E5%A3%AE%E4%BE%97%E8%AF%AD%E7%B3%BB%E5%BD%A2%E6%88%90.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E5%A3%AE%E4%BE%97%E8%AF%AD%E7%B3%BB%E5%BD%A2%E6%88%90.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[宗日遗址]]></title><description><![CDATA[ 
 <br><img alt="Pasted image 20230803192049" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803192049.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
位于玉树西北部。86km左右。]]></description><link>术语\宗日遗址.html</link><guid isPermaLink="false">术语/宗日遗址.md</guid><pubDate>Thu, 20 Jun 2024 12:20:03 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803192049.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803192049.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[综合单倍型评分（integrated haplotype score, iHS）]]></title><description><![CDATA[ 
 <br>一种常用于分析基因组数据的统计方法，用于检测自然选择在人类种群中对特定基因座的影响。它主要用于识别在过去的进化过程中，特定基因座是否受到了<a data-href="正选择（Positive Selection）" href="术语\正选择（positive-selection）.html" class="internal-link" target="_self" rel="noopener nofollow">正选择（Positive Selection）</a>的作用，即是否存在与适应性特征相关的遗传变异。<br>iHS 方法的核心思想是基于单倍型（一系列相邻的遗传变异）的分布情况。当一个有益的遗传变异开始在某个特定人群中扩散时，它可能会带来一段较长的单倍型，因为这些变异会连锁传递。iHS 通过测量单倍型两端的等位基因频率差异，来检测这些长程单倍型的存在。<br>正常情况下，如果一个遗传变异受到积极自然选择的影响，它可能会导致与之连锁传递的其他变异频率也增加，这就是所谓的 hitchhiking（搭车效应）。iHS 方法通过分析这些 hitchhiked（搭车）变异的累积，来判断某个基因座是否受到了正选择的作用。<br>综合单倍型评分的结果可以帮助研究人员识别人类基因组中可能与适应性特征、环境压力或疾病抵抗力等相关的遗传变异，从而更好地理解人类进化和遗传背景。]]></description><link>术语\综合单倍型评分（integrated-haplotype-score,-ihs）.html</link><guid isPermaLink="false">术语/综合单倍型评分（integrated haplotype score, iHS）.md</guid><pubDate>Thu, 20 Jun 2024 12:25:06 GMT</pubDate></item><item><title><![CDATA[综合注释依赖耗减分值（Combined Annotation Dependent Depletion，CADD）]]></title><description><![CDATA[ 
 <br>解释: CADD 是一种综合性评分系统，用于预测遗传变异的有害性。它通过整合来自多种功能注释的指标，评估某个变异是否对生物功能有潜在的负面影响。CADD 会给每个变异赋予一个分数，分数越高，说明该变异可能对基因功能或个体健康的影响越大。  ]]></description><link>术语\综合注释依赖耗减分值（combined-annotation-dependent-depletion，cadd）.html</link><guid isPermaLink="false">术语/综合注释依赖耗减分值（Combined Annotation Dependent Depletion，CADD）.md</guid><pubDate>Tue, 08 Oct 2024 01:48:13 GMT</pubDate></item><item><title><![CDATA[祖先反卷积（Ancestry deconvolution）]]></title><description><![CDATA[ 
 <br>"Ancestry deconvolution"（祖先解卷积）是一种遗传学分析方法，旨在识别个体的遗传背景中来自不同祖先群体的成分。这个方法可以帮助确定个体的遗传祖先，尤其是在多种不同祖先群体的混合背景中。通过分析个体的基因组数据，可以将不同祖先群体的遗传成分分离出来，从而帮助研究者了解个体的遗传背景及其祖先来源。这在人类遗传学研究和人口遗传学中非常有用，可以帮助研究人员理解不同群体之间的遗传多样性和人口历史。]]></description><link>术语\祖先反卷积（ancestry-deconvolution）.html</link><guid isPermaLink="false">术语/祖先反卷积（Ancestry deconvolution）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:56 GMT</pubDate></item><item><title><![CDATA[祖先分化（ancestral divergence）]]></title><description><![CDATA[ 
 <br>aeDNA可能代表的是已经与现代物种有较大进化距离的古代物种，这些古代物种的DNA与现代的参考序列存在显著差异，现有的方法也难以有效处理这种进化上的分化。]]></description><link>术语\祖先分化（ancestral-divergence）.html</link><guid isPermaLink="false">术语/祖先分化（ancestral divergence）.md</guid><pubDate>Sun, 20 Oct 2024 04:21:14 GMT</pubDate></item><item><title><![CDATA[最大等位基因频率（Maximum Minor Allele Frequency，Max MAF）]]></title><description><![CDATA[ 
 <br>"Max MAF" 通常指的是最大等位基因频率（Maximum Minor Allele Frequency）或最大杂合子频率。在遗传学和基因组学研究中，MAF 是指某一基因座上的次要等位基因（通常是较少见的那个）在研究人群中的频率。"Max MAF" 就是在考虑了所有样本中的不同基因座时，选择具有最高最大次要等位基因频率的那个基因座。]]></description><link>术语\最大等位基因频率（maximum-minor-allele-frequency，max-maf）.html</link><guid isPermaLink="false">术语/最大等位基因频率（Maximum Minor Allele Frequency，Max MAF）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:18 GMT</pubDate></item><item><title><![CDATA[最大简约法（Maximum Parsimony）]]></title><description><![CDATA[ 
 <br>如果一个人要往返于各个城市，例如A,B,C,D,E5个城市。如何保证他走过的路程最短？<br>要解决这个问题需要弄清楚选择最优树（NP-compliete）的问题，其实这属于<a data-href="拓扑学(topology)" href="术语\拓扑学(topology).html" class="internal-link" target="_self" rel="noopener nofollow">拓扑学(topology)</a>的范畴。<br>最大简约法的原理就是一个哲学原理：最简单的解释就是最好的解释，除非你找到反驳的证据。<br>反映在[系统发生树]上面，就是指：最接近真实系统发生的树就是所要求的进化改变最少得那棵树。<br>由于Hennigs Auxilliary Principle的存在，可能让最大简约法的推断出现误差：假设同源比假设出现趋同进化和<a data-href="平行进化（Parallel Evolution）" href="术语\平行进化（parallel-evolution）.html" class="internal-link" target="_self" rel="noopener nofollow">平行进化（Parallel Evolution）</a>需要的进化改变更少，而最大简约法就是选择碱基替换最少的那种可能得系统发育。<br>
<img alt="最大简约法的弊端" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%9C%80%E5%A4%A7%E7%AE%80%E7%BA%A6%E6%B3%95%E7%9A%84%E5%BC%8A%E7%AB%AF.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\最大简约法（maximum-parsimony）.html</link><guid isPermaLink="false">术语/最大简约法（Maximum Parsimony）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:50 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%9C%80%E5%A4%A7%E7%AE%80%E7%BA%A6%E6%B3%95%E7%9A%84%E5%BC%8A%E7%AB%AF.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/%E6%9C%80%E5%A4%A7%E7%AE%80%E7%BA%A6%E6%B3%95%E7%9A%84%E5%BC%8A%E7%AB%AF.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[最低成本树状网络（Minimum-cost Arborescence Network, McAN）]]></title><description><![CDATA[ 
 <br>使用一种广泛应用于多个领域的图论方法来构建单倍型网络。单倍型网络以有向、带根的有向树表示，每个单倍型是具有相同突变的序列簇，边表示单倍型之间的祖先-后代关系。最优有向树通过所有边的最小总距离来确定。<br>McAN 的假设总结为四个标准：<br>
<br>突变谱历史。
<br>较大祖先单倍型。
<br>较早的祖先采样时间。
<br>最小进化（Minimum Evolution，ME）：最优单倍型网络是边的总距离最小的有向树，两个单倍型之间的距离定义为它们之间突变的数量。
<br>McAN 读取所有突变和元数据，将所有带有相同突变的序列聚类为单倍型，并将参考序列（用户选择的最早且高质量的序列）作为根节点。将所有单倍型按突变数量、序列数量降序排列，并根据采样时间升序排列，来确定每个单倍型的最近祖先。<br>
McAN 为每对相邻单倍型计算距离（而不是所有单倍型），并在“突变谱历史”约束下建立候选的祖先-后代关系。最终祖先-后代关系由“最小进化（ME）”标准确定。如果构建的网络不唯一，McAN 使用“较大祖先单倍型”和“较早的祖先采样时间”标准来选择最优网络。McAN 通过并行化算法来处理大规模序列数据，提高了对海量数据集的处理能力。]]></description><link>术语\最低成本树状网络（minimum-cost-arborescence-network,-mcan）.html</link><guid isPermaLink="false">术语/最低成本树状网络（Minimum-cost Arborescence Network, McAN）.md</guid><pubDate>Sun, 22 Sep 2024 10:13:13 GMT</pubDate></item><item><title><![CDATA[最近共同祖先时间(Time to most recent common ancestor，MRCA)]]></title><description><![CDATA[ 
 <br>在生物学和遗传学中，指任何一组生物体最近的共同祖先（MRCA），也是最后的共同祖先（LCA）。这个词在分子人类学上也被用来指代基因组（单倍型）的祖先，即被检测的Y染色体从同一祖先进化了几代人。<br>
<img alt="Pasted image 20230803111142" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803111142.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">遗传距离对应的世代数:对某一基因来说，两个群体有类似的等位基因，且频率相似，彼此的遗传距离较小，说明他们的共同起源比较近。<br><img alt="Pasted image 20230803111151" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803111151.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>在这个例子中，B291和B322在DYS390，DYS19和DYS439上存在差异。计算它们彼此之间变量差值：（DYS390是23-22＝1，DYS19是14-13＝1，DYS439是11-10＝1）。然后把差值加在一起，那Y-DNA12单倍型的差异总数为“3”（1+1+1= 3），得出它们在12-STR标记处的遗传距离是“3”（差三步）。<br>37/37（即37-STR完全匹配），遗传距离“0”（即37-STR无差异）—意味着他们共享一个男性祖先。他们直接的关系是“关系非常紧密”（Very Tightly Related）。<br>36/37（即37-STR差一步），遗传距离“1”—意味着他们共享一个男性祖先。他们的直接关系是“紧密关系”（Tightly Related）。<br>35/37（即37-STR差二步），遗传距离“2”—意味着他们共享一个男性祖先。他们的直接关系是“有关系”（Related）。<br>34/37（即37-STR差三步），遗传距离“3”—意味着他们共享一个男性祖先。他们的直接关系是“有关系”（Related）。<br>33/37（即37-STR差四步），遗传距离“4”—意味着他们共享一个男性祖先，但这种关系应该通过附加的测试来确认。他们的直接关系是“很可能有关系”（Probably Related）。<br>32/37（即37-STR差五步），遗传距离“5”—意味着他们可能在家谱时间范围内有关系，但需要其它证据来证实这种关系。如果是数代人之前共祖，那么这两个人的关系是“可能有关系”。 他们的直接关系是“可能有关系”（Possibly Related）。<br>31/37（即37-STR差六步），遗传距离“6”—意味着他们不太可能在家谱时间范围内有关系，同姓只是巧合。他们的直接关系是“没关系”（Not Related）。<br>30/37（&gt; 6）（即37-STR差七步或&gt; 6以上），遗传距离“7或&gt; 6”—意味这两个人在他们父系谱系时间内是完全无关的。他们共同祖先应该去人类共同的祖居地非洲去找了。<br><img alt="Pasted image 20230803111238" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803111238.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>术语\最近共同祖先时间(time-to-most-recent-common-ancestor，mrca).html</link><guid isPermaLink="false">术语/最近共同祖先时间(Time to most recent common ancestor，MRCA).md</guid><pubDate>Thu, 20 Jun 2024 12:23:00 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803111142.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230803111142.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[最小生成网络（Minimum Spanning Network，MSN）]]></title><description><![CDATA[ 
 <br>最小生成网络是一种基于图论的算法，用于从多重序列数据中构建单倍型网络。它的目标是通过连接单倍型之间的最短路径，生成一个具有最小权重和不包含环路的网络。该算法通过最小化序列差异来构建单倍型之间的连接，使其适用于分析遗传变异较少的样本。]]></description><link>术语\最小生成网络（minimum-spanning-network，msn）.html</link><guid isPermaLink="false">术语/最小生成网络（Minimum Spanning Network，MSN）.md</guid><pubDate>Sun, 22 Sep 2024 07:34:44 GMT</pubDate></item><item><title><![CDATA[All of Us（AOU）]]></title><description><![CDATA[ 
 ]]></description><link>术语\all-of-us（aou）.html</link><guid isPermaLink="false">术语/All of Us（AOU）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:37 GMT</pubDate></item><item><title><![CDATA[Alu元件的特点：]]></title><description><![CDATA[ 
 <br>Alu元件是属于<a data-href="短散布核元件(Short Interspersed Nuclear Elements, SINEs)" href="术语\短散布核元件(short-interspersed-nuclear-elements,-sines).html" class="internal-link" target="_self" rel="noopener nofollow">短散布核元件(Short Interspersed Nuclear Elements, SINEs)</a> 的一类非自主转座子，广泛存在于人类基因组中。它得名于Alu I限制性内切酶，因为这个酶识别Alu元件中的特定序列。<br><br>
<br>长度：Alu元件通常约有300个碱基对长。
<br>结构：Alu元件由两个类似的重复序列构成，并在中间区域含有A+T丰富的片段。
<br>非自主性：Alu元件无法独立移动，它依赖于LINE-1逆转座子提供的逆转录酶和内切酶进行转座（“复制-粘贴”机制）。
<br>数量：Alu元件在人类基因组中非常丰富，估计有超过100万拷贝，占人类基因组总长度的约10%。
<br><br>Alu元件虽然起初被认为是基因组中的“垃圾DNA”，但研究发现它对基因组进化和功能有重要影响：<br>
<br>调控基因表达：Alu元件可以作为启动子、增强子，或影响RNA的剪接与稳定性。
<br>基因组重排：Alu元件的扩增和插入可能导致基因组的重排、突变，甚至与某些遗传疾病相关。
<br><br>Alu元件的扩增在灵长类动物的进化过程中扮演了重要角色。特别是在人类中，Alu元件的扩增发生得非常迅速，几乎所有人类个体之间都会存在一些独特的Alu插入位点差异。有趣的是，Alu元件扩增的速度与灵长类的进化相吻合，且这些元件常常被认为是推动灵长类基因组进化的一个重要因素。例如，人类与黑猩猩基因组的差异部分可以归因于Alu元件的不同插入位点。<br>这个现象揭示了Alu元件不仅仅是基因组中的“寄生者”，它们还是基因组进化的重要推动力之一。]]></description><link>术语\alu元件.html</link><guid isPermaLink="false">术语/Alu元件.md</guid><pubDate>Mon, 21 Oct 2024 03:33:44 GMT</pubDate></item><item><title><![CDATA[BSX-BAK巨孔]]></title><description><![CDATA[ 
 ]]></description><link>术语\bsx-bak巨孔.html</link><guid isPermaLink="false">术语/BSX-BAK巨孔.md</guid><pubDate>Fri, 21 Jun 2024 07:17:51 GMT</pubDate></item><item><title><![CDATA[CpG甲基化]]></title><description><![CDATA[ 
 <br>CpG甲基化是一种生物学中的关键分子过程，它涉及到DNA分子的化学修饰。在CpG甲基化中，甲基基团（CH3）被附加到DNA分子中的胞嘧啶（C）基因位置旁边的鸟嘌呤（G）基因位置。这种化学修饰可以影响基因的功能和表达。]]></description><link>术语\cpg甲基化.html</link><guid isPermaLink="false">术语/CpG甲基化.md</guid><pubDate>Thu, 20 Jun 2024 12:22:17 GMT</pubDate></item><item><title><![CDATA[cross-population extended haplotype homozygosity (XP-EHH)]]></title><description><![CDATA[ 
 ]]></description><link>术语\cross-population-extended-haplotype-homozygosity-(xp-ehh).html</link><guid isPermaLink="false">术语/cross-population extended haplotype homozygosity (XP-EHH).md</guid><pubDate>Thu, 20 Jun 2024 12:23:43 GMT</pubDate></item><item><title><![CDATA[D 统计量检验（Patterson’s D statistic）]]></title><description><![CDATA[ 
 <br>目前最广为使用的渗入检测方法之一。D 统计量需要四个群体，这里称之为 P1、P2、P3 和 O。其中，P1 和 P2 为姐妹群，O 为外群。<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-ca591ad5a0e4655ac2a99c8c2023d1fc_720w.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
对于这四个群体中存在的双等位 SNP，以外群O 中的类型作为祖先型 A（即 ancestral allele），另一种则为衍生型 B（即 derived allele）。在已知的系统发育关系的情况下，基因组上绝大多数 SNP 在这四个群体中的排布模式应该为 BBAA，即 P1 和 P2 同为衍生型等位基因，而 P3 和 O 同为祖先型的等位基因。<br>
BBAA 的模式是符合系统发育关系的。<br>
<br>如果 P2 和 P3 之间发生了基因流，那么则会产生大量 ABBA 模式的位点，即 P2 和 P3 共享了同一种等位基因。
<br>反之，如果 P1 和 P3 之间发生了渗入，则会产生大量 BABA 模式的位点。
<br>但实际上，由于 P1、P2 和 P3 的共同祖先在某些位点上可能是存在多态性的，这种多态性可能会随机分配给这三个群体，从而导致 ABBA 或者 BABA 的情况。这种现象通常被称为<a data-href="不完全谱系分选（incomplete lineage sorting，ILS）" href="术语\不完全谱系分选（incomplete-lineage-sorting，ils）.html" class="internal-link" target="_self" rel="noopener nofollow">不完全谱系分选（incomplete lineage sorting，ILS）</a>。<br>因此单独去检测ABBA 或者 BABA 模式的位点数量无法判断它们是由于 ILS 还是渗入导致的。但由于ILS 是不受选择的，所以它产生的 ABBA 和 BABA 模式的位点数量应该是大致相当的。所以我们可以通过比较 ABBA 和 BABA 的数量是否有显著的差异来判断是单纯的 ILS还是发生了渗入。<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230914174129.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
D 统计为符合 ABBA 模式的位点数量与 BABA 模式的位点数量之差，除以 ABBA 模式和 BABA 模式位点数量之和。<br>
<br>D统计量为正时，ABBA 数量更多，可能是 P2 和 P3 之间发生了渗入。
<br>D统计量为负时，BABA 数量更多，可能是 P1 和 P3 之间发生了渗入。
<br>由于 D 统计量的计算是基于对 ABBA 和 BABA 模式位点的计数，因此它也被称之为 ABBA-BABA test。
]]></description><link>术语\d-统计量检验（patterson’s-d-statistic）.html</link><guid isPermaLink="false">术语/D 统计量检验（Patterson’s D statistic）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:51 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-ca591ad5a0e4655ac2a99c8c2023d1fc_720w.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-ca591ad5a0e4655ac2a99c8c2023d1fc_720w.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[与<a data-href="线粒体靶向的转录激活因子样效应核酸酶 (mitochondrial-targeted transcription activator-like effector nucleases, mitoTALEN)" href="术语/线粒体靶向的转录激活因子样效应核酸酶-(mitochondrial-targeted-transcription-activator-like-effector-nucleases,-mitotalen).html" class="internal-link" target="_self" rel="noopener nofollow">线粒体靶向的转录激活因子样效应核酸酶 (mitochondrial-targeted transcription activator-like effector nucleases, mitoTALEN)</a> 的比较]]></title><description><![CDATA[ 
 <br>DddA衍生的胞嘧啶碱基编辑器（DdCBEs）是一种新型的基因编辑工具，利用了细菌毒素蛋白DddA（DddA是从细菌Burkholderia cenocepacia中发现的）。DdCBEs可以实现对线粒体DNA（mtDNA）的特定位点的编辑，而不需要进行DNA双链断裂，这是传统CRISPR-Cas9系统的一个重要区别。<br>DddA是双链DNA去氨酰胺酶（deaminase），能够将DNA中的胞嘧啶（C）去氨基化，转变为尿嘧啶（U）。这一转化可以在基因组中引发C→T的碱基替换（在DNA复制中，尿嘧啶通常被看作胸腺嘧啶（T））。DdCBEs被广泛用于线粒体DNA研究，因为传统的CRISPR-Cas9无法有效地编辑mtDNA。DdCBEs可以用来模拟人类疾病中的线粒体突变，研究其病理机制，并探索可能的治疗途径。<br><br>mitoTALEN（线粒体靶向的转录激活因子样效应核酸酶）：<br>
<br>mitoTALEN通过靶向线粒体DNA上的特定位点，产生双链断裂（DSBs）。这种断裂能够触发线粒体的DNA修复机制，从而去除或替换损伤的或突变的DNA片段。
<br>mitoTALEN通常用于删除突变的mtDNA序列，不添加新的碱基或直接改变序列中的碱基配对。<br>
DdCBEs（线粒体DddA衍生的胞嘧啶碱基编辑器）：
<br>DdCBEs是一种碱基编辑工具，基于一种被称为DddA的细菌酶，通过直接修改单个碱基来实现编辑。DdCBEs不引发双链断裂，而是将目标碱基（通常是胞嘧啶C）转变为尿嘧啶（U），从而导致C-G碱基对转变为T-A配对。
<br>因为不引入双链断裂，DdCBEs能够实现无损伤的点突变修复，因此适合需要精确替换特定碱基的编辑需求。
<br>mitoTALEN更适合于删除或切断线粒体DNA的突变片段，利用的是“切割”方式。
<br>DdCBEs更适合于直接编辑碱基，通过改变单个碱基实现修复，无需切断DNA链。
]]></description><link>术语\ddda衍生的胞嘧啶碱基编辑工具（ddda-derived-cytosine-base-editors，ddcbes）.html</link><guid isPermaLink="false">术语/DddA衍生的胞嘧啶碱基编辑工具（DddA derived cytosine base editors，DdCBEs）.md</guid><pubDate>Sat, 02 Nov 2024 07:25:35 GMT</pubDate></item><item><title><![CDATA[DNA翻片（DNA flap）]]></title><description><![CDATA[ 
 <br>是指一个暂时存在的单链DNA片段。这通常发生在DNA复制的<a data-href="滞后链" href="滞后链" class="internal-link" target="_self" rel="noopener nofollow">滞后链</a>上，因为滞后链是通过不连续的方式合成的，形成一系列的小段，称为Okazaki片段。每个Okazaki片段的合成开始于一小段RNA引物，DNA聚合酶然后在RNA引物上合成DNA。<br>当一个新的<a class="internal-link" data-href="冈崎片段（Okazaki frageme）.md" href="术语\冈崎片段（okazaki-frageme）.html" target="_self" rel="noopener nofollow">冈崎片段（Okazaki frageme）</a>开始合成时，上一个片段的RNA引物需要被移除并替换为DNA。在这个过程中，RNA引物被DNA酶移除，导致一个单链的DNA瓣暂时形成。随后，DNA连接酶活动将这些Okazaki片段连接起来，形成一个连续的DNA链，这时DNA瓣就被移除了。<br>因此，"瞬时DNA‘瓣’"是DNA复制过程中的一个短暂中间体，对于确保DNA准确复制是必要的。在线粒体DNA复制中，类似的过程也会发生，有助于线粒体DNA的准确和高效复制。]]></description><link>术语\dna翻片（dna-flap）.html</link><guid isPermaLink="false">术语/DNA翻片（DNA flap）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:43 GMT</pubDate></item><item><title><![CDATA[DNA聚合酶]]></title><description><![CDATA[ 
 <br>
<a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=TNKWgcFPHqw" rel="noopener nofollow" class="external-link" href="https://www.youtube.com/watch?v=TNKWgcFPHqw" target="_blank">DNA replication - 3D (youtube.com)</a>
<br>DNA 聚合酶（DNA Polymerase，EC 编号2.7.7.7）是一种参与 DNA 复制的酶。它主要是以模板的形式，催化脱氧核糖核苷酸的聚合。聚合后的分子将会组成模板链并再进一步参与配对。DNA 聚合酶以脱氧核苷酸三磷酸（dATP、dCTP、dGTP、或 dTTP，四者统称 dNTPs）为底物，沿模板的3'→5'方向，将对应的脱氧核苷酸连接到原有 DNA 链的3'端，使新生链沿5'→3'方向延长。新链与原有的模板链序列互补，亦与模板链的原配对链序列一致。已知的所有 DNA 聚合酶均以5'→3'方向合成 DNA，且均不能“从头”（de novo）合成 DNA，而只能将脱氧核苷酸加到已有的 RNA 或 DNA 的3'端羟基上。因此，DNA 聚合酶除了需要模板做为序列指导，也必需引物来起始合成。合成引物的酶叫做引发酶。<br>
不同物种中，不同功能的聚合酶有不同名称。<br>
Pol γ：复制线粒体 DNA。]]></description><link>术语\dna聚合酶.html</link><guid isPermaLink="false">术语/DNA聚合酶.md</guid><pubDate>Tue, 13 Aug 2024 07:09:03 GMT</pubDate></item><item><title><![CDATA[DNA双链断裂(DSB)]]></title><description><![CDATA[ 
 ]]></description><link>术语\dna双链断裂(dsb).html</link><guid isPermaLink="false">术语/DNA双链断裂(DSB).md</guid><pubDate>Thu, 20 Jun 2024 12:22:17 GMT</pubDate></item><item><title><![CDATA[Epstein-Barr病毒转化]]></title><description><![CDATA[ 
 <br>Epstein-Barr病毒（Epstein-Barr virus，EBV）转化是指将人类B淋巴细胞感染并将它们转化成永生化的细胞系，通常称为"淋巴细胞转化"或"淋巴细胞感染"。这个过程是通过一系列复杂的分子和细胞生物学事件实现的，具体步骤如下：<br>
<br>感染：EBV首先感染人类的B淋巴细胞。感染通常是通过病毒颗粒上的病毒膜蛋白与B细胞上的受体结合来实现的。一旦病毒进入B细胞，它释放出病毒基因组。
<br>病毒基因组的表达：病毒基因组开始在被感染的B细胞中表达。这些基因编码多种蛋白质，包括细胞黏附蛋白、病毒酶和生长调控蛋白。
<br>细胞生长控制：EBV病毒开始改变被感染的B细胞的生长调控机制，使其进入非常快速的细胞分裂状态。这一过程类似于肿瘤细胞的生长，因此被感染的B细胞开始不断分裂。
<br>永生化：EBV还会改变B细胞的生命周期，使其变成"永生化"细胞系，即这些细胞可以在实验室条件下持续繁殖和生长，而不会像正常细胞一样有有限的生命周期。这是因为EBV在细胞内继续复制，使细胞不断分裂，形成细胞系。
<br>免疫逃逸：EBV病毒也会采取一些机制来逃避宿主免疫系统的攻击，这有助于它长期存活在感染的细胞中。
<br>总之，EBV的转化过程涉及一系列复杂的分子和细胞生物学事件，包括感染、基因表达、生长控制和永生化，最终导致B细胞形成永生化的细胞系。这些细胞系在科学研究中非常有用，因为它们可以提供大量的细胞材料用于研究。]]></description><link>术语\epstein-barr病毒转化.html</link><guid isPermaLink="false">术语/Epstein-Barr病毒转化.md</guid><pubDate>Thu, 20 Jun 2024 12:23:54 GMT</pubDate></item><item><title><![CDATA[f-3统计]]></title><description><![CDATA[ 
 <br><img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-d72768acf17d8a390787b948ca617a80_720w.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>F3统计通常表示为f3(A, B; C)，其中A和B是目标群体，C是参考群体。它用来衡量目标群体A和B之间的遗传亲缘关系，与参考群体C的关系。这个统计的计算公式通常如下：<br>f3(A, B; C) = (c - a)(c - b)<br>其中，a表示目标群体A与参考群体C的遗传相关性，b表示目标群体B与参考群体C的遗传相关性，c表示目标群体A与目标群体B的遗传相关性。<br>这个统计值的正负和大小可以提供关于目标群体A、B和C之间的遗传关系的信息。如果f3(A, B; C)为正数，表示A和B在遗传上更接近，如果为负数，表示A和B在遗传上更远。<br>
<br>如果F3算出来的值是一个负值的话，C中的一些基因来自于A和B的混合。
<br>值得注意的是，上面反过来不成立，F3大于0，并不认为C中不含有A和B的混合。
<br>请注意，应该符合统计学检验标准：<a data-href="Z值" href="术语\z值.html" class="internal-link" target="_self" rel="noopener nofollow">Z值</a>。]]></description><link>术语\f-3统计.html</link><guid isPermaLink="false">术语/f-3统计.md</guid><pubDate>Thu, 20 Jun 2024 12:23:55 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-d72768acf17d8a390787b948ca617a80_720w.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-d72768acf17d8a390787b948ca617a80_720w.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[f-4统计(没看懂）]]></title><description><![CDATA[ 
 <br>F4统计通常表示为f4(A, B; C, D)，其中A和B是目标群体，C和D是参考群体。这个统计用来衡量目标群体A和B之间的遗传亲缘关系，与参考群体C和D的关系。类似于F3统计，F4统计也可以用类似的方式进行简化表示：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-1ce44f2e68b3aa12976672abeeb40b1d_720w.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
f4(A, B; C, D) = (c - a)(d - b)<br>其中，<br>
<br>a表示目标群体A与参考群体C的遗传相关性
<br>b表示目标群体B与参考群体C的遗传相关性
<br>c表示目标群体A与参考群体D的遗传相关性
<br>d表示目标群体B与参考群体D的遗传相关性
<br>这个统计值的正负和大小可以提供关于目标群体A、B和参考群体C、D之间的遗传关系的信息。<br>
正值:表示A和B在遗传上更接近于C和D之间的亲缘关系，负值则表示相反情况。]]></description><link>术语\f-4统计(没看懂）.html</link><guid isPermaLink="false">术语/f-4统计(没看懂）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:57 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-1ce44f2e68b3aa12976672abeeb40b1d_720w.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/v2-1ce44f2e68b3aa12976672abeeb40b1d_720w.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[f-统计（f-statistics）]]></title><description><![CDATA[ 
 <br>f-statistics是遗传学中用于衡量不同种群之间的亲缘关系的统计量。通常基于遗传变异的频率差异来计算，其中常用的f-statistics包括<a data-href="种群配对Fst值（Population pairwise Fst values）" href="术语\种群配对fst值（population-pairwise-fst-values）.html" class="internal-link" target="_self" rel="noopener nofollow">种群配对Fst值（Population pairwise Fst values）</a>等。这些统计量可以提供有关种群遗传结构和历史演化的重要信息。<br>F统计包括：<br>
<br><a data-href="f-3统计" href="术语\f-3统计.html" class="internal-link" target="_self" rel="noopener nofollow">f-3统计</a>
<br><a data-href="f-4统计(没看懂）" href="术语\f-4统计(没看懂）.html" class="internal-link" target="_self" rel="noopener nofollow">f-4统计(没看懂）</a>
<br><a data-href="D 统计量检验（Patterson’s D statistic）" href="术语\d-统计量检验（patterson’s-d-statistic）.html" class="internal-link" target="_self" rel="noopener nofollow">D 统计量检验（Patterson’s D statistic）</a>
<br>]]></description><link>术语\f-统计（f-statistics）.html</link><guid isPermaLink="false">术语/f-统计（f-statistics）.md</guid><pubDate>Thu, 20 Jun 2024 12:23:58 GMT</pubDate></item><item><title><![CDATA[Fu’s FS]]></title><description><![CDATA[ 
 <br>Fu’s FS是由Yun-Xin Fu提出的，用于检测由种群历史事件（如人口扩张）引起的偏离中性模型的统计量。<br>
计算原理：Fu’s FS基于观察到的单倍型频率分布和期望的单倍型频率分布之间的差异。如果实际数据中的单倍型数目比中性理论预测的多，FS值会变负。<br>
<br>解释：

<br>FS值为负：表示可能存在人口扩张或正向选择（即选择支持具有适应性优势的变异）。
<br>FS值为正：表示可能存在人口减少或平衡选择（即维持多态性）。


]]></description><link>术语\fu’s-fs.html</link><guid isPermaLink="false">术语/Fu’s FS.md</guid><pubDate>Mon, 26 Aug 2024 03:23:43 GMT</pubDate></item><item><title><![CDATA[Illumina测序]]></title><description><![CDATA[ 
 <br>Illumina是最常用的NGS技术之一。它基于桥式扩增技术，通过将DNA或RNA片段固定在测序流程芯片上，使用碱基逐渐加入的方法进行测序，产生短序列读段。]]></description><link>术语\illumina测序.html</link><guid isPermaLink="false">术语/Illumina测序.md</guid><pubDate>Thu, 20 Jun 2024 12:23:59 GMT</pubDate></item><item><title><![CDATA[integrated haplotype score (iHS)]]></title><description><![CDATA[ 
 ]]></description><link>术语\integrated-haplotype-score-(ihs).html</link><guid isPermaLink="false">术语/integrated haplotype score (iHS).md</guid><pubDate>Thu, 20 Jun 2024 12:24:00 GMT</pubDate></item><item><title><![CDATA[k-mer]]></title><description><![CDATA[ 
 <br>k-mer 是一种在生物信息学中广泛使用的概念，指的是 DNA、RNA 或蛋白质序列中长度为 k 的连续字串。<br>k-mer 可以是任意长度 k 的序列，其中 k 是一个正整数。例如，如果 k=3，那么 DNA 序列"ATGCTA"中的3-mer 包括"ATG"、"TGC"、"GCT"和"CTA"。<br>k-mer的应用：<br>
<br>序列组装： k-mer是许多基因组和转录组组装工具的基础。通过将长的DNA或RNA序列分解成多个k-mer，并重建它们的重叠部分，可以重建原始的长序列。这种方法尤其适用于从下一代测序技术获得的短读取。<br>

<br>基因组注释和比对： k-mer方法可以用于快速识别两个或多个基因组之间的相似区域，有助于基因的注释和功能预测。<br>

<br>变异检测和基因分型： 通过比较不同样本的k-mer频率，可以识别出变异和多态性位点。这对于疾病关联研究和人口遗传学研究特别有用。<br>

<br>物种鉴定和微生物群落分析： 在环境样本或微生物群落研究中，通过分析k-mer的组成和丰度，可以估计物种多样性和物种丰度，无需事先知道参考基因组。<br>

<br>NUMTs检测： 正如之前提到的，基于k-mer的方法可以用于识别NUMTs，即线粒体DNA序列片段在核基因组中的插入。这是通过比较线粒体DNA和核DNA中k-mer的分布差异来实现的。
]]></description><link>术语\k-mer.html</link><guid isPermaLink="false">术语/k-mer.md</guid><pubDate>Thu, 20 Jun 2024 12:25:30 GMT</pubDate></item><item><title><![CDATA[Leigh综合征]]></title><description><![CDATA[ 
 <br>亚急性坏死性脑病；2月～6岁起病，经数周或数月死亡。开始轻度肌张力降低，短促的痉挛，中度腱反射迟钝。症状进行性加重，最终发展成木僵，嗜睡，肌阵挛性痉挛或严重的肌张力降低，反射消失，呼吸困难，不能吞咽，全身无力、衰竭。上睑下垂，眼肌麻痹，视力减退或消失，视野有中心暗点，瞳孔散大或缩小。<br>
血乳酸和丙酮升高。脑脊液蛋白增高，脑电图见弥漫性慢波和发作性波。<br>]]></description><link>术语\leigh综合征.html</link><guid isPermaLink="false">术语/Leigh综合征.md</guid><pubDate>Thu, 20 Jun 2024 12:20:44 GMT</pubDate></item><item><title><![CDATA[<strong>关于 LINE-1 的事实：</strong>]]></title><description><![CDATA[ 
 <br>LINE-1，简称 L1，是一类属于<a data-href="长散布核元件(Long Interspersed Nuclear Elements, LINEs)" href="术语\长散布核元件(long-interspersed-nuclear-elements,-lines).html" class="internal-link" target="_self" rel="noopener nofollow">长散布核元件(Long Interspersed Nuclear Elements, LINEs)</a> 的自主转座子。它们是人类基因组中最常见的移动遗传元件之一，约占人类基因组的 17%，即超过100万份拷贝。L1 元件通过“复制-粘贴”的逆转录机制自我复制并插入到基因组的不同位置，能够影响基因组的结构和功能。<br><br>LINE-1 元件可能影响大脑的发育和功能。<br>科学家发现，LINE-1 转座子在神经元中可以保持活跃，通过在发育中的大脑中不断插入新的基因组位置，L1 可能会增加神经元之间的基因多样性。这种随机插入的新DNA序列可以产生神经元间的个体差异，增加大脑的多样性，从而可能影响学习、记忆和神经元的可塑性。这表明，LINE-1 在某种程度上可能参与了大脑复杂性的构建和神经系统的功能调控，尽管这种活动在过度的情况下也可能导致疾病的发生，如神经发育障碍。<br>这个发现表明，LINE-1 元件不仅仅是基因组的“寄生元素”，它们可能在调控高级生物的发育和功能中扮演了意想不到的角色。<br>推荐阅读 <a data-href="2018 GB 关于转座因子您应该了解的十件事" href="文献及报道\文献\2024年阅读\7-12月\2018-gb-关于转座因子您应该了解的十件事.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="LiThumbsUp" aria-label="LiThumbsUp" data-icon="LiThumbsUp" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" width="18px" height="18px" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide-thumbs-up"><path d="M7 10v12"></path><path d="M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2a3.13 3.13 0 0 1 3 3.88Z"></path></svg></span>2018 GB 关于转座因子您应该了解的十件事</a>。]]></description><link>术语\line-1-元件（long-interspersed-nuclear-element-1）.html</link><guid isPermaLink="false">术语/LINE-1 元件（Long Interspersed Nuclear Element-1）.md</guid><pubDate>Mon, 21 Oct 2024 03:38:31 GMT</pubDate></item><item><title><![CDATA[Max MAF]]></title><description><![CDATA[ 
 <br>"Max MAF" 通常指的是最大等位基因频率（Maximum Minor Allele Frequency）或最大杂合子频率。在遗传学和基因组学研究中，MAF 是指某一基因座上的次要等位基因（通常是较少见的那个）在研究人群中的频率。"Max MAF" 就是在考虑了所有样本中的不同基因座时，选择具有最高最大次要等位基因频率的那个基因座。]]></description><link>术语\max-maf.html</link><guid isPermaLink="false">术语/Max MAF.md</guid><pubDate>Thu, 20 Jun 2024 12:20:45 GMT</pubDate></item><item><title><![CDATA[MCAT基因（Mitochondrial Carnitine Acylcarnitine Carrier）]]></title><description><![CDATA[ 
 <br>MCAT基因位于人类基因组的第5染色体上，MCAT基因编码的是一种叫做"脑心肌转运蛋白"（Mitochondrial Carnitine/Acylcarnitine Carrier）的蛋白质。这种蛋白质在线粒体膜上扮演着重要的角色，它负责将脂肪酸类物质（如脂肪酸和酯化脂肪酸）转运进入线粒体，以供线粒体内的能量生产过程使用。这在能量代谢中非常关键，特别是在有氧呼吸过程中，线粒体需要将脂肪酸等物质运输进入内部以供氧化代谢。因此，MCAT基因的编码产物在维持细胞的能量平衡和正常功能方面扮演着重要的角色。在上述提到的研究中，研究人员发现了与mtDNA拷贝数量变异相关的nuDNA变异，其中包括MCAT基因的变异。这可能表明MCAT基因在调控线粒体DNA复制和维护方面发挥着一定的作用。]]></description><link>术语\mcat基因（mitochondrial-carnitine-acylcarnitine-carrier）.html</link><guid isPermaLink="false">术语/MCAT基因（Mitochondrial Carnitine Acylcarnitine Carrier）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:46 GMT</pubDate></item><item><title><![CDATA[MELAS综合症（Mitochondrial Encephalomyopathy, Lactic Acidosis, and Stroke-like Episodes）]]></title><description><![CDATA[ 
 <br>MELAS综合症，全称为Mitochondrial Encephalomyopathy, Lactic Acidosis, and Stroke-like Episodes，中文意为"线粒体脑病、乳酸中毒和类似中风的发作综合症"。它是一种罕见的遗传性线粒体疾病，主要影响中枢神经系统和能量代谢系统。<br>MELAS综合症的症状和临床表现可以包括：<br>脑病症状，如癫痫、头痛、认知障碍和行为问题。<br>
乳酸中毒，即体内乳酸浓度升高，可导致乏力、呼吸困难、恶心和呕吐等。<br>
类似中风的发作，患者可能会出现突然的神经功能障碍，如肢体无力、言语障碍、视力丧失等。<br>
MELAS综合症的病因与线粒体DNA（mtDNA）的突变有关，导致线粒体能量产生和细胞代谢紊乱。由于线粒体在细胞内产生能量，因此受累的组织和器官对能量供应特别敏感，尤其是中枢神经系统。<br>目前，MELAS综合症尚无特效治疗方法，治疗主要是针对症状和支持性治疗。由于这是一种遗传性疾病，预防或减轻症状对于患者和家庭来说是重要的。]]></description><link>术语\melas综合症（mitochondrial-encephalomyopathy,-lactic-acidosis,-and-stroke-like-episodes）.html</link><guid isPermaLink="false">术语/MELAS综合症（Mitochondrial Encephalomyopathy, Lactic Acidosis, and Stroke-like Episodes）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:47 GMT</pubDate></item><item><title><![CDATA[MESH1]]></title><description><![CDATA[ 
 <br>一种高度保守的蛋白质，最初在细菌和真核生物中被发现。它在人类和其他真核生物中扮演着重要角色，尤其是在调节代谢应激反应和细胞死亡方面。MESH1 被认为是<a data-href="铁死亡（ferroptosis）" href="术语\铁死亡（ferroptosis）.html" class="internal-link" target="_self" rel="noopener nofollow">铁死亡（ferroptosis）</a> 的诱导剂之一。<br>MESH1 与线粒体整合应激反应有关，能够调控细胞在面对代谢应激时的反应机制。当 MESH1 表达上调时，它可以增强铁死亡信号通路的活性，诱导铁死亡，这对于某些病理过程（如心脏纤维化和心肌细胞死亡）起到重要作用。]]></description><link>术语\mesh1.html</link><guid isPermaLink="false">术语/MESH1.md</guid><pubDate>Tue, 17 Sep 2024 08:05:25 GMT</pubDate></item><item><title><![CDATA[Oxford Nanopore Technologies牛津纳米孔测序技术 (ONT)]]></title><description><![CDATA[ 
 <br>是一种<a data-href="长读长 DNA 测序技术" href="术语\长读长-dna-测序技术.html" class="internal-link" target="_self" rel="noopener nofollow">长读长 DNA 测序技术</a>。<br><img alt="Pasted image 20230804095659" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804095659.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
ONT长读长测序技术使用线性DNA分子而不是环状DNA分子。这些线性 DNA 分子的长度通常为一到数百千碱基，但也可以长达数兆碱基。<br>
<br>
ONT 测序首先将双链 DNA 分子连接到预载有运动蛋白的测序接头上。 

<br>
DNA 混合物被加载到流动池中，其中包含嵌入合成膜中的数百至数千个纳米孔。

<br>
马达蛋白解开双链 DNA，并与电流一起以受控的速率驱动带负电的 DNA 通过孔。

<br>
当 DNA 通过孔移位时，会对电流造成特征性干扰，对电流进行实时分析以确定 DNA 链中碱基的序列。通过 ONT 测序，已经生成了长度大于 1 Mb 的读数，

<br>
当通过计算将较短的读数拼接在一起时，报告的最长读数长度接近 2.3 Mb。 

<br>
总之，这些成就将基因组学界推向了兆碱基大小的序列读数领域首次。

<br>
任意长的 DNA（黄色表示正向链，深蓝色表示反向链）用一端或两端预载有马达蛋白的测序接头（浅蓝色）进行标记。

<br>
DNA 与束缚蛋白结合并加载到流动池上进行测序。流动池包含数千个嵌入合成膜中的蛋白质纳米孔，束缚蛋白质将 DNA 分子带向这些纳米孔。

<br>
然后，测序接头插入纳米孔的开口，马达蛋白开始解开双链 DNA。

<br>
施加电流，电流与运动蛋白协同作用，驱动带负电的 DNA 以每秒约 450 个碱基的速度通过孔。

<br>
当 DNA 穿过孔隙时，它会对电流造成特征性干扰，产生称为“波形曲线”的读数。

<br>
孔内电流的变化对应于特定的 k 聚体（即长度为 k 的 DNA 碱基串），用于识别 DNA 序列。

]]></description><link>术语\oxford-nanopore-technologies牛津纳米孔测序技术-(ont).html</link><guid isPermaLink="false">术语/Oxford Nanopore Technologies牛津纳米孔测序技术 (ONT).md</guid><pubDate>Thu, 20 Jun 2024 12:24:02 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804095659.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Pasted%20image%2020230804095659.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Pacific Biosciences测序技术（SMRT,PacBio）]]></title><description><![CDATA[ 
 <br>是一种新型的<a data-href="长读长 DNA 测序技术" href="术语\长读长-dna-测序技术.html" class="internal-link" target="_self" rel="noopener nofollow">长读长 DNA 测序技术</a>，使用：<br>
<br>
拓扑环状 DNA 分子模板，称为 SMRTbell，它由双链 DNA 插入片段组成，两端带有单链发夹接头。

<br>
DNA 插入片段的长度范围可以从一到一百多个碱基，这样就可以生成长测序读数。 

<br>
SMRTbell 组装完成后，就会被 DNA 聚合酶结合并加载到 SMRT 单元上，该单元包含多达 800 万个零模式波导，用于测序。

<br>
在测序反应过程中，聚合酶围绕 SMRTbell 模板进行加工，并将荧光标记的脱氧核苷三磷酸掺入新生链中。

<br>
每次掺入后，激光都会激发荧光团，摄像机会记录发射情况。然后，在掺入下一个脱氧核苷三磷酸之前，荧光团从核苷酸上裂解下来。

<br>
这个过程重复数千次，以揭示 SMRTbell 模板中每个碱基的身份和序列。 

<br>
PacBio 技术通常生成数十千碱基长的读数，大大超过 Illumina 测序获得的读数长度。

<br>
DNA（黄色表示正向链，深蓝色表示反向链）被片段化并连接到发夹接头（浅蓝色），形成拓扑圆形分子，称为SMRT bell。 

<br>
SMRTbell 生成后，就会被 DNA 聚合酶结合并加载到 SMRT 细胞上进行测序。

<br>
每个 SMRT 单元可包含多达 800 万个零模波导 (ZMW)，这些波导是可容纳皮升体积的腔室。光穿透每个孔的下部 20–30 nm，将孔的检测体积减少至仅 20 zl 。

<br>
当 DNA 混合物淹没 ZMW 时，SMRTbell 模板和聚合酶固定在腔室底部。添加荧光标记的脱氧核苷三磷酸 (dNTP) 以开始测序反应。

<br>
当聚合酶开始合成新的 DNA 链时，荧光 dNTP 会短暂保留在检测体积中，来自孔底部的光脉冲会激发荧光团。

<br>
未掺入的 dNTP 通常不会被这种光激发，但在极少数情况下，如果它们扩散到激发体积中，就会被激发，从而导致 PacBio 测序中的噪音和错误。

<br>
相机检测到激发的荧光团发出的光，记录新生链中掺入碱基的波长和相对位置。

<br>
然后，作为碱基自然掺入新 DNA 链的一部分，磷酸盐连接的荧光团从核苷酸上裂解下来，并释放到缓冲液中，防止后续光脉冲期间的荧光干扰。 

<br>
DNA 序列由每个 ZMW 中记录的不断变化的荧光发射决定，每个 DNA 碱基对应不同的颜色（例如，绿色，T；黄色，C；红色，G；蓝色，A）。

]]></description><link>术语\pacific-biosciences测序技术（smrt,pacbio）.html</link><guid isPermaLink="false">术语/Pacific Biosciences测序技术（SMRT,PacBio）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:11 GMT</pubDate></item><item><title><![CDATA[PR结构域锌指蛋白9（PRDM9）]]></title><description><![CDATA[ 
 <br>PR结构域锌指蛋白9（PRDM9）是一种在基因组学和生殖生物学中具有重要作用的蛋白质。它包含一个PR/SET结构域，该结构域具有组蛋白甲基转移酶活性，可以甲基化染色质上的赤霉素，从而在基因组中标记特定的DNA区域。<br>PRDM9的最显著特点是它的锌指结构域。这些锌指结构域可以与DNA上的特定序列结合，从而导致DNA双链断裂。这些断裂在生殖细胞中发生，特别是精子和卵子的形成过程中。PRDM9通过调控DNA双链断裂的位置和频率来帮助导致遗传重组，这是生殖细胞形成和基因多样性的关键过程。<br>PRDM9在不同物种中的序列和功能可能会有所不同，但它在多数哺乳动物中都扮演着重要的角色，维持了基因组的稳定性和多样性。对PRDM9的研究有助于我们更好地理解生殖生物学和基因组演化。]]></description><link>术语\pr结构域锌指蛋白9（prdm9）.html</link><guid isPermaLink="false">术语/PR结构域锌指蛋白9（PRDM9）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:48 GMT</pubDate></item><item><title><![CDATA[qpAdm]]></title><description><![CDATA[ 
 <br>qpAdm是一种用于人群遗传学研究的分析方法。它是基于模型比较的方法，用于估计复杂人群混合事件的概率。通过比较不同的人群组合和混合模型，qpAdm可以推断出给定人群的遗传组成和混合历史。这种方法通常用于研究古代人群的遗传结构和迁移历史，也可以用于探索现代人群之间的遗传联系。<br>qpAdm的名字是"qpAdm"，它的缩写来源于"qpWave-based ADMIXTURE analysis"，其中"qp"表示"qpWave"，是该方法的一个基础模型，"Adm"代表"admixture"，即混合，"qpAdm"则表示基于qpWave模型的混合分析。这个方法的主要目的是通过比较不同人群之间的遗传数据，推断出人群之间的混合历史和遗传成分。<br>qpWave模型基于波浪理论，假设在人类历史上存在多次波浪式的迁移和混合事件。这些波浪事件代表了不同人群之间的遗传交流和混合。该模型通过比较不同人群之间的遗传数据，计算不同波浪事件对于目标人群的贡献程度，从而推断出人群之间的混合历史和遗传成分。]]></description><link>术语\qpadm.html</link><guid isPermaLink="false">术语/qpAdm.md</guid><pubDate>Thu, 20 Jun 2024 12:24:13 GMT</pubDate></item><item><title><![CDATA[rCRS（revised Cambridge Reference Sequence）]]></title><description><![CDATA[ 
 <br><a data-href="rCRS（revised Cambridge Reference Sequence）" href="术语\rcrs（revised-cambridge-reference-sequence）.html" class="internal-link" target="_self" rel="noopener nofollow">rCRS（revised Cambridge Reference Sequence）</a>：rCRS是最早用于人类线粒体DNA研究的参考序列，它是根据1962年剑桥大学的一份人类线粒体DNA样本进行构建的。然而，随着对线粒体DNA序列的更多研究和了解，发现了一些错误和不准确之处，因此rCRS被认为需要修订。RSRS就是其中一个修订版本，更准确地反映了人类线粒体DNA的祖先状态。]]></description><link>术语\rcrs（revised-cambridge-reference-sequence）.html</link><guid isPermaLink="false">术语/rCRS（revised Cambridge Reference Sequence）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:29 GMT</pubDate></item><item><title><![CDATA[RSRS（Reconstructed Sapiens Reference Sequence）]]></title><description><![CDATA[ 
 <br><a data-href="RSRS（Reconstructed Sapiens Reference Sequence）" href="术语\rsrs（reconstructed-sapiens-reference-sequence）.html" class="internal-link" target="_self" rel="noopener nofollow">RSRS（Reconstructed Sapiens Reference Sequence）</a>：RSRS是一种以现代人类的线粒体DNA为基础重新构建的参考序列。它的目的是消除线粒体DNA中可能存在的与祖先人类群体分化有关的突变，从而更准确地反映现代人类的共同祖先状态。RSRS通常用于考古遗传学研究，以便更好地比较不同人群之间的线粒体遗传变异。]]></description><link>术语\rsrs（reconstructed-sapiens-reference-sequence）.html</link><guid isPermaLink="false">术语/RSRS（Reconstructed Sapiens Reference Sequence）.md</guid><pubDate>Thu, 20 Jun 2024 12:21:30 GMT</pubDate></item><item><title><![CDATA[S-腺苷甲硫氨酸 (SAM)]]></title><description><![CDATA[ 
 <br>SAM是一种主要的甲基供体，在许多生物甲基化反应中起着关键作用，包括DNA、RNA和蛋白质的甲基化。在长期新冠患者中观察到SAM水平降低，可能指示甲基化过程和SAM循环的活性减少。这种变化可能影响基因表达和蛋白质功能，从而对患者的健康状况产生影响。]]></description><link>术语\s-腺苷甲硫氨酸-(sam).html</link><guid isPermaLink="false">术语/S-腺苷甲硫氨酸 (SAM).md</guid><pubDate>Thu, 20 Jun 2024 12:21:46 GMT</pubDate></item><item><title><![CDATA[singleton density score (SDS)]]></title><description><![CDATA[ 
 ]]></description><link>术语\singleton-density-score-(sds).html</link><guid isPermaLink="false">术语/singleton density score (SDS).md</guid><pubDate>Thu, 20 Jun 2024 12:24:14 GMT</pubDate></item><item><title><![CDATA[t-分布随机近邻嵌入（t-Distributed Stochastic Neighbor Embedding,t-SNE）]]></title><description><![CDATA[ 
 <br>
<br>原理：t-SNE 通过概率分布在高维和低维空间中对样本间的相似性进行建模，并试图在低维空间中保持这些相似性。特别是，它使用了t-分布来解决低维空间的拥挤问题（即高维中相距较远的点在低维中也相距较远）。
<br>优势：非常适合于捕捉数据的局部结构，特别是在可视化高维数据集（如基因表达数据）时，能够揭示数据中的簇或群组。
<br>局限：计算成本高，且结果对初始参数（如困惑度）非常敏感，有时候难以复现。
]]></description><link>术语\t-分布随机近邻嵌入（t-distributed-stochastic-neighbor-embedding,t-sne）.html</link><guid isPermaLink="false">术语/t-分布随机近邻嵌入（t-Distributed Stochastic Neighbor Embedding,t-SNE）.md</guid><pubDate>Thu, 20 Jun 2024 12:25:34 GMT</pubDate></item><item><title><![CDATA[Tajima’s D]]></title><description><![CDATA[ 
 <br>Tajima’s D是由日本遗传学家Fumio Tajima提出的一种统计量，用于检测选择压力和人口历史事件（如人口瓶颈或扩张）对核苷酸多态性的影响。<br>
计算原理：Tajima’s D比较了两个核苷酸多态性指标：<br>
<br>一是每个核苷酸位点的<a data-href="平均成对核苷酸差异数（π值）" href="术语\平均成对核苷酸差异数（π值）.html" class="internal-link" target="_self" rel="noopener nofollow">平均成对核苷酸差异数（π值）</a>
<br>二是基于<a data-href="分子钟理论估计的总突变数目（θ）" href="术语\分子钟理论估计的总突变数目（θ）.html" class="internal-link" target="_self" rel="noopener nofollow">分子钟理论估计的总突变数目（θ）</a>。
<br>基于分子钟理论估计的总突变数目（θ）
遗传学中常用的一个参数，主要用于衡量一个群体中预期的核苷酸多态性水平。这个参数的估算是基于中性理论假设，即认为大多数突变是中性的，不受自然选择的影响，因此它们的积累速度可以被视为是一个“分子钟”。<br>
θ反映的是一个群体中基于中性突变模型的理论多态性水平，即该群体在没有选择压力且处于进化平衡状态下预期会产生的突变位点数量。
<br>
<br>D值接近零：表示该群体处于平衡状态，未经历显著的人口变化或选择压力。
<br>D值为正：表示稀有变异减少，可能与平衡选择或人口减少（瓶颈效应）有关。
<br>D值为负：表示稀有变异增加，可能与人口扩张或纯化选择有关。
]]></description><link>术语\tajima’s-d.html</link><guid isPermaLink="false">术语/Tajima’s D.md</guid><pubDate>Mon, 26 Aug 2024 03:22:54 GMT</pubDate></item><item><title><![CDATA[Telomere-to-telomere（T2T）]]></title><description><![CDATA[ 
 <br>Telomere-to-telomere（T2T）是指在基因组研究中的一个目标，即获得染色体上从一个端到另一个端的完整、连续的序列。传统的基因组测序技术通常无法解析染色体的高度重复区域和难以测序的区域，导致基因组序列的不完整性。而Telomere-to-Telomere（T2T）的目标是通过使用高级测序技术和组装方法，克服这些挑战，获得染色体上的完整序列，包括难以测序的区域和高度重复的序列。<br>Telomere-to-Telomere（T2T）项目是一个全球合作的科学研究项目，旨在生成人类染色体的完整序列，并提供一个公开可用的参考基因组资源。该项目的目标是填补现有基因组序列的空白，提供更准确、更全面的基因组信息，进一步推动基因组研究和理解人类基因组的功能和变异。通过获得完整的染色体序列，研究人员可以更好地研究基因组结构、功能元件、基因组变异和疾病相关的基因。<br>Telomere-to-Telomere（T2T）的目标是实现一个高质量的、完整的人类参考基因组序列，为基因组学研究提供更全面、准确的数据，促进了解基因组的生物学和医学意义。]]></description><link>术语\telomere-to-telomere（t2t）.html</link><guid isPermaLink="false">术语/Telomere-to-telomere（T2T）.md</guid><pubDate>Thu, 20 Jun 2024 12:24:15 GMT</pubDate></item><item><title><![CDATA[Templeton Crandall Sing 算法（Templeton Crandall and Sing algorithm，TCS）]]></title><description><![CDATA[ 
 <br>TCS 算法是基于统计学的网络构建方法，通常用于低多态性数据集。它根据共祖理论构建单倍型网络，并通过对突变数量的假设和限制，推断序列的进化路径。]]></description><link>术语\templeton-crandall-sing-算法（templeton-crandall-and-sing-algorithm，tcs）.html</link><guid isPermaLink="false">术语/Templeton Crandall Sing 算法（Templeton Crandall and Sing algorithm，TCS）.md</guid><pubDate>Sun, 22 Sep 2024 07:35:52 GMT</pubDate></item><item><title><![CDATA[TfamOE（Over expression of TFAM）]]></title><description><![CDATA[ 
 <br><a data-href="线粒体转录因子A（Transcription Factor A Mitochondrial，TFAM）" href="术语\线粒体转录因子a（transcription-factor-a-mitochondrial，tfam）.html" class="internal-link" target="_self" rel="noopener nofollow">线粒体转录因子A（Transcription Factor A Mitochondrial，TFAM）</a>过度表达。<br>TFAM 在 mtDNA 复制过程的结束部分起到了至关重要的作用。生动来说，TFAM负责打包和保护这些复制出来的mtDNA，使它们更稳定、寿命更长。过表达的TFAM相当于扩充了仓库的容量并提升了包装质量，使得mtDNA能够存储得更好，并在一些情况下帮助组织延缓衰老（比如延迟雄性不育）。即便mtDNA数量增加，良好的打包和储存可以在一定程度上缓解这些负担。]]></description><link>术语\tfamoe（over-expression-of-tfam）.html</link><guid isPermaLink="false">术语/TfamOE（Over expression of TFAM）.md</guid><pubDate>Tue, 17 Sep 2024 07:39:19 GMT</pubDate></item><item><title><![CDATA[TreeMix分析（TreeMix analysis）]]></title><description><![CDATA[ 
 <br>TreeMix 分析是一种用于研究种群遗传关系和迁移历史的计算方法，常用于分析多样性基因组数据，特别是基于单核苷酸多态性（SNP）的遗传数据。TreeMix 旨在重建种群间的遗传家谱关系图，帮助我们了解不同种群之间的亲缘关系、迁移模式以及人类或其他生物种群的历史动态。<br>TreeMix 方法的核心思想是通过构建一个图形化的树状结构，来表示不同种群之间的遗传关系。该树状结构可以包含主要的主成分和辅助成分，通过分析基因频率差异和共享突变等信息，TreeMix 试图找到一种最合适的方式来解释种群间的遗传方差。]]></description><link>术语\treemix分析（treemix-analysis）.html</link><guid isPermaLink="false">术语/TreeMix分析（TreeMix analysis）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:18 GMT</pubDate></item><item><title><![CDATA[Twinkle基因（TWNK）]]></title><description><![CDATA[ 
 <br>TWNK代表“Twinkle 基因”（Twinkle Gene），是人类基因组中的一种基因。这一基因编码一种蛋白质，被称为Twinkle蛋白。Twinkle蛋白在线粒体DNA（mtDNA）复制和维护中发挥着关键的作用。<br>mtDNA是线粒体内部的遗传物质，负责编码一些线粒体内部的蛋白质、RNA和调节线粒体功能所需的分子。Twinkle蛋白在线粒体中起到了解开、复制和维护mtDNA的重要作用。这是一个螺旋酶，具有解旋双螺旋DNA的能力，以便新的mtDNA能够复制。因此，Twinkle蛋白有助于确保线粒体DNA的准确复制，以支持线粒体的正常功能。<br>突变或异常表达Twinkle基因与一些遗传性疾病和线粒体疾病有关，因为它们可能导致线粒体DNA复制和维护的问题。因此，研究Twinkle基因对于理解线粒体疾病的发病机制以及开发相关疾病的治疗方法具有重要意义。]]></description><link>术语\twinkle基因（twnk）.html</link><guid isPermaLink="false">术语/Twinkle基因（TWNK）.md</guid><pubDate>Thu, 20 Jun 2024 12:20:48 GMT</pubDate></item><item><title><![CDATA[TwOE（Over expression of Twinkle）]]></title><description><![CDATA[ 
 <br>Twinkle 解旋酶过度表达。<br>众所周知，解旋是 DNA 复制的开端。Twinkle 解旋酶是 mtDNA 复制的开端。生动来说，Twinkle负责批准和启动线粒体DNA（mtDNA）的复制。Twinkle的过表达意味着它频繁“发号施令”，让更多的mtDNA被复制。这种增加的mtDNA有助于心脏在缺血时快速修复损伤，让整个系统能更有效地应对压力。]]></description><link>术语\twoe（over-expression-of-twinkle）.html</link><guid isPermaLink="false">术语/TwOE（Over expression of Twinkle）.md</guid><pubDate>Tue, 17 Sep 2024 07:37:32 GMT</pubDate></item><item><title><![CDATA[VAF]]></title><description><![CDATA[ 
 <br>&nbsp;等位基因频率，是指在一个群体中，特定等位基因的出现频率。]]></description><link>术语\vaf.html</link><guid isPermaLink="false">术语/VAF.md</guid><pubDate>Thu, 20 Jun 2024 12:20:49 GMT</pubDate></item><item><title><![CDATA[Watterson 估计量（θw）]]></title><description><![CDATA[ 
 <br>Watterson估计量(θw)是遗传学中用于估计种群遗传多样性的一个指标，得名于遗传学家 Tomoko Ohta 和 John H. Gillespie 之间的合作，1970年由 Kimura 和 Ohta 提出。该估计量衡量了在一个给定的基因座上，预期的无选择的多态性水平。<br>θw 的计算基于两个主要因素：第一个因素是观察到的多态性（不同等位基因的频率），第二个因素是样本中的观测到的个体数。<br>在一个理想的大型随机杂交种群中，θw 可以通过下述公式进行估计：<br>θw = S / a<br>其中：<br>
S 是该基因座上观察到的多态位点（即多态性位点的数量）；a 是样本中的观测到的个体数。<br>Watterson 估计量 θw 提供了一种测量种群的遗传多样性的方法，它可以用于了解遗传变异程度，研究种群历史和演化等重要问题。]]></description><link>术语\watterson-估计量（θw）.html</link><guid isPermaLink="false">术语/Watterson 估计量（θw）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:18 GMT</pubDate></item><item><title><![CDATA[Y-染色体结构]]></title><description><![CDATA[ 
 <br><br>
<br><a data-href="拟常染色区（pseudoautosomalregion，PAR）" href="拟常染色区（pseudoautosomalregion，PAR）" class="internal-link" target="_self" rel="noopener nofollow">拟常染色区（pseudoautosomalregion，PAR）</a>，位于Y染色体短臂末端的PAR称为PAR1，长约2.5Mb，PAR2位于长臂末端，长度小于1Mb。PAR约占Y染色体的5％，在减数分裂过程中，PAR可与X染色体的相应区段进行交换、重组。
<br>约95％的Y染色体区域为 <a data-href="Y染色体男性特异性区域 (The male-specific region of  the Y chromosome, MSY)" href="术语\y染色体男性特异性区域-(the-male-specific-region-of-the-y-chromosome,-msy).html" class="internal-link" target="_self" rel="noopener nofollow">Y染色体男性特异性区域 (The male-specific region of  the Y chromosome, MSY)</a>。<br>
NRY按照结构可以分为：<br>
1.异染色质区（heterochromatin）：异染色质区由高度重复的序列构成，现有技术还不能进行正确测序。<br>
2.常染色质区（euchromatin）
<br>NRY内的常染色质区序列大致可以分为X染色体置换序列、X染色体兼并序列和扩增序列三类，其中X染色体置换序列和兼并序列与X染色体上对应区域高度同源。因缺乏同源重组，Y染色体上基因较少，主要位于NRY内的常染色质区，共有156个已知的转录单位，其中包括78个编码蛋白的基因。Y染色体只能从父亲向下遗传给儿子，故在一个父系家族中，其男性个体拥有完全相同的Y染色体非重组区（除突变外）。Y染色体这种特殊的遗传方式在与男性相关的法医学实践中具有重要意义。<br>Y染色体上有五类多态性遗传标记，包括卫星DNA、小卫星DNA、微卫星DNA（即STR）、InDel及SNP。Y染色体STR（Y-chromosomeSTR，Y-STR）是其中一类重要的遗传标记。与常染色体STR基因座相比，大多数Y-STR基因座具有复杂的串联重复结构：一个基因座内常含有两种以上不同的重复单位，恒定重复序列和可变重复序列同时存在。]]></description><link>术语\y-染色体结构.html</link><guid isPermaLink="false">术语/Y-染色体结构.md</guid><pubDate>Mon, 26 Aug 2024 02:42:19 GMT</pubDate></item><item><title><![CDATA[Y-DNA（Y-染色体）]]></title><description><![CDATA[ 
 ]]></description><link>术语\y-dna（y-染色体）.html</link><guid isPermaLink="false">术语/Y-DNA（Y-染色体）.md</guid><pubDate>Thu, 20 Jun 2024 12:22:19 GMT</pubDate></item><item><title><![CDATA[Y染色体男性特异性区域 (The male-specific region of  the Y chromosome, MSY)]]></title><description><![CDATA[ 
 ]]></description><link>术语\y染色体男性特异性区域-(the-male-specific-region-of-the-y-chromosome,-msy).html</link><guid isPermaLink="false">术语/Y染色体男性特异性区域 (The male-specific region of  the Y chromosome, MSY).md</guid><pubDate>Mon, 26 Aug 2024 02:41:02 GMT</pubDate></item><item><title><![CDATA[Z值]]></title><description><![CDATA[ 
 <br>通常是用来衡量统计量的标准化分数（标准分数）或Z统计量。Z值可以告诉你一个统计量与其期望值之间的差异有多大，以标准差为单位来表示。通常，Z值越高，表示统计量与期望值之间的差异越显著。<br>数学上，Z值的计算公式如下：<br>Z = (observed F3 - expected F3) / standard deviation<br>其中：<br>"observed F3" 是实际计算得到的F3统计量。<br>
"expected F3" 是在假设下的期望F3统计量。<br>
"standard deviation" 是F3统计量的标准差。<br>
通过计算Z值，你可以确定计算得到的F3统计量是否显著偏离了期望值，从而评估遗传关系的显著性。如果Z值远大于1.96或远小于-1.96（通常取正负1.96作为显著性的阈值），那么可以认为F3统计量在统计上显著。这有助于遗传学家或人类遗传学家确定不同人群之间的遗传关系或亲缘关系。]]></description><link>术语\z值.html</link><guid isPermaLink="false">术语/Z值.md</guid><pubDate>Thu, 20 Jun 2024 12:24:20 GMT</pubDate></item><item><title><![CDATA[ρ（rho）方法]]></title><description><![CDATA[ 
 <br>
Origin and Evolution of Native American mtDNA Variation: A Reappraisal
<br>一种用于估算物种或群体的最近共同祖先（MRCA）时间的分子钟方法。该方法基于假设遗传标记（通常是线粒体DNA）中的差异累积与时间成正比。通过测量遗传距离（即基因序列中的差异数量）并结合已知的分子钟速率，可以估计MRCA的时间。<br>ρ方法的计算较为简单，不需要复杂的统计模型，只需线性回归就可以完成。其主要步骤包括：<br>
<br>选择一个遗传标记，并对研究群体中的个体进行基因序列测定。
<br>计算每个个体与参照序列（通常是已知年代的古代DNA或现代的代表性序列）之间的遗传距离。
<br>通过已知的分子钟速率将遗传距离转换为时间估计。
<br>尽管ρ方法在计算上较为直接和简便，它也受到一些批评，主要是因为其假设分子钟速率恒定且适用于所有分支，这在实际应用中可能不总是成立。此外，若样本量不足或分子钟速率估计不准确，也会影响MRCA时间的准确性。<br>然而，一些研究仍显示ρ方法能有效估计某些物种或群体的MRCA时间，特别是在结合多种方法进行交叉验证的情况下。这些研究强调了在解释和应用ρ方法结果时需要谨慎，并考虑到其潜在的局限性。<br>ρ（rho）方法的计算：<br>
这里：<br>
<br> 是每个亚种群相对于<a data-href="最近共同祖先时间(Time to most recent common ancestor，MRCA)" href="术语\最近共同祖先时间(time-to-most-recent-common-ancestor，mrca).html" class="internal-link" target="_self" rel="noopener nofollow">最近共同祖先时间(Time to most recent common ancestor，MRCA)</a>的位点差异的平均数。
<br> 是第  个亚种群的样本大小。
<br> 是总的样本大小，即所有亚种群样本大小的总和。
<br><br>以汉族为例，假如四川汉族和云南汉族有一个 <a data-href="最近共同祖先时间(Time to most recent common ancestor，MRCA)" href="术语\最近共同祖先时间(time-to-most-recent-common-ancestor，mrca).html" class="internal-link" target="_self" rel="noopener nofollow">最近共同祖先时间(Time to most recent common ancestor，MRCA)</a>，命名为 A1。四川汉族（假如有100人）就属于一个亚群，云南汉族（假如有100人）也属于一个亚群。为了计算ρ，需要计算：<br>
<br>四川汉族与 A1的位点差异的平均数；
<br>云南汉族与 A1的位点差异的平均数；
<br>四川汉族与云南汉族的个体总数。
<br>注意到，假如我们认为每个个体与祖先的差异等效（每个亚群之内和亚群之间的突变权重相等，默认情况下的确如此） 。那么，将每个个体当作一个单独的亚群体来计算 ρ 值与计算亚群的ρ值是等效的。由于所有个体的权重相等，所以加权求和的结果相当于直接求平均。具体来说，如果有 200 个个体，每个个体都被视为一个亚群体，那么：<br> 这证明了无论是把所有个体看作一个亚群体还是把每个个体单独作为一个亚群体，得到的总体 ρ\rhoρ 值是相同的。<br>因此，基于上述理由，可以进行实际操作：<a data-href="python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）" href="软件\python\数据科学与格式转换\ρ方法\python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">]]></description><link>术语\ρ（rho）方法.html</link><guid isPermaLink="false">术语/ρ（rho）方法.md</guid><pubDate>Tue, 08 Oct 2024 03:33:49 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[σ方法]]></title><description><![CDATA[ 
 <br>
mtDNA Variation among Greenland Eskimos: The Edge of theBeringian Expansion
<br>σ方法是 <a data-href="ρ（rho）方法" href="术语\ρ（rho）方法.html" class="internal-link" target="_self" rel="noopener nofollow">ρ（rho）方法</a>的一种补充，为其增添了一个上下限的功能，作为方差的估计。但是理解σ方法稍微比 <a data-href="ρ（rho）方法" href="术语\ρ（rho）方法.html" class="internal-link" target="_self" rel="noopener nofollow">ρ（rho）方法</a>困难一点。<br>在原本的文献，也提到了 <a data-href="ρ（rho）方法" href="术语\ρ（rho）方法.html" class="internal-link" target="_self" rel="noopener nofollow">ρ（rho）方法</a>，公式：<br>
这看起来似乎与之前提到的方法不一样：<br>
但事实上，这只是同一个问题的不同阐述而已，是等价的。<br>而针对 ，公式如下：<br>
那么，σ的计算则是其平方根：<br>
<br>
<br>其中  代表第一个亚种群的的个体数
<br>其中  代表第一个亚种群的观测到的突变数<a data-footref="1" href="about:blank#fn-1-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>
<br>其中  代表该 <a data-href="最近共同祖先时间(Time to most recent common ancestor，MRCA)" href="术语\最近共同祖先时间(time-to-most-recent-common-ancestor，mrca).html" class="internal-link" target="_self" rel="noopener nofollow">最近共同祖先时间(Time to most recent common ancestor，MRCA)</a> 的所有后代的个体总数。
<br>是不是与 <a data-href="ρ（rho）方法" href="术语\ρ（rho）方法.html" class="internal-link" target="_self" rel="noopener nofollow">ρ（rho）方法</a>很像？<br><br>我们设四川汉族和云南汉族各100人，他们的最近共同祖先为A1。默认每个突变之间的权重相等，且亚群之内和亚群之间的突变都没有差异。那么公式为：<br>
变为：<br>
假如在连接1（四川汉族的分支）上观测到了30个突变，在连接2（云南汉族的分支）上观测到了40个突变，则为：<br><br>通过比率   来估计样本的“有效星状大小”，其中  是方差的估计。<br>
比率  被用来评估样本在共祖时间估计上的效率。理想情况下，这个比率接近1，表示样本接近“完美星状”（perfect star）。<br><br>在实际运行过程中，我们需要注意：通过  计算出来的是两种亚群之间的时间差异，为了将这种相对时间转化为绝对时间，需要添加校正点。有研究使用分化程度最高（距离现代最近的样本）作为 tip 进行校正，对这些样本定年龄为0<a data-footref="2" href="about:blank#fn-2-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a>。将古代 DNA 作为校准也有一定的道理。<br>实际操作：<a data-href="python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）" href="软件\python\数据科学与格式转换\ρ方法\python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">，<a data-href="python：ρ（rho）方法计算mtDNA共同祖先时间" href="软件\python\数据科学与格式转换\ρ方法\python：ρ（rho）方法计算mtdna共同祖先时间.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：ρ（rho）方法计算mtDNA共同祖先时间</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;"><br><br><br><br>
<br>
<br>尽管在这篇文献中提到的是 突变数，但在 <a data-href="ρ（rho）方法" href="术语\ρ（rho）方法.html" class="internal-link" target="_self" rel="noopener nofollow">ρ（rho）方法</a>文献中其实是亚群中的突变的平均数。<a href="about:blank#fnref-1-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>Mutation Rate Switch inside Eurasian Mitochondrial Haplogroups: Impact of  Selection and Consequences for Dating Settlement in Europe<a href="about:blank#fnref-2-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>术语\σ方法.html</link><guid isPermaLink="false">术语/σ方法.md</guid><pubDate>Tue, 08 Oct 2024 03:33:49 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[脚注的使用]]></title><description><![CDATA[ 
 <br>要创建脚注参考，请在方括号<a data-footref="1" href="about:blank#fn-1-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。<br>
标识符仅将脚注参考弱脚注本身相关联- 在输出中，脚注按顺序编号。<br>脚注代号 ：(脚注代号会直接显示在渲染界面)；<br>
脚注代号可以随便命名，不过推荐使用数字序号；<br>
脚注代号+:+ 空格 + 脚注内容。<br>mtDNA是一种母系遗传的物质<a data-footref="1" href="about:blank#fn-1-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[1-1]</a>。我们需要明确其单倍型<a data-footref="2" href="about:blank#fn-2-b027f9dca4b02431" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a>。<br><br><br>
<br>
<br>mtDNA与进化。<a href="about:blank#fnref-1-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;"><a href="about:blank#fnref-1-1-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>世界的起源。<a href="about:blank#fnref-2-b027f9dca4b02431" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>obsidian语法进阶\脚注的使用.html</link><guid isPermaLink="false">obsidian语法进阶/脚注的使用.md</guid><pubDate>Sat, 18 May 2024 10:57:53 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[callout语法]]></title><description><![CDATA[ 
 <br>Note<br>Abstract<br>Info<br>Todo<br>Tip<br>Success<br>Question<br>Warning<br>Failure<br>Danger<br>Bug<br>Example<br>Quote]]></description><link>obsidian语法进阶\callout语法.html</link><guid isPermaLink="false">obsidian语法进阶/callout语法.md</guid><pubDate>Thu, 20 Jun 2024 13:59:00 GMT</pubDate></item><item><title><![CDATA[Latex语法符号大全]]></title><description><![CDATA[ 
 <br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022134851.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022134155.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022134997.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022134210.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022134883.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135955.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135856.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135088.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135457.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135718.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135718.png" referrerpolicy="no-referrer"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135089.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135748.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135189.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135001.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135919.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135181.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135395.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022135510.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022136266.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">]]></description><link>obsidian语法进阶\latex语法符号大全.html</link><guid isPermaLink="false">obsidian语法进阶/Latex语法符号大全.md</guid><pubDate>Sat, 18 May 2024 10:57:09 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022134851.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401022134851.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br>Surfer 软件教程在这：<a data-href="Surfer：克里金插值制作贴合的等值线图" href="软件\地理绘图\surfer：克里金插值制作贴合的等值线图.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>Surfer：克里金插值制作贴合的等值线图</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;"><br><br>Group,Lat,Long,Frequency
id1,27.29847,105.30504,0
id2,35.60122,103.21091,0.1
id3,26.25427,107.52226,0
id4,25.05,102.72,0
id5,26.25427,107.52226,0
id6,22.55,114.1,0
id7,35.60122,103.21091,0
id8,29.57,106.56,0.015
id9,26.11,119.3,0.02
复制<br>需要准备的文件应该包括：<br>
<br>经纬度
<br>经纬度所在的单倍群频率
<br><br>
<br>
打开 Arcgis，新建一张底图。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240523205502.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
添加经纬度数据<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240523205535.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240523205559.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
输入表：刚才准备好的频率表<br>
输出要素：默认就行。<br>
X 和 Y 分别对应经度和纬度。<br>
坐标系请选择刚才地图所属的坐标系，以保证投影点的正确。

<br>
制作等高线图<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240523205932.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240523210004.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
Z 值字段选择频率，其余的选择默认即可。如果有特殊要求可以查看相关说明书。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240523210233.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
在环境选项卡中，需要注意，输出坐标系应该选择与底图相同的坐标系。这样才能更好地显示！

<br>
美化地图<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240523210343.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
软件中有很多个性化的参数可以调整来获得更好的视觉效果！<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240523210813.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
可以选择适合自己的颜色和风格！

<br>
打印布局<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240523210853.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240523210921.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
添加图例来说明图层的颜色含义：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240523210948.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240523211036.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
最后进行导出：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240523211202.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\地理绘图\arcgis-pro：使用克里金绘制单倍群等值线图.html</link><guid isPermaLink="false">软件/地理绘图/Arcgis Pro：使用克里金绘制单倍群等值线图.md</guid><pubDate>Wed, 31 Jul 2024 01:31:45 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[概念]]></title><description><![CDATA[ 
 <br><br><br>地理坐标系统（GCS）使用纬度和经度来描述地球表面的位置。这种坐标系统是基于地球的球形模型，通常使用度（°）、分（'）和秒（"）来度量。<br>
<br>纬度（Latitude）：表示北纬或南纬，范围从赤道的0°至北极90°北纬和南极90°南纬。
<br>经度（Longitude）：表示东经或西经，范围从本初子午线的0°东经或西经至180°。
<br><br>投影坐标系统（PCS）将地球表面的三维位置转换为二维平面上的点。这种转换通常需要一个数学模型，这样可以在平面上准确地表示地理位置，适合进行测量和绘图。因此，投影坐标系统常用于制图和精确工程项目。<br>
<br>平面坐标：使用直角坐标系统（如UTM、Web Mercator等），通常以米或英尺为单位，坐标值表示为东（X）和北（Y）的偏移量。
<br>例子：北京在UTM 50N投影下的坐标可能是东坐标 448202米，北坐标 4414487米。<br>再看看这个？
<a data-href="Arcgis：深入了解坐标" href="软件\地理绘图\arcgis：深入了解坐标.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="LiThumbsUp" aria-label="LiThumbsUp" data-icon="LiThumbsUp" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" width="18px" height="18px" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide-thumbs-up"><path d="M7 10v12"></path><path d="M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2a3.13 3.13 0 0 1 3 3.88Z"></path></svg></span>Arcgis：深入了解坐标</a>
<br><br><br><br>每个国家或地区都有各自的基准面，我们通常所说的北京54坐标系、西安80坐标系实际上指的是我国的两个大地基准面。<br>
<br>北京54坐标系：我国参照前苏联从1953年起采用克拉索夫斯基(Krassovsky)椭球体建立了我国的北京54坐标系。
<br>西安80坐标系：1978年采用国际大地测量协会推荐的1975地球椭球体（IAG75）建立了我国新的大地坐标系西安80坐标系。目前大地测量基本上仍以北京54坐标系作为参照。<br>
WGS1984基准面采用 WGS84椭球体，它是一地心坐标系，即以地心作为椭球体中心，目前 GPS 测量数据多以 WGS1984为基准。
<br>地理坐标采用下图所示：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408281613242.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>Krasovsky_1940_Albers（阿尔伯斯投影，又名“正轴等积割圆锥投影”、 “双轴纬线等积圆锥投影”，即经过两次纬线校正） 。具体参数如图：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408281614217.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
第一、第二标准纬线分别为25°N和47°N，中央经线为105°E。<br><br>ArcGIS中没有直接提供相应参数的投影，只有自己建立。<br>
在缺失投影的数据基础上，选择ArcToolbox→数据管理工具→投影和变换→要素→投影。在输出坐标系中“新建投影坐标系”，进行下图参数。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408281614059.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408281617001.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408281618002.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408281617070.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\地理绘图\arcgis：变换坐标系将中国地图校正.html</link><guid isPermaLink="false">软件/地理绘图/Arcgis：变换坐标系将中国地图校正.md</guid><pubDate>Thu, 29 Aug 2024 02:09:12 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Arcgis：地理空间数据]]></title><description><![CDATA[ 
 <br>首先弄明白数据的格式：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754428.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>shp是一种矢量图形。
<br>dbf是一种数据库，存放了名字、位置等各种信息。
<br>tif是一种栅格数据，不能无限放大。
<br>数据的来源：<br>
<br>地理空间数据云网站。 <a rel="noopener nofollow" class="external-link" href="https://www.gscloud.cn/#page1/2" target="_blank">https://www.gscloud.cn/#page1/2</a>
<br>SRTM data search网站。 <a rel="noopener nofollow" class="external-link" href="https://www.earthdata.nasa.gov/sensors/srtm" target="_blank">https://www.earthdata.nasa.gov/sensors/srtm</a><br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754430.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>Natural earth网站。 <a rel="noopener nofollow" class="external-link" href="https://www.naturalearthdata.com/" target="_blank">https://www.naturalearthdata.com/</a>
<br>DIVA-GIS网站。 <a rel="noopener nofollow" class="external-link" href="https://www.diva-gis.org/Data" target="_blank">https://www.diva-gis.org/Data</a>
<br>国家基础地理信息数据 百度云。 <a rel="noopener nofollow" class="external-link" href="https://www.ngcc.cn/ngcc/" target="_blank">https://www.ngcc.cn/ngcc/</a>
<br><a rel="noopener nofollow" class="external-link" href="https://www.webmap.cn/commres.do?method=dataDownload" target="_blank">https://www.webmap.cn/commres.do?method=dataDownload</a>
]]></description><link>软件\地理绘图\arcgis：地理空间数据.html</link><guid isPermaLink="false">软件/地理绘图/Arcgis：地理空间数据.md</guid><pubDate>Fri, 21 Jun 2024 07:31:13 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754428.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754428.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Arcgis：绘制省份人口数]]></title><description><![CDATA[ 
 <br>
<br>首先需要根据所选shp文件格式进行数据清洗。<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191755373.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
打开属性表，查看其中的格式：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191755374.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>按照上述格式对自己的数据进行整理。<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191755375.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>链接数据和图层：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191755376.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>根据值字段微调<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191755377.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
完成！<br>
当然可以加上一点点小小的细节：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191755378.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
]]></description><link>软件\地理绘图\arcgis：绘制省份人口数.html</link><guid isPermaLink="false">软件/地理绘图/Arcgis：绘制省份人口数.md</guid><pubDate>Wed, 31 Jul 2024 01:31:45 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44e.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44e.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Arcgis：绘制XY数据]]></title><description><![CDATA[ 
 <br>X、Y数据在Arcgis软件中被称为经度和纬度。<br>
<br>添加数据<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191755189.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>选定文件，链接字段<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191755190.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>注意选择编辑来框选坐标系：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191755191.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>如果要对数据进行分级，最好利用Excel，因为地图的统计数据是利用VB和PY进行的，很难用。
<br>可以在Arcgis中对数据类型进行定义：也可以在Excel中进行更改。<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191755192.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
双精度=经纬度∈数字<br>
但是字符串≠数字
]]></description><link>软件\地理绘图\arcgis：绘制xy数据.html</link><guid isPermaLink="false">软件/地理绘图/Arcgis：绘制XY数据.md</guid><pubDate>Fri, 21 Jun 2024 07:31:13 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191755189.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191755189.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Arcgis：基础绘图]]></title><description><![CDATA[ 
 <br>通过打开目录，然后将需要的图层拖入工作区，然后在左侧的图层区进行完微调，可以更换轮廓及区域的颜色大小透明度等<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754208.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754209.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
标注每个省会城市的名字：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754210.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
这样一张初稿就完成了：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754211.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
接下来切换到布局视图：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754213.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
调整大小：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754214.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
最后调整一下：<br>
<br>指北针
<br>比例尺
<br>图例：注意，图例要进行转换成图形，取消分组，可以手动更改名称很方便！<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754215.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
对于严格的中国地图，还应该插入南海的部分，这需要进行以下操作：
<br>插入数据框<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754216.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>右点击数据框的属性：设置一下不透明度等
<br>将上述图层全部复制粘贴到南海中：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754217.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754218.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>选择南海区域，选择放大镜工具，放大南海区域：<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754219.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
]]></description><link>软件\地理绘图\arcgis：基础绘图.html</link><guid isPermaLink="false">软件/地理绘图/Arcgis：基础绘图.md</guid><pubDate>Fri, 21 Jun 2024 07:31:13 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754208.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402191754208.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Arcgis：没有ObjectID字段解决办法]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://blog.csdn.net/Sunshine_20201/article/details/108928400" rel="noopener nofollow" class="external-link" href="https://blog.csdn.net/Sunshine_20201/article/details/108928400" target="_blank">原文</a><br>若X，Y事件图层所基于的表中没有ObjectID字段。<br>
在点击【确定】时，会弹出”表没有ObjectID字段“。<br>则无法执行：<br>
<br>在地图图层中选择要素
<br>执行使用了选择集的操作，如从表导航到地图
<br>编辑图层属性
<br>对任意X，Y事件图层执行任意交互式编辑操作
<br>定义关联<br>
解决方法：（将XY数据图层另存为要素类）
<br>右击图层，点击【数据】|【导出数据】
<br>然后再立刻导入就可以了。
]]></description><link>软件\地理绘图\arcgis：没有objectid字段解决办法.html</link><guid isPermaLink="false">软件/地理绘图/Arcgis：没有ObjectID字段解决办法.md</guid><pubDate>Fri, 21 Jun 2024 07:31:14 GMT</pubDate></item><item><title><![CDATA[地理坐标系统（GCS）]]></title><description><![CDATA[ 
 <br>坐标是确定地理位置的重要参数，地球上任何一个位置可以由 经度、纬度、海拔 决定。如果我们知道了 经度和纬度 也可以查询海拔：<a data-href="python：根据经纬度获取海拔" href="软件\python\地理经纬\python：根据经纬度获取海拔.html" class="internal-link" target="_self" rel="noopener nofollow">python：根据经纬度获取海拔</a>。<br>地理坐标系统（Geographic Coordinate System, GCS）和投影坐标系统（Projected Coordinate System, PCS）是地理信息系统（GIS）中用于描述地球表面位置的两种主要坐标系统。它们的选择和使用取决于分析需求、精确度要求及地图制作的目的。<br><br>地理坐标系统使用经度（Longitude）和纬度（Latitude）来描述地球上任何位置的坐标。这些坐标是通过地球的球形或椭球形模型计算得出的。<br>
<br>经度：从本初子午线（位于格林威治，英国）向东和向西度量至180度。
<br>纬度：从赤道向北和向南度量至90度。<br>
经纬度通常用度（°）、分（'）和秒（"）来表示，或者以十进制形式表示。地理坐标系统简单直观，易于理解和使用，但由于地球的曲率，这种系统在进行面积、距离和角度的精确测量时存在误差。
<br><br>投影坐标系统则是将地球的三维表面通过数学方法投影到一个二维平面上。这种系统允许我们在平面地图上更精确地进行测量和绘图，但引入了不同类型的投影变形，如面积、形状、距离或方向的扭曲。<br>
<br>常见的投影类型：

<br>圆柱投影：如墨卡托投影，适合海洋导航，因为它能保持角度，但在高纬度地区会极大夸大面积。
<br>圆锥投影：如阿尔伯斯等角圆锥投影，适合跨越大陆的地图，能较好地保持地区间的面积比例。
<br>方位投影：如极地方位投影，常用于极地地区的地图制作。


<br><br>在我们拿到一批数据之后，在没有任何多余信息的情况下，表格中出现的经度和纬度绝大部分情况下指的是 GCS。<br><br>假如我们需要绘制全球地图，那么基本分为如下2种：<br>
<br>正轴等积方位投影（Azimuthal Equal-Area Projection），这是一种用于保持面积比例的投影方式，通常用于显示全球的对称性和保持相对区域面积。<br>
<img alt="4o28b0625501ad13015501ad2bfc0074.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408291040437.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>等角圆柱投影（Mercator Projection），这是最常见的地图投影之一。它保持了角度和形状的正确性，但会导致高纬度地区的面积失真。<br>
<img alt="世界地图1：4100万对开基础要素版线划一.JPG" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408291041537.JPG" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><br>正轴等积方位投影（Azimuthal Equal-Area Projection）是一种保持面积不变的方位投影。根据投影中心点的不同位置，它可以产生不同的投影图，适用于不同的地理区域和应用。以下是几种著名的子分类：<br>
<br>
兰伯特方位投影（Lambert Azimuthal Equal-Area Projection）：

<br>这种投影是正轴等积方位投影的标准形式。通常用于绘制全球地图或展示地球上某个特定半球的面积。投影中心可以是地球的任何点，但常用于极点或赤道。


<br>
北极方位等积投影（Polar Azimuthal Equal-Area Projection）：

<br>当投影的中心点位于北极时，这种投影被称为北极方位等积投影。它常用于极地研究和极地地区的地图绘制，因为它可以很好地展示围绕极点的区域，并且保持面积的正确性。


<br>
南极方位等积投影（Antarctic Azimuthal Equal-Area Projection）：

<br>类似于北极方位投影，这种投影的中心点位于南极，适合展示南极周围的区域。它常用于南极地区的科学研究和地图制作。


<br>
赤道方位等积投影（Equatorial Azimuthal Equal-Area Projection）：

<br>如果投影中心位于赤道上，这种投影被称为赤道方位等积投影。它适用于展示赤道附近的区域，并保持这些区域的面积比例正确。


<br>
全圆投影（Global Azimuthal Equal-Area Projection）：

<br>这种形式的投影涵盖整个地球，通常用于全球地图或地球仪的平面投影版本。它的特点是在整个地球表面保持面积的正确比例，尽管形状会发生较大的变形。


<br><br>等角圆柱投影（Mercator Projection） 是一种保持角度和形状的地图投影，但它会使高纬度地区的面积显著失真。等角圆柱投影主要有几种著名的子分类，其中包括墨卡托投影。<br>
<br>墨卡托投影（Mercator Projection）
<br>
<br>标准墨卡托投影是等角圆柱投影的经典形式，由杰拉德·墨卡托（Gerardus Mercator）于1569年发明。它将地球表面投影到一个圆柱体上，再将圆柱体展开为平面。墨卡托投影在全球地图中保持了局部角度的正确性，特别适用于航海，因为它能使直线航线成为地图上的直线。
<br>
<br>横轴墨卡托投影（Transverse Mercator Projection, TM Projection）
<br>
<br>横轴墨卡托投影是墨卡托投影的一个变体，其中投影的圆柱轴与地轴垂直，而不是平行。这种投影非常适合表示南北延伸的区域，如南北走向的国家或洲际区域。高斯-克吕格投影（Gauss-Krüger Projection）就是横轴墨卡托投影的一种。
<br>
<br>伪墨卡托投影（Pseudo-Mercator Projection）
<br>
<br>伪墨卡托投影是现代网络地图（如Google Maps和OpenStreetMap）中常用的投影。虽然它保持了与标准墨卡托投影类似的角度特性，但进行了简化，使得计算更为容易。这种投影适用于电子地图的快速渲染，但在高纬度地区仍然存在明显的面积失真。
<br>
<br>等距墨卡托投影（Equidistant Cylindrical Projection, Equirectangular Projection）
<br>
<br>等距墨卡托投影（也称为等距圆柱投影）是另一种圆柱投影，保持纬线间的距离一致。虽然它与墨卡托投影不同，主要用于简单的地图制作和一些特定的应用场景，但由于它的数学简单性，它经常被误认为是墨卡托投影的变体。
<br>
<br>倾斜墨卡托投影（Oblique Mercator Projection）
<br>
<br>倾斜墨卡托投影是一种更加特殊的变体，其中投影轴相对于赤道倾斜。这种投影常用于一些需要沿对角线方向表示的区域，尤其是当地图区域是沿某个对角线方向延伸时。
<br>
<br>加权墨卡托投影（Weighted Mercator Projection）
<br>
<br>这种投影是一个实验性的变体，试图通过对高纬度地区进行加权处理，来减少传统墨卡托投影在这些区域的面积失真。然而，这种方法在实际应用中较为少见。
想看更多投影？
<a data-tooltip-position="top" aria-label="https://m.thepaper.cn/newsDetail_forward_10750264" rel="noopener nofollow" class="external-link" href="https://m.thepaper.cn/newsDetail_forward_10750264" target="_blank">科普 | 25种地图投影类型：视觉参考指南 (thepaper.cn)</a>


<br><br>对于一批没有任何条件的经纬度数据，可以直接在平面内按照 x 轴和 y 轴直接绘制散点，然后通过整体的拉伸即可得到正轴等积方位投影，不需要进行任何坐标变换。因此，可以完美地展示在正轴等积方位投影绘制地世界地图上。除了正轴等积方位投影地世界地图，其他大部分的地图都需要进行投影变换。针对中国地区的投影变换，可以查看 <a data-href="Arcgis：变换坐标系将中国地图校正" href="软件\地理绘图\arcgis：变换坐标系将中国地图校正.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="🥵" aria-label="🥵" data-icon="🥵" aria-hidden="true" style="transform: translateY(0px);"></span>Arcgis：变换坐标系将中国地图校正</a><img class="emoji" draggable="false" alt="🥵" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg" height="18px" style="max-width: 100%;">。]]></description><link>软件\地理绘图\arcgis：深入了解坐标.html</link><guid isPermaLink="false">软件/地理绘图/Arcgis：深入了解坐标.md</guid><pubDate>Thu, 29 Aug 2024 02:55:56 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408291040437.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408291040437.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[QGIS 导入图层]]></title><description><![CDATA[ 
 <br>QGIS是一个绘制地图的软件，使用方式和 Arcgis 差不多。<br>但是从可扩展性和可操作性来看，QGIS 比 Arcgis 更容易受到青睐。<br><br>安装并打开 QGIS 之后，可以自定义工作目录：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081923093.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
可以将比较常用的目录添加到收藏夹，以供访问。<br>将 shp 文件拖到 图层 就可以进行预览：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081924475.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>右侧可以更改 图层样式：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081924897.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081925775.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
：选择带有地理位置的 csv 文件。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081926888.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>QGIS 在这一点比 Arcgis 方便很多，不会莫名其妙要求你包含 object_ID 字段，直接拖进来就可以了。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081928604.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
坐标轴一般来说是 Beijing1954 或者 Beijing WGS1984。可以逐个尝试。<br>现在稍微可以调整散点大小形状等：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081929917.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
使用 标注 功能添加文字：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081930071.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>调整完之后点击  即可。]]></description><link>软件\地理绘图\qgis：绘制xy散点图.html</link><guid isPermaLink="false">软件/地理绘图/QGIS：绘制XY散点图.md</guid><pubDate>Wed, 31 Jul 2024 01:31:46 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44e.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44e.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[什么是反距离加权差值？]]></title><description><![CDATA[ 
 <br>请在看这篇教程之前首先阅读：<br>
<a data-href="Surfer：克里金插值制作贴合的等值线图" href="软件\地理绘图\surfer：克里金插值制作贴合的等值线图.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>Surfer：克里金插值制作贴合的等值线图</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;"><br>
<a data-href="Surfer：使用z-score克里金插值等值线图" href="软件\地理绘图\surfer：使用z-score克里金插值等值线图.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="🥵" aria-label="🥵" data-icon="🥵" aria-hidden="true" style="transform: translateY(0px);"></span>Surfer：使用z-score克里金插值等值线图</a><img class="emoji" draggable="false" alt="🥵" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg" height="18px" style="max-width: 100%;"><br><br>反距离加权插值法（Inverse Distance Weighting, IDW）是一种常用的地理空间插值方法，主要用于根据已知点的数据估计未知点的数据。这种方法假设数据点间的影响随距离的增加而减少，即距离已知点越近的未知点，其属性值越倾向于接近这个已知点的属性值。<br>为什么使用反距离加权而不用克里金？
分情况讨论。克里金法具有外推 z 值的属性，因此某些情况下会导致不合理的情况。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408211556132.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
在这样的情况下，我们偏向使用反距离加权差值法：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408211558902.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><br>非常简单。首先获得 经纬度 及对应的频率（推荐使用 z 值），做法参见：<a data-href="Surfer：使用z-score克里金插值等值线图" href="软件\地理绘图\surfer：使用z-score克里金插值等值线图.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="🥵" aria-label="🥵" data-icon="🥵" aria-hidden="true" style="transform: translateY(0px);"></span>Surfer：使用z-score克里金插值等值线图</a><img class="emoji" draggable="false" alt="🥵" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg" height="18px" style="max-width: 100%;">, <a data-href="python：根据频数求z-score" href="软件\python\数据科学与格式转换\python：根据频数求z-score.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="😮‍💨" aria-label="😮‍💨" data-icon="😮‍💨" aria-hidden="true" style="transform: translateY(0px);"></span>python：根据频数求z-score</a><img class="emoji" draggable="false" alt="😮‍💨" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f62e-200d-1f4a8.svg" height="18px" style="max-width: 100%;">。<br>
获得数据之后进行：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408211600217.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
其余的设置不变，请参见 <a data-href="Surfer：克里金插值制作贴合的等值线图" href="软件\地理绘图\surfer：克里金插值制作贴合的等值线图.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>Surfer：克里金插值制作贴合的等值线图</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">。]]></description><link>软件\地理绘图\surfer：反距离加权插值制作贴合的等值线图.html</link><guid isPermaLink="false">软件/地理绘图/Surfer：反距离加权插值制作贴合的等值线图.md</guid><pubDate>Wed, 21 Aug 2024 08:02:01 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[准备]]></title><description><![CDATA[ 
 <br>Arcgis 软件教程在这：<a data-href="Arcgis Pro：使用克里金绘制单倍群等值线图" href="软件\地理绘图\arcgis-pro：使用克里金绘制单倍群等值线图.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="🥵" aria-label="🥵" data-icon="🥵" aria-hidden="true" style="transform: translateY(0px);"></span>Arcgis Pro：使用克里金绘制单倍群等值线图</a><img class="emoji" draggable="false" alt="🥵" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg" height="18px" style="max-width: 100%;"><br><br>
<br>首先下载 Surfer 软件，这里有百度网盘下载链接：

<br>链接:  <a rel="noopener nofollow" class="external-link" href="https://pan.baidu.com/s/1iSubREjN6j7fTxmfmIWeOw?pwd=iskw" target="_blank">https://pan.baidu.com/s/1iSubREjN6j7fTxmfmIWeOw?pwd=iskw</a> 提取码: iskw 


<br>然后下载 shp 文件，自己去找。
<br>最后可以下载这里的示例数据，简单尝试一下： 

<br><a data-tooltip-position="top" aria-label="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/%E5%85%8B%E9%87%8C%E9%87%91%E6%8F%92%E5%80%BC%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE.csv?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=10000001722387802&amp;Signature=FBzG6fgNJQapJOXQC%2F3SPkukFO0%3D" rel="noopener nofollow" class="external-link" href="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/%E5%85%8B%E9%87%8C%E9%87%91%E6%8F%92%E5%80%BC%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE.csv?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=10000001722387802&amp;Signature=FBzG6fgNJQapJOXQC%2F3SPkukFO0%3D" target="_blank">下载链接</a>


<br><br> <img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407310903283.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
点击 打开，选择一个合适的 shp 文件。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407310909416.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
选中 shp 文件，立刻点击 导出，导出为一个 bln 文件<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407310909251.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407310910424.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>现在，导入 csv 数据：<br>
数据由几列组成：<br>Longitude,Latitude,value
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407310911088.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
然后接着导入 bln 文件：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407310912553.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
开始制作克里金插值：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407310912545.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407310912804.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407310913864.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
这里注意，请看上图，重点调整以下选项：<br>
<br>X 方向和 Y 方向：这里主要调整最终产生的克里金插值的矩形大小。如果你喜欢更大的矩形，那么就把最小值变得更小，最大值变得更大。但是这样做会让画面很模糊，因此可以增大节点数，从而提高分辨率。
<br>不分配数据的多边形文件指的是，我们可以根据 bln 文件来删除不想看到克里金插值图形的地方（例如海洋等）。在这里我们选择刚才导出的 bln 文件，然后选择 外部白化。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407310913434.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
现在你得到了乱七八糟的图形。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407310915458.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><br>将需要的图层拖动到一起，会自动进行坐标系对齐！：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407310919157.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
填充等值线，选择美丽的颜色，然后按照自己的需求调整即可！<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407310921367.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
最后 导出 为 PDF 即可！]]></description><link>软件\地理绘图\surfer：克里金插值制作贴合的等值线图.html</link><guid isPermaLink="false">软件/地理绘图/Surfer：克里金插值制作贴合的等值线图.md</guid><pubDate>Sat, 03 Aug 2024 13:46:47 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[计算公式]]></title><description><![CDATA[ 
 <br>什么叫做 z-score？
这是一种归一化的手段。具体请去百度。
<br><br>由于我们一般关注的是频率数据，所以在这个背景下，计算如下<a data-footref="1" href="about:blank#fn-1-a9718c06e0409e5e" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>：<br><br>
<br> 是群体中的单倍群的频率
<br> 是群体中所有单倍群的平均值
<br> 是标准差
<br><br>由于我的脚本是按照省份进行计算的，所以至少需要这几项<br>ID,Province,Haplogroup,Latitude,Longitude
1,Sichuan,D4,30,100
复制<br>请自己准备好上述数据。<br><br>这个脚本是进行累加的（会把下游单倍群累加到上游作为单倍群，所以还需要准备单倍群<a data-tooltip-position="top" aria-label="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/%E7%BA%BF%E7%B2%92%E4%BD%93%E5%8D%95%E5%80%8D%E7%BE%A4phylotree(version17).txt?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1722697016&amp;Signature=CuMBXp2%2FfK78iY3BbdmF%2Bs7fQwA%3D" rel="noopener nofollow" class="external-link" href="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/%E7%BA%BF%E7%B2%92%E4%BD%93%E5%8D%95%E5%80%8D%E7%BE%A4phylotree(version17).txt?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1722697016&amp;Signature=CuMBXp2%2FfK78iY3BbdmF%2Bs7fQwA%3D" target="_blank">列表文件</a>）<br>
Y 染色体的代码更简单，请自己仿照下列写。<br>import pandas as pd

# 读取并解析单倍群列表文件
def parse_haplogroup_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        haplogroup_lines = f.readlines()

    haplogroup_tree = {}
    stack = []

    for line in haplogroup_lines:
        stripped_line = line.strip()
        if not stripped_line:
            continue
        indent_level = len(line) - len(stripped_line)
        while len(stack) &gt; 0 and stack[-1][1] &gt;= indent_level:
            stack.pop()
        if stack:
            parent = stack[-1][0]
            haplogroup_tree.setdefault(parent, []).append(stripped_line)
        stack.append((stripped_line, indent_level))

    return haplogroup_tree

# 查找特定单倍群的所有下游单倍群
def find_all_descendants(haplogroup, haplogroup_tree):
    descendants = []
    stack = [haplogroup]
    while stack:
        current = stack.pop()
        if current in haplogroup_tree:
            children = haplogroup_tree[current]
            descendants.extend(children)
            stack.extend(children)
    return descendants

# 替换下游单倍群为上游单倍群，并记录未找到的单倍群
def replace_haplogroups(data, haplogroup_name, haplogroup_tree):
    descendants = find_all_descendants(haplogroup_name, haplogroup_tree)
    found_haplogroups = set(data['Haplogroup'].unique())
    missing_haplogroups = [hap for hap in descendants if hap not in found_haplogroups]
    
    if missing_haplogroups:
        print(f"The following haplogroups were not found in the dataset: {', '.join(missing_haplogroups)}")
    
    data['Haplogroup'] = data['Haplogroup'].apply(lambda x: haplogroup_name if x in descendants else x)
    return data

# 加载数据
#file_path = '阿尔泰语系.csv'
file_path = '数据清洗整理（合并满族样本）.csv'
data = pd.read_csv(file_path)

# 加载并解析单倍群列表文件
haplogroup_file_path = '线粒体单倍群phylotree(version17).txt'
haplogroup_tree = parse_haplogroup_file(haplogroup_file_path)

# 获取单倍群在各省的数量
haplogroup_name = input("Please input your haplogroup:(eg:D4)")
data_replaced = replace_haplogroups(data, haplogroup_name, haplogroup_tree)

# 过滤指定单倍群并统计各省数量
def count_haplogroup_by_province(haplogroup_name, data, haplogroup_tree):
    descendants = find_all_descendants(haplogroup_name, haplogroup_tree)
    
    filtered_data = data[data['Haplogroup'] == haplogroup_name]
    province_counts = filtered_data['Province'].value_counts().reset_index()
    province_counts.columns = ['Province', 'Value']
    
    total_counts = data.groupby('Province').size().reset_index(name='Total')
    province_counts = province_counts.merge(total_counts, on='Province', how='left')
    
    # 获取每个省的第一次出现的纬度和经度
    province_info = data[['Province', 'Latitude', 'Longitude']].drop_duplicates(subset='Province')
    province_counts = province_counts.merge(province_info, on='Province', how='left')
    
    # 过滤Total小于200的省份
    province_counts = province_counts[province_counts['Total'] &gt;= 200]
    
    return province_counts

province_counts = count_haplogroup_by_province(haplogroup_name, data_replaced, haplogroup_tree)

countstocsv = input("是否输出数量分布文件？请回答：（YES/NO）")
if countstocsv == "YES":
    province_counts.to_csv(f"C:/Users/victo/Desktop/Distribution_{haplogroup_name}.csv",sep=",",encoding='utf-8')

# 计算z-score
province_counts['Mean'] = province_counts['Value'].mean()
province_counts['SD'] = province_counts['Value'].std()
province_counts['z'] = (province_counts['Value'] - province_counts['Mean']) / province_counts['SD']

# 重新排列列的顺序，并生成新的文件
zscore_file = province_counts[['z','Latitude', 'Longitude']]

# 保存到CSV文件
output_file_path = f"C:/Users/victo/Desktop/Distribution_{haplogroup_name}_zscore.csv"
zscore_file.to_csv(output_file_path, sep=",", encoding="utf-8", index=False)

print(f"File saved to {output_file_path}")

复制<br>现在你得到了数据：<br>z,Latitude,Longitude
1.0,23,110
复制<br>将这些数据放入软件。<br>
参照 <a data-href="Surfer：克里金插值制作贴合的等值线图" href="软件\地理绘图\surfer：克里金插值制作贴合的等值线图.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>Surfer：克里金插值制作贴合的等值线图</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;"><br>
下列改变，其它不变。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408032201430.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br>
<br>
<br><a data-href="2019 MBE 河流流域塑造了汉族的母系遗传景观" href="文献及报道\文献\2024年阅读\1-6月\2019-mbe-河流流域塑造了汉族的母系遗传景观.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="😀" aria-label="😀" data-icon="😀" aria-hidden="true" style="transform: translateY(0px);"></span>2019 MBE 河流流域塑造了汉族的母系遗传景观</a><img class="emoji" draggable="false" alt="😀" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f600.svg" height="18px" style="max-width: 100%;"><a href="about:blank#fnref-1-a9718c06e0409e5e" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>软件\地理绘图\surfer：使用z-score克里金插值等值线图.html</link><guid isPermaLink="false">软件/地理绘图/Surfer：使用z-score克里金插值等值线图.md</guid><pubDate>Sat, 03 Aug 2024 14:16:24 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[构建系统发育树的重要步骤]]></title><description><![CDATA[ 
 <br><br>如果你的序列的某些区域特别容易突变，那可能导致基于这些区域的系统发育分析结果不准确或误导。因此，我们需要选择变异较低的保守区域进行系统发育分析，以提高树的准确性和解析力。<br><br>将得到的序列提交Gblock在线服务器（<a rel="noopener nofollow" class="external-link" href="http://www.phylogeny.fr/one_task.cgi?task_type=gblocks" target="_blank">http://www.phylogeny.fr/one_task.cgi?task_type=gblocks</a>），得到保守区的序列 align_cured.fasta。<br>这个网站目前缺乏维护，已经出现了很多替代品。这里推荐Trimal软件，可以自动修剪去除不可靠的区域：<a data-href="Trimal：自动修剪序列不可靠区域" href="软件\其它生信软件\t-z\trimal：自动修剪序列不可靠区域.html" class="internal-link" target="_self" rel="noopener nofollow">Trimal：自动修剪序列不可靠区域</a>。<br><br>不能建树<br><br>可以建树<br><br>如果你的序列突变过多，导致饱和，那么就无法反映正确的系统发育关系。需要进行检测。<br><br>通常有两种方法：  <br>
<br>第一种是PAUP 软件。
<br>第二种用DAMBE 软件。<br>
这里使用第二种。DAMBE：核苷酸替代饱和度检测<br>
<br><br>序列比对的目的是获得长度一样的序列。<br><br>多种软件都可以用来比对：<br>
<br><a data-href="MEGA" href="MEGA" class="internal-link" target="_self" rel="noopener nofollow">MEGA</a>
<br><a data-href="MAFFT" href="MAFFT" class="internal-link" target="_self" rel="noopener nofollow">MAFFT</a>
<br>MUSCLE
<br>……
<br>推荐你看看这个<a data-href="序列比对（Align）软件评测" href="软件\其它生信软件\使用心得\序列比对（align）软件评测.html" class="internal-link" target="_self" rel="noopener nofollow">序列比对（Align）软件评测</a><br>
再看看这个序列比对的思考<br><br><a data-href="序列比对（Align）软件评测" href="软件\其它生信软件\使用心得\序列比对（align）软件评测.html" class="internal-link" target="_self" rel="noopener nofollow">序列比对（Align）软件评测</a><br>转载自如下：
<a data-tooltip-position="top" aria-label="https://www.yuque.com/wusheng/gw7a9p/otk3ex" rel="noopener nofollow" class="external-link" href="https://www.yuque.com/wusheng/gw7a9p/otk3ex" target="_blank">序列比对前须知(1) (yuque.com)</a>
<br><br>
<br>全局比对（global alignment）  :它是假设两条序列在整个长度上是相似的，然后从头到尾比较两条序列的最佳匹配，适合高度相关等长序列比对。不适用于发散的不同长度的序列，因为它不能识别两条序列中高度相似的局部序列。  
<br>局部比对（local alignment）  :不考虑两条序列全局相似，而是找两条序列中高度相似的局部区域而不考虑其他区域，适合包含相似模块分散的生物序列，可以找出domain（保守区）和motif。  
<br>两种策略的区别  ：假设如下两条序列Query和Subject，分别采用全局比对和局部比对比对策略，从下图红色方框里可以看出差异<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603222910.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>有无Gap比对：两条序列，进行有空位比较和无空位比较的差异如下图：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603222925.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><br>不管采用哪种策略，比对算法基本上是相似的：  <br>
<br>点阵方法：构造一个二维矩阵。很容易识别序列中高度相似的区域，它在识别染色体重复（两条相同序列，即自己和自己比）和比较两个高度相关的基因组中的基因顺序的保守性非常有用。缺点：很难构造多序列比对。
<br>动态规划方法：匹配两条序列中所有可能字符，也是构造一个二维矩阵确定最优比对方法。里面引入“空位罚分”，即代表插入和删除的空位，因为在自然进化中插入和删除的发生频率比替换相对少。而且开始一个新的空位和拓展一个已经存在的空位付出的代价是不同的（原理是一旦插入和删除发生，那么临近的一些残基很容易插入和删除），两者会有不同的罚分。序列末尾不进行罚分，因为实际中很多同源序列是不等长的，如果末端进行了空位罚分反而是不实际的结果。  
<br>启发式算法：一个基于直观或经验构造的算法，在可接受的花费（指计算时间和空间）下给出待解决组合优化问题每一个实例 的 一个可行解，该可行解与最优解的偏离程度一般不能被预计。  
<br><br>
<br>全局比对的动态规划算法：经典的算法是Needleman-Wunsch算法。它必须对序列从头到尾进行计算得到最高比对得分。缺点，关注全长的最大比对的缺点是找不到局部的序列相似。对于发散序列和具有不同结构域的序列，这种方法达不到最理想的比对。全局两两比对的web程序是GAP.  
<br>局部比对的动态规划算法：正常比对序列中，两条被比对序列的分离水平是不知道的，两条序列的长度也可能不同，这种情况下，识别局部相似性比去对比包含残基的整个序列更加有意义。第一个运用动态规划进行局部序列比对的算法是Smith-Waterma算法。  
<br>&nbsp;<br>
这种算法下的局部比对分为两种：<br>
1. local alignment (Smith-Waterman) with affine gap costs (Gotoh)<br>
2. local alignment with generalized affine gap costs (Altschul)<br>
全局比对中，最终结果受到选用得分矩阵的影响，而局部比对的目标是找到局部最高分。这种方法适应于对分散序列和具有来自多个不同源的区域序列，目前大多数两两比对程序基本采用局部比对策略。<br><br>
<br>动态规划算法 &nbsp;可得到最优解，但是计算量非常大，实际中很难用于多序列比对。  
<br>启发式算法（heuristic algorithm)  

<br>渐进法（progressive methods）：Clustal, T-Coffee, MUSCLE  
<br>迭代法（iterative methods）：PRRP, DIALIGN  
<br>其它算法：Partial Order Algorithm、profile HMM、meta-methods (<a data-href="MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)" href="软件\其它生信软件\a-j\mafft：(multiple-alignment-program-for-amino-acid-or-nucleotide-sequences).html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)</a>)…<br>
注：启发式算法的计算过程也有可能利用到动态规划算法，比如Clustal采用的渐进式算法：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603223405.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">


<br><br>&nbsp;1. 核苷酸得分矩阵  ：核苷酸得分矩阵相对简单，对匹配位置赋予一个正值或者高分，对失配位置赋予一个负值或者低分。但是这种方法不符合实际，观察显示转换（嘌呤与嘌呤或者嘧啶与嘧啶之间的替换）发生频率比颠换（嘧啶与嘌呤之间的替换）高，因此，需要一个反应不同残基替换发生频率不同的更加复杂的统计模型。<br>
2. 氨基酸的替换矩阵 ：氨基酸的替换矩阵比较复杂，某种氨基酸很容易被具有相似理化性质的其他氨基酸替换，而很难被具有不同理化性质的氨基酸替换。而不同理化性质的氨基酸替换可能导致结构和功能的缺失，这种会导致分类的替换是很少被进化所选择的。  氨基酸替换矩阵是一个20×20矩阵，它用来反映氨基酸被替换的可能性。经验上的矩阵，包括PAM矩阵和BLOSUM矩阵。  <br><br>PAM的意思是可接受的点突变，观察到的突变不会改变蛋白质的一般功能，观察到的氨基酸突变被认为是自然选择接受了的。一个PAM单位被定义为有1%的氨基酸位点发生了变化或者100氨基酸有1个发生突变，但这并不意味100次PAM后，每个氨基酸都发生变化，因为其中一些位置可能会经过多次突变，甚至可能会变回到原来的氨基酸。一个特定残基对的PAM分数是通过一个多阶段过程得到的，这个过程包括：<br>
1. 计算相对突变率。一个特定氨基酸被同源氨基酸替换的总数除以在整个比对中这种氨基酸出现的总数；  &nbsp;<br>
2. 用随机替换率对预期的氨基酸替换率进行标准化，把标准化的突变率除以特定氨基酸出现频率，然后取以10为底的对数。把结果取整后填入替换矩阵，这个矩阵就可以反映氨基酸替换的可能性。<br>
3. 对于较分散序列的高阶PAM矩阵是通过对PAM1矩阵相乘推出来的，例如，PAM80就是对PAM1矩阵自乘80次得到的。一个PAM80矩阵只相当于观察到突变率的50%，PAN250表示一致性为20%。<br>
4. 缺点：PAM矩阵构建过程中，只是之间观察了PAM1中的基于一小堆极近相近序列中的残基替换（这个要从PAM矩阵的来源说起，当时构建这个矩阵用的序列是21组非常接近的蛋白质序列），PAM矩阵对于分散序列的比对是不可靠的。  PAM矩阵数字与序列相似度的对应关系：  <br><br>注意:PAM250矩阵&nbsp;→&nbsp;对应这些用于比对的序列相似度估计在14%&nbsp;–&nbsp;27%，一般PAM250矩阵对应序列相似度在20%。  <br><br>为了弥补PAM的缺点，BLOSUM矩阵应用而生，BLOSUM矩阵与PAM矩阵的不同之处在于：用于产生矩阵的蛋白质家族及多肽链数目，BLOSUM比PAM大约多20倍。BLOSUM矩阵不用推断，而是用实际上所选序列的残基一致性的比例来构建矩阵。与PAM矩阵的阶数相反，BLOSUM矩阵阶数越低代表序列越分散。比如BLOSUM60，这个矩阵首先寻找氨基酸模式，即有意义的一段氨基酸片断（如一个结构域及其相邻的两小段氨基酸序列），分别比较相同的氨基酸模式之间氨基酸的保守性（某种氨基酸对另一种氨基酸的取代数据），然后，以所有&nbsp;60％保守性的氨基酸模式之间的比较数据为根据，产生BLOSUM60；同理，以所有80％保守性的氨基酸模式之间的比较数据为根据，产生BLOSUM80。  <br><br>&nbsp; ①PAM1矩阵是通过一个进化模型得到的，而BLOSUM矩阵完全是由观测值构成，因此，BLOSUM矩阵可能没有PAM矩阵那么强的进化上的实际意义，这也是PAM矩阵被常用来重构系统发育树的原因。<br>
②PAM矩阵对发散序列可能不符合实际。<br>
③BLOSUM矩阵是完全通过保守序列的局部比对得到的，而PAM1是对包含保守和变化区域的整个序列全局比对得到的。这是BLOSUM矩阵更加适用于搜索数据库和寻找蛋白质中保守区域的原因。一些经验上测试BLOSUM矩阵在局部比对的正确性上胜过PAM矩阵。  <br>  对于一个给定的矩阵，一个正的分数说明在一个同源序列的数据集里观察到的氨基酸替换频率比随机替换频率高；零分表示在一个同源序列的数据集里观察到的氨基酸替换频率和随机替换频率相等；负数一个同源序列的数据集里观察到的氨基酸替换频率比随机替换频率低，这通常发生在不相似残基之间。  <br><br>序列比对本身就是一个随机问题，我们要对这种随机进行检验，比对完后，会有一个P值。<br>
P值的解读：  <br>
<br>如果P值小于10-100，表明两条序列是精确匹配的；  
<br>如果10-100&lt;P&lt;10-50，表明两条序列近似匹配；  
<br>如果10-50&lt;P&lt;10-5，表明两条序列有较近的同源关系；  
<br>如果10-5&lt;P&lt;10-1，表明两条序列可能存在较远的同源关系；  
<br>如果P&gt;10-1，那么这两条序列能匹配上可能是由于随机的关系；<br>
可以使用软件PRSS，用来评价序列两两比对在在统计学上显著性。  
<br><br>同一性和同源性这两个词经常被混淆。<br>
同源性只有高低之分，没有具体数值，属于"质”的属性；<br>
同一性才有具体数值，是“量”词。同一性数值越大，同源性越高。<br><br>多序列比对有3个东西是大家基本认同的：  <br>
<br>基因编码区的比对，需要采取基于密码子方式的比对；  
<br>目前多序列比对精确度：MAFFT&gt;Muscle&gt;Clustal；  
<br>多序列比对尽管是最基础的步骤，但是会影响后续的分析。  
<br>笔者最近发现了一个有趣的现象，不过也仅仅是这次处理的数据集才遇到，这让我重新审视了序列比对这个东西---多序列比对尽可能选用精确度高的工具，且一定要仔细检查比对后的Alignment文件。<br>
因为有时，对于某些数据，某种工具和某种方法比对的结果不一定是正常的(准确的)。<br>
笔者从NCBI下载了70条某个基因的基因编码区序列（已知是高度相似的），每条序列都从ATG起始密码子开始，如下：(截图仅显示了42条）<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603224023.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
选用了MEGA X里的Muscle(Codons)，也就是Muscle的基于密码子的比对方法，比对结果部分截图如下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603224033.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
看上去好像有哪里不对劲，竟然在起始密码子(ATG)前引入了gap，尽管引入的gap数量是3个(3的倍数），但是gap引入位置不对，比对结果不合理，或者说前面9个碱基没比对正确。<br>
换用MEGA X里的ClustalW(Codons)进行多序列比对，比对结果如下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603224058.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
还是有很多序列在起始密码子(ATG)前引入了gap，比对结果不合理，和Muscle(Codons)的结果相差无几。  <br><br>换用MEGA X里的Muscle，这次采用不基于密码子的比对方法，比对结果如下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603224121.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
嗯，结果看上去，所有序列都是以ATG起始了，而且引入的gap的数量也是3的倍数。  <br>接下来看看，这种引入gap从生物学角度来看是否合理：  <br>
以EF203067和MF094681为例，其生物学意义是，如果考虑EF203067来自于MF094681的话，MF094681在其第二个密码子ACT在A和C之间插入了3个碱基(GTA),于是产生了EF203067的前9个碱基ATGAGTACT，相比于MF094681的前6个碱基“ATGACT”而言，这种插入碱基的方式，使得EF203067在该位置只是多了一个氨基酸而并没有发生移码突变，其他序列的插入碱基方式也没有造成移码突变，而这些序列已知是高度相似的，所以这种通过插入碱基而突变的方式是合理的。尽管有一定的生物学意义，但是基因编码区不基于密码方式子比对，结果可能不太可靠。
<br>换用MEGA X里的ClustalW，也采用不基于密码子的比对方法，结果如下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603224457.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
和ClustalW基于密码子的比对方法的结果差不多，在ATG前引入了gap，比对结果不合理。<br><br>主要是数据的引起的。  由于这个插入发生的位置比较特殊，非常靠前，而比对中引入gap本身就是一个带有概率的随机事件，所以Muscle和ClustalW在尽管采取了基于密码子的方式比对，结果还是不尽人意。<br>
通过上面的Muscle(Codons)和ClustalW(Codons)比对的结果，我们可以大致推测，自然界中真实的情况可能是，有几条序列在起始密码子ATG后面，从第4个碱基开始，直接插入了3个碱基，导致他们比其他序列在这个位置多了3个碱基(即多了1个氨基酸)。  <br><br><br>碱基的<a data-href="颠换（transversion）" href="术语\颠换（transversion）.html" class="internal-link" target="_self" rel="noopener nofollow">颠换（transversion）</a>和<a data-href="转换（transition）" href="术语\转换（transition）.html" class="internal-link" target="_self" rel="noopener nofollow">转换（transition）</a>发生的概率不同，序列内的碱基频率也可能影响对系统发育的判断，所以我们需要进行检测。<br>
具体的原理如下：图解核苷酸替换模型（Nucleotide substitution models）<br><br><br>软件很多，例如jModeltest,bmodeltest等。在这里推荐：<a data-href="iqtree：寻找最优模型及分区" href="软件\iqtree\iqtree：寻找最优模型及分区.html" class="internal-link" target="_self" rel="noopener nofollow">iqtree：寻找最优模型及分区</a>。<a data-tooltip-position="top" aria-label="http://user.qzone.qq.com/58001704/blog/1369539093" rel="noopener nofollow" class="external-link" href="http://user.qzone.qq.com/58001704/blog/1369539093" target="_blank">其它的软件</a><br><br>原理：系统发育树<br><br><br>系统发育树（也称为系统发育树或进化树）是一种分支图或树，根据它们的物理或遗传特征的异同说明各种生物物种或其他实体之间的进化关系。 地球上的所有生命都属于一个单一的系统发育树，表明有一个共同的祖先。<br>在有根的系统发育树中，每个具有后代的节点代表这些后代的推断最近的共同祖先，并且在某些树中，边长可以解释为时间估计。 每个节点都称为分类单元。 内部节点通常被称为假设的分类单元，因为它们无法直接观察到。 生物信息学、系统学和系统发育学等生物医学学科发现树木很有价值。 从低级生命形式到高级生命形式（例如存在大链）的阶梯状进展的古老概念产生了生命之树的概念。 早期对“分支”系统发育树的描述包括爱德华希区柯克（1800 年代）著作《基础地质学》中描述植物和动物之间地质关系的“古生物学图表”。查尔斯·达尔文 (Charles Darwin) 在 1859 年出版的《物种起源》(On the Origin of Species) 一书中用图表描绘了一棵进化“树”。 一个多世纪后，进化生物学家继续使用树状图来说明进化，因为它们有效地传达了物种形成是通过谱系的适应性和半随机分裂发生的概念。术语系统发育或系统发育源自古希腊语单词 v (phûlon)，意思是“种族”或“血统”，以及 (génesis)，意思是“起源”或“来源”。<br><br><img alt="Part-of-a-phylogenetic-tree-Li-and-Goldman-1998" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Part-of-a-phylogenetic-tree-Li-and-Goldman-1998.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>分支：系统发育树的分支代表进化谱系或血统。 它们连接节点或发散站点。
<br>Nodes：节点代表从它分化出来的物种或群体的共同祖先。 当节点表示不可观察的共同祖先时，它们可以称为内部节点或内部分支。
<br>树叶：&nbsp;系统发育树的尖端或叶子代表现存或活着的物种或群体。 终端类群是位于分支末端的类群。
<br>Root（根）：系统发育树的根代表所有包括的物种或群体的最近的共同祖先。 通常，它被描绘在树的底部。
<br>分支长度：&nbsp;在系统发育树中，分支长度表示沿特定分支发生的进化时，遗传物质的变化的数量。 就时间（例如，数百万年）或遗传变异（例如，DNA 替换）而言，持续时间可以量化。
<br><br>
<br>系统发育距离：&nbsp;两个物种或群体之间的系统发育距离量化了它们的相关程度。 通常，它是使用遗传或形态差异来估计的。
<br>类群：分类群是构成系统发育树的生物体或物种的类别。 单个物种到更高的分类水平，例如属、科、目，甚至更大的群体。
<br>分支：氏族是系统发育树中的单系实体，由祖先及其所有后代组成。 它们具有源自共同祖先的独特特征。
<br><br><br><img alt="Figure_20_01_01-768x231" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Figure_20_01_01-768x231.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
有根和无根树 | 这两种系统发育树都显示了生命的三个领域（细菌、古细菌和真核生物）之间的关系，但 (a) 有根树试图确定各种物种何时从一个共同祖先中分化出来，而 (b) 无根树则没有。 <br><br>
<br>有根的系统发育树说明了具有共同祖先的类群之间的进化关系。
<br>根代表树中所有分类群共享的最近的祖先。 它通常位于树的底部，并作为解释分类单元之间的分支模式和进化关系的参考点。
<br>有根树揭示了进化的方向性和分歧事件的相对时间线。
<br><img alt="rooted-phylogenetic-tree" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/rooted-phylogenetic-tree.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>
<br>无根系统发育树描述了缺乏指定共同根的分类群之间的进化关系。
<br>无根树不是单一的根，而是将分类关系描述为一系列连接的分支和节点。 无根树无法提供有关进化方向或分歧事件的相对时间线的信息，因为它们缺少根。
<br>无根树主要用于可视化类群之间的关系，但它们也可用于推断进化模式并识别密切相关的类群或群。
<br><img alt="un-rooted-phylogenetic-tree-1" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/un-rooted-phylogenetic-tree-1.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
无根树<br><br><br><img alt="cladogram869610009617971312" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/cladogram869610009617971312.webp" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br>软件很多，<a data-href="RAxML-NG：使用基础" href="软件\其它生信软件\k-s\raxml-ng：使用基础.html" class="internal-link" target="_self" rel="noopener nofollow">RAxML-NG：使用基础</a>，<a data-href="iqtree：基础操作" href="软件\iqtree\iqtree：基础操作.html" class="internal-link" target="_self" rel="noopener nofollow">iqtree：基础操作</a>, <a data-href="MrBayes：贝叶斯方法建树" href="软件\beast\mrbayes：贝叶斯方法建树.html" class="internal-link" target="_self" rel="noopener nofollow">MrBayes：贝叶斯方法建树</a>]]></description><link>软件\其它生信软件\使用心得\构建系统发育树的重要步骤.html</link><guid isPermaLink="false">软件/其它生信软件/使用心得/构建系统发育树的重要步骤.canvas</guid><pubDate>Wed, 11 Sep 2024 09:44:06 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603222910.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603222910.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[简易的mtDNA分析流程]]></title><description><![CDATA[ 
 具体代码具体代码流程逻辑软件需求<br>你可能需要更新一下 java 的版本：<br>sudo apt update
sudo apt install openjdk-17-jdk
复制<br>如果是全基因组的 VCF 文件<br>#!/bin/bash

# 指定VCF文件所在的目录
VCF_DIR="/mnt/d/MTDNA/10K_CPGDP/VCF/Extracted_MT"
# 指定合并后输出文件的位置（包括文件名）
OUTPUT_FILE="/mnt/e/Scientifc_software/haplocheck/vcf_input/merged_output.vcf"

# 压缩所有VCF文件并生成.gz文件
for file in ${VCF_DIR}/*.vcf; do
    echo "Compressing $file with bgzip..."
    bgzip -c "$file" &gt; "${file}.gz"
    if [ $? -ne 0 ]; then
        echo "Error compressing $file"
        exit 1
    fi
done

# 为压缩后的文件生成索引
for file in ${VCF_DIR}/*.vcf.gz; do
    echo "Indexing $file..."
    bcftools index "$file"
    if [ $? -ne 0 ]; then
        echo "Error indexing $file"
        exit 1
    fi
done

# 合并所有压缩并索引过的VCF文件
echo "正在合并文件到 $OUTPUT_FILE..."
bcftools merge ${VCF_DIR}/*.vcf.gz -o "$OUTPUT_FILE"
if [ $? -ne 0 ]; then
    echo "Error during merging VCF files."
    exit 1
fi

echo "已经成功合并至 $OUTPUT_FILE."

复制<br>cd /mnt/e/Scientifc_software/Haplogrep3
/mnt/e/Scientifc_software/Haplogrep3/haplogrep3 classify \
    --input /mnt/d/MTDNA/10K_CPGDP/VCF/Extracted_MT/xks_325samples_joint_call_MT.vcf \
    --tree phylotree-rcrs@17.2 \
    --output /mnt/c/Users/victo/Desktop/10K \
    --extend-report \
    --write-fasta
复制<br><a data-href="MAFFT" href="MAFFT" class="internal-link" target="_self" rel="noopener nofollow">MAFFT</a> 软件：<a data-href="MAFFT：使用教程" href="软件\其它生信软件\k-s\mafft：使用教程.html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：使用教程</a><br><br>#!/bin/bash

# 定义输入和输出目录
input_dir="/mnt/d/MTDNA/10K_CPGDP/VCF/Oringin"
output_dir="/mnt/d/MTDNA/10K_CPGDP/VCF/Extracted_MT"

# 创建输出目录（如果不存在）
mkdir -p "$output_dir"

# 遍历输入目录中的每个 .vcf.gz 文件
for filepath in "$input_dir"/*.vcf.gz; do
    # 获取文件名
    filename=$(basename "$filepath")
    # 定义输出文件路径
    output_path="$output_dir/${filename/.vcf.gz/_MT.vcf}"
    
    # 使用 bcftools 提取MT染色体数据并解压为 .vcf 格式
    bcftools view -r MT "$filepath" -o "$output_path"  # 未使用 -Oz, 输出为解压后的 .vcf 文件
    
    # 为解压后的 .vcf 文件创建索引
    bcftools index --force "$output_path"  # --force 标志可以强制重新生成索引
    
    echo "MT染色体数据已从 $filename 提取并解压到 $output_path，且已创建索引。"
done


复制<br>或者使用遍历子文件夹：<br>#!/bin/bash

# 定义输入和输出目录
input_dir="/mnt/d/MTDNA/10K_CPGDP/VCF/Oringin"
output_dir="/mnt/d/MTDNA/10K_CPGDP/VCF/Extracted_MT"

# 创建输出目录（如果不存在）
mkdir -p "$output_dir"

# 使用 find 命令递归查找所有 .vcf.gz 文件
find "$input_dir" -type f -name "*.vcf.gz" | while read -r filepath; do
    # 获取文件名
    filename=$(basename "$filepath")
    # 定义输出文件路径
    output_path="$output_dir/${filename/.vcf.gz/_MT.vcf}"
    
    # 使用 bcftools 提取MT染色体数据并解压为 .vcf 格式
    bcftools view -r MT "$filepath" -o "$output_path"  # 输出为解压后的 .vcf 文件
    
    # 为解压后的 .vcf 文件创建索引
    bcftools index --force "$output_path"  # --force 标志可以强制重新生成索引
    
    echo "MT染色体数据已从 $filename 提取并解压到 $output_path，且已创建索引。"
done

复制<br>注意，有时候古代 DNA 的 BAM 文件存在多个文件一个命名的情况，这是由于一个样本测序多次。
我们的解决办法是，为每个 BAM 文件单独生成 fasta 文件。因为 mtDNA 的覆盖度一般比较高。
<br>#!/bin/bash

# 指定目录
input_dir="/mnt/d/MTDNA/古代DNA/WangNatCommun2019/output_files"
output_dir="$input_dir/with_rg"

# 创建输出目录
mkdir -p "$output_dir"

# 遍历目录中的 BAM 文件
for bam_file in "$input_dir"/*.bam; do
    # 提取文件名（去掉路径和扩展名）
    file_name=$(basename "$bam_file" .bam)
    
    # 生成包含 Read Group 的新 BAM 文件
    samtools addreplacerg -r "ID:$file_name" -r "SM:$file_name" -r "PL:ILLUMINA" \
    -o "$output_dir/${file_name}_rg.bam" "$bam_file"
done

cd $output_dir

for file in "$output_dir"/*.bam; do
    samtools index "$file"
done

复制<br>
<br>GATK 软件
<br>JAVA 软件
<br>samtools 软件
<br>haplocheck 软件
<br>haplogrep 软件
<br>bcftools 软件
<br><br>请前往官网下载这些软件至 Linux 系统或者 WSL 系统<br><br><br><br><br>#!/bin/bash

# 指定搜索的根目录
root_dir="/mnt/d/MTDNA/古代DNA/ZhuMBG2024"

# 线粒体DNA的染色体名称（可以修改为实际的名称，例如 'MT', 'chrM' 等）
mt_chr="MT"

# 输出文件夹名称
output_dir="$root_dir/output_files"

# 错误日志文件路径
error_log="$output_dir/error.txt"

# 创建输出文件夹（如果不存在）
mkdir -p "$output_dir"

# 清空或者创建 error.txt 文件
&gt; "$error_log"

# 检查 samtools 是否已安装
if ! command -v samtools &amp;&gt; /dev/null
then
    echo "Error: samtools is not installed. Please install it before running this script."
    exit 1
fi

# 递归查找 .bam 文件
find "$root_dir" -name "*.bam" | while read bam_file; do
    # 检查文件是否存在且可读
    if [ ! -r "$bam_file" ]; then
        echo "Error: Cannot read BAM file: $bam_file"
        echo "$bam_file" &gt;&gt; "$error_log"
        continue
    fi
    
    # 为每个 .bam 文件生成索引（如果索引文件不存在）
    if [ ! -f "${bam_file}.bai" ]; then
        echo "Indexing BAM file: $bam_file"
        samtools index "$bam_file"
        if [ $? -ne 0 ]; then
            echo "Error: Failed to index BAM file: $bam_file"
            echo "$bam_file" &gt;&gt; "$error_log"
            continue
        fi
    else
        echo "BAM index already exists for: $bam_file"
    fi

    # 提取线粒体DNA (基于 mt_chr 变量)
    output_file="$output_dir/$(basename ${bam_file%.bam}_${mt_chr}.bam)"
    echo "Extracting mitochondrial DNA ($mt_chr) to: $output_file"
    samtools view -b "$bam_file" "$mt_chr" &gt; "$output_file"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to extract mitochondrial DNA from $bam_file"
        echo "$bam_file" &gt;&gt; "$error_log"
        continue
    fi

    # 为生成的线粒体 BAM 文件建立索引
    echo "Indexing mitochondrial BAM file: $output_file"
    samtools index "$output_file"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to index mitochondrial BAM file: $output_file"
        echo "$bam_file" &gt;&gt; "$error_log"
    fi
done

# 打印完成信息
echo "Processing complete. All output files are in $output_dir. Any errors have been logged to $error_log."

复制<br>注意，完整的步骤解析在这里：<a data-href="GATK：简易的mtDNA分析流程" href="软件\其它生信软件\使用心得\gatk：简易的mtdna分析流程.html" class="internal-link" target="_self" rel="noopener nofollow">GATK：简易的mtDNA分析流程</a><br><br><br>#!/bin/bash
# 如果mtDNA的名称改变，请注意gatk命令改变。
# 指定根目录和输出文件夹
root_dir="/mnt/d/MTDNA/古代DNA/ZhuMBG2024/output_files"
reference_genome="/mnt/e/Scientifc_software/Reference/MT.fasta"
output_dir="$root_dir/vcf_output"

# 创建输出文件夹
mkdir -p "$output_dir"

# 遍历 BAM 文件，使用 GATK HaplotypeCaller 生成 vcf 文件
for bam_file in "$root_dir"/*.bam; do
    sample_name=$(basename "$bam_file" .bam)
    output_vcf="$output_dir/${sample_name}.vcf"
    echo "正在处理bam文件 $bam_file"

    /mnt/e/Scientifc_software/gatk-4.4.0.0/gatk --java-options "-Xmx32G" HaplotypeCaller \
    -R $reference_genome \
    -I "$bam_file" \
    -O "$output_vcf" \
    -L MT \
    --sample-ploidy 1 \
    #-ERC gvcf # 如果你希望生成g.vcf才使用这个参数。 
done

echo "所有的文件已经处理完成了！"

复制<br>注意，这里需要 rCRS 参考序列<br><br>你可以在这一步制定符合自己要求的过滤措施，也可以直接交给软件默认执行，毕竟 haplocheck 软件就是为这个而生的<br>#!/bin/bash

# 定义输入文件和输出文件
input_vcf="/mnt/d/MTDNA/10K_CPGDP/VCF/Filter/filtered_simple_hs37d5_260samples_MT.vcf"
output_vcf="/mnt/d/MTDNA/10K_CPGDP/VCF/Filter/filtered_simple_hs37d5_260samples_MT_filtered.vcf"

# 使用 bcftools 进行过滤
bcftools filter \
  -i 'QUAL&gt;1000 &amp; (AF&lt;0.1 | AF&gt;0.9) &amp; INFO/DP&gt;1000 &amp; FS&lt;60 &amp; SOR&lt;3 &amp; MQ&gt;40 &amp; MQRankSum&gt;-12.5 &amp; QD&gt;2.0 &amp; InbreedingCoeff&gt;0 &amp; ReadPosRankSum&gt;-8.0' \
  -o "$output_vcf" \
  -O v \
  "$input_vcf"

# 使用 bcftools 进行过滤
bcftools filter \
  -i 'QUAL&gt;1000 &amp; (AF&lt;0.1 | AF&gt;0.9)'  \
  -o "$output_vcf" \
  -O v \
  "$input_vcf"

echo "过滤完成，结果已输出到 $output_vcf"

复制<br># 定义路径
SOFT_PATH="/mnt/e/Scientifc_software/haplocheck"
OUT_DIR="/mnt/e/Scientifc_software/haplocheck/results"

# 切换到软件路径
cd $SOFT_PATH

# 遍历目录中所有的 .vcf.gz 文件
/mnt/e/Scientifc_software/haplocheck/haplocheck --raw --out "$OUT_DIR" /mnt/d/MTDNA/10K_CPGDP/VCF/Extracted_MT/xks_325samples_joint_call_MT.vcf

复制<br><br><br><br>如果是全基因组的BAM文件如果只包含mtDNA的BAM文件参见我发现有时候合并之后的vcf
反而会导致单倍型分型错误如果需要自定义，请参照下列如果不需要自定义，直接执行过滤后的vcf执行haplocheck使用haplogrep可以直接根据vcf生成fasta序列，包含任何在vcf中出现的indel等]]></description><link>软件\其它生信软件\使用心得\简易的mtdna分析流程.html</link><guid isPermaLink="false">软件/其它生信软件/使用心得/简易的mtDNA分析流程.canvas</guid><pubDate>Mon, 04 Nov 2024 01:22:31 GMT</pubDate></item><item><title><![CDATA[<strong>一、线粒体基因组主要分析内容流程图</strong>]]></title><description><![CDATA[ 
 <br>原文链接: <a data-tooltip-position="top" aria-label="https://www.yuque.com/wusheng-s0bue/cvxne8/spy5ekikgb75z80e" rel="noopener nofollow" class="external-link" href="https://www.yuque.com/wusheng-s0bue/cvxne8/spy5ekikgb75z80e" target="_blank">线粒体基因组分析流程 (yuque.com)</a><br><br><img src="https://cdn.nlark.com/yuque/0/2024/png/40551061/1709024234747-a4d99195-63f7-48e6-b473-6de9a5d44ed7.png#averageHue=%23fdfdfc&amp;clientId=uf2cae3a5-51f1-4&amp;from=paste&amp;id=u416810a9&amp;originHeight=444&amp;originWidth=853&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u1df18701-586a-4e09-81f0-45c3df948a4&amp;title=" referrerpolicy="no-referrer"><br><br>参考序列基因组: GenBank (KY085912)<br>原始reads RUN ID: SRR5602602 (Laurus nobilis L.)<br>更多更详细的测试：ERR1917165，ERR2206741，ERR268390，ERR964904<br><br><br><br>软件说明书：<a rel="noopener nofollow" class="external-link" href="https://github.com/Kinggerm/GetOrganelle" target="_blank">https://github.com/Kinggerm/GetOrganelle</a><br>其他使用者说明：<br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/bab69c3889b5" target="_blank">https://www.jianshu.com/p/bab69c3889b5</a><br><a rel="noopener nofollow" class="external-link" href="https://blog.csdn.net/m0_62678513/article/details/122813505" target="_blank">https://blog.csdn.net/m0_62678513/article/details/122813505</a><br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/665269253" target="_blank">https://zhuanlan.zhihu.com/p/665269253</a><br>
Wget https://github.com/Kinggerm/GetOrganelleGallery/raw/master/Test/reads/Arabidopsis_simulated.1.fq.gz

  

wget https://github.com/Kinggerm/GetOrganelleGallery/raw/master/Test/reads/Arabidopsis_simulated.2.fq.gz

复制<br>参数相关：<br>
get_organelle_from_reads.py -1 Arabidopsis_simulated.1.fq.gz -2 Arabidopsis_simulated.2.fq.gz -t 1 -o Arabidopsis_simulated.plastome -F embplant_pt -R 10

复制<br>-F：ORGANELLE_TYPE<br>-t: 线程数量<br>-o: 指定输出文件夹<br>-1 -2 ：指定原始输入数据<br><br>软件说明书：<a rel="noopener nofollow" class="external-link" href="https://github.com/RemiAllio/MitoFinder" target="_blank">https://github.com/RemiAllio/MitoFinder</a><br>其他使用者说明书：<br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/e623292c9cbe" target="_blank">https://www.jianshu.com/p/e623292c9cbe</a><br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/5bcb707c095e" target="_blank">https://www.jianshu.com/p/5bcb707c095e</a><br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/611962326" target="_blank">https://zhuanlan.zhihu.com/p/611962326</a><br>参数相关说明：<br>
#Eg.

/Bio/xpl/software/MitoFinder -j project_name -1 left_fastq.gz -2 right_fastq.gz -r reference.gb -o 5 -p 5 -m 10

复制<br>-j 任务的id号，输出的结果文件也用id号命名<br>-r 近缘物种的已经注释的线粒体基因组文件<br>-o 指遗传密码类型<br>-p 使用最大的线程数<br>-m 最大允许的内存消耗<br><br>软件说明书：<a rel="noopener nofollow" class="external-link" href="https://github.com/YanCCscu/meangs" target="_blank">https://github.com/YanCCscu/meangs</a><br>其他使用者说明书：<br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/89025d63a4c8" target="_blank">https://www.jianshu.com/p/89025d63a4c8</a><br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/12d5f74c27f6" target="_blank">https://www.jianshu.com/p/12d5f74c27f6</a><br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/610048488" target="_blank">https://zhuanlan.zhihu.com/p/610048488</a><br>example: <a rel="noopener nofollow" class="external-link" href="https://github.com/YanCCscu/MEANGS/tree/master/example" target="_blank">https://github.com/YanCCscu/MEANGS/tree/master/example</a><br>参数相关：<br>
meangs.py -1 SRR039541.3_1.clean.fq.gz -2 SRR039541.3_2.clean.fq.gz -o HumanMito -t 16 -n 2000000 -i 300 --deepin

复制<br><br>使用软件：MitoFinder v1.4.1<br>使用说明书：<a rel="noopener nofollow" class="external-link" href="https://github.com/RemiAllio/MitoFinder" target="_blank">https://github.com/RemiAllio/MitoFinder</a><br>其他使用者说明书：<br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/e623292c9cbe" target="_blank">https://www.jianshu.com/p/e623292c9cbe</a><br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/5bcb707c095e" target="_blank">https://www.jianshu.com/p/5bcb707c095e</a><br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/611962326" target="_blank">https://zhuanlan.zhihu.com/p/611962326</a><br>example: <a rel="noopener nofollow" class="external-link" href="https://github.com/RemiAllio/MitoFinder/tree/master/test_case" target="_blank">https://github.com/RemiAllio/MitoFinder/tree/master/test_case</a><br>相关参数：<br>
mitofinder -j Hospitalitermes_medioflavus_NCBI -a Hospitalitermes_medioflavus_NCBI.fasta -r Hospitalitermes_medioflavus_NCBI.gb -o 5 -m 10 -p 10

  

#解释

-a &nbsp;assembly 序列

-j &nbsp;任务的id号，输出的结果文件也用id号命名

-r 近缘物种的已经注释的线粒体基因组文件

-o 指遗传密码类型，例如5代表无脊椎动物线粒体的遗传密码

-p 允许Mitofinder在运行时使用的最大线程数

-m 允许使用的计算机最大存储量

复制<br><br><br>使用软件：emboss<br>使用说明书：<a rel="noopener nofollow" class="external-link" href="https://github.com/google/emboss" target="_blank">https://github.com/google/emboss</a><br>其他使用者说明书：<br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/457001773" target="_blank">https://zhuanlan.zhihu.com/p/457001773</a><br><a rel="noopener nofollow" class="external-link" href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/04_emboss/" target="_blank">https://indexofire.github.io/pathongs/book/C01_Common-Utility/04_emboss/</a><br><a rel="noopener nofollow" class="external-link" href="https://blog.csdn.net/Cassiel60/article/details/88218706" target="_blank">https://blog.csdn.net/Cassiel60/article/details/88218706</a><br><a rel="noopener nofollow" class="external-link" href="https://max.book118.com/html/2017/0522/108259246.shtm" target="_blank">https://max.book118.com/html/2017/0522/108259246.shtm</a><br>example: <a rel="noopener nofollow" class="external-link" href="https://github.com/google/emboss/tree/master/testdata" target="_blank">https://github.com/google/emboss/tree/master/testdata</a><br>相关参数：<br>
usage: embossc [-h] [--color-output {always,never,if_tty,auto}] [--import-dir IMPORT_DIRS]

&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[--generate {cc}] [--output-path OUTPUT_PATH]

&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;input_file

复制<br><br>使用软件：RepeatMasker<br>软件说明书：<br><a rel="noopener nofollow" class="external-link" href="https://github.com/rmhubley/RepeatMasker" target="_blank">https://github.com/rmhubley/RepeatMasker</a><br><a rel="noopener nofollow" class="external-link" href="https://www.repeatmasker.org/RepeatMasker/" target="_blank">https://www.repeatmasker.org/RepeatMasker/</a><br>其他软件说明书：<br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/ffdbedae80fa" target="_blank">https://www.jianshu.com/p/ffdbedae80fa</a><br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/668013133" target="_blank">https://zhuanlan.zhihu.com/p/668013133</a><br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/532849330" target="_blank">https://zhuanlan.zhihu.com/p/532849330</a><br><a rel="noopener nofollow" class="external-link" href="https://blog.csdn.net/woodcorpse/article/details/73148464" target="_blank">https://blog.csdn.net/woodcorpse/article/details/73148464</a><br><a rel="noopener nofollow" class="external-link" href="https://www.repeatmasker.org/webrepeatmaskerhelp.html" target="_blank">https://www.repeatmasker.org/webrepeatmaskerhelp.html</a><br>example:<br>
基因组获取自：https://www.ncbi.nlm.nih.gov/genome/68823?genome_assembly_id=380814

复制<br>相关参数：<br>
RepeatMasker -pa 4 -species "Fusarium tricinctum" -poly -html -gff -dir repeat1 GCA_900382705.2_FTRI.INRA104.GCA2018.2_genomic.fna

#查看帮助RepeatMasker -h

#需要要额外注意的是:

#-dir 指定的输出结果路径，须提前建立好

#-species 指定物种，否则默认比对的是人类重复序列数据库

#如果使用本地的参考库，通过 -lib 指定，替代 -species

#-s、-q、-qq 等参数可控制序列比对的灵敏度，如果你的目标物种和参考物种不是很近，可能需要提升灵敏度

复制<br><br>使用软件：raxml<br>软件说明书：<a rel="noopener nofollow" class="external-link" href="https://github.com/amkozlov/wwraxml-ng" target="_blank">https://github.com/amkozlov/wwraxml-ng</a><br>其他软件说明书：<br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/80e2c938e050" target="_blank">https://www.jianshu.com/p/80e2c938e050</a><br><a rel="noopener nofollow" class="external-link" href="http://www.chenlianfu.com/?p=2225" target="_blank">http://www.chenlianfu.com/?p=2225</a><br><a rel="noopener nofollow" class="external-link" href="https://bin-ye.com/post/2020/01/04/raxml-%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/" target="_blank">https://bin-ye.com/post/2020/01/04/raxml-%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/</a><br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/170587426" target="_blank">https://zhuanlan.zhihu.com/p/170587426</a><br>example: <a rel="noopener nofollow" class="external-link" href="https://github.com/amkozlov/raxml-ng/tree/master/test/src" target="_blank">https://github.com/amkozlov/raxml-ng/tree/master/test/src</a><br>相关参数:<br>
#Eg.

raxmlHPC-PTHREADS-SSE3 -f a -m GTRGAMMA -p 12345 -x 12345 -# 10 -s 20k.phy -n chr001.raxml -T 30

  

-f :表示执行快速 Bootstrap 分析并搜索最佳得分的 ML 树。

-x : 指定一个 int 数作为随机种子

-p :指定一个随机数作为 parsimony inferences 的种子。

-# :指定 bootstrap 的次数。

-m :指定核苷酸或氨基酸替代模型。

-s :指定输入文件。phy 格式的多序列比对结果。软件包中包含一个程序来将 fasta 格式转换为 phy 格式。

-n :后缀

-T :指定多线程运行的 CPUs 。

复制<br>使用软件：IQ-TREE<br>软件说明书：<a rel="noopener nofollow" class="external-link" href="https://github.com/iqtree/iqtree2" target="_blank">https://github.com/iqtree/iqtree2</a><br>其他软件说明书：<a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/408382758" target="_blank">https://zhuanlan.zhihu.com/p/408382758</a><br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/f830282866cd" target="_blank">https://www.jianshu.com/p/f830282866cd</a><br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/df234ca0de71" target="_blank">https://www.jianshu.com/p/df234ca0de71</a><br>example:<br><a rel="noopener nofollow" class="external-link" href="https://github.com/iqtree/iqtree2/tree/master/example" target="_blank">https://github.com/iqtree/iqtree2/tree/master/example</a><br>相关参数:<br>
iqtree -s example.phy

复制<br><br>使用软件：GIREMI &nbsp;(Generalized Identification of RNA Editing by Mutual Information)<br>软件说明书：<a rel="noopener nofollow" class="external-link" href="https://github.com/zhqingit/giremi" target="_blank">https://github.com/zhqingit/giremi</a><br>其他软件说明书：<br><a rel="noopener nofollow" class="external-link" href="https://www.codenong.com/jsa4285564a4a9/" target="_blank">https://www.codenong.com/jsa4285564a4a9/</a><br><a rel="noopener nofollow" class="external-link" href="https://github.com/zhqingit/giremi/issues" target="_blank">https://github.com/zhqingit/giremi/issues</a><br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/609303893" target="_blank">https://zhuanlan.zhihu.com/p/609303893</a><br>相关参数:<br>
-f, --fasta-ref &nbsp; &nbsp;FILE &nbsp; reference genome sequence file in fasta format (NOTE: the faidx index file generated by samtools should be saved in the same directory as this fasta file)

-l, --positions &nbsp; &nbsp;FILE &nbsp; the list of all filtered SNVs after removing likely sequencing errors or SNVs due to other artifacts (see our paper for details)

-o, --output &nbsp; &nbsp; &nbsp; FILE &nbsp; write output to FILE.res

-m, --min &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;INT &nbsp; &nbsp;minimal number of total reads covering candidate editing sites &nbsp;[default: 5]

-p, --paired-end &nbsp; INT &nbsp; &nbsp;1:paired-end RNA-Seq reads; 0:single-end [default: 1]

-s, --strand &nbsp; &nbsp; &nbsp; INT &nbsp; &nbsp;0:non-strand specific RNA-Seq; 1: strand-specific RNA-Seq and read 1 (first read for the paired-end reads) is sense to RNA; 2: strand-specific RNA-Seq and read 1 is anti-sense to RNA [default: 0]

复制<br>RNA编辑类型和效率。(A)每个组织中跨线粒体基因组的 RNA 编辑位点计数。(B)每个组织中 RNA 编辑位点位置的百分比。(C)每个组织中跨质体的 RNA 编辑位点的计数。(D)每个组织中 RNA 编辑效率的百分比。<br><br>使用软件：<br>软件说明书：<a rel="noopener nofollow" class="external-link" href="https://github.com/krishnap25/mauve" target="_blank">https://github.com/krishnap25/mauve</a><br>其他软件说明书：<br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/411065032" target="_blank">https://zhuanlan.zhihu.com/p/411065032</a><br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/9df3352eb34d" target="_blank">https://www.jianshu.com/p/9df3352eb34d</a><br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/359203720" target="_blank">https://zhuanlan.zhihu.com/p/359203720</a><br>example:<br><a rel="noopener nofollow" class="external-link" href="https://github.com/krishnap25/mauve/tree/main/examples" target="_blank">https://github.com/krishnap25/mauve/tree/main/examples</a><br><a rel="noopener nofollow" class="external-link" href="https://github.com/krishnap25/mauve/tree/main/tests" target="_blank">https://github.com/krishnap25/mauve/tree/main/tests</a><br>相关参数:<br>
#eg.

mauveAligner [options] &lt;seq1 filename&gt; &lt;sml1 filename&gt; ... &nbsp;&lt;seqN filename&gt; &lt;smlN filename&gt;

复制<br>使用软件：Mummer<br>软件说明书：<a rel="noopener nofollow" class="external-link" href="https://github.com/mummer4/mummer" target="_blank">https://github.com/mummer4/mummer</a><br>其他软件说明书：<br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/2e184e5c15b7" target="_blank">https://www.jianshu.com/p/2e184e5c15b7</a><br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/572010609" target="_blank">https://zhuanlan.zhihu.com/p/572010609</a><br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/36347578" target="_blank">https://zhuanlan.zhihu.com/p/36347578</a><br>example: <a rel="noopener nofollow" class="external-link" href="https://github.com/mummer4/mummer/tree/master/examples" target="_blank">https://github.com/mummer4/mummer/tree/master/examples</a><br>相关参数:<br>
#eg

nucmer &nbsp;--prefix IRGSP1_DHX2 ~/reference/genome/IRGSP1.0/IRGSP-1.0_genome.fasta ~/reference/genome/rice_contigs/DHX2.fa

  

# 已有delta文件

dnadiff -d IRGSP1_DHX2.delta

# 未有delta文件

dnadiff IRGSP1_DHX2 ~/reference/genome/IRGSP1.0/IRGSP-1.0_genome.fasta ~/reference/genome/rice_contigs/DHX2.fa

复制<br>使用软件：circos<br>软件说明书：<a rel="noopener nofollow" class="external-link" href="https://github.com/vigsterkr/circos" target="_blank">https://github.com/vigsterkr/circos</a><br>其他软件说明书：<br><a rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/9c0d2b9d724e" target="_blank">https://www.jianshu.com/p/9c0d2b9d724e</a><br><a rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/462783428" target="_blank">https://zhuanlan.zhihu.com/p/462783428</a><br><a rel="noopener nofollow" class="external-link" href="https://github.com/node/circos-cn" target="_blank">https://github.com/node/circos-cn</a><br>example:<br>相关参数:<br>相关配置文件<br>
#指定染色体文件（绝对/相对路径+文件名）

karyotype = data/karyotype/karyotype.human.txt &nbsp;

#-----------------------------------------------------------------------------------

&lt;ideogram&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#这是定义染色体相关参数的标签，以&lt;/ideogram&gt;结尾，其中包括要设置的参数

&lt;spacing&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #定义染色体间隙宽度的标签，以&lt;/spacing&gt;，其中包括要设置的参数

default = 0.005r &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#r指的是圆的周长，设置0.5%圆的周长为间隙

#&lt;pairwise hsY;hs1&gt; &nbsp; &nbsp; &nbsp; #可以用&lt;pairwise&gt;标签特别指定某些染色体的间隙（用的是ID），因为在大多数文章中，都会留一个大间隙，来放label

#spacing = 20r &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#这里20r表示是相对default = 0.005r的20倍，也就是10%的圆的周长

#&lt;/pairwise&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#标签都要以&lt;/&gt;结尾，

&lt;/spacing&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#间隙定义结束，下面是对染色体样式的调整

radius &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0.90r &nbsp;#轮廓的位置，这里的r指的是半径，由圆心到圆周上范围依次是0-1r，，超出部分将不再显示。

thickness &nbsp; &nbsp; &nbsp; &nbsp;= 20p &nbsp; &nbsp;#染色体整体的宽度，这里p指的是像素大小，也可以用r表示，1r=1500p

fill &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = yes &nbsp; &nbsp;#是否为染色体填充颜色，如果为yes，自动用第七列定义的颜色着色

stroke_color &nbsp; &nbsp; = dgrey &nbsp;#染色体边框的颜色，支持多种格式的输入，如：red或255,182,106

stroke_thickness = 2p &nbsp; &nbsp; #染色体边框的粗细

&lt;/ideogram&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #定义染色体属性的标签结束

#-----------------------------------------------------------------------------------

#下面是每次都要复制粘贴上去的，他们属于circos自带的配置文件，用于调用颜色，距离，报错等信息

&lt;image&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#注意路径

&lt;&lt;include etc/image.conf&gt;&gt; #注意引用外部配置文件需要使用&lt;&lt;#&gt;&gt;

&lt;/image&gt;

&lt;&lt;include etc/colors_fonts_patterns.conf&gt;&gt;

#官方没有提到下面的文件，但是没有这个文件会报错，所以还是加上去

&lt;&lt;include etc/housekeeping.conf&gt;&gt;

复制]]></description><link>软件\其它生信软件\使用心得\线粒体基因组分析流程.html</link><guid isPermaLink="false">软件/其它生信软件/使用心得/线粒体基因组分析流程.md</guid><pubDate>Sun, 08 Sep 2024 13:55:09 GMT</pubDate><enclosure url="https://cdn.nlark.com/yuque/0/2024/png/40551061/1709024234747-a4d99195-63f7-48e6-b473-6de9a5d44ed7.png#averageHue=%23fdfdfc&amp;clientId=uf2cae3a5-51f1-4&amp;from=paste&amp;id=u416810a9&amp;originHeight=444&amp;originWidth=853&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u1df18701-586a-4e09-81f0-45c3df948a4&amp;title=" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.nlark.com/yuque/0/2024/png/40551061/1709024234747-a4d99195-63f7-48e6-b473-6de9a5d44ed7.png#averageHue=%23fdfdfc&amp;clientId=uf2cae3a5-51f1-4&amp;from=paste&amp;id=u416810a9&amp;originHeight=444&amp;originWidth=853&amp;originalType=url&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u1df18701-586a-4e09-81f0-45c3df948a4&amp;title="&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[主要功能]]></title><description><![CDATA[ 
 <br>原文链接： <a data-tooltip-position="top" aria-label="https://gatk.broadinstitute.org/hc/en-us/articles/4403870837275-Mitochondrial-short-variant-discovery-SNVs-Indels" rel="noopener nofollow" class="external-link" href="https://gatk.broadinstitute.org/hc/en-us/articles/4403870837275-Mitochondrial-short-variant-discovery-SNVs-Indels" target="_blank">Mitochondrial short variant discovery (SNVs + Indels) – GATK (broadinstitute.org)</a><br><br>主要内容包括以下几个重点：<br>
<br>
线粒体基因组的挑战：线粒体基因组的环状结构、线粒体DNA插入核基因组形成的NuMTs以及低杂合子比例（heteroplasmy）给变异分析带来了困难。

<br>
变异发现流程：使用Mutect2工具，通过高灵敏度检测低杂合子变异，并采用不同的基因组断点对齐来追踪稀有线粒体变异的谱系。

<br>
预期输入：需要一个全基因组测序（WGS）的h38 CRAM或BAM文件，以及自染色体的覆盖率中位数（如果输入是CRAM文件，还需要参考的fasta文件）。

<br>
主要步骤：

<br>筛选仅保留映射到线粒体基因组的读数。
<br>将ChrM映射的BAM文件从对齐状态转换为未对齐状态。
<br>将未对齐的BAM文件与参考对齐的BAM文件和移位的参考对齐BAM文件进行合并。
<br>识别重复读数。
<br>收集BAM文件的覆盖率和性能指标。
<br>在对齐的BAM文件中调用变异。
<br>将输出的VCF文件从控制区和非控制区合并。
<br>合并输出VCF的统计文件。
<br>根据特定参数过滤变异调用。
<br>过滤掉黑名单中的位点。


<br>
工具和资源：流程中涉及的工具包括PrintReads、RevertSam、MergeBamAlignment、MarkDuplicates、CollectWgsMetrics、Mutect2、LiftoverVcf、MergeVcfs、Mutect2-MergeMutectStats、FilterMutectCalls、VariantFiltration等。此外，还提到了GATK资源包和多态性核线粒体变异（NuMTs）。

<br>
额外信息：提供了关于如何使用Mutect2调用体细胞突变以及发现体细胞短变异（SNVs + Indels）的额外信息链接。

<br>这个流程是为了解决线粒体基因组变异分析中的特定挑战，通过一系列精确的工具和步骤来提高变异检测的准确性和效率。<br><br><br>将 ChrM 映射的 BAM 文件从对齐状态转换为未对齐状态的步骤是为了解决线粒体基因组分析中的一些特定问题。这个步骤的目的和原因包括：<br>
<br>解决环状基因组的对齐问题：线粒体基因组是环状的，而参考基因组是线性的。在分析线粒体DNA时，由于其环状结构，不同的复制和断裂可能导致在参考基因组上的任意位置出现断点。这使得对齐和分析线粒体DNA变得复杂。通过将ChrM映射的BAM文件转换为未对齐状态，可以消除由于参考基因组断点位置任意性带来的问题。
<br>提高变异检测的灵敏度：在未对齐的BAM文件中，所有的读数都保留了原始的序列信息，包括插入和缺失（Indels）。这样可以在后续的分析中更准确地识别和追踪线粒体DNA中的变异，尤其是在非编码控制区域。
<br>处理NuMTs的挑战：线粒体DNA有时会插入到核基因组中，形成核线粒体DNA片段（NuMTs）。这些NuMTs可能会干扰线粒体基因组的准确映射和变异分析。通过将ChrM映射的BAM文件转换为未对齐状态，可以更容易地区分NuMTs和感兴趣的线粒体序列。
<br>允许使用不同的对齐策略：在未对齐的BAM文件中，可以采用不同的对齐策略来处理线粒体基因组的特定区域。例如，可以通过对齐到一个移位的参考序列来增加对控制区域的敏感性，从而考虑到个体间的变异。
<br>保留原始的质量和标签信息：虽然对齐信息被移除，但转换过程中会保留原始的碱基质量和对齐标签。这允许在后续的变异分析中使用这些信息，同时避免了由于对齐错误导致的假阳性变异调用。
<br>总的来说，这个步骤是为了提高线粒体变异分析的准确性和可靠性，特别是在处理环状基因组、NuMTs 以及低杂合子比例变异时。通过这种方式，研究人员可以更有效地识别和理解线粒体基因组中的变异。<br><br>将未对齐的BAM文件与参考对齐的BAM文件和移位的参考对齐BAM文件进行合并的步骤是线粒体变异发现流程中的关键环节，其作用包括：<br>
<br>增强变异检测的准确性：通过合并不同类型的BAM文件，可以确保在分析过程中考虑到所有可能的变异情况。未对齐的BAM文件包含了原始的序列信息，而参考对齐的BAM文件和移位的参考对齐BAM文件则提供了基于标准和移位参考基因组的对齐信息。这样可以更全面地识别和校验变异。
<br>处理线粒体基因组的特殊结构：线粒体基因组的环状结构和在核基因组中的插入（NuMTs）给变异检测带来了挑战。通过合并这些文件，可以更好地处理这些特殊情况，提高对线粒体特有变异的识别能力。
<br>提高对低杂合子变异的敏感性：线粒体变异通常具有低杂合子比例，这可能导致它们被误认为是测序噪声。合并不同类型的BAM文件可以提高对这些低频变异的敏感性，从而减少漏检。
<br>优化变异调用的策略：通过合并不同对齐状态下的BAM文件，可以采用更复杂的变异调用策略，比如在控制区域和非控制区域使用不同的参数和模型。这有助于更准确地区分真实变异和测序噪声。
<br>为后续分析提供更完整的数据：合并后的BAM文件包含了更全面的信息，这对于后续的变异注释、过滤和解释至关重要。这可以确保变异分析的结果更加可靠和有用。
<br>便于后续的VCF文件生成：在BAM文件合并后，可以更方便地生成和处理变异调用文件（VCF）。这一步为后续的变异分析和解释提供了一个统一和综合的数据集。
<br>总之，这一步骤是线粒体变异分析流程中不可或缺的一部分，它通过整合不同来源和状态下的数据，提高了变异检测的准确性和效率，并为后续的分析工作奠定了坚实的基础<br><br><br>samtools view -b ALL.bam chrM &gt; chrM_only.bam
复制<br><br>gatk RevertSam \
-I chrM_only.bam \
-O chrM_unaligned.bam
复制<br><br>This step merges the unaligned BAM file with the reference BAM file for the mitochondrial genome. The BAM file must also be aligned with the shifted mitochondrial BAM file. The shifted reference moves the breakpoint of the mitochondrial genome from the non-coding control region to the opposite side of the contig. This allows for sensitivity in the control region to account for variability across individuals.  <br>此步骤将未对齐的 BAM 文件与线粒体基因组的参考 BAM 文件合并。 BAM 文件还必须与移位的线粒体 BAM 文件对齐。偏移的参考将线粒体基因组的断点从非编码控制区移动到重叠群的另一侧。这允许控制区域的敏感性来解释个体之间的差异。<br>这个线粒体参考 BAM 文件从何而来？移位的 BAM 又从而何来？
我读了很多遍，觉得这个所谓的  reference BAM file 应该就是原始的 BAM 文件。
<br>如何得到移位了的 FATSA 文件呢？
可以使用 Python 来硬核解决。
<br>以下代码只需要运行一次，得到移位后的fasta即可。<br>from Bio import SeqIO
from Bio.SeqRecord import SeqRecord

# 加载原始的rCRS参考序列
with open("/home/luolintao/10K_HGDP/example/rcrs.fasta", "r") as original_fasta:
    for record in SeqIO.parse(original_fasta, "fasta"):
        sequence = record.seq

# 假设断点位置在8000
breakpoint = 8000
shifted_sequence = sequence[breakpoint:] + sequence[:breakpoint]

# 创建一个新的SeqRecord对象
new_record = SeqRecord(shifted_sequence, id=record.id, description="Shifted at position 8000")

# 保存新的移位参考序列
with open("/home/luolintao/10K_HGDP/example/shifted_rCRS.fasta", "w") as shifted_fasta:
    SeqIO.write([new_record], shifted_fasta, "fasta")
复制<br>接下来，我们需要对原始的 rCRS 和 shift 的 rCRS 进行建立索引以进行下一步研究：<br>bwa index shifted_rCRS.fasta
bwa index rCRS.fasta
复制<br>现在需要把 BAM 文件转到 fastq 文件，因为在使用 BWA 软件时必须要求如此：<br># 将BAM转换成FASTQ
samtools bam2fq chrM_unaligned.bam &gt; chrM_unaligned.fastq
# 使用BWA进行比对
bwa mem shifted_rCRS.fasta chrM_unaligned.fastq &gt; aligned.sam
复制<br>现在又需要把 SAM 文件转换成 BAM 文件，并排序、建立索引：<br># 将SAM转换为BAM
samtools view -bS aligned.sam &gt; aligned.bam

# 排序BAM文件
samtools sort aligned.bam -o shifted_aligned.bam

# 建立索引
samtools index shifted_aligned.bam

# 清理中间文件
rm aligned.sam
rm aligned.bam

复制<br>使用 GATK 合并 BAM 文件：<br>
在此之前，我们需要为 fasta 文件创建字典和索引：<br>gatk CreateSequenceDictionary -R rcrs.fasta -O rcrs.dict 

samtools faidx rcrs.fasta
复制<br>gatk MergeBamAlignment \
--REFERENCE_SEQUENCE rcrs.fasta \
--UNMAPPED_BAM chrM_unaligned.bam \
# --ALIGNED_BAM shifted_aligned.bam \
--OUTPUT merged.bam \
复制]]></description><link>软件\其它生信软件\使用心得\线粒体dna工作流程.html</link><guid isPermaLink="false">软件/其它生信软件/使用心得/线粒体DNA工作流程.md</guid><pubDate>Sun, 28 Jul 2024 08:36:41 GMT</pubDate></item><item><title><![CDATA[ClustalW]]></title><description><![CDATA[ 
 <br><br><br><a data-tooltip-position="top" aria-label="http://www.clustal.org/" rel="noopener nofollow" class="external-link" href="http://www.clustal.org/" target="_blank">这个软件</a>有多个版本，包括<br>
GUI (ClustalX), command line (ClustalW), web server。<br><br>这里是说明书：<br>&gt;&gt; HELP 9 &lt;&lt;             Help for command line parameters

                DATA (sequences)

-INFILE=file.ext                             :input sequences.
-PROFILE1=file.ext  and  -PROFILE2=file.ext  :profiles (old alignment).


                VERBS (do things)

-OPTIONS            :list the command line parameters
-HELP  or -CHECK    :outline the command line params.
-FULLHELP           :output full help content.
-ALIGN              :do full multiple alignment. # 这个可能有用
-TREE               :calculate NJ tree.
-PIM                :output percent identity matrix (while calculating the tree)
-BOOTSTRAP(=n)      :bootstrap a NJ tree (n= number of bootstraps; def. = 1000).
-CONVERT            :output the input sequences in a different file format.


                PARAMETERS (set things)

***General settings:****
-INTERACTIVE :read command line, then enter normal interactive menus
-QUICKTREE   :use FAST algorithm for the alignment guide tree
-TYPE=       :PROTEIN or DNA sequences
-NEGATIVE    :protein alignment with negative values in matrix
-OUTFILE=    :sequence alignment file name
-OUTPUT=     :CLUSTAL(default), GCG, GDE, PHYLIP, PIR, NEXUS and FASTA
-OUTORDER=   :INPUT or ALIGNED
-CASE        :LOWER or UPPER (for GDE output only)
-SEQNOS=     :OFF or ON (for Clustal output only)
-SEQNO_RANGE=:OFF or ON (NEW: for all output formats)
-RANGE=m,n   :sequence range to write starting m to m+n
-MAXSEQLEN=n :maximum allowed input sequence length
-QUIET       :Reduce console output to minimum
-STATS=      :Log some alignents statistics to file

***Fast Pairwise Alignments:***
-KTUPLE=n    :word size
-TOPDIAGS=n  :number of best diags.
-WINDOW=n    :window around best diags.
-PAIRGAP=n   :gap penalty
-SCORE       :PERCENT or ABSOLUTE


***Slow Pairwise Alignments:***
-PWMATRIX=    :Protein weight matrix=BLOSUM, PAM, GONNET, ID or filename
-PWDNAMATRIX= :DNA weight matrix=IUB, CLUSTALW or filename
-PWGAPOPEN=f  :gap opening penalty        
-PWGAPEXT=f   :gap opening penalty


***Multiple Alignments:***
-NEWTREE=      :file for new guide tree
-USETREE=      :file for old guide tree
-MATRIX=       :Protein weight matrix=BLOSUM, PAM, GONNET, ID or filename
-DNAMATRIX=    :DNA weight matrix=IUB, CLUSTALW or filename
-GAPOPEN=f     :gap opening penalty        
-GAPEXT=f      :gap extension penalty
-ENDGAPS       :no end gap separation pen. 
-GAPDIST=n     :gap separation pen. range
-NOPGAP        :residue-specific gaps off  
-NOHGAP        :hydrophilic gaps off
-HGAPRESIDUES= :list hydrophilic res.    
-MAXDIV=n      :% ident. for delay
-TYPE=         :PROTEIN or DNA
-TRANSWEIGHT=f :transitions weighting
-ITERATION=    :NONE or TREE or ALIGNMENT
-NUMITER=n     :maximum number of iterations to perform
-NOWEIGHTS     :disable sequence weighting


***Profile Alignments:***
-PROFILE      :Merge two alignments by profile alignment
-NEWTREE1=    :file for new guide tree for profile1
-NEWTREE2=    :file for new guide tree for profile2
-USETREE1=    :file for old guide tree for profile1
-USETREE2=    :file for old guide tree for profile2


***Sequence to Profile Alignments:***
-SEQUENCES   :Sequentially add profile2 sequences to profile1 alignment
-NEWTREE=    :file for new guide tree
-USETREE=    :file for old guide tree


***Structure Alignments:***
-NOSECSTR1     :do not use secondary structure-gap penalty mask for profile 1 
-NOSECSTR2     :do not use secondary structure-gap penalty mask for profile 2
-SECSTROUT=STRUCTURE or MASK or BOTH or NONE   :output in alignment file
-HELIXGAP=n    :gap penalty for helix core residues 
-STRANDGAP=n   :gap penalty for strand core residues
-LOOPGAP=n     :gap penalty for loop regions
-TERMINALGAP=n :gap penalty for structure termini
-HELIXENDIN=n  :number of residues inside helix to be treated as terminal
-HELIXENDOUT=n :number of residues outside helix to be treated as terminal
-STRANDENDIN=n :number of residues inside strand to be treated as terminal
-STRANDENDOUT=n:number of residues outside strand to be treated as terminal 


***Trees:***
-OUTPUTTREE=nj OR phylip OR dist OR nexus
-SEED=n        :seed number for bootstraps.
-KIMURA        :use Kimura's correction.   
-TOSSGAPS      :ignore positions with gaps.
-BOOTLABELS=node OR branch :position of bootstrap values in tree display
-CLUSTERING=   :NJ or UPGMA
复制<br>在Linux系统下，这个软件的操作命令如下：<br># 进入目录,进行Paire比对
clustalw2 -INFILE=/home/luolintao/mt_DNA_whole/DQ372883.fasta -OUTFILE=/home/luolintao/序列比对/output.aln

# 进行Multi比对
clustalw2 -INFILE=/home/luolintao/mt_DNA_whole/DQ372883.fasta -OUTFILE=/home/luolintao/序列比对/output.aln -OUTPUT=CLUSTAL -ALIGN
复制<br><br>上个软件的进化版<a data-tooltip-position="top" aria-label="http://www.clustal.org/omega/" rel="noopener nofollow" class="external-link" href="http://www.clustal.org/omega/" target="_blank">Clustal Omega - fast, accurate, scalable multiple sequence alignment for proteins</a>。新的 HMM 比对引擎而具有更高的准确性。数小时内比对数十万个序列。<br><br>只有CLI。可以使用Win、Mac、Linux。<br><br><a data-href="MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)" href="软件\其它生信软件\a-j\mafft：(multiple-alignment-program-for-amino-acid-or-nucleotide-sequences).html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)</a> 是一个用于类 UNIX 操作系统的多序列比对程序。它提供了一系列多重比对方法，L-INS-i（精确；用于&lt;∼200个序列的比对）、FFT-NS-2（快速；用于&lt;∼30,000个序列的比对）等。<br>
<a data-href="MAFFT" href="MAFFT" class="internal-link" target="_self" rel="noopener nofollow">MAFFT</a> - a multiple sequence alignment program (cbrc.jp)](<a rel="noopener nofollow" class="external-link" href="https://mafft.cbrc.jp/alignment/software/" target="_blank">https://mafft.cbrc.jp/alignment/software/</a>)<br><br>
<br><a data-tooltip-position="top" aria-label="https://mafft.cbrc.jp/alignment/software/macosx.html" rel="noopener nofollow" class="external-link" href="https://mafft.cbrc.jp/alignment/software/macosx.html" target="_blank">Mac OS X</a>&nbsp;&nbsp;Mac OS X
<br><a data-tooltip-position="top" aria-label="https://mafft.cbrc.jp/alignment/software/linux.html" rel="noopener nofollow" class="external-link" href="https://mafft.cbrc.jp/alignment/software/linux.html" target="_blank">Linux</a>&nbsp;&nbsp;Linux
<br><a data-tooltip-position="top" aria-label="https://mafft.cbrc.jp/alignment/software/windows.html" rel="noopener nofollow" class="external-link" href="https://mafft.cbrc.jp/alignment/software/windows.html" target="_blank">Windows</a>&nbsp;&nbsp;视窗
<br><br>% mafft [arguments] input &gt; output
% mafft-linsi input &gt; output
% mafft input &gt; output
% mafft --auto input &gt; output # 自动选择参数
复制<br><br><br>
<br>MUMmer是一种快速、准确的DNA序列比对工具。它可以用于比对多个长度有细微差异的fasta序列。MUMmer使用一种称为“最小唯一匹配”(MUM)的算法来进行比对。MUM算法可以快速找到两个序列之间的最大公共子序列(MCS)。

<br>MUMmer 3.0 can find all 20-basepair or longer exact matches between a pair of 5-megabase genomes in 13.7 seconds, using 78 MB of memory, on a 2.4 GHz Linux desktop computer.10条序列需要1分29秒。
<br>MUMmer 3.0 is described in our&nbsp;<a data-tooltip-position="top" aria-label="https://mummer.sourceforge.net/MUMmer3.pdf" rel="noopener nofollow" class="external-link" href="https://mummer.sourceforge.net/MUMmer3.pdf" target="_blank">2004&nbsp;<em></em>&nbsp;paper</a>Genome Biology. We also developed a GPU-accelerated version of MUMmer called&nbsp;<a data-tooltip-position="top" aria-label="http://mummergpu.sf.net/" rel="noopener nofollow" class="external-link" href="http://mummergpu.sf.net/" target="_blank">MUMmerGPU</a>.


<br><br>
<br>ClustalW是一种常用的多序列比对工具。它可以用于比对多个长度有细微差异的fasta序列。ClustalW使用一种称为“渐进式比对”的算法来进行比对。渐进式比对算法将多个序列逐个进行比对，最终得到一个多序列比对结果。- "Classic Clustal"&nbsp;“经典星团”- GUI (ClustalX), command line (ClustalW), web server versions available      GUI (ClustalX)、命令行 (ClustalW)、可用的 Web 服务器版本（web服务器限制Too large! datasize&gt;5,000,000 bytes）。10条序列需要1分49秒。
<br><br>
<br>Clustal Omega（ClustalΩ）: Clustal Omega是一个流行的序列比对工具，它支持多序列比对，适用于蛋白质和核酸序列。Clustal Omega特别适合大规模数据集的比对，能够快速准确地处理大量序列。# <a data-tooltip-position="top" aria-label="http://www.clustal.org/omega/" rel="noopener nofollow" class="external-link" href="http://www.clustal.org/omega/" target="_blank">Clustal Omega</a>&nbsp;水晶欧米茄- Latest version of Clustal - fast and scalable (can align hundreds of thousands of sequences in hours), greater accuracy due to new HMM alignment engine      最新版本的 Clustal - 快速且可扩展（可在数小时内比对数十万个序列），由于新的 HMM 比对引擎而具有更高的准确性- Command line/web server only (GUI public beta available soon)    仅命令行/Web 服务器（GUI 公共测试版即将推出）.速度：41s/10条。默认参数。
<br><br>Web，CLI，Web限制2MB<br><br>
<br><a data-href="MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)" href="软件\其它生信软件\a-j\mafft：(multiple-alignment-program-for-amino-acid-or-nucleotide-sequences).html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)</a>: MAFFT是一种快速且高效的多序列比对工具，适用于大规模序列数据。它提供了多种比对策略，包括FFT-NS-2、FFT-NS-i等，用户可以根据需要选择最适合自己数据的比对策略。
<br>可以在Mac、Linux、Windows运行。支持CLI以及GUI，但是GUI比较慢且可选参数较少。L-INS-i（精确；用于&lt;∼200个序列的比对，4s10个序列）、FFT-NS-2（快速；用于&lt;∼30,000个序列的比对。1秒10个序列）等。
<br><br> MUSCLE: MUSCLE（Multiple Sequence Comparison by Log-Expectation）是一种用于蛋白质和核酸序列比对的软件，它以其高效和高准确性著称。MUSCLE适合用于大量序列的比对，尤其是当准确性非常重要时。它可以在低成本商用计算机（例如，具有 32 Gb RAM 的 8 核 Intel CPU）上高精度地对齐数万个序列。在大型数据集上，Muscle v5 的准确度比 MAFFT 和 Clustal-Omega 高 20-30%。Muscle 没有图形用户界面 (GUI)。支持win,linux。速度：1分52秒完成10条。super5模式下。19分21秒完成10条，PPP模式下。<br><br>T-Coffee: T-Coffee是一种多序列比对工具，它可以用于不同类型的序列比对任务，包括蛋白质序列、核酸序列和结构比对。T-Coffee试图在保持高准确度的同时最大化比对的速度和效率。它还能够将序列信息与蛋白质结构信息 (3D-Coffee/Expresso)、概况信息 (PSI-Coffee) 或 RNA 二级结构 (R-Coffee) 相结合。支持网页版服务，但是You can enter at most 150 sequences。只能在Linux和Mac中运行，CLI。渐进式比对算法将多个序列逐个进行比对，最终得到一个多序列比对结果。10条序列1分40秒。上传限制：2500 char length<br><br>MEGA: MEGA（Molecular Evolutionary Genetics Analysis）是一种集成工具，提供了系统发育分析、序列比对、分子钟分析等多种功能。它的用户界面友好，非常适合生物信息学和系统发育学的初学者使用。有GUI，有CLI，在Win、Linux和Mac均能运行。但是align方法用的是ClustalW和MUSCLE，所以不再进行比较。<br><br>HAlign是一个多平台Java软件工具包，旨在大规模多个相似的DNA/RNA/Protein序列比对。&nbsp;center star multiple sequence alignment strategy。支持网页端上传但是我登不上去。支持下载，可以在Win、Linux和Mac系统运行，需要Java环境。]]></description><link>软件\其它生信软件\使用心得\序列比对（align）软件评测.html</link><guid isPermaLink="false">软件/其它生信软件/使用心得/序列比对（Align）软件评测.md</guid><pubDate>Wed, 11 Sep 2024 07:30:09 GMT</pubDate></item><item><title><![CDATA[一、序列比对的两种策略]]></title><description><![CDATA[ 
 <br><a data-href="序列比对（Align）软件评测" href="软件\其它生信软件\使用心得\序列比对（align）软件评测.html" class="internal-link" target="_self" rel="noopener nofollow">序列比对（Align）软件评测</a><br>转载自如下：
<a data-tooltip-position="top" aria-label="https://www.yuque.com/wusheng/gw7a9p/otk3ex" rel="noopener nofollow" class="external-link" href="https://www.yuque.com/wusheng/gw7a9p/otk3ex" target="_blank">序列比对前须知(1) (yuque.com)</a>
<br><br>
<br>全局比对（global alignment）  :它是假设两条序列在整个长度上是相似的，然后从头到尾比较两条序列的最佳匹配，适合高度相关等长序列比对。不适用于发散的不同长度的序列，因为它不能识别两条序列中高度相似的局部序列。  
<br>局部比对（local alignment）  :不考虑两条序列全局相似，而是找两条序列中高度相似的局部区域而不考虑其他区域，适合包含相似模块分散的生物序列，可以找出domain（保守区）和motif。  
<br>两种策略的区别  ：假设如下两条序列Query和Subject，分别采用全局比对和局部比对比对策略，从下图红色方框里可以看出差异<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603222910.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>有无Gap比对：两条序列，进行有空位比较和无空位比较的差异如下图：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603222925.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><br>不管采用哪种策略，比对算法基本上是相似的：  <br>
<br>点阵方法：构造一个二维矩阵。很容易识别序列中高度相似的区域，它在识别染色体重复（两条相同序列，即自己和自己比）和比较两个高度相关的基因组中的基因顺序的保守性非常有用。缺点：很难构造多序列比对。
<br>动态规划方法：匹配两条序列中所有可能字符，也是构造一个二维矩阵确定最优比对方法。里面引入“空位罚分”，即代表插入和删除的空位，因为在自然进化中插入和删除的发生频率比替换相对少。而且开始一个新的空位和拓展一个已经存在的空位付出的代价是不同的（原理是一旦插入和删除发生，那么临近的一些残基很容易插入和删除），两者会有不同的罚分。序列末尾不进行罚分，因为实际中很多同源序列是不等长的，如果末端进行了空位罚分反而是不实际的结果。  
<br>启发式算法：一个基于直观或经验构造的算法，在可接受的花费（指计算时间和空间）下给出待解决组合优化问题每一个实例 的 一个可行解，该可行解与最优解的偏离程度一般不能被预计。  
<br><br>
<br>全局比对的动态规划算法：经典的算法是Needleman-Wunsch算法。它必须对序列从头到尾进行计算得到最高比对得分。缺点，关注全长的最大比对的缺点是找不到局部的序列相似。对于发散序列和具有不同结构域的序列，这种方法达不到最理想的比对。全局两两比对的web程序是GAP.  
<br>局部比对的动态规划算法：正常比对序列中，两条被比对序列的分离水平是不知道的，两条序列的长度也可能不同，这种情况下，识别局部相似性比去对比包含残基的整个序列更加有意义。第一个运用动态规划进行局部序列比对的算法是Smith-Waterma算法。  
<br>&nbsp;<br>
这种算法下的局部比对分为两种：<br>
1. local alignment (Smith-Waterman) with affine gap costs (Gotoh)<br>
2. local alignment with generalized affine gap costs (Altschul)<br>
全局比对中，最终结果受到选用得分矩阵的影响，而局部比对的目标是找到局部最高分。这种方法适应于对分散序列和具有来自多个不同源的区域序列，目前大多数两两比对程序基本采用局部比对策略。<br><br>
<br>动态规划算法 &nbsp;可得到最优解，但是计算量非常大，实际中很难用于多序列比对。  
<br>启发式算法（heuristic algorithm)  

<br>渐进法（progressive methods）：Clustal, T-Coffee, MUSCLE  
<br>迭代法（iterative methods）：PRRP, DIALIGN  
<br>其它算法：Partial Order Algorithm、profile HMM、meta-methods (<a data-href="MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)" href="软件\其它生信软件\a-j\mafft：(multiple-alignment-program-for-amino-acid-or-nucleotide-sequences).html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)</a>)…<br>
注：启发式算法的计算过程也有可能利用到动态规划算法，比如Clustal采用的渐进式算法：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603223405.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">


<br><br>&nbsp;1. 核苷酸得分矩阵  ：核苷酸得分矩阵相对简单，对匹配位置赋予一个正值或者高分，对失配位置赋予一个负值或者低分。但是这种方法不符合实际，观察显示转换（嘌呤与嘌呤或者嘧啶与嘧啶之间的替换）发生频率比颠换（嘧啶与嘌呤之间的替换）高，因此，需要一个反应不同残基替换发生频率不同的更加复杂的统计模型。<br>
2. 氨基酸的替换矩阵 ：氨基酸的替换矩阵比较复杂，某种氨基酸很容易被具有相似理化性质的其他氨基酸替换，而很难被具有不同理化性质的氨基酸替换。而不同理化性质的氨基酸替换可能导致结构和功能的缺失，这种会导致分类的替换是很少被进化所选择的。  氨基酸替换矩阵是一个20×20矩阵，它用来反映氨基酸被替换的可能性。经验上的矩阵，包括PAM矩阵和BLOSUM矩阵。  <br><br>PAM的意思是可接受的点突变，观察到的突变不会改变蛋白质的一般功能，观察到的氨基酸突变被认为是自然选择接受了的。一个PAM单位被定义为有1%的氨基酸位点发生了变化或者100氨基酸有1个发生突变，但这并不意味100次PAM后，每个氨基酸都发生变化，因为其中一些位置可能会经过多次突变，甚至可能会变回到原来的氨基酸。一个特定残基对的PAM分数是通过一个多阶段过程得到的，这个过程包括：<br>
1. 计算相对突变率。一个特定氨基酸被同源氨基酸替换的总数除以在整个比对中这种氨基酸出现的总数；  &nbsp;<br>
2. 用随机替换率对预期的氨基酸替换率进行标准化，把标准化的突变率除以特定氨基酸出现频率，然后取以10为底的对数。把结果取整后填入替换矩阵，这个矩阵就可以反映氨基酸替换的可能性。<br>
3. 对于较分散序列的高阶PAM矩阵是通过对PAM1矩阵相乘推出来的，例如，PAM80就是对PAM1矩阵自乘80次得到的。一个PAM80矩阵只相当于观察到突变率的50%，PAN250表示一致性为20%。<br>
4. 缺点：PAM矩阵构建过程中，只是之间观察了PAM1中的基于一小堆极近相近序列中的残基替换（这个要从PAM矩阵的来源说起，当时构建这个矩阵用的序列是21组非常接近的蛋白质序列），PAM矩阵对于分散序列的比对是不可靠的。  PAM矩阵数字与序列相似度的对应关系：  <br><br>注意:PAM250矩阵&nbsp;→&nbsp;对应这些用于比对的序列相似度估计在14%&nbsp;–&nbsp;27%，一般PAM250矩阵对应序列相似度在20%。  <br><br>为了弥补PAM的缺点，BLOSUM矩阵应用而生，BLOSUM矩阵与PAM矩阵的不同之处在于：用于产生矩阵的蛋白质家族及多肽链数目，BLOSUM比PAM大约多20倍。BLOSUM矩阵不用推断，而是用实际上所选序列的残基一致性的比例来构建矩阵。与PAM矩阵的阶数相反，BLOSUM矩阵阶数越低代表序列越分散。比如BLOSUM60，这个矩阵首先寻找氨基酸模式，即有意义的一段氨基酸片断（如一个结构域及其相邻的两小段氨基酸序列），分别比较相同的氨基酸模式之间氨基酸的保守性（某种氨基酸对另一种氨基酸的取代数据），然后，以所有&nbsp;60％保守性的氨基酸模式之间的比较数据为根据，产生BLOSUM60；同理，以所有80％保守性的氨基酸模式之间的比较数据为根据，产生BLOSUM80。  <br><br>&nbsp; ①PAM1矩阵是通过一个进化模型得到的，而BLOSUM矩阵完全是由观测值构成，因此，BLOSUM矩阵可能没有PAM矩阵那么强的进化上的实际意义，这也是PAM矩阵被常用来重构系统发育树的原因。<br>
②PAM矩阵对发散序列可能不符合实际。<br>
③BLOSUM矩阵是完全通过保守序列的局部比对得到的，而PAM1是对包含保守和变化区域的整个序列全局比对得到的。这是BLOSUM矩阵更加适用于搜索数据库和寻找蛋白质中保守区域的原因。一些经验上测试BLOSUM矩阵在局部比对的正确性上胜过PAM矩阵。  <br>  对于一个给定的矩阵，一个正的分数说明在一个同源序列的数据集里观察到的氨基酸替换频率比随机替换频率高；零分表示在一个同源序列的数据集里观察到的氨基酸替换频率和随机替换频率相等；负数一个同源序列的数据集里观察到的氨基酸替换频率比随机替换频率低，这通常发生在不相似残基之间。  <br><br>序列比对本身就是一个随机问题，我们要对这种随机进行检验，比对完后，会有一个P值。<br>
P值的解读：  <br>
<br>如果P值小于10-100，表明两条序列是精确匹配的；  
<br>如果10-100&lt;P&lt;10-50，表明两条序列近似匹配；  
<br>如果10-50&lt;P&lt;10-5，表明两条序列有较近的同源关系；  
<br>如果10-5&lt;P&lt;10-1，表明两条序列可能存在较远的同源关系；  
<br>如果P&gt;10-1，那么这两条序列能匹配上可能是由于随机的关系；<br>
可以使用软件PRSS，用来评价序列两两比对在在统计学上显著性。  
<br><br>同一性和同源性这两个词经常被混淆。<br>
同源性只有高低之分，没有具体数值，属于"质”的属性；<br>
同一性才有具体数值，是“量”词。同一性数值越大，同源性越高。<br><br>多序列比对有3个东西是大家基本认同的：  <br>
<br>基因编码区的比对，需要采取基于密码子方式的比对；  
<br>目前多序列比对精确度：MAFFT&gt;Muscle&gt;Clustal；  
<br>多序列比对尽管是最基础的步骤，但是会影响后续的分析。  
<br>笔者最近发现了一个有趣的现象，不过也仅仅是这次处理的数据集才遇到，这让我重新审视了序列比对这个东西---多序列比对尽可能选用精确度高的工具，且一定要仔细检查比对后的Alignment文件。<br>
因为有时，对于某些数据，某种工具和某种方法比对的结果不一定是正常的(准确的)。<br>
笔者从NCBI下载了70条某个基因的基因编码区序列（已知是高度相似的），每条序列都从ATG起始密码子开始，如下：(截图仅显示了42条）<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603224023.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
选用了MEGA X里的Muscle(Codons)，也就是Muscle的基于密码子的比对方法，比对结果部分截图如下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603224033.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
看上去好像有哪里不对劲，竟然在起始密码子(ATG)前引入了gap，尽管引入的gap数量是3个(3的倍数），但是gap引入位置不对，比对结果不合理，或者说前面9个碱基没比对正确。<br>
换用MEGA X里的ClustalW(Codons)进行多序列比对，比对结果如下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603224058.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
还是有很多序列在起始密码子(ATG)前引入了gap，比对结果不合理，和Muscle(Codons)的结果相差无几。  <br><br>换用MEGA X里的Muscle，这次采用不基于密码子的比对方法，比对结果如下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603224121.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
嗯，结果看上去，所有序列都是以ATG起始了，而且引入的gap的数量也是3的倍数。  <br>接下来看看，这种引入gap从生物学角度来看是否合理：  <br>
以EF203067和MF094681为例，其生物学意义是，如果考虑EF203067来自于MF094681的话，MF094681在其第二个密码子ACT在A和C之间插入了3个碱基(GTA),于是产生了EF203067的前9个碱基ATGAGTACT，相比于MF094681的前6个碱基“ATGACT”而言，这种插入碱基的方式，使得EF203067在该位置只是多了一个氨基酸而并没有发生移码突变，其他序列的插入碱基方式也没有造成移码突变，而这些序列已知是高度相似的，所以这种通过插入碱基而突变的方式是合理的。尽管有一定的生物学意义，但是基因编码区不基于密码方式子比对，结果可能不太可靠。
<br>换用MEGA X里的ClustalW，也采用不基于密码子的比对方法，结果如下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603224457.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
和ClustalW基于密码子的比对方法的结果差不多，在ATG前引入了gap，比对结果不合理。<br><br>主要是数据的引起的。  由于这个插入发生的位置比较特殊，非常靠前，而比对中引入gap本身就是一个带有概率的随机事件，所以Muscle和ClustalW在尽管采取了基于密码子的方式比对，结果还是不尽人意。<br>
通过上面的Muscle(Codons)和ClustalW(Codons)比对的结果，我们可以大致推测，自然界中真实的情况可能是，有几条序列在起始密码子ATG后面，从第4个碱基开始，直接插入了3个碱基，导致他们比其他序列在这个位置多了3个碱基(即多了1个氨基酸)。  <br>这个故事告诉我们：一定要仔细检查比对后的Alignment文件！！！  <br>既然问题已经发生了，重点在于怎么解决这个问题？<br>
很明显，Muscle和ClustalW对于笔者的数据已经败下阵来，那<a data-href="MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)" href="软件\其它生信软件\a-j\mafft：(multiple-alignment-program-for-amino-acid-or-nucleotide-sequences).html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)</a>怎么样？<br>
可是，好像MAFFT没有基于密码子的方式比对呀？<br>
答案是有的，最新的两款生物信息学工具Phylosuite（张东博士）和BioAider（笔者），里面提供的MAFFT模块增加了MAFFT基于密码子的方式进行多序列比对。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240603224750.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
注：笔者的数据分别用MAFFT里的E-INS-i策略(局部比对）和G-INS-i(全局比对）进行了测试，两种不同策略下，其结果是一模一样的，如上图所示。<br>使用MAFFT基于密码子的方式比对基因编码区，其结果基本正常了，而且证实了之前笔者的推测：自然界中真实的情况应该是，有几条序列相比其他序列在第1个密码子(ATG)的后面直接增加了3个碱基（比如EF203067），而那些少了3个碱基的序列（图中占大多数的那些序列）在比对时会在那个位置插入3个gap(-)。<br>多序列比对，还是推荐MAFFT，基因编码区的多序列比对，更加推荐使用MAFFT基于密码子的方式比对。]]></description><link>软件\其它生信软件\使用心得\序列比对的思考.html</link><guid isPermaLink="false">软件/其它生信软件/使用心得/序列比对的思考.md</guid><pubDate>Sun, 08 Sep 2024 13:18:10 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/2754.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/2754.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[软件准备]]></title><description><![CDATA[ 
 <br><br>我们需要：<br>
<br>GATK 软件
<br>JAVA 软件
<br>samtools 软件
<br>在这里，我们注意到 JAVA 软件和 samtools 软件都可以使用命令行安装，GATK 软件放在这里：<a data-tooltip-position="top" aria-label="https://1drv.ms/u/s!AnGqDjyiZ5t_hf15pAiBYEKd65Vdfg?e=snFn1S" rel="noopener nofollow" class="external-link" href="https://1drv.ms/u/s!AnGqDjyiZ5t_hf15pAiBYEKd65Vdfg?e=snFn1S" target="_blank">gatk-4.4.0.0.zip</a><br>你可能需要更新一下 java 的版本：<br>sudo apt update
sudo apt install openjdk-17-jdk
复制<br>将全基因的 BAM 文件提取线粒体 DNA 并转为 FASTA 文件可以按照如下的操作：<br>#!/bin/bash
#!/bin/bash

# 指定搜索的根目录
root_dir="/mnt/d/MTDNA/古代DNA/ZhuMBG2024"

# 线粒体DNA的染色体名称（可以修改为实际的名称，例如 'MT', 'chrM' 等）
mt_chr="MT"

# 输出文件夹名称
output_dir="$root_dir/output_files"

# 错误日志文件路径
error_log="$output_dir/error.txt"

# 创建输出文件夹（如果不存在）
mkdir -p "$output_dir"

# 清空或者创建 error.txt 文件
&gt; "$error_log"

# 检查 samtools 是否已安装
if ! command -v samtools &amp;&gt; /dev/null
then
    echo "Error: samtools is not installed. Please install it before running this script."
    exit 1
fi

# 递归查找 .bam 文件
find "$root_dir" -name "*.bam" | while read bam_file; do
    # 检查文件是否存在且可读
    if [ ! -r "$bam_file" ]; then
        echo "Error: Cannot read BAM file: $bam_file"
        echo "$bam_file" &gt;&gt; "$error_log"
        continue
    fi
    
    # 为每个 .bam 文件生成索引（如果索引文件不存在）
    if [ ! -f "${bam_file}.bai" ]; then
        echo "Indexing BAM file: $bam_file"
        samtools index "$bam_file"
        if [ $? -ne 0 ]; then
            echo "Error: Failed to index BAM file: $bam_file"
            echo "$bam_file" &gt;&gt; "$error_log"
            continue
        fi
    else
        echo "BAM index already exists for: $bam_file"
    fi

    # 提取线粒体DNA (基于 mt_chr 变量)
    output_file="$output_dir/$(basename ${bam_file%.bam}_${mt_chr}.bam)"
    echo "Extracting mitochondrial DNA ($mt_chr) to: $output_file"
    samtools view -b "$bam_file" "$mt_chr" &gt; "$output_file"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to extract mitochondrial DNA from $bam_file"
        echo "$bam_file" &gt;&gt; "$error_log"
        continue
    fi

    # 为生成的线粒体 BAM 文件建立索引
    echo "Indexing mitochondrial BAM file: $output_file"
    samtools index "$output_file"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to index mitochondrial BAM file: $output_file"
        echo "$bam_file" &gt;&gt; "$error_log"
    fi
done

# 打印完成信息
echo "Processing complete. All output files are in $output_dir. Any errors have been logged to $error_log."

复制<br><br>我们一般选择的是 RCRS17.2版本。你可以在 Haplogrep 软件中找到。路径如下：<br>/home/luolintao/Haplogrep/trees/phylotree-rcrs/17.2/rcrs.fasta
复制<br>将 FASTA 文件中 mtDNA 更改为 BAM 文件中的名字。因为有些线粒体 DNA 的名字是 "chrM" "MT" "M" "MtDNA" "ChrM" "chrMT" "26" "chr26" "Chr26" 等等。<br>
你可以通过以下代码查看 BAM 文件的染色体名称：<br>samtools idxstats HRR163260.bam|less -S
复制<br>可以看到下图是 MT。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240628220634.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
因此，你需要将线粒体的参考 fasta 名字更改为 MT.<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240628220757.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br># 建立字典
gatk CreateSequenceDictionary R=rcrs.fasta O=rcrs.dict
# 建立索引
samtools faidx rcrs.fasta
复制<br><br># 建立索引(假如已经存在索引，可以不再建立。)
samtools index 原始的文件.bam
# 提取
samtools view -b 原始的文件.bam MT &gt;线粒体.bam
samtools index 线粒体.bam
复制<br><br>/mnt/e/Scientifc_software/gatk-4.4.0.0/gatk --java-options "-Xmx8G" HaplotypeCaller \
-R $reference_genome \
-I "$bam_file" \
-O "$output_vcf" \
-L MT \
--sample-ploidy 1 \
复制<br><br>#!/bin/bash

# 指定根目录和输出文件夹
root_dir="/mnt/d/nDNA/ancient_DNA/LiSB2024/LiScibull2024/Extract_MT"
reference_genome="/mnt/e/Scientifc_software/Reference/MT.fasta"
output_dir="$root_dir/vcf_output"

# 创建输出文件夹
mkdir -p "$output_dir"

# 遍历 BAM 文件，使用 GATK HaplotypeCaller 生成 vcf 文件
for bam_file in "$root_dir"/*_MT.bam; do
    sample_name=$(basename "$bam_file" .bam)
    output_vcf="$output_dir/${sample_name}.vcf"
    echo "Running GATK HaplotypeCaller on $bam_file"

    /mnt/e/Scientifc_software/gatk-4.4.0.0/gatk --java-options "-Xmx8G" HaplotypeCaller \
    -R $reference_genome \
    -I "$bam_file" \
    -O "$output_vcf" \
    -L MT \
    --sample-ploidy 1 \
    #-ERC gvcf # 如果你希望生成g.vcf才使用这个参数。 
done

echo "HaplotypeCaller completed for all samples."


复制<br><br>在进行这一步之前，请一定要进入 Haplogrep 的安装文件夹。cd 你的安装路径。<br>./haplogrep3 classify \
--input /mnt/c/Users/victo/Desktop/获得的文件.vcf \
--tree phylotree-rcrs@17.2 \
--output /mnt/c/Users/victo/Desktop/分型结果.txt \
--write-fasta # 这个选项不是必须，如果你选了，那么就会生成一个全长的fasta文件。如果你是全测，那么可以勾选，否则会产生虚假的fasta序列。
复制<br>注意这个软件的--tree 选项只能在以下挑选！<br>phylotree-rcrs@17.2
phylotree-rcrs@17.1
phylotree-rcrs@17.0
phylotree-rcrs@16.0
phylotree-rcrs@15.0
phylotree-rsrs@17.1
phylotree-fu-rcrs@1.2
phylotree-fu-rcrs@1.1
phylotree-fu-rcrs@1.0
复制<br><br>#!/bin/bash

# 设置输入和输出目录
input_dir="输入文件的路径"
output_dir="输出文件的路径"

# 检查输出目录是否存在，如果不存在则创建
mkdir -p "$output_dir"
cd 进入你的软件安装路径
# 遍历目录中的所有 VCF 文件
for vcf_file in "$input_dir"/*.vcf; do
    # 获取不带路径的文件名
    filename=$(basename "$vcf_file")
    # 构建输出文件名
    output_file="${output_dir}/${filename%.vcf}_分型结果.txt"

    # 执行 classify 命令
    ./haplogrep3 classify \
        --input "$vcf_file" \
        --tree phylotree-rcrs@17.0 \
        --output "$output_file" \
        --write-fasta

    # 输出处理的文件名
    echo "Processed: $vcf_file"
done

echo "All files processed."

复制]]></description><link>软件\其它生信软件\使用心得\gatk：简易的mtdna分析流程.html</link><guid isPermaLink="false">软件/其它生信软件/使用心得/GATK：简易的mtDNA分析流程.md</guid><pubDate>Sun, 03 Nov 2024 08:20:06 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240628220634.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240628220634.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[安装]]></title><description><![CDATA[ 
 <br><br><a data-tooltip-position="top" aria-label="http://dambe.bio.uottawa.ca/DAMBE/dambe.aspx" rel="noopener nofollow" class="external-link" href="http://dambe.bio.uottawa.ca/DAMBE/dambe.aspx" target="_blank">XiaLab (uottawa.ca)</a><br>或者你也可以使用如下连接下载，在 Win10及以上电脑：<a data-tooltip-position="top" aria-label="https://1drv.ms/u/s!AnGqDjyiZ5t_hflO2Qz-mZKR2fkGFQ?e=kJEmlp" rel="noopener nofollow" class="external-link" href="https://1drv.ms/u/s!AnGqDjyiZ5t_hflO2Qz-mZKR2fkGFQ?e=kJEmlp" target="_blank">DAMBE.msi</a><br>注意，这里有个 bug：
我们需要在属性中选择兼容模式运行，否则可能在 win11电脑闪退！<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111713579.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>通常有两种方法：  <br>
<br>第一种是PAUP 软件验证替换饱和，简要操作如下：  在 PAUP 中分别计算 p 距离和 GTR+I+G 距离，然后在 Excel 中做散点图。（a）如果散点分别在 y=x 直线上，就说明没达到饱和；（b）如果 GTR+I+G 距离&gt;p 距离就说明饱和了。
<br>第二种用DAMBE 软件验证替换饱和，该法最方便实用，推荐使用。只要比较 ISS 和 ISS.c 值大小及显著与否，即可。当 ISS 小于 ISS.c 且 p=0.0000（极显著），就说明没序列替换未饱和，可以建树。<br>
我们在这里展示第二种方法的具体操作：
<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111706837.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111706165.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111705181.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111533427.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
我们发现了，Iss 小于 Iss.c 且 P&lt;0.05，因此替换没有饱和，适合建树。]]></description><link>软件\其它生信软件\a-j\dambe：核苷酸替代饱和度检测.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/DAMBE：核苷酸替代饱和度检测.md</guid><pubDate>Wed, 11 Sep 2024 09:13:35 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111713579.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111713579.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Discovery of Nuclear Mitochondrial Insertions (dinumt )]]></title><description><![CDATA[ 
 <br><br>用于查找 <a data-href="核-线片段（nuclear-mitochondrial DNA segments, NUMTs）" href="术语\核-线片段（nuclear-mitochondrial-dna-segments,-numts）.html" class="internal-link" target="_self" rel="noopener nofollow">核-线片段（nuclear-mitochondrial DNA segments, NUMTs）</a>。<br>该软件旨在从全基因组序列数据中识别线粒体来源的核插入并进行基因分型。它由两个程序组成：dinumt (di-nu-mite)，用于识别单个样本中的插入位点；gnomit (geno-mite)，用于对多个样本中的这些位点进行基因分型。还有一个名为 clusterNumtsVcf 的附加程序，它将多个样本中识别的位点合并到一个合并文件中以进行基因分型。<br>这些程序需要许多第三方软件包：<br>
<br>samtools:&nbsp;<a rel="noopener nofollow" class="external-link" href="http://samtools.sourceforge.net/" target="_blank">http://samtools.sourceforge.net/</a>&nbsp;samtools：<a rel="noopener nofollow" class="external-link" href="http://samtools.sourceforge.net/" target="_blank">http://samtools.sourceforge.net/</a>
<br>exonerate:&nbsp;<a rel="noopener nofollow" class="external-link" href="http://www.ebi.ac.uk/~guy/exonerate/" target="_blank">http://www.ebi.ac.uk/~guy/exonerate/</a>&nbsp;无罪释放：<a rel="noopener nofollow" class="external-link" href="http://www.ebi.ac.uk/~guy/exonerate/" target="_blank">http://www.ebi.ac.uk/~guy/exonerate/</a>
<br>vcftools:&nbsp;<a rel="noopener nofollow" class="external-link" href="http://vcftools.sourceforge.net/" target="_blank">http://vcftools.sourceforge.net/</a>&nbsp;vcftools：<a rel="noopener nofollow" class="external-link" href="http://vcftools.sourceforge.net/" target="_blank">http://vcftools.sourceforge.net/</a>

<br>you will need to make sure Vcf.pm is in your perl library path<br>
你需要确保 Vcf.pm 在你的 perl 库路径中


<br>此外，您将需要：<br>
<br>reference genome in fasta format (e.g. hs37d5.fasta)<br>
fasta 格式的参考基因组（例如 hs37d5.fasta）
<br>individual MT sequence (e.g. MT.fa or chrM.fa)&nbsp;单独的 MT 序列（例如 MT.fa 或 chrM.fa）
<br>bed file of annotated numts in reference (refNumts.bed for hg19 is included in package)<br>
参考中带注释的 numts 的 bed 文件（hg19 的 refNumts.bed 包含在包中）
<br>基因分型步骤需要使用包含各种样本级信息（平均插入片段大小、覆盖范围等）的样本索引文件。已经提供了模板，可以使用 GATK（DepthOfCoverage walker）和 Picard（CollectInsertSizeMetrics）或自定义脚本获取相关数据。如果您在参考基因组版本 GRCh38下的 cram 文件中运行 dinumt，请使用文件夹中相应的.pl。<br>Additional information about various parameters below:<br>
有关以下各种参数的附加信息：<br>
<br>--len_cluster_include&nbsp;: width of window to consider anchor reads as part of the same cluster, typically calculated as&nbsp;mean_insert_size&nbsp;+ 3 &nbsp;standard_deviation<br>
--len_cluster_include ：将锚读取视为同一簇一部分的窗口宽度，通常计算为mean_insert_size + 3  standard_deviation
<br>--len_cluster_link&nbsp;: width of window to link two clusters of anchor reads in proper orientation, typically calculated as 2 &nbsp;len_cluster_include<br>
--len_cluster_link ：以正确方向链接两个锚读取簇的窗口宽度，通常计算为 2  len_cluster_include
<br>--max_read_cov&nbsp;: maximum read depth at potential breakpoint location, used to filter out noisy regions of the genome, typically calculated as 5 &nbsp;mean_coverage<br>
--max_read_cov ：潜在断点位置的最大读取深度，用于过滤掉基因组的噪声区域，通常计算为 5 mean_coverage
<br>--output_support&nbsp;: output all sequence reads supporting an insertion event in SAM format to filename in&nbsp;--support_filename&nbsp;option<br>
--output_support ：将支持 SAM 格式插入事件的所有序列读取输出到 --support_filename 选项中的文件名
<br>--mask_filename&nbsp;: bed file of all numts annotated in reference sequence, one is provided for GRCh37 but additional versions can be obtained from UCSC Genome Browser<br>
--mask_filename ：以参考序列注释的所有 numt 的床文件，为 GRCh37 提供了一个，但可以从 UCSC 基因组浏览器获取其他版本
<br>--min_map_qual&nbsp;: mininum mapping quality required for anchor read to be considered for cluster support, default is 10 but can be adjusted as needed<br>
--min_map_qual ：考虑集群支持的锚点读取所需的最小映射质量，默认值为 10，但可以根据需要进行调整
<br><br>dinumt.pl \
--mask_filename=refNumts.bed \
--input_filename=sample1.bam \
--reference=hs37d5.fa \
--min_reads_cluster=1 \
--include_mask \
--output_filename=sample1.vcf \
--prefix=sample1 \
--len_cluster_include=577 \
--len_cluster_link=1154 \
--insert_size=334.844984 \
--max_read_cov=29 \
--output_support \
--support_filename=sample1_support.sam
复制<br>grep ^# sample1.vcf &gt; header.txt
cat *vcf | grep -v ^# | vcf-sort.pl | clusterNumtsVcf.pl --reference=hs37d5.fa &gt; data.txt
cat header.txt data.txt &gt; merged.vcf
复制<br>gnomit.pl \
--input_filename=merged.vcf \
--mask_filename=refNumts.bed \
--info_filename=sampleInfo \
--output_filename=merged_geno.vcf \
--samtools=samtools \
--reference=hs37d5.fa \
--breakpoint \
--min_map_qual=13 \
--dir_tmp=/tmp \
--exonerate=exonerate \
--mt_filename=MT.fa
复制]]></description><link>软件\其它生信软件\a-j\dinumt.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/dinumt.md</guid><pubDate>Sat, 02 Nov 2024 07:26:51 GMT</pubDate></item><item><title><![CDATA[DnaSP：基础使用说明]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://blog.sciencenet.cn/blog-3433349-1356293.html" rel="noopener nofollow" class="external-link" href="https://blog.sciencenet.cn/blog-3433349-1356293.html" target="_blank">科学网—[转载]DnaSP(基因多态性分析软件) - 吴潇的博文</a><br>DnaSP(基因多态性分析软件)是一款专业的DNA比对分析软件，多用于分析核苷酸多态性。属于生物、医学领域。DnaSP可通过合并估计，分析置信区间,输入比对后的DNA序列文件，进行基因多态性分析,其结果通过表格和图形的形式显示。下面我们就来介绍一下DnaSP分析序列的使用方法。<br>打开DnaSP<br>
<img src="https://pic4.zhimg.com/80/v2-4b74092fea46d2dc9cbf371f606b9bd7_720w.jpg" referrerpolicy="no-referrer"><br>打开一个序列<br>
<img src="https://pic4.zhimg.com/80/v2-c79fdb2a2fe735524cd0aa3fc832fabb_720w.jpg" referrerpolicy="no-referrer"><br>显示出了这段序列的一些特征<br>
<img src="https://pic4.zhimg.com/80/v2-2d42c8b6619436156a507033331cdedf_720w.jpg" referrerpolicy="no-referrer"><br>点击显示数据<br>
<img src="https://pic3.zhimg.com/80/v2-8457fe24549b4adea746ca1283f43736_720w.jpg" referrerpolicy="no-referrer"><br>数据显示出来了<br>
<img src="https://pic3.zhimg.com/80/v2-f4f0d0973498b74a8694cb113ff243c6_720w.jpg" referrerpolicy="no-referrer"><br>点击data，再点击format<br>
<img src="https://pic3.zhimg.com/80/v2-6f8f162c29b55cf23cd73b15ad946eaa_720w.jpg" referrerpolicy="no-referrer"><br>调整参数，选择是DNA还是RNA,还有在染色体的位置，以及倍型。<br>
<img src="https://pic4.zhimg.com/80/v2-8c7988b3a5541f37ecf634f9eb73dd0f_720w.jpg" referrerpolicy="no-referrer"><br>选择使用的密码子<br>
<img src="https://pic4.zhimg.com/80/v2-06da29e6d3b49e6cb2b0472c47cb32a7_720w.jpg" referrerpolicy="no-referrer"><br>选择一种密码子表<br>
<img src="https://pic4.zhimg.com/80/v2-baa0c947b7f63a12815399ac76fa0853_720w.jpg" referrerpolicy="no-referrer"><br>可以设定编码的区域<br>
<img src="https://pic3.zhimg.com/80/v2-31ca736a9294eef0ca30b1e82e6c604e_720w.jpg" referrerpolicy="no-referrer"><br>设定群体数据<br>
<img src="https://pic4.zhimg.com/80/v2-18f082bb3382088e919d9cb684612de3_720w.jpg" referrerpolicy="no-referrer"><img src="https://pic1.zhimg.com/80/v2-0985028406a906456cf0cf5c79dfe7c8_720w.jpg" referrerpolicy="no-referrer"><br>可以选择进行计算的序列<br>
<img src="https://pic1.zhimg.com/80/v2-6559a187e354ffca985c781bb54655fc_720w.jpg" referrerpolicy="no-referrer"><br>可以选择具体要计算的序列<br>
<img src="https://pic2.zhimg.com/80/v2-600938a165f52869b75bafb57887b1e9_720w.jpg" referrerpolicy="no-referrer"><br>点击分析多样性<br>
<img src="https://pic4.zhimg.com/80/v2-0247a18411d0500a9f992f4a605e08a3_720w.jpg" referrerpolicy="no-referrer"><br>设置参数，OK<br>
<img src="https://pic2.zhimg.com/80/v2-356423618504ef1a24b463bc0d01e399_720w.jpg" referrerpolicy="no-referrer"><br>可以看到核苷酸多样性（Pi）与单倍型多样性（Hd）<br>
<img src="https://pic4.zhimg.com/80/v2-9e35d3df4552df301e97f856d86a693f_720w.jpg" referrerpolicy="no-referrer"><br>单倍型数量<br>
<img src="https://pic1.zhimg.com/80/v2-f4ae3e6448de942dd0996d86a75cd9b0_720w.png" referrerpolicy="no-referrer"><br>核苷酸多样性（每个位点）（p Nucleotide diversity per site）<br>
<img src="https://pic4.zhimg.com/80/v2-3ce9054cb14f14c200472cd8f391d393_720w.png" referrerpolicy="no-referrer"><br>平均核苷酸差异数（k Average number of nucleotide differences）<br>
<img src="https://pic1.zhimg.com/80/v2-cd54f40a4faa329ee2215d867e8c8f04_720w.jpg" referrerpolicy="no-referrer"><br>点击分析多态位点<br>
<img src="https://pic1.zhimg.com/80/v2-9f1b366dd6cade8ee8a83fc2cea772f0_720w.jpg" referrerpolicy="no-referrer"><br>得到多态位点的信息<br>
<img src="https://pic2.zhimg.com/80/v2-a40f16f6547c443611ea84150c7393d9_720w.jpg" referrerpolicy="no-referrer"><br>不变的位点（单型位点）Invariable (monomorphic) sites:<br>
<img src="https://pic3.zhimg.com/80/v2-fe58a7fd5940196f1e2bdb813df813c6_720w.jpg" referrerpolicy="no-referrer"><br>变化的位点（多态性位点S Number of polymorphic sites）总突变位点<br>
<img src="https://pic3.zhimg.com/80/v2-156d43fcb73da363ac6cd83c888a28f6_720w.jpg" referrerpolicy="no-referrer"><br>变化位点与简约信息位点数（Npi Number of parsimony-informative characters）<br>
<img src="https://pic1.zhimg.com/80/v2-a7bef74a2fb13aaa3be89aed5b548b64_720w.jpg" referrerpolicy="no-referrer"><br>点击分析，taijima’s test,进行中性检验。<br>
<img src="https://pic1.zhimg.com/80/v2-41bae78c06ae3c1b6016e58618b3f37c_720w.jpg" referrerpolicy="no-referrer"><br>正值时说明序列进化方式为平衡选择，且有一些单倍型分化；负值时为负向选择或群体扩张。如果差异显著，认为目标序列的进化不遵循中性模型，如果差异不显著，则认为目标序列在进化上遵循中性模型。为0时为中性选择。如果不显著，则不能排除中性选择。<br>
<img src="https://pic4.zhimg.com/80/v2-671dfb39787f372aed8acf609ecd11ef_720w.jpg" referrerpolicy="no-referrer"><br>选择Synonymous and NonSynomymous Substitutions，点击这项进行Ka，Ks（即dN，dS）分析。<br>
<img src="https://pic4.zhimg.com/80/v2-f8612a03554523bf39f1332ed732818f_720w.jpg" referrerpolicy="no-referrer"><br>得到ka与ks<br>
<img src="https://pic4.zhimg.com/80/v2-b7fc7cb20502e2595c3944cb6b3c3c4f_720w.jpg" referrerpolicy="no-referrer"><br>还有一个文本的总结表<br>
<img src="https://pic3.zhimg.com/80/v2-bf4bcef750ad893bf4e1fb1fb7a54c5e_720w.jpg" referrerpolicy="no-referrer"><br>分析插入删除多态性<br>
<img src="https://pic4.zhimg.com/80/v2-8a99ce717830d97317bc774512c9bb0b_720w.jpg" referrerpolicy="no-referrer"><br>选择模型<br>
<img src="https://pic3.zhimg.com/80/v2-8c99adcf65eae8619ce0862c100e2c56_720w.jpg" referrerpolicy="no-referrer"><br>得到结果，看有没有插入删除事件<br>
<img src="https://pic3.zhimg.com/80/v2-4ceff1f441bd279b5abcffef79deb6ee_720w.jpg" referrerpolicy="no-referrer"><br>分析群体的分歧<br>
<img src="https://pic2.zhimg.com/80/v2-49428b342c75a1e7b04e96e765fbe141_720w.jpg" referrerpolicy="no-referrer"><br>得到结果<br>
<img src="https://pic4.zhimg.com/80/v2-875e8f4d18f0db9153199a58c6ddac47_720w.jpg" referrerpolicy="no-referrer"><br>分析保守区域<br>
<img src="https://pic2.zhimg.com/80/v2-db6de3b080ef9522b6e57e67893a67d1_720w.jpg" referrerpolicy="no-referrer"><br>得到保守区域的结果<br>
<img src="https://pic1.zhimg.com/80/v2-4b026edbc2dae243b2b7bc0d5d9746ec_720w.jpg" referrerpolicy="no-referrer"><br>分析密码选择偏好<br>
<img src="https://pic4.zhimg.com/80/v2-9dbc1a8f9887d401b9f7fa5faadafdeb_720w.jpg" referrerpolicy="no-referrer"><br>分析基因保守性<br>
<img src="https://pic3.zhimg.com/80/v2-dfa47601fd166b6d3aff1363259255a6_720w.jpg" referrerpolicy="no-referrer"><br>分析基因流与遗传分化<br>
<img src="https://pic3.zhimg.com/80/v2-f9de4336d8ece2d9cd88da856adaea1a_720w.jpg" referrerpolicy="no-referrer"><br>修改参数<br>
<img src="https://pic1.zhimg.com/80/v2-31d9c5224fd58dca4948588a207a229c_720w.jpg" referrerpolicy="no-referrer"><br>得到结果<br>
<img src="https://pic1.zhimg.com/80/v2-edbb1221a9fb1097e2b86ec0a79ed370_720w.jpg" referrerpolicy="no-referrer"><br>分析功能区域的多态性与分歧<br><img src="https://pic3.zhimg.com/80/v2-4a4e2aa4ea659b6a9ec2e0bf967e4cbe_720w.jpg" referrerpolicy="no-referrer"><br>分析连锁不平衡<br><img src="https://pic1.zhimg.com/80/v2-9390181c7107ec82b9b653ffda76c720_720w.jpg" referrerpolicy="no-referrer"><br>得到连锁不平衡结果<br>
<img src="https://pic1.zhimg.com/80/v2-ea44c3f5d5a332b25710f5e7b090f7d8_720w.jpg" referrerpolicy="no-referrer"><br>总体计算<br><img src="https://pic1.zhimg.com/80/v2-cd250d7576415bea0f3b7e3d40a690b8_720w.jpg" referrerpolicy="no-referrer"><br>分析群体分歧<br>
<img src="https://pic3.zhimg.com/80/v2-1847e2fc55c3fea9dc1e9e15699db202_720w.jpg" referrerpolicy="no-referrer"><br>选择要分析的群体<br>
<img src="https://pic1.zhimg.com/80/v2-9ad404c64e737a389a4c1d5c8de0c208_720w.jpg" referrerpolicy="no-referrer"><br>得到结果<br>
<img src="https://pic3.zhimg.com/80/v2-0c6f4d7f5c6eb5a0bba872840efdfda6_720w.jpg" referrerpolicy="no-referrer"><br>可以将各种分析具体结果保存<br>
<img src="https://pic1.zhimg.com/80/v2-337f7cf4ae1febf71c285156116e7198_720w.jpg" referrerpolicy="no-referrer">]]></description><link>软件\其它生信软件\a-j\dnasp：基础使用说明.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/DnaSP：基础使用说明.md</guid><pubDate>Tue, 29 Oct 2024 09:09:43 GMT</pubDate><enclosure url="https://pic4.zhimg.com/80/v2-4b74092fea46d2dc9cbf371f606b9bd7_720w.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://pic4.zhimg.com/80/v2-4b74092fea46d2dc9cbf371f606b9bd7_720w.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[AMOVA介绍]]></title><description><![CDATA[ 
 <br><br><a data-href="分子方差分析（AMOVA ，Analysis of Molecular Variance)" href="术语\分子方差分析（amova-，analysis-of-molecular-variance).html" class="internal-link" target="_self" rel="noopener nofollow">分子方差分析（AMOVA ，Analysis of Molecular Variance)</a>，是一种用于分析遗传数据中种群间和种群内遗传差异的统计方法。"分子方差分析"或"分子差异分析"。是一种用于分析遗传数据中种群间和种群内遗传差异的统计方法。<br><br>我们需要序列文件，文件格式可以使用fasta，其他格式可以参照说明书。<br><br><br>这是一个生物信息文件的格式转换器，可以在多种格式之间相互转换。我们需要将fasta文件转换成能够被Arlequin识别的形式。<br>
<br><a data-tooltip-position="top" aria-label="https://dnasp.software.informer.com/5.1/" rel="noopener nofollow" class="external-link" href="https://dnasp.software.informer.com/5.1/" target="_blank">DnaSP</a>下载
<br>打开DnaSP

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272244083.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272244260.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272245693.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>弹窗不管，点击close
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272246152.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>根据数据的类型选择，这里以<a data-href="线粒体DNA（mtDNA）" href="术语\线粒体dna（mtdna）.html" class="internal-link" target="_self" rel="noopener nofollow">线粒体DNA（mtDNA）</a>为代表<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272247099.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272247759.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272248321.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">这一步进行分组，分组的依据根据自己的情况而定。
<br>输入组名<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272249568.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>把所有序列进行分组，然后点击Update<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272250762.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272251623.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272251475.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>保存文件，注意有2个文件，请保存在一起。<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272252022.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">


<br><br>打开Arlequin软件，[下载地址](<a data-tooltip-position="top" aria-label="http://cmpg.unibe.ch/software/arlequin35/" rel="noopener nofollow" class="external-link" href="http://cmpg.unibe.ch/software/arlequin35/" target="_blank">Arlequin 3.5 (unibe.ch)</a>)。<br>
1. <img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272253988.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
2. <img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272254163.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
3. <img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272255968.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
- 排列次数（No. of permutations）：这个数字决定了统计显著性测试的准确性。1000是一个常用的默认值，但如果您的数据量很大或者您需要更精确的p值，您可以选择一个更高的值。<br>
- Compute Minimum Spanning Network (MSN) among haplotypes：如果您对不同单倍型间的关系感兴趣，可以选择这个选项来生成网络。<br>
- Compute distance matrix：这决定了是否计算距离矩阵。选择适合您数据类型的距离计算方法。例如，如果您的数据是序列数据，您可能会选择“Pairwise difference”。<br>
- Gamma a value：这是用于校正分子距离的形状参数，它依赖于数据。如果您不确定该如何设置，通常保留为0是一个安全的选择，这意味着不对距离进行校正。<br>
- Print distance matrix：如果您希望在输出中包含距离矩阵，可以勾选此选项。<br>
1. <img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272255639.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
2. 最后<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272255877.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
3. 找到结果文件（通常在安装软件的文件夹里），用记事本打开XML文件<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272256317.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
4. 大功告成！！！！<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272257273.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>在Arlequin软件中，“no of permutation”（排列数）是用来在进行种群遗传结构分析时估计统计显著性的参数。Arlequin是一个用于种群遗传学分析的软件包，它可以执行多种统计分析，包括AMOVA（分子方差分析）、F统计量、单倍型多样性分析等。排列测试（permutation test）是一种非参数统计方法，通过重新分配数据中的观察值来生成参考分布，从而计算出观察到的统计量的显著性。<br>在Arlequin中设置的“no of permutation”（排列次数）值越大，得到的统计结果越稳定，显著性测试的结果也越可靠。这是因为在排列测试中，通过随机重新排序样本标签来生成大量的数据集，然后对每个数据集进行分析，以计算出原始数据观察到的统计量的分布。这个过程重复进行指定的排列次数。“no of permutation”值决定了将生成多少个这样的随机数据集。例如，如果设置为1000，那么将生成1000个随机数据集来估计统计量的分布。<br>然而，需要注意的是，增加排列次数会显著增加计算时间。因此，在实际应用中需要在计算精度和计算时间之间做出平衡。通常情况下，排列次数设置为1000至10000之间可以提供一个相对稳定的显著性估计，但对于需要更高精度的分析，可能需要更多的排列次数。<br>总的来说，“no of permutation”参数在Arlequin软件中的作用是控制进行统计显著性测试时排列测试的重复次数，其数值大小直接影响到分析结果的稳定性和可靠性。在使用Arlequin进行分析时，适当选择“no of permutation”的值对于确保结果的准确性和科学性至关重要。]]></description><link>软件\其它生信软件\a-j\dnasp：amova及fst分析软件操作.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/DnaSP：AMOVA及Fst分析软件操作.md</guid><pubDate>Fri, 21 Jun 2024 07:31:27 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272244083.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401272244083.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1. 群体演化历史分析的案例：]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://www.jianshu.com/p/a2ee87918b1c" rel="noopener nofollow" class="external-link" href="https://www.jianshu.com/p/a2ee87918b1c" target="_blank">fastsimcoal2推断群体演化历史(Demographic history) - 简书 (jianshu.com)</a><br><br>群体演化包括有效群体大小(Ne)变化、基因流，迁徙，分化等，会对等位基因频率产生显著影响，塑造了现有遗传多样性的模式和水平。群体演化、遗传漂变和自然选择共同决定了基因组遗传多样性的命运。<br>
Example: 苏格兰罕见的食肉褐鳟（rare piscivorous brown trout: ferox）与普通褐鳟（normal brown trout）在进化过程中是否有基因交流？<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021648695.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021648797.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><a data-href="等位基因频谱(allele frequency spectrum,SFS)" href="术语\等位基因频谱(allele-frequency-spectrum,sfs).html" class="internal-link" target="_self" rel="noopener nofollow">等位基因频谱(allele frequency spectrum,SFS)</a><br>
单个群体:<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021655249.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
两个群体:<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021656103.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
颜色越偏红，表示数量越多，越偏蓝表示数量越少。如果两个群体完全分开，那它们derived allele频率相同的交集就越少，表现在2D SFS上就是密度偏向各自的坐标轴，如果群体交流混合，它们derived allele频率相同的交集就越多，表现在2D SFS上就是密度偏向x=y的这条对角线。后面两个模型对SFS的影响很像，都是使两群体的SFS趋同，可能结合群体分化时间，核苷酸突变速率等推断具体是哪种模型。<br><br>  <img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021657299.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">个人理解是，通过推断参数，给出模型，使expected SFS更合理，也就是更加类似于两个分离的群体。模型参数包括：群推分歧时间（也可以自己提供），基因流，以及有效群体大小。<br><br>fastsimcoal2是由伯尔尼大学的Laurent Excoffier小组2016年开发的一种非常灵活的人口统计(Demography)建模软件。 它通过执行合并模拟，使用位点频谱（SFS），推断最适合所观察数据的模型参数。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021658935.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>软件下载<br>
官网：<a data-tooltip-position="top" aria-label="https://links.jianshu.com/go?to=http%3A%2F%2Fcmpg.unibe.ch%2Fsoftware%2Ffastsimcoal2%2F" rel="noopener nofollow" class="external-link" href="https://links.jianshu.com/go?to=http%3A%2F%2Fcmpg.unibe.ch%2Fsoftware%2Ffastsimcoal2%2F" target="_blank">http://cmpg.unibe.ch/software/fastsimcoal2/</a><br>
使用fastsimcoal2和模拟数据在简单模型下推断参数<br>输入文件<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021658527.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>使用 fastsimcoal2和软件自带的测试数据在简单模型下推断参数:<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021658284.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br>文件 2PopDiv20Mb_jointDAFpop1_0.obs 代表了一个<a data-href="联合衍生等位基因频率谱（joint Derived Allele Frequency spectrum， joint DAF）" href="术语\联合衍生等位基因频率谱（joint-derived-allele-frequency-spectrum，-joint-daf）.html" class="internal-link" target="_self" rel="noopener nofollow">联合衍生等位基因频率谱（joint Derived Allele Frequency spectrum， joint DAF）</a>的观察数据，用于描述两个种群之间的遗传分化。在这个上下文中，“joint”意味着数据矩阵同时考虑了两个种群的信息，而不是单独分析。这个文件特别用于分析和模拟两个种群的分化历史，其内容和结构反映了两个种群中衍生等位基因的分布情况。<br><br>文件2PopDiv20Mb_jointDAFpop1_0.obs是两个群体的观测2D-SFS.<br># set the working directory
setwd("/Software/fsc26_mac64/example files/2PopDiv20Mb")
# read the observed SFS
# 2D from two populations with different effective sizes that diverged some time ago
pop2d &lt;- read.table("2PopDiv20Mb_jointDAFpop1_0.obs", skip=1, stringsAsFactors = F, header=T, row.names = 1)
head(pop2d)
         d0_0 d0_1 d0_2 d0_3 d0_4 d0_5
d1_0 19985747 8350 1628  360   62    8
d1_1      966    0    0    0    0    0
d1_2      479    0    0    0    0    0
d1_3      328    0    0    0    0    0
d1_4      249    0    0    0    0    0
d1_5     1760   13   18   13   19    0
复制<br><br>每个模型都在 TPL 文件中定义，我们要推断的参数都有名称标签（例如 NPOP，TDIV）.<br>//Parameters for the coalescence simulation program : fsimcoal2.exe
2 samples to simulate :
//Population effective sizes (number of genes)
NPOP1
NPOP2
//Samples sizes and samples age 
5
5
//Growth rates  : negative growth implies population expansion
0
0
//Number of migration matrices : 0 implies no migration between demes
0
//historical event: time, source, sink, migrants, new deme size, new growth rate, migration matrix index
1  historical event
TDIV 1 0 1 RESIZE0 0 0
//Number of independent loci [chromosome] 
1 0
//Per chromosome: Number of contiguous linkage Block: a block is a set of contiguous loci
1
//per Block:data type, number of loci, per generation recombination and mutation rates and optional parameters
FREQ  1   0   2.5e-8 OUTEXP
复制<br>EST文件中定义了每个参数的搜索范围。 对于每个参数，我们使用相应的参数名称标签指定搜索范围。<br>// Search ranges and rules file
// ****************************

[PARAMETERS]
//#isInt? #name   #dist.#min  #max 
//all Ns are in number of haploid individuals
1  NPOP1       logunif  10   1e7   output
1  NPOP2       logunif  10   1e7   output
1  NANC        logunif  10   1e7   output 
1  TDIV        unif     10   1e5   output 

[RULES]

[COMPLEX PARAMETERS]

0  RESIZE0   = NANC/NPOP1      hide
复制<br>注意：TPL 和 EST 文件需要具有相同的文件名，但具有不同的扩展名：filename.est 和 filename.tpl。<br><br>#参数估计（推测群体演化历史）
fsc26 -t PopDiv_diff.tpl -e PopDiv_diff.est -d -0 -n 100000 -L 40 -s 0 -M -q -c 80
#还可以产生模拟群体数据（另一个功能）
#使用输入参数文件中定义的参数值来模拟进化模型下的数据
fsc26 -i test.par -n 100
#使用从先验随机抽取的参数值来模拟进化模型下的数据
fsc26 -t test.tpl -n 10 -e test.est -E 100
#使用在外部文件中定义的参数值来模拟进化模型下的数据
fsc26 -t test.tpl -n 100 -f test.def
复制<br>参数说明：<br>-n: 模拟次数，该值应大于100,000。建议使用200,000到1,000,000。
-L: 迭代次数，该值至少应为20，建议使用50和100之间。
-M: 使用似然优化推断参数。
-d: 对于derived SFS使用-d，对于MAF SFS使用-m。
-0: 说明观察到的SFS中没有单态位。
-q: 快速模式，不打印所有信息。
-C: 为具有至少1个SNP的所有输入计算似然。如果指定-Cx，则所有少于x个SNP的条目将汇集在一起。当观察到SFS中很多位点SNP很少时，此选项用以避免过度拟合。
-c: 指定多线程的选项。 -c1 -B1用于单核，-c4 -B4用于4核。
复制<br><br>对我们最重要的三个文件：<br>* .bestlhoods：具有最大似然参数估计值和相应似然性的文件。 这就是我们想要的-参数估计！
* _DAFpop0.txt：具有通过优化过程中使似然性最大化的参数获得的预期SFS的文件，对于检查SFS是否合适是必需的。
* .simparam：文件中包含运行模拟的设置示例，用于错误时检查。
复制<br>查看结果<br>#读取最大似然估计参数文件
maxlhoodEstimates &lt;- read.table(paste(settings$pathTo_InputFile, "/",
                                      settings$TPL_EST_file_tag, "/",
                                      settings$TPL_EST_file_tag, ".bestlhoods",
                                      sep=""), header=T)
#查看估计参数
maxlhoodEstimates
复制<br>其中，MaxObsLhood指如果期望值与观察到的SFS完全匹配，即期望的SFS是相对观察到的SFS，则值越大。MaxEstLhood是根据模型参数估计的最大似然，拟合度越高，MaxObsLhood和MaxEstLhood之间的差异就越小。<br>#获取观察到的和预期的SFS
# Fit of the model expected SFS to the observed SFS

# Tag for the end of the observed SFS file
obsfileend &lt;- "_jointDAFpop1_0"

# Read the observed SFS - SNP counts
obssfs &lt;- read.table(paste(settings$pathTo_InputFile,
                    settings$TPL_EST_file_tag, obsfileend, ".obs",
                    sep=""), skip=1, stringsAsFactors = F, header=T)

# Read the expected SFS - PROBABILITIES
expsfs &lt;- read.table(paste(settings$pathTo_InputFile,
                    settings$TPL_EST_file_tag, "/",
                    settings$TPL_EST_file_tag, obsfileend, ".txt",
                    sep=""), header=T)

# Plot the fit of the 2D SFS, including of the marginal 1D SFS
# the function plot2dSFS is defined in the utilfunctions.r
# you need to give as input the following arguments
#    obsSFS : matrix with observed SFS (counts)
#    expSFS : matrix with expected SFS (probabilities)
#    xtag : string with the label of x-axis
#    ytag : string with the label of y-axis
#    minentry : number with the minimum entry in the SFS (all entries with less than this are pooled together)
plot2dSFS(obsSFS=obssfs, expSFS=expsfs, xtag="Pop2", ytag="Pop1", minentry=1)
复制<br>  <img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021701041.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>#绘制模型
#maxL.par file 是一个最大似然估计参数文件
path_to_maxL_file &lt;- paste(settings$pathTo_InputFile, settings$TPL_EST_file_tag, "/",settings$TPL_EST_file_tag, "_maxL", sep="")
parFileInterpreter(args=path_to_maxL_file, pop.names=c("Pop1","Pop2"), gentime=1, printPDF=FALSE)
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021702170.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\其它生信软件\a-j\fastsimcoal2.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/fastsimcoal2.md</guid><pubDate>Fri, 21 Jun 2024 07:31:06 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021648695.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404021648695.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[GUIDANCE2 Server ：多序列比对置信软件]]></title><description><![CDATA[ 
 <br><a data-href="GUIDANCE2：准确检测不可靠的对准区域，考虑多个参数的不确定性" href="文献及报道\文献\2023年阅读\guidance2：准确检测不可靠的对准区域，考虑多个参数的不确定性.html" class="internal-link" target="_self" rel="noopener nofollow">GUIDANCE2：准确检测不可靠的对准区域，考虑多个参数的不确定性</a><br><a data-tooltip-position="top" aria-label="https://taux.evolseq.net/guidance/source" rel="noopener nofollow" class="external-link" href="https://taux.evolseq.net/guidance/source" target="_blank">GUIDANCE Server - a web server for assessing alignment confidence score (evolseq.net)</a><br><a data-tooltip-position="top" aria-label="https://github.com/anzaika/guidance" rel="noopener nofollow" class="external-link" href="https://github.com/anzaika/guidance" target="_blank">anzaika/guidance: A stable place for guidance source code http://guidance.tau.ac.il/ver2/source.php (github.com)</a><br><br>这个软件的作用是调用多序列比对软件，例如<a data-href="MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)" href="软件\其它生信软件\a-j\mafft：(multiple-alignment-program-for-amino-acid-or-nucleotide-sequences).html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)</a>,MUSCLE等进行比对，并对获得的位点按照系统发育置信度进行打分+可视化。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405091435936.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405091435963.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>下载，之后执行<br>tar -xzvf guidance.v2.02.tar.gz
cd guidance.v2.02  
make
复制<br><br>任选其一安装：<br>
<br>
MAFFT:&nbsp;Type "mafft" and check that you have version 6.712 or newer.

<br>
Else download and install MAFFT from:<br>
<a rel="noopener nofollow" class="external-link" href="http://mafft.cbrc.jp/alignment/software/" target="_blank">http://mafft.cbrc.jp/alignment/software/</a>

<br>
PRANK:&nbsp;Type "prank" and check that you have version v.100223 or newer.

<br>
Else download and install PRANK from:<br>
<a rel="noopener nofollow" class="external-link" href="http://www.ebi.ac.uk/goldman-srv/prank/prank/" target="_blank">http://www.ebi.ac.uk/goldman-srv/prank/prank/</a>

<br>
CLUSTALW:&nbsp;Type "clustalw" and check that you have it insalled  

<br>Else download and install CLUSTALW from:<br>
<a rel="noopener nofollow" class="external-link" href="http://www.ebi.ac.uk/Tools/clustalw2/index.html" target="_blank">http://www.ebi.ac.uk/Tools/clustalw2/index.html</a>


<br><br>GUIDANCE also uses Perl, BioPerl and Ruby:<br>
<br>
Type "perl -v" and check that you Perl installed.

<br>
Else download and install it from:<br>
<a rel="noopener nofollow" class="external-link" href="http://www.perl.org/" target="_blank">http://www.perl.org/</a>

<br>
Type "perl -e 'use Bio::SeqIO'" to check that you have BioPerl.

<br>
Else download and install it from:<br>
<a rel="noopener nofollow" class="external-link" href="http://www.bioperl.org/" target="_blank">http://www.bioperl.org/</a>

<br>
Type "ruby --version" to check that you have ruby.

<br>
Else download and install it from:<br>
<a rel="noopener nofollow" class="external-link" href="http://www.ruby-lang.org/en/" target="_blank">http://www.ruby-lang.org/en/</a>

<br><br>guidance/www/Guidance/guidance.pl
复制<br>用法：<br>perl &lt;guidance directory&gt;/www/Guidance/guidance.pl \ 
--seqFile SEQFILE \
--msaProgram [MAFFT|PRANK|CLUSTALW|MUSCLE] \
--seqType [aa|nuc|codon] \
--outDir FULL_PATH_OUTDIR
复制<br>必需的参数：<br>
dd<br>
<br>--seqFile：输入的序列文件，需为FASTA格式
<br>--msaProgram：使用的多序列比对（MSA）程序
<br>--seqType：对齐的序列类型（氨基酸、核苷酸或密码子）
<br>--outDir：将自动创建并包含所有输出文件的输出目录 [请提供完整路径而非相对路径]
<br>可选参数：<br>
<br>--program [GUIDANCE2|GUIDANCE|HoT] 默认=GUIDANCE2
<br>--bootstraps：引导迭代次数（仅限于 GUIDANCE）。默认值=100。越多越慢。
<br>--genCode：遗传密码标识符（仅限于密码子序列）。默认值=1
<br>1) Nuclear Standard
15) Nuclear Blepharisma
6) Nuclear Ciliate
10) Nuclear Euplotid
2) Mitochondria Vertebrate 线粒体脊椎动物
5) Mitochondria Invertebrate
3) Mitochondria Yeast
13) Mitochondria Ascidian
9) Mitochondria Echinoderm
14) Mitochondria Flatworm
4) Mitochondria Protozoan
复制<br>
<br>--outOrder  默认=aligned。也可以选择 as_input
<br>--msaFile：输入的比对文件 - 不推荐，参见概述部分
<br>--seqCutoff：置信度截止值，介于0到1之间。默认值=0.6
<br>--colCutoff：置信度截止值，介于0到1之间。默认值=0.93
<br>--mafft：mafft可执行文件的路径。默认值=mafft
<br>--prank：prank可执行文件的路径。默认值=prank
<br>--muscle：muscle可执行文件的路径。默认值=muscle
<br>--pagan：pagan可执行文件的路径。默认值=pagan
<br>--ruby：ruby可执行文件的路径。默认值=ruby
<br>--dataset：数据集的唯一名称 - 将用作输出的前缀（默认值=MSA）
<br>--MSA_Param：为比对程序传递参数，例如 PRANK 的-F。要传递包含‘-’的参数，每个‘-’前都要加上反斜杠，例如 \-F
<br>--proc_num：使用的处理器数量（默认值=1）<br>
示例：
<br>guidance \
--seqFile /mnt/e/Scientifc_software/guidance-master/guidance-master/Tem/Tem.fasta \
--msaProgram muscle \
--seqType nuc \
--genCode 2 \
--outDir /mnt/e/Scientifc_software/guidance-master/guidance-master/Tem/outcome \
--bootstraps 5 \
--proc_num 24 \
--dataset TEM \
# 将使用[[MAFFT]]比对“10K_1069_hap.fasta”中的序列，并将所有结果输出到目录“/somewhere/protein.guidance”  

perl &lt;guidance directory&gt;/www/Guidance/guidance.pl \
--seqFile codingSeq.fas \
--msaProgram PRANK \
--seqType codon \
--outDir /somewhere/codingSeq.guidance \
--genCode 2 \
--bootstraps 30 
# 将使用PRANK比对“codingSeq.fas”中的密码子序列，并使用脊椎动物线粒体遗传密码进行翻译，将所有结果输出到目录“/somewhere/codingSeq.guidance”。只进行30次引导迭代，而不是默认的100次（将运行时间缩短3倍）
复制]]></description><link>软件\其它生信软件\a-j\guidance2-server-：多序列比对置信软件.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/GUIDANCE2 Server ：多序列比对置信软件.md</guid><pubDate>Sun, 08 Sep 2024 13:18:10 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405091435936.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405091435936.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Haplocheck：检测污染]]></title><description><![CDATA[ 
 <br>Haplocheck是一款检测mtDNA污染的软件，通过与rCRS进行分单倍型。<br> # 创建文件架
 mkdir haplocheck
 # 下载压缩包
 wget https://github.com/genepi/haplocheck/releases/download/v1.3.3/haplocheck.zip
 # 解压压缩包
 unzip haplocheck.zip
 # 运行程序
 # 实例
 wget https://github.com/genepi/haplocheck/tree/master/test-data/contamination/1000G/all/1000g-nobaq.vcf.gz
 
 # 实例
./haplocheck --out /home/luolintao/haplocheck/example/example1000G /home/luolintao/haplocheck/example/1000g-nobaq.vcf.gz 

firefox 1000g-results/report/report.html
 # 命令  ./haplocheck --out 输出文件.txt 输入文件.vcf/bam
 ./haplocheck --out /home/luolintao/haplocheck/outcomes/Illumina_mtDNA.txt /home/luolintao/Illumina_data/Illumina_mtDNA.vcf
复制]]></description><link>软件\其它生信软件\a-j\haplocheck：检测污染.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/Haplocheck：检测污染.md</guid><pubDate>Fri, 21 Jun 2024 07:30:24 GMT</pubDate></item><item><title><![CDATA[在本地运行 Haplocheck]]></title><description><![CDATA[ 
 <br>
<a data-tooltip-position="top" aria-label="https://mitoverse.readthedocs.io/haplocheck/haplocheck/#bam-input" rel="noopener nofollow" class="external-link" href="https://mitoverse.readthedocs.io/haplocheck/haplocheck/#bam-input" target="_blank">Haplocheck - Mitoverse</a>
<br>Haplocheck 通过分析线粒体 DNA 来检测 mtDNA 和 WGS 测序研究中的污染模式。 Haplpcheck 还可以作为 nDNA 研究的代理工具，为用户提供图形报告以进一步调查污染情况。<br><br>在VCF文件上运行单倍体检查，同质基因型必须编码为“1/1”，异质基因型必须编码为“0/1”。您可以通过从 BAM 文件启动单倍体检查（请参阅 mutserve）或使用最先进的变体调用程序（例如 GATK MuTect2）来创建这样的 VCF。<br>mkdir haplocheck
wget https://github.com/genepi/haplocheck/releases/download/v1.3.2/haplocheck.zip
unzip haplocheck.zip
./haplocheck --out &lt;out-file&gt; &lt;input-vcf&gt;
复制]]></description><link>软件\其它生信软件\a-j\haplocheker：软件安装和使用.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/Haplocheker：软件安装和使用.md</guid><pubDate>Tue, 29 Oct 2024 09:52:02 GMT</pubDate></item><item><title><![CDATA[使用方法]]></title><description><![CDATA[ 
 <br>自从 <a data-href="Haplogrep3：软件使用手册" href="软件\其它生信软件\a-j\haplogrep3：软件使用手册.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="🙂" aria-label="🙂" data-icon="🙂" aria-hidden="true" style="transform: translateY(0px);"></span>Haplogrep3：软件使用手册</a><img class="emoji" draggable="false" alt="🙂" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f642.svg" height="18px" style="max-width: 100%;"> 软件出来之后，这个软件已经被忽视了。但是最近我发现了一个很糟糕的事情，就是在第三代软件中不能够使用第二代可以使用的带位点信息的系统发育树。我发邮件问了作者，他让我用第二代。嗯，很简洁的回答。<br>
第二代网站链接 ： <a rel="noopener nofollow" class="external-link" href="https://github.com/seppinho/haplogrep-cmd" target="_blank">https://github.com/seppinho/haplogrep-cmd</a><br>
我不知道第二代会不会网站出问题，我存了一份，可以发邮件给我： <a data-tooltip-position="top" aria-label="mailto:gaintlinlinlin@gmail.com" rel="noopener nofollow" class="external-link" href="mailto:gaintlinlinlin@gmail.com" target="_blank">gaintlinlinlin@gmail.com</a><br><br><br>输入文件可以是 fasta 或者 vcf。<br>注意
fasta 文件不能够出现任何特殊字符，只能够包含 A,G,C,T。也就是说不能够使用对齐的 fasta 文件。用原始的即可。<br>
VCF 文件分为两种，一种是芯片的，另一种是 WGS 的。如果是芯片的，就要加上一个参数 --chip
<br><br><br>haplogrep-cmd-master/haplogrep classify \
--in input/你的数据.vcf \
--format vcf \
--phylotree 17 \
--extend-report \
--lineage 1 \
--out outcome/1 \
--chip
# --lineage 0代表不生成。1代表生成位点和拓扑结构。2代表生成拓扑结构。选1最好。
复制<br><br>haplogrep-cmd-master/haplogrep classify \
--in input/你的数据.vcf \
--format vcf \
--phylotree 17 \
--extend-report \
--lineage 1 \
--out outcome/1 \
复制<br><br>haplogrep-cmd-master/haplogrep classify \
--in input/你的数据.fasta \
--format fasta \
--phylotree 17 \
--extend-report \
--lineage 1 \
--out outcome/1 \
复制<br><br>会生成一个 dot 文件，使用 dot 软件即可。软件下载很简单，linux 系统直接 sudo get 即可。 这个文件被用于可视化：<br>dot 1.dot \
-Tpdf &gt; 1.pdf 
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407182231091.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>这个软件只能使用 phylotree 17.0 。我不知道怎么使用更新的树。所以我直接把想要的树的内容（从 haplogrep3获得）将原本的文件进行替换。我不知道有没有用。<br>举例来说：<br>Haplogrep3/trees/phylotree-rcrs/17.2
Haplogrep3/trees/phylotree-rcrs/17.1
Haplogrep3/trees/phylotree-rcrs/17.0
复制<br>内部各自有 树.xml 和对应的权重 weghit.txt 文件：<br>Haplogrep3/trees/phylotree-rcrs/17.2/weights.txt
Haplogrep3/trees/phylotree-rcrs/17.2/tree.xml
复制<br>分别可以用来替换第二代软件的树文件：<br>haplogrep-cmd-master/data/phylotree/phylotree17_FU1a.xml
haplogrep-cmd-master/src/main/resources/phylotree17_FU1a.xml
haplogrep-cmd-master/src/main/resources/weights17_FU1a.txt
复制<br>请一定不要改文件名字，仅替换内容！]]></description><link>软件\其它生信软件\a-j\haplogrep2：生成突变位点信息的支系系统发育树.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/Haplogrep2：生成突变位点信息的支系系统发育树.md</guid><pubDate>Thu, 18 Jul 2024 14:42:45 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f601.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f601.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Haplogrep3：软件使用手册]]></title><description><![CDATA[ 
 <br>如果希望生成带有突变位点的系统发育树，可以使用第二代：<a data-href="Haplogrep2：生成突变位点信息的支系系统发育树" href="软件\其它生信软件\a-j\haplogrep2：生成突变位点信息的支系系统发育树.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="😁" aria-label="😁" data-icon="😁" aria-hidden="true" style="transform: translateY(0px);"></span>Haplogrep2：生成突变位点信息的支系系统发育树</a><img class="emoji" draggable="false" alt="😁" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f601.svg" height="18px" style="max-width: 100%;"><br>#### Haplogrep3 linux系统使用手册###
#### 软件的功能可以#################
#### 1.单倍群分型###################
#### 2.根据参考序列生成FASTA#######
#### 3.其他功能，我猜测你用不上#####
###################################  
## 先下载软件：
wget https://github.com/genepi/haplogrep3/releases/download/v3.2.1/haplogrep3-3.2.1-linux.zip
unzip haplogrep3-3.2.1-linux.zip
./haplogrep3
## 或者你可以使用最原始的办法，win访问，然后把安装包放进linux，解压
https://haplogrep.readthedocs.io/en/latest/installation/
https://github.com/genepi/haplogrep3/releases/tag/v3.2.1
# 现在开始安装参考树，请分步执行下列，我也不知道为什么，一起执行会报错
# 打开haplogrep目录
cd Haplogrep/
# 执行以下
## 安装PhyloTree (rCRS Human mtDNA)
./haplogrep3 install-tree phylotree-rcrs@17.2
./haplogrep3 install-tree phylotree-rcrs@17.1
./haplogrep3 install-tree phylotree-rcrs@17.0
./haplogrep3 install-tree phylotree-rcrs@16.0
./haplogrep3 install-tree phylotree-rcrs@15.0

## 安装PhyloTree (RSRS Human mtDNA)
./haplogrep3 install-tree phylotree-rsrs@17.1
./haplogrep3 install-tree phylotree-rsrs@17.0

## 安装phylotree-forensic-rcrs
./haplogrep3 install-tree phylotree-fu-rcrs@1.2
./haplogrep3 install-tree phylotree-fu-rcrs@1.1
./haplogrep3 install-tree phylotree-fu-rcrs@1.0

## 现在就可以运行了 

./haplogrep3 classify \
--input 你的文件.vcf \
--tree phylotree-rcrs@17.2 \
--output Haplogrep/outcome/1.txt
# 现在可以进行分类了

## 在haplogrep目录下执行以下，例如，注意不合理的空格

./haplogrep3 classify \
--input 你的文件.fasta \
--tree phylotree-rcrs@17.0 \
--output Haplogrep/outcome/Illumina_mtDNA.txt \
--write-fasta

./haplogrep3 classify \
--input 你的文件.vcf \
--tree phylotree-rcrs@17.0 \
--output 10K_HGDP/example2/new.txt \
--write-fasta

# 把上面的Haplogrep/data/examples/example-wgs.vcf替换成输入文件# vcf文件的格式可以参考# https://github.com/genepi/haplogrep3/blob/master/data/examples/example-wgs.vcf

# 把--tree phylotree-rcrs@17.2替换为安装的树
# 备选的树有以下
#—————————— phylotree-rcrs@17.2
#—————————— phylotree-rcrs@17.1
#—————————— phylotree-rcrs@17.0
#—————————— phylotree-rcrs@16.0
#—————————— phylotree-rcrs@15.0
#—————————— phylotree-rsrs@17.1
#—————————— phylotree-fu-rcrs@1.2
#—————————— phylotree-fu-rcrs@1.1
#—————————— phylotree-fu-rcrs@1.0
#把--out Haplogrep/outcome/XXX.txt替换为输出文件
# 非必须参数说明
--metric, distance &amp;nbsp;To change the classification metric to Hamming Distance (hamming) or Jaccard (jaccard) add this parameter (Default: Kulczynski Measure).
--extend-report For additional information on SNPs (e.g. found or remaining polymorphisms) please add the --extend-report flag (Default: off).
--tree &amp;nbsp;Specify one of the installed trees.
--chip &amp;nbsp;If you are using genotyping arrays, please add the --chip parameter to limit the range to array SNPs only (Default: off, VCF only). To get the same behaviour for hsd files, please add only the variants to the range, which are included on the array or in the range you have sequenced (e.g. control region). Range can be sepearted by a semicolon ;, both ranges and single positions are allowed (e.g. 16024-16569;1-576;8860).
--skip-alignment-rules &amp;nbsp;Add this option to skip our rules that fixes the mtDNA nomenclature for fasta import. Click here for further information. Applying the rules is the default option since v2.4.0
--hits &amp;nbsp;To export the best n hits for each sample add the --hits parameter. By default only the tophit is exported.
--write-fasta &amp;nbsp; Write results in fasta format.
--write-fasta-msa &amp;nbsp; Write multiple sequence alignment.
--hetLevel=&lt;value&gt; &amp;nbsp;Add heteroplasmies with a level &gt; from the VCF file to the profile (default: 0.9).
###
#完成！
复制]]></description><link>软件\其它生信软件\a-j\haplogrep3：软件使用手册.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/Haplogrep3：软件使用手册.md</guid><pubDate>Thu, 18 Jul 2024 14:46:41 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f642.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f642.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[一、iTol]]></title><description><![CDATA[ 
 <br><br>访问地址： <a rel="noopener nofollow" class="external-link" href="https://itol.embl.de" target="_blank">https://itol.embl.de</a><br>老牌的进化树美化网站，功能很多。但是网络速度较慢，偶尔需要魔法。<br><br>访问地址： <a rel="noopener nofollow" class="external-link" href="http://www.evolgenius.info/evolview/" target="_blank">http://www.evolgenius.info/evolview/</a><br>优点在于：每种画图方式都会给出示例文件，方便修改。给出的美化方式也非常多，选择性非常大~ 因此作为itol不能用的时候首推备选~  <br><br>访问地址： <a rel="noopener nofollow" class="external-link" href="https://www.chiplot.online/tvbot.html" target="_blank">https://www.chiplot.online/tvbot.html</a><br>优点：开发者制作了非常清楚的操作视频~中文的。<br>哔哩哔哩教程： <a data-tooltip-position="top" aria-label="https://space.bilibili.com/30493771/channel/collectiondetail?sid=192106" rel="noopener nofollow" class="external-link" href="https://space.bilibili.com/30493771/channel/collectiondetail?sid=192106" target="_blank">小驰Coding的个人空间-小驰Coding个人主页-哔哩哔哩视频 (bilibili.com)</a>]]></description><link>软件\其它生信软件\a-j\itol：进化树美化网站.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/iTol：进化树美化网站.md</guid><pubDate>Fri, 23 Aug 2024 08:30:18 GMT</pubDate></item><item><title><![CDATA[iTol：完全美化]]></title><description><![CDATA[ 
 <br>如果得到了 meg 文件，那么就可以构建进化树了。meg 文件的格式大致如下所示，可以使用 MEGA 软件打开。<br>#mega
!TITLE  Genetic distance data from 28 human populations;
!Format DataType=distance;
!Description
     Nei, M. and A. K. Roychoudhury. 1993. Mol. Biol. Evol. 10(5).
     Number of polymoprhic loci used = 18;

#001Han_Anhui
#002Han_Beijing
#003Han_Chongqing
#004Han_Fujian
#005Han_Gansu
#006Han_Guangdong
#007Han_Guangxi
#008Han_Guizhou
#009Han_Hebei
#010Han_Heilongjiang
#011Han_Henan
#012Han_Hubei
#013Han_Hunan
#014Han_InnerMongolia
#015Han_Jiangsu
#016Han_Jiangxi
#017Han_Jilin
#018Han_Liaoning
#019Han_Shaanxi
#020Han_Shandong
#021Han_Shanghai
#022Han_Shanxi
#023Han_Sichuan
#024Han_Tianjin
#025Han_Yunnan
#026Han_Zhejiang


                                                                                                                                                                                         
                                                                                                                        
0.00659                                                                                                                      
0.00006   0.00936                                                                                                                 
0.01018   0.02659   0.00771                                                                                                            
0.0137    0.00177   0.01292   0.02682                                                                                                       
0.0139    0.02777   0.00859   0.00468   0.03214                                                                                                  
0.01807   0.02553   0.01031   0.01301   0.03243   0.00167                                                                                             
0    0.0076    0    0.00334   0.01471   0.00298   0.00349                                                                                        
0.00833   0    0.00988   0.02116   0.00268   0.02359   0.0229    0.00761                                                                                   
0.00904   0.00625   0.01523   0.01808   0.01165   0.02036   0.02388   0.00803   0.00554                                                                              
0.00462   0    0.00647   0.01653   0.00158   0.02029   0.02157   0.00411   0    0.00451                                                                         
0.00186   0.00354   0.00264   0.00884   0.00863   0.01291   0.01533   0    0.00263   0.00387   0                                                                     
0.00635   0.0176    0    0.00874   0.02211   0.00786   0.00816   0    0.01625   0.02125   0.01343   0.00857                                                               
0.02384   0.00124   0.02137   0.04348   0    0.04671   0.03952   0.02248   0.00471   0.02058   0.00588   0.01349   0.03155                                                          
0    0.00795   0.00025   0.00991   0.01347   0.01512   0.01929   0.00016   0.0091    0.01223   0.0051    0.00231   0.00717   0.02379                                                     
0.00379   0.01898   0.00153   0.00771   0.02888   0.01031   0.0142    0    0.01857   0.0198    0.01532   0.00849   0.00307   0.03781   0.00588                                                
0.00569   0.00006   0.009     0.01722   0.00587   0.01996   0.01809   0.00496   0    0.00061   0    0    0.01461   0.0084    0.00569   0.01741                                           
0.00782   0    0.00928   0.0216    0.00215   0.02432   0.02286   0.00764   0    0.00406   0    0.00192   0.01582   0.00524   0.0075    0.01908   0                                       
0.0098    0.00181   0.01028   0.02722   0    0.03313   0.03135   0.01195   0.00326   0.0142    0.00215   0.00811   0.01764   0.00219   0.01062   0.02292   0.00526   0.00402                                 
0.00959   0.00134   0.0116    0.01979   0.00369   0.02397   0.02474   0.0096    0    0.00362   0.00036   0.0025    0.01886   0.00739   0.0094    0.02134   0    0    0.00663                            
0    0.00897   0    0.009     0.01691   0.01298   0.01734   0    0.01017   0.01473   0.0063    0.00319   0.00579   0.02828   0    0.00519   0.00738   0.0087    0.01285   0.01001                       
0.01337   0.00074   0.0144    0.0296    0.00015   0.0351    0.03368   0.01663   0.00178   0.01088   0.00092   0.00586   0.0257    0    0.01229   0.02949   0.00168   0.00153   0.00161   0.00185   0.01459                  
0.00308   0.00543   0    0.01062   0.00878   0.0102    0.00988   0    0.00521   0.01318   0.00364   0.00205   0.00252   0.01399   0.00345   0.00649   0.00464   0.00543   0.00767   0.00759   0.00294   0.0107              
0.01149   0    0.01084   0.02659   0.00201   0.03207   0.0312    0.01168   0.00134   0.01573   0.00249   0.00764   0.01939   0    0.01097   0.02015   0.00786   0.00247   0.00307   0.00342   0.01175   0.0023    0.00776        
0.00555   0.00875   0.00019   0.00348   0.00981   0.00685   0.00819   0    0.00399   0.00899   0.00367   0.00194   0.00259   0.0176    0.00577   0.00691   0.0043    0.00665   0.00892   0.00516   0.00489   0.01205   0.00108   0.00701   
0.00514   0.02349   0.00459   0.00656   0.03086   0.01392   0.02054   0.00309   0.0223    0.02534   0.01773   0.0108    0.00975   0.04352   0.00421   0.00435   0.01751   0.0206    0.02621   0.02228   0.00224   0.03013   0.01012   0.02225   0.00972

复制<br>使用 MEGA 打开之后，再选择导出为 new 或者 newick 文件。<br><br><br>这种风格可以把 ID 归类为不同的组别，如下所示。但是缺点是 不能生成任何颜色。<br>LABELS
#use this template to change the leaf labels, or define/change the internal node names (displayed in mouseover popups)

#lines starting with a hash are comments and ignored during parsing

#=================================================================#
#                    MANDATORY SETTINGS                           #
#=================================================================#
#select the separator which is used to delimit the data below (TAB,SPACE or COMMA).This separator must be used throughout this file (except in the SEPARATOR line, which uses space).

SEPARATOR TAB
#SEPARATOR SPACE
#SEPARATOR COMMA

#Internal tree nodes can be specified using IDs directly, or using the 'last common ancestor' method described in iTOL help pages
#=================================================================#
#       Actual data follows after the "DATA" keyword              #
#=================================================================#
DATA
#NODE_ID,LABEL

#Examples
#defined a name for an internal node


001Han_Anhui	Han_Anhui
002Han_Beijing	Han_Beijing
003Han_Chongqing	Han_Chongqing
004Han_Fujian	Han_Fujian
005Han_Gansu	Han_Gansu
006Han_Guangdong	Han_Guangdong
007Han_Guangxi	Han_Guangxi
008Han_Guizhou	Han_Guizhou
009Han_Hebei	Han_Hebei
010Han_Heilongjiang	Han_Heilongjiang
011Han_Henan	Han_Henan
012Han_Hubei	Han_Hubei
013Han_Hunan	Han_Hunan
014Han_InnerMongolia	Han_InnerMongolia
015Han_Jiangsu	Han_Jiangsu
016Han_Jiangxi	Han_Jiangxi
017Han_Jilin	Han_Jilin
018Han_Liaoning	Han_Liaoning
019Han_Shaanxi	Han_Shaanxi
020Han_Shandong	Han_Shandong
021Han_Shanghai	Han_Shanghai
022Han_Shanxi	Han_Shanxi
023Han_Sichuan	Han_Sichuan
024Han_Tianjin	Han_Tianjin
025Han_Yunnan	Han_Yunnan
026Han_Zhejiang	Han_Zhejiang

复制<br>修改前：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081445061.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
将上述文件保存为 txt，之后直接拖进已经制作好了的进化树。<br>
修改后：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081446213.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>这种风格可以添加颜色，并且指定组别。但是我不知道为什么，组别没有显示出来。<br>注意这里有一个雷区，第一列的 ID 不能是群组的名称，必须是你放进进化树的原始 ID 名称，不然会无法识别。<br>TREE_COLORS
SEPARATOR TAB
DATA
Han_Anhui	range	#1b9e77	Southern China
Han_Beijing	range	#d95f02	Northern China
Han_Chongqing	range	#1b9e77	Southern China
Han_Fujian	range	#1b9e77	Southern China
Han_Gansu	range	#d95f02	Northern China
Han_Guangdong	range	#1b9e77	Southern China
Han_Guangxi	range	#1b9e77	Southern China
Han_Guizhou	range	#1b9e77	Southern China
Han_Hebei	range	#d95f02	Northern China
Han_Heilongjiang	range	#d95f02	Northern China
Han_Henan	range	#d95f02	Northern China
Han_Hubei	range	#1b9e77	Southern China
Han_Hunan	range	#1b9e77	Southern China
Han_InnerMongolia	range	#d95f02	Northern China
Han_Jiangsu	range	#1b9e77	Southern China
Han_Jiangxi	range	#1b9e77	Southern China
Han_Jilin	range	#d95f02	Northern China
Han_Liaoning	range	#d95f02	Northern China
Han_Shaanxi	range	#d95f02	Northern China
Han_Shandong	range	#d95f02	Northern China
Han_Shanghai	range	#1b9e77	Southern China
Han_Shanxi	range	#d95f02	Northern China
Han_Sichuan	range	#1b9e77	Southern China
Han_Tianjin	range	#d95f02	Northern China
Han_Yunnan	range	#1b9e77	Southern China
Han_Zhejiang	range	#1b9e77	Southern China
复制<br>修改后：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081449673.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>我没试过。<br>TREE_COLORS				
SEPARATOR TAB				
DATA				
Biaka_Africa017_B2a1a1a1a2	clade	#1b9e77	normal	1
Biaka_Africa018_B2b1a1b	clade	#1b9e77	normal	1
Mbuti_Africa084_B2b1b1b	clade	#1b9e77	normal	1
Ju_hoan_North_Africa059_B2b1b1a	clade	#1b9e77	normal	1
Ju_hoan_North_Africa061_B2b1b1a	clade	#1b9e77	normal	1
I3261_Y.bam__0-0-1-0	clade	#d95f02	dashed	2
I2085_Y.bam__1-0-9-0	clade	#d95f02	dashed	2
I10551_Y.bam__0-0-2-0	clade	#d95f02	dashed	2
I1055_Y.bam__0-0-2-0	clade	#d95f02	dashed	2
I12472_Y.bam__6-0-1-0	clade	#d95f02	dashed	2
X111.1761.9122_E1b1b1b2b2a1a1b	clade	#1b9e77	normal	1
X990.0002.0699_E1b1b1b2a1a1a1a1f1	clade	#1b9e77	normal	1
I3262_Y.bam__102-0-3-9	clade	#d95f02	dashed	2
I1985_Y.bam__121-0-2-8	clade	#d95f02	dashed	2
I6194_Y.bam__105-1-3-14	clade	#d95f02	dashed	2
I1799_Y.bam__104-0-2-12	clade	#d95f02	dashed	2
I6197_Y.bam__115-1-2-13	clade	#d95f02	dashed	2
I6899_Y.bam__119-0-1-8	clade	#d95f02	dashed	2
I6900_Y.bam__84-0-1-9	clade	#d95f02	dashed	2
X111.1731.1637_E1b1b1a1b2a4b1	clade	#1b9e77	normal	1
X111.1782.8401_E1b1b1a1b2a3	clade	#1b9e77	normal	1
X111.1738.4990_E1b1b1a1b2a3	clade	#1b9e77	normal	1
X111.1751.1785_E1b1b1a1b2a3	clade	#1b9e77	normal	1
X111.1825.2625_E1b1b1a1b2a3	clade	#1b9e77	normal	1
X111.1733.4278_E1b1b1a1b2a3	clade	#1b9e77	normal	1
BUR002.B0101_Y.bam__85-0-22-3	clade	#d95f02	dashed	2
HRR579055_Y.bam__7-0-2-2	clade	#d95f02	dashed	2
S13887_Y.bam__3-0-23-0	clade	#d95f02	dashed	2
S13886_Y.bam__5-0-32-0	clade	#d95f02	dashed	2
S13883_Y.bam__4-0-10-0	clade	#d95f02	dashed	2
HRR660200_Y.bam__2-0-5-0	clade	#d95f02	dashed	2
HRR660153_Y.bam__0-0-1-0	clade	#d95f02	dashed	2
HRR660135_Y.bam__1-0-1-0	clade	#d95f02	dashed	2
X111.1707.8820_D1a1b1a	clade	#1b9e77	normal	1
HRR660160_Y.bam__54-0-1-4	clade	#d95f02	dashed	2
X111.1809.7448_D1a1b1a2	clade	#1b9e77	normal	1
X990.0001.1246_D1a1b1a2	clade	#1b9e77	normal	1
HRR660189_Y.bam__92-0-2-0	clade	#d95f02	dashed	2
X111.1287.2485_D1a1b1a1a	clade	#1b9e77	normal	1
X111.1782.5226_D1a1b1a1	clade	#1b9e77	normal	1
X111.1832.1970_D1a1b1a1	clade	#1b9e77	normal	1
TAH002.A0101_Y.bam__81-0-1-0	clade	#d95f02	dashed	2
X111.1790.4105_D1a1b1a1	clade	#1b9e77	normal	1
X111.1783.3276_D1a1b1a1	clade	#1b9e77	normal	1
HRR660134_Y.bam__15-0-19-5	clade	#d95f02	dashed	2
HRR660121_Y.bam__32-0-14-12	clade	#d95f02	dashed	2
HRR660171_Y.bam__0-0-1-1	clade	#d95f02	dashed	2
HRR660138_Y.bam__48-0-18-20	clade	#d95f02	dashed	2
X111.1751.2850_D1a1a1b1a	clade	#1b9e77	normal	1
X111.1734.5045_D1a1a1b2	clade	#1b9e77	normal	1
Y5979_D1a1a1b2	clade	#1b9e77	normal	1
LJM25_Y.bam__2-0-1-0	clade	#d95f02	dashed	2
HRR660152_Y.bam__4-0-2-0	clade	#d95f02	dashed	2
X111.1795.3455_D1a1a1a1b2	clade	#1b9e77	normal	1
TSA004.B0101_Y.bam__79-0-9-6	clade	#d95f02	dashed	2
HRR660149_Y.bam__78-0-11-10	clade	#d95f02	dashed	2
HRR660183_Y.bam__77-0-7-9	clade	#d95f02	dashed	2
ZAM002.A0101_Y.bam__63-1-1-0	clade	#d95f02	dashed	2
X111.1837.3009_D1a1a1a1a1a	clade	#1b9e77	normal	1
X111.1713.9330_D1a1a1a1a1a	clade	#1b9e77	normal	1
X111.1770.0028_D1a1a1a1a1b	clade	#1b9e77	normal	1
X111.1726.8788_D1a1a1a1a1b1	clade	#1b9e77	normal	1
X111.1849.6197_D1a1a1a1a1b2b	clade	#1b9e77	normal	1
X111.1795.8535_D1a1a1a1a1b2a	clade	#1b9e77	normal	1
复制<br><br>全家桶风格，可以添加颜色、组别和标签。<br>
雷区同上。<br>
注意，<br>
<br>下列的 LEGEND_LABELS	Yangtze	Yellow River	Zhujiang请改成自己的标签。
<br>LEGEND_TITLE &nbsp; &nbsp;Classification 3请改成自己的标签。
<br>DATASET_COLORSTRIP
SEPARATOR TAB
BORDER_WIDTH	0.5
COLOR	#bebada
DATASET_LABEL	Classification 7
LEGEND_COLORS	#1b9e77	#d95f02	#7570b3
LEGEND_LABELS	Yangtze	Yellow River	Zhujiang
LEGEND_SHAPES	1	1	1 
LEGEND_TITLE	Classification 7 #什么屌用没有
MARGIN	5
STRIP_WIDTH	25
DATA
Han_Shandong	#d95f02	Yellow River
Han_Henan	#d95f02	Yellow River
Han_Shanxi	#d95f02	Yellow River
Han_Shaanxi	#d95f02	Yellow River
Han_Hebei	#d95f02	Yellow River
Han_Tianjin	#d95f02	Yellow River
Han_Beijing	#d95f02	Yellow River
Han_InnerMongolia	#d95f02	Yellow River
Han_Liaoning	#d95f02	Yellow River
Han_Jilin	#d95f02	Yellow River
Han_Heilongjiang	#d95f02	Yellow River
Han_Jiangsu	#1b9e77	Yangtze
Han_Anhui	#1b9e77	Yangtze
Han_Hubei	#1b9e77	Yangtze
Han_Chongqing	#1b9e77	Yangtze
Han_Sichuan	#1b9e77	Yangtze
Han_Yunnan	#1b9e77	Yangtze
Han_Guizhou	#7570b3	Zhujiang
Han_Hunan	#1b9e77	Yangtze
Han_Jiangxi	#1b9e77	Yangtze
Han_Guangxi	#7570b3	Zhujiang
Han_Guangdong	#7570b3	Zhujiang
Han_Fujian	#7570b3	Zhujiang
Han_Zhejiang	#1b9e77	Yangtze
Han_Shanghai	#1b9e77	Yangtze
Han_Gansu	#d95f02	Yellow River

复制<br>实例效果：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081456091.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>TREE_COLORS
SEPARATOR COMMA
DATA
9031|9606,clade,#0000ff,normal,2
601|340,clade,#ff0000,dashed,2
915|777,branch,#00ff00,dashed,10
9606|5664,branch,#00ff00,dashed,5
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403261339992.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>TREE_COLORS
SEPARATOR TAB
DATA
155892	clade	#d59c9d
I54	clade	#399ca8
214688	clade	#d823bc
83331	clade	#11247c
I112	clade	#aa6e31
1488	clade	#ac96a5
I140	clade	#41c639
193567	clade	#d5588b
44689	clade	#80edad
562	clade	#18a9e1
86665	clade	#2de38e
I182	clade	#6e369d
I172	clade	#a1f50a
I123	clade	#f8f38e
197	clade	#886cb9
I148	clade	#7d6137
I156	clade	#d58066
I7	clade	#60e000
2371	clade	#c19ab1
33903	clade	#6b9e02
I139	clade	#b9a845
I79	clade	#b5cb36
I92	clade	#fc39d2
730	clade	#68ec9c
666	clade	#05ad5f
I88	clade	#9546f6
217992	clade	#bf7ff9
I162	clade	#e25406
I25	clade	#2f1934
I163	clade	#8e7310
I75	clade	#2d5ba5
28227	clade	#4f662a
193567	clade	#763aa2
519	clade	#e3cba9
I128	clade	#59a4a4
35554	clade	#28a7db
83560	clade	#6da85a
I67	clade	#90cd4c
100379	clade	#2d356c
2107	clade	#a07574
5664	clade	#7a1980
I65	clade	#785f89
I103	clade	#d1485e
59374	clade	#7701c3
I77	clade	#09b583
I171	clade	#056379
I11	clade	#cdb3d3
2234	clade	#562f61
I33	clade	#6b2785
217992	clade	#c6d3ec
I185	clade	#dcede9
28227	clade	#ddaaeb
I40	clade	#725a76
I178	clade	#af52de
I161	clade	#23dba3
1309	clade	#913402
I8	clade	#557f42
I20	clade	#e7152c
I184	clade	#9bdb3f
I13	clade	#85601c
I137	clade	#22a736
182710	clade	#3d0602
I8	clade	#567e78
I35	clade	#1b6aa6
I57	clade	#291e86
I52	clade	#5908ca
323	clade	#90daee
I185	clade	#3c815f
I16	clade	#5bd784
I43	clade	#1aa6ab
I21	clade	#0ca5aa
I149	clade	#34c9ad
I165	clade	#c6a67b
267748	clade	#c2070a
83557	clade	#27a72f
134821	clade	#c9c229
9598	clade	#e258ad
I46	clade	#0f1c25
I114	clade	#320254
9031	clade	#2a3942
I84	clade	#244220
I12	clade	#bd4b51
I167	clade	#0b7619
53953	clade	#fe7548
118099	clade	#a314b5
I78	clade	#ef720b
I76	clade	#ca2cc4
I15	clade	#efbf46
4896	clade	#2b9cd8
1309	clade	#ce90cc
I138	clade	#68f531
13773	clade	#02790b
I97	clade	#c0d60b
1148	clade	#2e7ec5
1423	clade	#963d0d
I118	clade	#7fe1c6
I100	clade	#7128e2
I76	clade	#add262
I118	clade	#cbc83f
243164	clade	#78e8f6
155864	label	#4ec8d8		1
83334	label	#1e7756		2
217992	label	#1b0a3d	bold-italic	3
562	label	#894b2e	italic	1.6
198215	label	#155549		2.9
623	label	#139183	italic	0.6
209261	label	#9b5939	italic	2.2
601	label	#142ad6		0.3
602	label	#002e63	italic	0.3
229193	label	#a2f54f		0.3
187410	label	#3c902e	bold	0.7
632	label	#ca5280	italic	1.4
141679	label	#12ce81		1.6
203907	label	#e3be5e	bold-italic	2.5
36870	label	#44d02c	italic	1.8
135842	label	#61a868	italic	0.6
118099	label	#610095	bold	1.6
98794	label	#a79539	italic	0.1
747	label	#548c6d	italic	2.6
727	label	#197192		2.8
730	label	#d5f00f	italic	1
196600	label	#f99ad1		3
672	label	#c83f8a	bold	2.1
670	label	#191eef	bold	2.2
666	label	#96542a		2.2
74109	label	#318d17		2.6
70863	label	#b04dd4		1.6
160488	label	#ffa1fd		2.5
323	label	#19ac81	bold-italic	1.1
287	label	#55d392		0.2
183190	label	#6e001d		0.3
2371	label	#1a1967	italic	1.1
92829	label	#579f7f	bold-italic	2
340	label	#e58d2c		2.1
777	label	#73571d		0.5
65699	label	#f99021	bold-italic	1.8
491	label	#3bfef1		2.8
536	label	#a41642	bold-italic	1.9
520	label	#55fd91		1.9
519	label	#05f1cd		2.7
518	label	#55bfe8		3
305	label	#63c414	bold-italic	0.5
915	label	#9c4626		2.9
181661	label	#8b6ab3	bold	0.5
180835	label	#2b25a6	bold	1.9
382	label	#41550e	bold-italic	1.1
29461	label	#33249f	bold	0.1
29459	label	#4c152b	bold-italic	1.5
381	label	#fa8e16	bold	1.1
1076	label	#2e66d2	bold	1.2
375	label	#86404a	bold-italic	2.8
155892	label	#5894a8	italic	2.2
66077	label	#cb25cd	italic	0.3
782	label	#3c5086	italic	2.7
781	label	#6e8296	bold-italic	1.1
85963	label	#a233d9	italic	0.1
210	label	#ff7900	bold-italic	2.2
32025	label	#f817fe	bold-italic	2.5
844	label	#6f58f4	bold-italic	0.4
197	label	#5c2323		1
882	label	#fcc564		1.6
35554	label	#0f9c26		0.1
959	label	#79b55b	bold	1.6
240015	label	#f7b168	bold	1.7
234267	label	#127b3f	bold	1.5
76856	label	#f17a58	italic	0.3
63363	label	#90a355	bold	0.9
2336	label	#4e8b57	italic	1.6
262724	label	#3bfcd1	bold-italic	2.3
1299	label	#054bc2		0.8
243164	label	#66e411		2.7
103690	label	#265049	bold	1.5
1148	label	#89a4c7	bold-italic	1.6
32046	label	#5ead9e	bold-italic	2.1
84588	label	#4f63c9	bold-italic	2.5
74547	label	#aa9864	bold-italic	1
1219	label	#c38fa3	italic	0.1
59919	label	#fa6d94	bold-italic	1.8
33072	label	#37e7a9	bold-italic	1.2
214688	label	#5b05b3	italic	2
117	label	#b81976	italic	1
44275	label	#bb6429		0.7
173	label	#83ebc0	bold-italic	2.9
160	label	#492f07	italic	2.3
158	label	#61c3b7		2
139	label	#b4c54b		2.2
218496	label	#04c94a	italic	0.2
203267	label	#2e3529	bold	1.3
216816	label	#a1e65c		3
196627	label	#61f4a6	italic	0
1718	label	#848d42		3
152794	label	#0f0160	italic	1.3
1717	label	#986b24	bold	1
1765	label	#e35c6c		1.4
83331	label	#216059	bold	2.4
83332	label	#22b0b2	italic	2.4
1769	label	#94335f	italic	1
1770	label	#2a9e2b	bold-italic	1.7
33903	label	#461ab8	italic	1
1902	label	#ac7912	bold-italic	2.4
59374	label	#903a8a	bold-italic	1.3
1097	label	#41323f	bold	1.9
837	label	#4b0e39	bold-italic	2.4
818	label	#8de36b	italic	0.4
182082	label	#dea709	bold-italic	1.4
138677	label	#2aa65a	bold-italic	1.6
115713	label	#cd94db	bold	2.9
115711	label	#aea241	bold	1.3
83557	label	#5b09cf	italic	2.7
83560	label	#93eb7f	bold-italic	1.2
813	label	#d1c9e8	italic	2.3
119072	label	#dfe385	bold	0.8
1513	label	#450786	bold-italic	1.3
1502	label	#eb36c8	italic	1.2
1488	label	#f805a0	italic	1.6
267748	label	#f49ff0		1.8
2107	label	#767abd	bold-italic	1.2
2104	label	#501b6a	bold-italic	1.8
2097	label	#736ef0		1.4
2096	label	#9a15dc		2.6
28227	label	#c35d6b	bold	1.3
134821	label	#f7774a		0
44101	label	#f30088	bold-italic	1.4
100379	label	#a8d375	bold	1.3
265669	label	#67924c		0.4
1639	label	#6d5f8f		0.6
1642	label	#f79d5f	bold	0
182710	label	#9ef4b3	bold	1.7
86665	label	#1bd38d	bold-italic	1.8
226900	label	#bc3cda	bold	0
222523	label	#b0b252		1
198094	label	#28fc0a	italic	1.2
1423	label	#dd6b41	italic	1.6
196620	label	#ec3a76		1.5
158879	label	#20f9ff		1.8
158878	label	#05a4cb		0.8
1282	label	#48bd64	italic	0.3
216495	label	#d12b6f	italic	1.9
216466	label	#44ce76	italic	0.8
1314	label	#070ed6	bold	0.9
186103	label	#05ec2c	italic	1.7
198466	label	#702bd8		2.9
193567	label	#7179ec	italic	1
1309	label	#2fc5dc		0.6
171101	label	#e2c03d	italic	3
1313	label	#10d04e	italic	0.3
1360	label	#661d87	italic	0.6
1351	label	#c6420a	italic	2.8
33959	label	#cc0f0c	bold	2.9
1590	label	#917c5e	italic	1
296543	label	#80a0e9	bold	1
237895	label	#5906ff		2.4
36329	label	#2f323f		2.2
4530	label	#1158ec	bold-italic	0.2
3702	label	#d4acb0	italic	2.1
45157	label	#924a16	italic	2.2
44689	label	#513e91	italic	0
33169	label	#064b7c	italic	2.5
4932	label	#655e0b	bold	0.4
4896	label	#535ae5	bold-italic	1.9
180454	label	#4fb8b2	bold	1.8
7227	label	#b1504c	bold	2.7
31033	label	#8e1223	bold	2.6
7955	label	#ce9aaa		1.6
10116	label	#66a8dc	bold	2
10090	label	#8a0606	italic	0.2
9606	label	#37a632		2.4
9598	label	#834ccb		2.5
9031	label	#74a0fd	bold-italic	3
6239	label	#632a27	bold	1.6
6238	label	#18f555	bold	2.4
5664	label	#e4c05b	bold-italic	0.1
184922	label	#611001	bold	0
160232	label	#3453bb	italic	2.6
111955	label	#46ba7e		1.8
2287	label	#dcdf91	italic	1.9
56636	label	#7c249a		2.6
13773	label	#1357c8	bold-italic	1.8
50339	label	#4a23a7	bold-italic	2.9
2303	label	#13fab7		0.2
187420	label	#7a6d6b	bold-italic	2.5
2320	label	#6cc975	italic	2.8
39152	label	#a65f47	bold-italic	0.5
2190	label	#222336	bold-italic	1.3
53953	label	#57bcb2	italic	0.1
29292	label	#175c27	bold-italic	1.6
2261	label	#ac0260	bold-italic	2.9
2234	label	#3e0fe8	italic	1.1
64091	label	#3a38ce		0.4
2214	label	#2ab1b0		1.4
2209	label	#7e30a1	italic	2.2

复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403261340341.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>TREE_COLORS
SEPARATOR TAB
DATA
777	clade	#c04104	normal	1
I132	clade	#0c4e99	normal	1
187410	clade	#8c6d63	normal	1
I65	clade	#e41ea4	normal	1
I141	clade	#c23551	normal	1
I12	clade	#a16088	normal	1
I57	clade	#02165d	dashed	1
I49	clade	#8a3861	dashed	1
I74	clade	#cabd33	dashed	1
I14	clade	#c4f71f	dashed	1
I142	clade	#d3ddfc	normal	1
36870	clade	#f4980b	dashed	1
85963	clade	#15daa6	normal	1
9031	clade	#d89de9	dashed	1
33072	clade	#bdb6fb	dashed	1
I82	clade	#17785a	normal	1
1717	clade	#d5b328	normal	1
I174	clade	#3ec8c8	normal	1
I65	clade	#48d4ba	dashed	1
562	clade	#661b92	normal	1
155864	clade	#7cd344	dashed	1
216495	clade	#562ca8	dashed	1
173	clade	#e4c19a	dashed	1
4932	clade	#604f50	dashed	1
I29	clade	#f11e8c	normal	1
I39	clade	#f36f0f	normal	1
632	clade	#944341	dashed	1
234267	clade	#90a533	dashed	1
I25	clade	#6fd557	normal	1
I120	clade	#d98334	dashed	1
I78	clade	#4c59d5	dashed	1
1148	clade	#9da900	dashed	1
2107	clade	#26ce7b	dashed	1
I27	clade	#0890ad	normal	1
2190	clade	#fb4f66	dashed	1
56636	clade	#7d70ac	dashed	1
I36	clade	#86dee1	dashed	1
I109	clade	#f11f36	normal	1
I149	clade	#c96de4	dashed	1
I144	clade	#6e89a7	dashed	1
I91	clade	#e84d0e	dashed	1
I159	clade	#68b17d	dashed	1
I85	clade	#89bcf9	normal	1
1513	clade	#254961	dashed	1
I140	clade	#af18a3	normal	1
83331	clade	#6dab05	normal	1
I108	clade	#1f57e7	dashed	1
36329	clade	#b0b398	normal	1
I25	clade	#c4ea85	normal	1
I182	clade	#f52ddf	dashed	1
I104	clade	#5ac3f7	normal	1
882	clade	#2c5f78	normal	1
I80	clade	#fcc1de	normal	1
I166	clade	#f44c45	dashed	1
2104	clade	#16b2ea	dashed	1
134821	clade	#b93601	dashed	1
I105	clade	#72422a	normal	1
182082	clade	#549df3	normal	1
818	clade	#e2f9be	dashed	1
226900	clade	#41db62	normal	1
1360	clade	#f20d36	dashed	1
I181	clade	#bd46f7	normal	1
44275	clade	#d88453	normal	1
I12	clade	#658a38	dashed	1
1502	clade	#852d64	normal	1
64091	clade	#9c64e8	dashed	1
I158	clade	#2f5644	normal	1
118099	clade	#bbe4d7	normal	1
I42	clade	#6279db	normal	1
I70	clade	#236f6e	dashed	1
I84	clade	#b74a7c	normal	1
74109	clade	#400af3	normal	1
I63	clade	#769611	normal	1
139	clade	#6f6544	dashed	1
85963	clade	#a1583a	dashed	1
1639	clade	#e369b2	normal	1
782	clade	#f34457	normal	1
I113	clade	#40cc1f	dashed	1
I162	clade	#a49035	dashed	1
I22	clade	#c90fb1	normal	1
53953	clade	#c53775	normal	1
36870	clade	#1a214a	normal	1
I90	clade	#ec29b0	dashed	1
193567	clade	#fdf50a	dashed	1
2214	clade	#9d9b67	dashed	1
I81	clade	#3d3057	normal	1
I158	clade	#8a265e	dashed	1
382	clade	#d9f4f6	dashed	1
1717	clade	#b86820	normal	1
I188	clade	#681e1f	dashed	1
I53	clade	#806e84	dashed	1
518	clade	#3adb91	normal	1
187420	clade	#9cfabd	normal	1
I50	clade	#21b8f4	dashed	1
1299	clade	#39d38f	normal	1
I69	clade	#9f78c2	dashed	1
31033	clade	#9d87f8	dashed	1
171101	clade	#5b6832	normal	1
I44	clade	#bd63cd	normal	1
3702	clade	#2a279a	normal	1
155864	label	#8f81c6	italic	1.8
83334	label	#07cf6b	bold-italic	1.6
217992	label	#68421f		0.7
562	label	#607f86	bold	0.4
198215	label	#7eb8a3	bold	1.2
623	label	#843dd4	bold	2.2
209261	label	#888a5c		1.2
601	label	#612a06	bold	1.1
602	label	#17b582	bold	1.2
229193	label	#f7c7d8	italic	2
187410	label	#f8973a	bold	2.4
632	label	#d2353c	bold	0.1
141679	label	#4f5962		1.2
203907	label	#1cf3e2		1.6
36870	label	#513c25	bold	0
135842	label	#269606	bold	0.1
118099	label	#b03c37	bold-italic	1.6
98794	label	#59e12c	bold	0
747	label	#5d3c4e	italic	0
727	label	#364cea	italic	1.5
730	label	#b26c8f		2.6
196600	label	#29fb9a	bold	0.4
672	label	#b76706	bold-italic	2
670	label	#a132bf	bold	1.7
666	label	#da48e1	bold	1.5
74109	label	#8d17ef	bold-italic	2.1
70863	label	#979024		0.1
160488	label	#10194e	bold-italic	2.7
323	label	#4e6020		2.4
287	label	#df7ae9	bold	2.3
183190	label	#12853b		0.6
2371	label	#8aa569	bold-italic	2.4
92829	label	#6af6a1	bold	0.9
340	label	#3d5c8d	bold	2.5
777	label	#fcea84	bold-italic	2.6
65699	label	#9c38e7		0.3
491	label	#564642	italic	1.7
536	label	#91332f		0
520	label	#ea09e4	bold	2.7
519	label	#f27403	bold	3
518	label	#2e955d		0.9
305	label	#d35bf7	bold-italic	1.2
915	label	#2b4df3	bold	2.8
181661	label	#709cb8	bold-italic	3
180835	label	#839a4d	italic	0.9
382	label	#b95702	italic	0.5
29461	label	#ce4146	italic	2.4
29459	label	#151f4e	bold	0.8
381	label	#c1e4cd		2.2
1076	label	#4da7ac	bold-italic	2.8
375	label	#8b23d4		2.3
155892	label	#436d61	bold-italic	0.1
66077	label	#e5f2a1		0.4
782	label	#2f7308	bold	0.2
781	label	#9fd164		1.4
85963	label	#0e6671	italic	2.1
210	label	#3c65f8	bold-italic	0.2
32025	label	#8e0e51		1.3
844	label	#5736d3	bold	0.3
197	label	#b73582	italic	2.1
882	label	#d0c7e3	bold	2.7
35554	label	#1c8c16		2.2
959	label	#9b5bbd	bold	1.7
240015	label	#2b7c20	italic	2.7
234267	label	#1a31fe		0
76856	label	#5f8fff	bold-italic	0.3
63363	label	#374658	bold	0.4
2336	label	#e3f2f2	bold	0.4
262724	label	#f58e6b	italic	2.2
1299	label	#ea5e0b	bold-italic	0.3
243164	label	#01f2c0	italic	2.2
103690	label	#1b8da7		1.1
1148	label	#168acd	bold	2.1
32046	label	#546fe0	italic	2.4
84588	label	#810415	bold-italic	1.8
74547	label	#30f542	bold	0.1
1219	label	#d899b8	bold	0.5
59919	label	#614c88	bold-italic	1.5
33072	label	#c314b2	bold-italic	0.2
214688	label	#5d5de9	bold	1.9
117	label	#09918c	bold-italic	1.5
44275	label	#f8ad17	bold-italic	3
173	label	#0aae2d	bold-italic	1.8
160	label	#a024e7	italic	2
158	label	#fa2f41	italic	0.6
139	label	#82dc72	bold-italic	2.2
218496	label	#37828d	bold	2.8
203267	label	#50f47f	bold-italic	0.2
216816	label	#c9a68c	bold-italic	1.6
196627	label	#9578cf	bold-italic	0.4
1718	label	#8fdfeb	bold-italic	2.7
152794	label	#50b139		2.3
1717	label	#744a3d	italic	1.4
1765	label	#c8e216	bold-italic	1.9
83331	label	#7d169b	bold-italic	1.3
83332	label	#b7c524	italic	3
1769	label	#d3c276	bold	0.4
1770	label	#e4228b	bold-italic	0.5
33903	label	#028126	italic	1
1902	label	#8c06d3	bold	2.9
59374	label	#fca05a	bold	1.6
1097	label	#992184	bold	2.9
837	label	#a1c98d	italic	1.5
818	label	#a79c0d	bold	2.8
182082	label	#a160a4	italic	2.9
138677	label	#f33263		0
115713	label	#6e3e14	bold	0.1
115711	label	#ee0c12		1
83557	label	#b43080	italic	0.4
83560	label	#d2740c		2.3
813	label	#fb5c19		0
119072	label	#8180c2	bold-italic	0.3
1513	label	#7aaa4f	italic	1.8
1502	label	#320b90	bold	0.6
1488	label	#889fc3	bold	1.8
267748	label	#7f653d	bold-italic	1.6
2107	label	#9789e6	italic	1.8
2104	label	#64981d	italic	0
2097	label	#0e1276	bold	0.5
2096	label	#bac07e	bold	0.2
28227	label	#6b2074		3
134821	label	#9fb308	bold-italic	0.4
44101	label	#697716	bold	3
100379	label	#fa086f		2.7
265669	label	#624435	italic	1.5
1639	label	#c637ce	bold	1.5
1642	label	#9ab26a	italic	1
182710	label	#d8356a		1.2
86665	label	#6ba1d4		1.8
226900	label	#01240c		1.5
222523	label	#9996b5	italic	1.8
198094	label	#ee0214	bold	2.3
1423	label	#9832e3	bold-italic	0.8
196620	label	#678306		2.5
158879	label	#f036b1	italic	1.8
158878	label	#7d5dcd	bold	2.5
1282	label	#a29120		2.7
216495	label	#2ab191	bold-italic	3
216466	label	#26b7db	bold	2.7
1314	label	#ec8d2e	bold	0.4
186103	label	#2b3cf1		0.3
198466	label	#faf78f		0.2
193567	label	#7e2a36	bold-italic	3
1309	label	#e20760	bold-italic	0.1
171101	label	#fb6250	italic	2.6
1313	label	#b4512e	bold-italic	2.8
1360	label	#656200	bold	0.8
1351	label	#644725		0.4
33959	label	#128244	italic	1.7
1590	label	#fcd761	bold-italic	0.7
296543	label	#4d8f95	bold-italic	0.2
237895	label	#3c0ce4		2.4
36329	label	#ba55bd	italic	1.1
4530	label	#089732	bold	0.6
3702	label	#8ac523		0.9
45157	label	#470ef0		2.5
44689	label	#ae5dad	italic	0.3
33169	label	#f7ba2a	italic	0.4
4932	label	#1a8274	italic	1.4
4896	label	#466a4d		2.5
180454	label	#f56a88	bold-italic	2.9
7227	label	#3e2741	bold-italic	0.2
31033	label	#734322	italic	0.5
7955	label	#1878f9	bold	1.2
10116	label	#5cc50a	bold	3
10090	label	#8ba555	bold	1.8
9606	label	#8ea041		2.1
9598	label	#d36d34	italic	2.5
9031	label	#3a5345	italic	1.7
6239	label	#47bc34	bold-italic	0.6
6238	label	#87eb38		0.1
5664	label	#5139ad	italic	2.2
184922	label	#22ed35	bold	1.3
160232	label	#347f0e	bold-italic	2
111955	label	#85c03a		1.3
2287	label	#39f7a2	italic	1.6
56636	label	#803b64	bold-italic	0.9
13773	label	#bb8827	bold	0.5
50339	label	#cdc425	bold	0.9
2303	label	#3e42b6	bold	2.1
187420	label	#f7f2ca	bold-italic	0.4
2320	label	#ee405f	italic	1.7
39152	label	#e37e20		1.1
2190	label	#0f5f17		0.9
53953	label	#b1ac8a	italic	0.9
29292	label	#982409	bold	1.5
2261	label	#50da3d	bold	0.5
2234	label	#4f8b30	bold-italic	1.6
64091	label	#7b7e99	italic	2.6
2214	label	#c5796e	bold	0.3
2209	label	#2d0252	bold-italic	2.1

复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403261341895.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>TREE_COLORS
SEPARATOR TAB
DATA
I148	range	#eeffee	test1
I110	range	#ddddff	test2

复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403261344429.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\其它生信软件\a-j\itol：完全美化.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/iTol：完全美化.md</guid><pubDate>Fri, 21 Jun 2024 07:31:06 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081445061.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403081445061.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[iTol：注释编辑表格]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://itoleditor.letunic.com/help.html#strip" rel="noopener nofollow" class="external-link" href="https://itoleditor.letunic.com/help.html#strip" target="_blank">原文链接</a><br>After selecting a tree from your account, click the&nbsp;'Create or edit annotation'&nbsp;button to display the dialog shown on the right. It consists of 5 tabs:<br>
从您的帐户中选择一棵树后，单击“创建或编辑注释”按钮以显示右侧所示的对话框。它由 5 个选项卡组成：<br>
<br>
New dataset: create a new dataset on the selected tree<br>
新数据集：在选定的树上创建新数据集

<br>
Existing datasets: if the selected tree has some existing datasets, you can load and edit them through this tab<br>
现有数据集：如果所选树有一些现有数据集，您可以通过此选项卡加载和编辑它们

<br>
Colored ranges: edit or create new&nbsp;<a data-tooltip-position="top" aria-label="https://itol.embl.de/help.cgi#ranges" rel="noopener nofollow" class="external-link" href="https://itol.embl.de/help.cgi#ranges" target="_blank">tree colored ranges</a><br>
颜色范围：编辑或创建新的树颜色范围

<br>
Labels: load and edit the labels for tree leaves and internal nodes<br>
标签：加载和编辑树叶和内部节点的标签

<br>
Metadata: load and edit the tree node metadata, including bootstrap values (if present)<br>
元数据：加载和编辑树节点元数据，包括引导值（如果存在）<br>
有两个可用的复选框：

<br>
Include all tree leaves:&nbsp;If checked, tree leaves will be pre-loaded into the sheet editing area, so you don't have to type them manually<br>
包括所有树叶：如果选中，树叶将被预先加载到工作表编辑区域中，因此您不必手动输入它们

<br>
Sort nodes:&nbsp;When nodes are pre-loaded into the sheet (for example, when editing an existing dataset or tree labels), these will appear in the same order as they are shown in iTOL when the default sorting is applied<br>
对节点进行排序：当节点预先加载到工作表中时（例如，编辑现有数据集或树标签时），这些节点将按照应用默认排序时在 iTOL 中显示的顺序显示。

<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051618169.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
有时候我们生成的树的标签是数字，我们希望将其改变为其他文字，就会使用到该功能。<br><br>请注意，这些旧的颜色范围已被弃用。<a data-tooltip-position="top" aria-label="https://itoleditor.letunic.com/help.html#dsrange" rel="noopener nofollow" class="external-link" href="https://itoleditor.letunic.com/help.html#dsrange" target="_blank">新的彩色/标记范围</a>数据集提供相同的功能，并具有许多附加功能。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051639963.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>使用此数据集类型通过使用彩色框或括号突出显示各种进化枝或叶范围。 范围通过开始和结束 ID（E 列和 G 列）以及 H 列及以后的相应样式来定义。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051622754.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
Fill color: 填充颜​​色：这是唯一必填字段。它将用作范围的主要填充颜色或括号的颜色。<br>
Gradient color: 渐变颜色：如果提供，范围填充（或括号颜色）将是从填充颜色到渐变颜色的渐变。<br>
Line style: 线条样式：可以是“实线”、“虚线”或“点线”。<br>
Line width: 线宽：边框或括号线宽，以像素为单位。<br>
Line color: 线条颜色：范围边框的颜色。如果指定，它也将用作括号颜色。<br>
Label text: 标签文本：显示在范围框中或括号旁边的可选文本。<br>注意，这里的线条指的是上图下方大框的描边。<br>Label color: 标签颜色：文本标签的颜色。<br>
Label size factor: 标签大小系数：计算出的标签字体大小将乘以该数字。<br>
Label style: 标签样式：标签字体样式：'正常'、'粗体'、'斜体' 或 '粗斜体'。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051626569.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
此数据集类型允许自定义树枝和叶子标签的颜色和显示样式。必须将树 ID 输入到 E 列，并将其相应的数据输入到 G 列及以后的列中。要将样式分配给整个分支，如果您的树没有内部节点 ID，请使用 iTOL 的最后一个<a data-tooltip-position="top" aria-label="https://itol.embl.de/help.cgi#ids" rel="noopener nofollow" class="external-link" href="https://itol.embl.de/help.cgi#ids" target="_blank">公共祖先方法</a>。或者，您可以单击 iTOL Web 树显示中的任何节点，然后单击弹出窗口底部的节点 ID 将其复制到剪贴板。将其粘贴到树节点 ID 列中，并根据需要指定样式。<br>
Type: 类型：可以是“分支”或“标签”。 'branch' 会将自定义应用于树枝，而 'label' 应用于叶子文本标签。<br>
What: 可以是“节点”或“分支”，并且仅与内部树节点相关。 “Node”将仅将自定义应用于单个节点，而“clade”也将应用于所有子节点。<br>
Color: 颜色：分支或标签的颜色。<br>
Factor: 对于“分支”类型，指定与全局分支宽度设置相比的相对分支宽度。对于“标签”类型，指定与全局字体大小相比的相对字体大小。<br>
Style: 样式：对于“分支”类型，可以是“正常”或“虚线” 。对于“标签”类型，可以是“正常”、“粗体”、“斜体”或“粗斜体”之一。<br>
Background color: 背景颜色：可选，仅与“标签”类型相关。指定标签背景的颜色。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051631864.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
1:filled shape&nbsp;填充形状<br>
0:empty shape&nbsp;空的形状<br>
-1:shape completely omitted&nbsp;形状完全省略<br><br>在简单的条形图中，每个节点都与一个数值相关联，该数值在树外部显示为条形。 条形将使用与数据集图例相同的颜色（在单元格 B16 中设置）。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051632876.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>在多值条形图中，每个节点都与多个数值相关联，这些数值在树外部显示为堆叠或对齐的条形图。首先，您必须在标题中定义从 G 列开始的字段。对于每个字段，在第 1 行中提供标签，在第 2 行中提供其颜色。定义字段后，开始在第 4 行及以下行中填充数据。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051632946.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>在饼图数据集中，每个节点都与多个数值相关联，这些数值直接在节点分支上或树外部显示为饼图。首先，您必须在标题中从 I 列开始定义饼图字段。对于每个字段，在第 1 行中提供标签并在第 2 行中提供其颜色。定义字段后，开始填充第 4 行及以下行中的字段数据。除了饼图值之外，您还必须为每个节点填充两列：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051633681.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
Position: 7. 位置：如果该值为-1，饼图将是外部的（即显示在树的外部）。否则，它应该是 0 到 1 之间的数字，饼图将沿着节点分支定位在指定值处（位置 0 正好在节点分支的开始处，位置 0.5 位于中间，位置 1 位于节点分支的中间）。在最后）。<br>
Radius: 半径：与所有其他饼图相比，饼图的相对半径。实际大小将取决于显示数据集时 iTOL 控件中的最大半径设置。对于外部饼图，半径将取决于叶之间的可用空间，并且可以通过在 iTOL 中的“高级”控制选项卡上设置垂直缩放系数来更改。<br><br>在热图中，每个节点都与多个数值相关联，这些数值显示为一组彩色框。当数据集在 iTOL 中可见时，值将映射到数据集选项中定义的颜色渐变。使用字母“X”指定缺失值或空值。首先，您必须在标题中定义从 G 列开始的字段。对于每个字段，在第 1 行中提供标签。定义字段后，开始填写第 3 行及以下行中的数据。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051634806.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>在文本标签数据集中，每个节点都与单个文本标签相关联，该文本标签可以直接显示在节点分支上或树外部。 对于每个标签，可以指定确切位置、颜色、字体样式、大小系数和旋转程度。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051635179.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
Position: 位置：如果该值为-1，标签将是外部的（即显示在树的外部）。否则，它应该是0到1之间的数字，并且标签将沿着节点分支定位在指定值处（位置0正好在节点分支的开始处，位置0.5在中间，位置1在结束）<br>
Color: 颜色：标签的颜色<br>
Style: 样式：标签的字体样式，可以是“正常”、“粗体”、“斜体”或“粗斜体”之一<br>
Factor: 指定与全局字体大小相比的相对字体大小。<br>
Text label: 文本标签：标签的实际文本。<br><br>在颜色渐变数据集中，每个节点都与一个数值相关联，该数值映射到树上的彩色框。显示数据集时，在 iTOL 控制框中定义与最小值和最大值（加上可选的中点值）相对应的颜色。在右侧的示例中，最小值显示为红色，最大值显示为蓝色。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051638866.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\其它生信软件\a-j\itol：注释编辑表格.html</link><guid isPermaLink="false">软件/其它生信软件/A-J/iTol：注释编辑表格.md</guid><pubDate>Fri, 05 Jul 2024 08:39:55 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051618169.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051618169.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[主要特点]]></title><description><![CDATA[ 
 <br>MAFFT（Multiple Alignment using Fast Fourier Transform）是一款广泛使用的多序列比对软件，用于进行氨基酸或核苷酸序列的比对。该工具以其高效率和准确性而受到生物信息学领域的青睐，尤其适用于大规模序列数据的处理。<br>
<a data-href="MAFFT：使用教程" href="软件\其它生信软件\k-s\mafft：使用教程.html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：使用教程</a><br><br>
<br>快速和高效：MAFFT利用快速傅里叶变换（FFT）优化比对算法，提高了处理大规模数据集的速度。
<br>多种比对策略：软件提供了多种比对策略，包括：

<br>进化方法（如FFT-NS-1和FFT-NS-2），适用于序列数量较大时；
<br>迭代细化方法（如L-INS-i和E-INS-i），在处理具有保守区域和长间隙的序列时更加精确。


<br>灵活的输出格式：支持多种输出格式，如FASTA、Clustal、PHYLIP等，方便与其他生物信息学工具兼容。
<br>自动和手动配置：用户可以选择自动设置以快速开始比对，或根据特定需求调整详细参数，以优化比对结果。
<br>适用性广：适用于基因组、转录组和蛋白质序列的比对，能够处理从几个到几千个序列的数据集。
<br><br>MAFFT广泛应用于生物信息学研究，包括系统发育分析、功能基因的识别、进化生物学研究等领域。它的高效处理能力使其成为处理大规模序列数据时的首选工具。]]></description><link>软件\其它生信软件\a-j\mafft：(multiple-alignment-program-for-amino-acid-or-nucleotide-sequences).html</link><guid isPermaLink="false">软件/其它生信软件/A-J/MAFFT：(Multiple alignment program for amino acid or nucleotide sequences).md</guid><pubDate>Sun, 08 Sep 2024 13:18:49 GMT</pubDate></item><item><title><![CDATA[下载]]></title><description><![CDATA[ 
 <br><a data-href="MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)" href="软件\其它生信软件\a-j\mafft：(multiple-alignment-program-for-amino-acid-or-nucleotide-sequences).html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)</a> 是常见的多序列比对工具之一，通常来说，它的比对速度弱于 Muscle，但是准确性更强。在 MAFFT 主页可以下载到可执行文件和代码。<br><br>官网： <a rel="noopener nofollow" class="external-link" href="https://link.zhihu.com/?target=https%3A//mafft.cbrc.jp/alignment/software/" target="_blank">https://link.zhihu.com/?target=https%3A//mafft.cbrc.jp/alignment/software/</a><br>MAFFT 官网提供了 rpm 和 deb 两种安装方式。<br>
对应使用rpm工具进行安装，命令如下。<br>rpm -Uvh mafft-x.xx-xxx.xxx.rpm
复制<br>
<br>同样地，使用deb安装时，同样下载对应的安装包，如下所示。
<br>对应使用deb工具进行安装，命令如下。
<br>dpkg -i mafft_x.xxx-x_amd64.deb
复制<br><br><br>打开解压安装包的文件mafft.bat，或者，添加环境变量后，直接在终端输入命令mafft，即可打开MAFFT主界面。<br>主界面会依次引导你做如下几件事：<br>（1）输入文件的路径，需要标准的fasta格式<br><img src="https://pic1.zhimg.com/80/v2-228921aacce254b038dc86d20d5499b0_1440w.webp" referrerpolicy="no-referrer"><br>输出文件路径<br>（2）输出文件的路径<br><img src="https://pic1.zhimg.com/80/v2-a0a1c61398f552a81bf1555710554664_1440w.webp" referrerpolicy="no-referrer"><br>输出文件路径<br>（3）选择输出文件的格式，输入对应序号按回车即可，支持Clustal、Fasta和Phylip三种格式。<br><img src="https://pic2.zhimg.com/80/v2-13528a5f6791ef69dc131808822341d5_1440w.webp" referrerpolicy="no-referrer"><br>输出文件格式<br>（4）选择比对策略，输入对应序号按回车即可，通常选择1<br><img src="https://pic4.zhimg.com/80/v2-76338ecdc12aaf3c58af073ff91576d3_1440w.webp" referrerpolicy="no-referrer"><br>比对策略<br>（5）附加参数，如果没有，直接按回车即可<br><img src="https://pic4.zhimg.com/80/v2-97f4e30c141b3ebf18707b7d12927ad3_1440w.webp" referrerpolicy="no-referrer"><br>其他参数<br>做完以上5个步骤，MAFFT工具通过你的各个选项，自动生成了运行命令，此时输入"Y"即可开始进行比对，如下所示。<br><img src="https://pic3.zhimg.com/80/v2-68c460e182c290b037327cfa7bcc323a_1440w.webp" referrerpolicy="no-referrer"><br>得到命令<br>同时我们也发现，MAFFT界面只是引导你生成命令，如果记住命令的话，可以直接在终端输入命令，开始比对。<br><br>
<br>默认设置：默认大法好。
<br> mafft --auto input.fasta &gt; output.fasta
 mafft input.fasta &gt; output.fasta
复制<br>
<br>增加线程：
<br>mafft --thread 4 input.fasta &gt; output.fasta # 使用4个线程快一点
复制<br>
<br>调整比对精度：一般你不会用到，你可以在官网找到更多的内容。
以下内容并不完整！

<br>mafft --retree 1 input.fasta &gt; output.fasta # 快速模式（FFT-NS-1）
mafft --retree 2 input.fasta &gt; output.fasta # 中等精度模式（FFT-NS-2）
mafft --genafpair --maxiterate 1000 input.fasta &gt; output.fasta  # 全局配对和迭代（G-INS-i）
mafft --localpair --maxiterate 1000 input.fasta &gt; output.fasta # 局部配对和迭代（L-INS-i）
mafft --globalpair --maxiterate 1000 input.fasta &gt; output.fasta  # 全局配对信息提高精度（G-INS-i）
mafft --genafpair --maxiterate 1000 --op 1.53 input.fasta &gt; output.fasta # 改变Gap开销，影响插入或删除空位的频率。
mafft --add new_sequences.fasta existing_alignment.fasta &gt; new_alignment.fasta # 将新序列添加到已有的比对中，而不重新计算整个比对。
复制<br>其中的 --add 还可以替换为如下：<br>
<br>--addprofile：

<br>参数：mafft --addprofile new_sequences.fasta existing_alignment.aln
<br>描述：将新序列作为一个独立的多序列比对文件，与现有比对文件进行全局比对。这种方法通常是最精确的，因为它考虑了所有新序列的上下文。
<br>使用场景：适用于有较多新序列的情况，需要高精度的对齐。


<br>--addfull：

<br>参数：mafft --addfull new_sequences.fasta existing_alignment.aln
<br>描述：将新序列添加到现有比对中，进行全局比对，考虑整个序列的上下文。
<br>使用场景：适用于需要较高精度对齐但新序列不多的情况。


<br>--add：

<br>参数：mafft --add new_sequences.fasta existing_alignment.aln
<br>描述：将新序列逐个添加到现有比对中，进行局部比对。这种方法比 --addfull 快，但精度较低。
<br>使用场景：适用于需要快速对齐且新序列较少的情况。


<br>--keeplength：

<br>参数：mafft --add new_sequences.fasta --keeplength existing_alignment.aln &gt; new.fasta
<br>描述：类似 --add，但确保现有比对的长度保持不变。精度最低，但对已有比对影响最小。
<br>使用场景：适用于需要确保现有比对完全不变的情况，即使新序列的对齐精度较低。


<br><br>该软件的基本用法如下：<br>
mafft  input &gt; output<br>
input 为 fasta 格式的输入序列文件，output 为 fasta 格式的输出结果文件。mafft 支持核酸和蛋白序列的多序列比对，内置了多种序列比对算法，可以分为以下3大类别<br>
<br>consistency based methods
<br>iterative refinment methods
<br>progressive methods
<br>这三种类别的算法在准确度和速度上各有优势，对于运行速度而言，3&gt;2&gt;1;对于准确度而言，1&gt;2&gt;3。<br><br>此类算法包含了 L-INS-i, E-INS-i, G-INS-i 3种算法。<br><br>mafft --localpair --maxiterate 1000 input_file &gt; output_file
复制<br><br>mafft --genafpair --maxiterate 1000 input_file &gt; output_file
复制<br>G-INS-i 用法如下<br>mafft --globalpair --maxiterate 1000 input_file &gt; output_file
复制<br><br>此类算法包含了 FFT-NS-i, NW-NS-i 两种算法。<br><br>mafft --maxiterate 1000 input_file &gt; output_file
复制<br><br>mafft --maxiterate 1000 input_file &gt; output_file
复制<br><br>此类算法包含了 FFT-NS-1, FFT-NS-2 2种算法。<br><br>mafft --retree 1 input_file &gt; output_file
复制<br><br>mafft --retree 2 input_file &gt; output_file
复制<br>如果在比对时，不知道如何选取合适的算法，可以使用以下设置<br>mafft --auto input &gt; output
复制]]></description><link>软件\其它生信软件\k-s\mafft：使用教程.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/MAFFT：使用教程.md</guid><pubDate>Thu, 31 Oct 2024 01:54:58 GMT</pubDate><enclosure url="https://pic1.zhimg.com/80/v2-228921aacce254b038dc86d20d5499b0_1440w.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://pic1.zhimg.com/80/v2-228921aacce254b038dc86d20d5499b0_1440w.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[软件]]></title><description><![CDATA[ 
 <br><br><a data-tooltip-position="top" aria-label="https://github.com/Theory-Lun/McAN" rel="noopener nofollow" class="external-link" href="https://github.com/Theory-Lun/McAN" target="_blank">Theory-Lun/McAN (github.com)</a><br><br>git clone https://github.com/Theory-Lun/McAN.git
cd McAN
mkdir build
cd build
cmake ..
make
复制<br><br><br>MCAN 可以从变体调用格式 (VCF) 或突变格式中读取变异。这里突变格式定义如下：提供了一个 perl 程序 (convert/variant_mark.pl)，用于从 fasta 格式的多基因组序列比对文件生成 突变格式 的文件。<br>&lt;SampleName&gt;\t&lt;AccessionID&gt;\t[&lt;POS&gt;(&lt;VariantType&gt;:&lt;REF&gt;-&gt;&lt;ALT&gt;)[;&lt;POS&gt;(&lt;VariantType&gt;:&lt;REF&gt;-&gt;&lt;ALT&gt;)]...]
复制<br>hCoV-19/England/ALDP-143B269/2021	EPI_ISL_1454756	1(Deletion:AATTAAAGGTTTATACCTTCCCAGGTAACAAACCAACCAACTTTCGATCTCTTGT-&gt;-);241(SNP:C-&gt;T);913(SNP:C-&gt;T);2062(SNP:C-&gt;T);3037(SNP:C-&gt;T);3267(SNP:C-&gt;T);5388(SNP:C-&gt;A);5986(SNP:C-&gt;T);6954(SNP:T-&gt;C);9746(SNP:C-&gt;T);11287(Deletion:GTCTGGTTTT-&gt;G);14408(SNP:C-&gt;T);14590(SNP:T-&gt;G);14676(SNP:C-&gt;T);15279(SNP:C-&gt;T);16176(SNP:T-&gt;C);16391(SNP:C-&gt;T);17615(SNP:A-&gt;G);19656(SNP:G-&gt;A);21764(Deletion:ATACATG-&gt;A);21990(Deletion:TTTA-&gt;T);23063(SNP:A-&gt;T);23271(SNP:C-&gt;A);23403(SNP:A-&gt;G);23604(SNP:C-&gt;A);23709(SNP:C-&gt;T);24506(SNP:T-&gt;G);24914(SNP:G-&gt;C);26461(SNP:C-&gt;T);26730(SNP:G-&gt;C);27972(SNP:C-&gt;T);28048(SNP:G-&gt;T);28111(SNP:A-&gt;G);28270(Deletion:TA-&gt;T);28280(SNP:G-&gt;C);28281(SNP:A-&gt;T);28282(SNP:T-&gt;A);28881(SNP:G-&gt;A);28882(SNP:G-&gt;A);28883(SNP:G-&gt;C);28973(SNP:A-&gt;G);28977(SNP:C-&gt;T);29109(SNP:C-&gt;A);29541(SNP:C-&gt;T);29640(SNP:C-&gt;T);29773(SNP:G-&gt;T);29836(Deletion:CCCATGTGATTTTAATAGCTTCTTAGGAGAATGACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-&gt;C)
hCoV-19/Denmark/DCGC-48559/2021	EPI_ISL_1124652	1(Deletion:AATTAAAGGTTTATACCTTCCCAGGTAACAAACCAACCAACTTTCGATCTCTTGT-&gt;-);158(SNP:A-&gt;G);241(SNP:C-&gt;T);913(SNP:C-&gt;T);3037(SNP:C-&gt;T);3267(SNP:C-&gt;T);5388(SNP:C-&gt;A);5986(SNP:C-&gt;T);6954(SNP:T-&gt;C);11287(Deletion:GTCTGGTTTT-&gt;G);12388(SNP:T-&gt;C);14408(SNP:C-&gt;T);14676(SNP:C-&gt;T);15279(SNP:C-&gt;T);16176(SNP:T-&gt;C);21764(Deletion:ATACATG-&gt;A);21990(Deletion:TTTA-&gt;T);23063(SNP:A-&gt;T);23271(SNP:C-&gt;A);23403(SNP:A-&gt;G);23604(SNP:C-&gt;A);23709(SNP:C-&gt;T);24506(SNP:T-&gt;G);24914(SNP:G-&gt;C);25448(SNP:A-&gt;G);26681(SNP:C-&gt;T);27972(SNP:C-&gt;T);28048(SNP:G-&gt;T);28111(SNP:A-&gt;G);28270(Deletion:TA-&gt;T);28280(SNP:G-&gt;C);28281(SNP:A-&gt;T);28282(SNP:T-&gt;A);28881(SNP:G-&gt;A);28882(SNP:G-&gt;A);28883(SNP:G-&gt;C);28977(SNP:C-&gt;T);29421(SNP:C-&gt;T);29422(SNP:G-&gt;T);29627(SNP:C-&gt;T);29836(Deletion:CCCATGTGATTTTAATAGCTTCTTAGGAGAATGACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-&gt;C)
hCoV-19/Germany/NW-RKI-I-063476/2021	EPI_ISL_1568686	1(Deletion:AAT-&gt;-);241(SNP:C-&gt;T);913(SNP:C-&gt;T);1937(SNP:T-&gt;C);1979(SNP:G-&gt;A);2110(SNP:C-&gt;T);3037(SNP:C-&gt;T);3267(SNP:C-&gt;T);4582(SNP:C-&gt;T);5388(SNP:C-&gt;A);5986(SNP:C-&gt;T);6954(SNP:T-&gt;C);7267(SNP:C-&gt;T);9856(SNP:G-&gt;T);11083(SNP:G-&gt;T);11287(Deletion:GTCTGGTTTT-&gt;G);14120(SNP:C-&gt;T);14408(SNP:C-&gt;T);14676(SNP:C-&gt;T);15279(SNP:C-&gt;T);16176(SNP:T-&gt;C);21766(Deletion:ACATGTC-&gt;A);21990(Deletion:TTTA-&gt;T);23063(SNP:A-&gt;T);23271(SNP:C-&gt;A);23403(SNP:A-&gt;G);23604(SNP:C-&gt;A);23690(SNP:A-&gt;G);23709(SNP:C-&gt;T);24506(SNP:T-&gt;G);24914(SNP:G-&gt;C);27972(SNP:C-&gt;T);28048(SNP:G-&gt;T);28095(SNP:A-&gt;T);28111(SNP:A-&gt;G);28270(Deletion:TA-&gt;T);28280(SNP:G-&gt;C);28281(SNP:A-&gt;T);28282(SNP:T-&gt;A);28881(SNP:G-&gt;A);28882(SNP:G-&gt;A);28883(SNP:G-&gt;C);28977(SNP:C-&gt;T);29732(Deletion:CCGAGGCCACGCGGAGTACGATCGAGTGTACAGTGAACAATGCTAGGGAGAGCTGCCTATATGGAAGAGCCCTAATGTGTAAAATTAATTTTAGTAGTGCTATCCCCATGTGATTTTAATAGCTTCTTAGGAGAATGACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-&gt;C)
hCoV-19/USA/AK-PHL8275/2021	EPI_ISL_1821911	1(Deletion:AATTAAAGGTTTATACCT-&gt;-);201(SNP:T-&gt;C);203(SNP:C-&gt;T);222(SNP:C-&gt;T);241(SNP:C-&gt;T);507(Deletion:ATGGTCATGTTATGGT-&gt;A);1738(SNP:G-&gt;T);3037(SNP:C-&gt;T);3140(SNP:C-&gt;T);9979(SNP:C-&gt;T);10029(SNP:C-&gt;T);10954(SNP:C-&gt;T);11117(SNP:A-&gt;G);12789(SNP:C-&gt;T);14408(SNP:C-&gt;T);17079(SNP:G-&gt;A);18255(SNP:G-&gt;T);19839(SNP:T-&gt;C);19974(SNP:A-&gt;G);21306(SNP:C-&gt;T);22995(SNP:C-&gt;A);23403(SNP:A-&gt;G);23604(SNP:C-&gt;A);23756(SNP:A-&gt;G);25553(SNP:C-&gt;T);28881(SNP:G-&gt;A);28882(SNP:G-&gt;A);28883(SNP:G-&gt;C);29197(SNP:C-&gt;T);29866(Deletion:ATGACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-&gt;A)
hCoV-19/USA/KS-KHEL-0753/2020	EPI_ISL_1412493	1(Deletion:AATTAAAGGTTTATACCTTCCCAG-&gt;-);219(SNP:G-&gt;T);241(SNP:C-&gt;T);3037(SNP:C-&gt;T);3122(SNP:G-&gt;T);4950(SNP:T-&gt;C);7108(SNP:C-&gt;T);7687(SNP:A-&gt;G);9409(SNP:A-&gt;G);11595(SNP:A-&gt;G);12970(SNP:C-&gt;T);14408(SNP:C-&gt;T);14712(SNP:G-&gt;T);16610(SNP:C-&gt;A);16733(SNP:C-&gt;T);18079(SNP:G-&gt;T);18555(SNP:C-&gt;T);19839(SNP:T-&gt;C);20069(SNP:G-&gt;T);23403(SNP:A-&gt;G);23426(SNP:G-&gt;T);23587(SNP:G-&gt;T);23756(SNP:A-&gt;G);24138(SNP:C-&gt;A);28881(SNP:G-&gt;A);28882(SNP:G-&gt;A);28883(SNP:G-&gt;C);29640(SNP:C-&gt;T);29870(Deletion:CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-&gt;C)
hCoV-19/USA/TX-HMH-MCoV-18622/2020	EPI_ISL_784970	1(Deletion:AATTAAAGGTTTATACCTTCCCAGGTAACAAACCAACC-&gt;-);241(SNP:C-&gt;T);1059(SNP:C-&gt;T);2388(SNP:C-&gt;T);2448(SNP:G-&gt;T);3037(SNP:C-&gt;T);4331(SNP:C-&gt;T);6040(SNP:C-&gt;T);6422(SNP:G-&gt;A);9112(SNP:C-&gt;M);10319(SNP:C-&gt;T);14408(SNP:C-&gt;T);15380(SNP:G-&gt;T);16926(SNP:T-&gt;C);18424(SNP:A-&gt;G);19974(SNP:A-&gt;G);21304(SNP:C-&gt;T);22225(SNP:G-&gt;T);23403(SNP:A-&gt;G);25563(SNP:G-&gt;T);25907(SNP:G-&gt;T);27964(SNP:C-&gt;T);28472(SNP:C-&gt;T);28869(SNP:C-&gt;T);29053(SNP:A-&gt;C);29095(SNP:C-&gt;T);29752(SNP:A-&gt;T);29854(Deletion:CTTCTTAGGAGAATGACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-&gt;C)
hCoV-19/USA/CA-CHLA-PLM57647613/2020	EPI_ISL_753540	241(SNP:C-&gt;T);1059(SNP:C-&gt;T);1927(SNP:T-&gt;C);3037(SNP:C-&gt;T);6196(SNP:C-&gt;T);10319(SNP:C-&gt;T);14408(SNP:C-&gt;T);15766(SNP:G-&gt;T);18424(SNP:A-&gt;G);18538(SNP:G-&gt;T);21304(SNP:C-&gt;T);22255(SNP:A-&gt;T);23120(SNP:G-&gt;T);23403(SNP:A-&gt;G);24146(SNP:C-&gt;G);25563(SNP:G-&gt;T);25907(SNP:G-&gt;T);25930(SNP:T-&gt;C);26951(SNP:G-&gt;T);27964(SNP:C-&gt;T);28472(SNP:C-&gt;T);28869(SNP:C-&gt;T);29439(SNP:A-&gt;T);29903(Insertion:A-&gt;AHMSHCAMTCSCYGWHMSHCVGSADBATCHCMSRSARSCVARAGTBACSSTSATCMR)
hCoV-19/Germany/SN-RKI-I-038205/2021	EPI_ISL_1284566	1(Deletion:AATTAAAGGTTTATACCTTCCCAGGTAACAA-&gt;-);241(SNP:C-&gt;T);815(SNP:C-&gt;T);913(SNP:C-&gt;T);1245(SNP:G-&gt;A);3037(SNP:C-&gt;T);3267(SNP:C-&gt;T);5388(SNP:C-&gt;A);5986(SNP:C-&gt;T);6954(SNP:T-&gt;C);11287(Deletion:GTCTGGTTTT-&gt;G);13446(SNP:C-&gt;T);14408(SNP:C-&gt;T);14676(SNP:C-&gt;T);15096(SNP:T-&gt;C);15279(SNP:C-&gt;T);16176(SNP:T-&gt;C);21764(Deletion:ATACATG-&gt;A);21990(Deletion:TTTA-&gt;T);23063(SNP:A-&gt;T);23271(SNP:C-&gt;A);23403(SNP:A-&gt;G);23604(SNP:C-&gt;A);23709(SNP:C-&gt;T);24506(SNP:T-&gt;G);24914(SNP:G-&gt;C);25785(SNP:G-&gt;T);27972(SNP:C-&gt;T);28048(SNP:G-&gt;T);28111(SNP:A-&gt;G);28270(Deletion:TA-&gt;T);28280(SNP:G-&gt;C);28281(SNP:A-&gt;T);28282(SNP:T-&gt;A);28881(SNP:G-&gt;A);28882(SNP:G-&gt;A);28883(SNP:G-&gt;C);28977(SNP:C-&gt;T);29764(SNP:G-&gt;A)
hCoV-19/Germany/un-RKI-I-145500/2021	EPI_ISL_2129747	1(Deletion:AATTAAAGGTTTATACCTTCCCAGGTAACAAACCAACCA-&gt;-);241(SNP:C-&gt;T);913(SNP:C-&gt;T);3037(SNP:C-&gt;T);3267(SNP:C-&gt;T);3302(SNP:G-&gt;A);3817(SNP:C-&gt;T);4002(SNP:C-&gt;T);5388(SNP:C-&gt;A);5944(SNP:C-&gt;T);5986(SNP:C-&gt;T);6954(SNP:T-&gt;C);11287(Deletion:GTCTGGTTTT-&gt;G);14408(SNP:C-&gt;T);14676(SNP:C-&gt;T);15096(SNP:T-&gt;C);15279(SNP:C-&gt;T);16176(SNP:T-&gt;C);21764(Deletion:ATACATG-&gt;A);21990(Deletion:TTTA-&gt;T);23063(SNP:A-&gt;T);23271(SNP:C-&gt;A);23403(SNP:A-&gt;G);23604(SNP:C-&gt;A);23709(SNP:C-&gt;T);24506(SNP:T-&gt;G);24914(SNP:G-&gt;C);25424(SNP:G-&gt;T);27389(SNP:C-&gt;T);27972(SNP:C-&gt;T);28048(SNP:G-&gt;T);28095(SNP:A-&gt;T);28111(SNP:A-&gt;G);28114(SNP:T-&gt;C);28270(Deletion:TA-&gt;T);28280(SNP:G-&gt;C);28281(SNP:A-&gt;T);28282(SNP:T-&gt;A);28881(SNP:G-&gt;A);28882(SNP:G-&gt;A);28883(SNP:G-&gt;C);28884(SNP:G-&gt;C);28977(SNP:C-&gt;T);29853(Deletion:GCTTCTTAGGAGAATGACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-&gt;G)
hCoV-19/Wuhan/HB-WH1-122/2020	EPI_ISL_454904
复制<br><br>其中每个记录包含 6 个字段：SampleName、AccessionID、SamplingDate（yyyy-mm-dd 或 yyyy-mm）、Country、State 和 City。所有数据行均以制表符分隔。缺失值用“*”指定。<br>*	EPI_ISL_1454756	2021-03-13	United Kingdom	*	*
*	EPI_ISL_1124652	2021-02-15	Denmark	*	*
*	EPI_ISL_1568686	2021-03-22	Germany	*	*
*	EPI_ISL_1821911	2021-04-19	United States	*	*
*	EPI_ISL_1412493	2020-12-10	United States	*	*
*	EPI_ISL_784970	2020-11-20	United States	*	*
*	EPI_ISL_753540	2020-11-30	United States	*	*
*	EPI_ISL_1284566	2021-03-02	Germany	*	*
*	EPI_ISL_2129747	2021-04-30	Germany	*	*
*	EPI_ISL_454904	2020-03-02	China	*	*
复制<br><br>Usage: McAN [option]...

Options:
  -f, --vcf &lt;file&gt;        input vcf file
  -u, --mutation &lt;file&gt;   input mutation file
  -m, --meta &lt;file&gt;       input meta file
  -s, --sitemask &lt;file&gt;   input sitemask file [optional]
  -x, --maxnsample &lt;int&gt;  maximum number of samples [default: Inf]
  -t, --nthread &lt;int&gt;     number of worker threads [default: 1]
  -o, --outDir &lt;dir&gt;      directory for output
  -J, --oJSON             output network with JSON format
  -T, --oTSV              output network with TSV format
  -G, --oGraphML          output network with GraphML format
  -M, --oMutation         convert vcf into mutation format and output

  -h, --help              display this help and exit
  -v, --version           output version information and exit


Usage: McAN siteMask [option]...

Options:
  -f, --vcf &lt;file&gt;       input vcf file
  -u, --mutation &lt;file&gt;  input mutation file
  -m, --meta &lt;file&gt;      input meta file
  -q, --minfreq &lt;int&gt;    filtered out variants with frequency &lt; minfreq
  -o, --out &lt;file&gt;       output sitemask file
  -M, --oMutation        convert vcf into mutation format and output

  -h, --help             display this help and exit
  -v, --version          output version information and exit
复制<br><br>cd .../McAN/example 
mkdir out # 创建输出目录
# 过滤位点并生成位点掩码文件
../build/McAN siteMask \
--mutation data/mut \
--meta data/meta \
--out out/siteMask \ 
--minfreq 0.01
# 构建网络
../build/McAN \
--mutation data/mut \
--meta data/meta \
--sitemask out/siteMask \
--outDir out \ # 输出目录为out
--oJSON \ # 输出JSON格式
--oGraphML \ # 输出GraphML格式
--oTSV \ # 输出TSV格式
--nthread 3
复制]]></description><link>软件\其它生信软件\k-s\mcan：软件操作.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/McAN：软件操作.md</guid><pubDate>Sun, 22 Sep 2024 10:13:23 GMT</pubDate></item><item><title><![CDATA[什么是N-J树]]></title><description><![CDATA[ 
 <br><br>Neighbor-Joining (NJ)树推理方法最初是由 Saitou 和 Nei 于 1987 年编写的。<br>它属于一类基于距离的方法用于构建进化树。 NJ 方法采用给定序列之间的成对进化距离矩阵来构建进化树。Neighbor-Joining是一种bottom-up&nbsp;的聚类方法，常被用于系统发育树 (phylogenetic tree) 的构建当中。<br>成对距离通常从序列比对算法中获得，例如&nbsp;Smith-Waterman&nbsp;和&nbsp;BLAST&nbsp;，它们将每个基因序列与每个其他基因序列进行比对。比对得分可用作序列之间进化距离的估计。<br><br>绘制N-J树需要准备<a data-href="种群配对Fst值（Population pairwise Fst values）" href="术语\种群配对fst值（population-pairwise-fst-values）.html" class="internal-link" target="_self" rel="noopener nofollow">种群配对Fst值（Population pairwise Fst values）</a>计算所得的频率矩阵。如下所示：<br><br>不知道如何得到Fst矩阵的请查看<a data-href="R：Fst绘制频率热图矩阵" href="软件\r语言语法\r：fst绘制频率热图矩阵.html" class="internal-link" target="_self" rel="noopener nofollow">R：Fst绘制频率热图矩阵</a>。<br>得到频率矩阵之后，需要对数据进行预处理。步骤如下：<br>
<br>将矩阵变为半矩阵：
<br><br>
<br>将其中的负数转换为0。因为利用N-J树要求最低的关系为0。这一步可以在Excel表格中进行，选中区域后进行替换，-*替换为0。
<br><br>
<br>准备好矩阵第一列的名字，并以#开始。
<br>#Chongqing
#Fujian
#Gansu
#Guangdong
#Guangxi
#Guizhou
#Hainan
#Henan
#Hunan
#InnerMongulia
#Shaanxi
#Shandong
#Shanxi
#Sichuan
#Tibet
#Yunnan
复制<br>
<br>构建.meg文件

<br>新建一个.txt文件，将下列文本粘贴进去。
<br>注意替换列表和频率矩阵。
<br>将文本后缀改为meg。


<br>#mega
!TITLE  Genetic distance data from 16 human populations;
!Format DataType=distance;
!Description
     Nei, M. and A. K. Roychoudhury. 1993. Mol. Biol. Evol. 10(5).
     Number of polymoprhic loci used = 18;

#Chongqing
#Fujian
#Gansu
#Guangdong
#Guangxi
#Guizhou
#Hainan
#Henan
#Hunan
#InnerMongulia
#Shaanxi
#Shandong
#Shanxi
#Sichuan
#Tibet
#Yunnan

0.00302														
0.00345	0.00862													
0.0054	0.00458	0.01901												
0.00891	0.00543	0.02545	0.00063											
0.00443	0.00428	0.01369	0.00691	0.00537										
0.01291	0.00799	0.02997	0.00201	0.00167	0.01078									
0.00103	0.00457	0	0.01473	0.01855	0.00916	0.0227								
0.01076	0.01213	0.02381	0.00374	0.00097	0.01232	0.00752	0.01975							
0.00795	0.01892	0.00482	0.01624	0.02669	0.02148	0.03418	0.00896	0.0162						
0.00591	0.00912	0	0.01818	0.02709	0.01394	0.03073	0.00021	0.02946	0.00577					
0.00642	0.00842	0.00367	0.02032	0.0278	0.01514	0.03152	0.00143	0.03403	0.01934	0.00085				
0.00111	0.00484	0.00159	0.01344	0.02094	0.01065	0.02545	0	0.02561	0.01231	0.00072	0.00005			
0	0.00406	0.00577	0.0055	0.00679	0.0007	0.01155	0.00363	0.00996	0.01102	0.00727	0.0096	0.00553		
0.0124	0.02207	0.00415	0.03464	0.0449	0.02944	0.05712	0.00757	0.04396	0.01337	0.01214	0.01472	0.01	0.01753	
0.00455	0.00952	0.0059	0.01073	0.01459	0.00942	0.02233	0.00578	0.01236	0	0.00689	0.01517	0.00876	0.00386	0.01924  

复制<br><br>
<br>
打开MEGA软件，将刚才的文件拖进去。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402021601157.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
点击Phylogeny→Construct/Test Neighbor-Joining (NJ) tree→OK。

<br>
得到树。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402021603251.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
但是不太美观，所以进一步编辑。点击File→Export Current Tree。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402021603847.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
得到一个newick或者nwk后缀文件。

<br>
打开网站：<a data-tooltip-position="top" aria-label="https://itol.embl.de/" rel="noopener nofollow" class="external-link" href="https://itol.embl.de/" target="_blank">进化树美化</a><a data-href="iTol：进化树美化网站" href="软件\其它生信软件\a-j\itol：进化树美化网站.html" class="internal-link" target="_self" rel="noopener nofollow">iTol：进化树美化网站</a>

<br>
注册一个账号，然后点击上传newick或者nwk文件。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402021607253.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
进行修改后，导出文件，完成！<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402021607081.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

]]></description><link>软件\其它生信软件\k-s\mega：基于fst绘制neighbor-joining-(nj)树.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/MEGA：基于Fst绘制Neighbor-Joining (NJ)树.md</guid><pubDate>Sun, 29 Sep 2024 09:00:37 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402021601157.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402021601157.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[mitofinder 软件的作用]]></title><description><![CDATA[ 
 <br>本文提供了 Mitofinder 软件的安装和使用说明，该软件用于分析线粒体 DNA 数据，识别线粒体单倍群和估计进化距离。<br><br>mitofinder 是一款用于分析线粒体 DNA 序列的软件。它可以帮助研究人员识别线粒体 DNA 中的突变和变异，并了解这些变化与疾病之间的关系。<br><br>
<br>
安装依赖项：

<br>sudo apt-get update 
<br>sudo apt-get install -y git wget


<br>
克隆源码：

<br>git clone https://github.com/RemiAllio/MitoFinder.git
<br>cd MitoFinder


<br>
运行安装脚本：

<br>./install.sh


<br>
设置环境变量：

<br>在 .bashrc 中添加：

<br>echo 'export PATH=$PATH:/home/luolintao/MitoFinder-master' &gt;&gt; ~/.bashrc source ~/.bashrc




<br>验证安装<br>
<br>mitofinder --version
<br><br>MitoFinder 运行需要指定参考基因组文件。你需要提供一个参考的线粒体基因组文件，并使用 -r 选项来指定这个文件。<br>你需要一个参考的线粒体基因组文件，通常是 GenBank 格式（.gb）的文件。你可以从 NCBI 或其他数据库下载合适的参考基因组。<br>请运行上述命令，MitoFinder 应该会开始处理并进行线粒体基因组的注释。如果你在运行过程中遇到任何问题，请提供详细的错误信息以便进一步帮助。<br>mitofinder -j 基因注释 -a /home/luolintao/MitoFinder-master/input_file/没有去除33个位点.fasta -r /home/luolintao/MitoFinder-master/input_file/GRCH38线粒体DNA.gb -o 2 -m mitochondrion
复制<br><br>
<br>The Standard Code: 常规的标准遗传密码表。
<br>The Vertebrate Mitochondrial Code: 脊椎动物线粒体密码表。
<br>The Yeast Mitochondrial Code: 酵母线粒体密码表。
<br>The Mold, Protozoan, and Coelenterate Mitochondrial Code and the Mycoplasma/Spiroplasma Code: 霉菌、原生动物、刺胞动物线粒体密码表以及支原体/螺旋体密码表。
<br>The Invertebrate Mitochondrial Code: 无脊椎动物线粒体密码表。
<br>The Ciliate, Dasycladacean and Hexamita Nuclear Code: 纤毛虫、Dascycladacean 和 Hexamita 核密码表。
<br>The Echinoderm and Flatworm Mitochondrial Code: 棘皮动物和扁虫线粒体密码表。
<br>The Euplotid Nuclear Code: Euplotid 核密码表。
<br>The Bacterial, Archaeal and Plant Plastid Code: 细菌、古菌和植物质体密码表。
<br>The Alternative Yeast Nuclear Code: 替代的酵母核密码表。
<br>The Ascidian Mitochondrial Code: 被囊动物线粒体密码表。
<br>The Alternative Flatworm Mitochondrial Code: 替代的扁虫线粒体密码表。
<br>Chlorophycean Mitochondrial Code: 绿藻线粒体密码表。
<br>Trematode Mitochondrial Code: 吸虫线粒体密码表。
<br>Scenedesmus obliquus Mitochondrial Code: Scenedesmus obliquus 线粒体密码表。
<br>Thraustochytrium Mitochondrial Code: Thraustochytrium 线粒体密码表。
<br>Pterobranchia Mitochondrial Code: Pterobranchia 线粒体密码表。
<br>Candidate Division SR1 and Gracilibacteria Code: SR1 候选门类和 Gracilibacteria 密码表。
]]></description><link>软件\其它生信软件\k-s\mitofinder：软件安装和使用.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/mitofinder：软件安装和使用.md</guid><pubDate>Mon, 08 Jul 2024 02:36:50 GMT</pubDate></item><item><title><![CDATA[1. 安装]]></title><description><![CDATA[ 
 <br><br>使用以下命令将 MToolBox 的路径添加到系统的 PATH 中：<br>export PATH="/path/to/MToolBox/:$PATH"
复制<br>在 MToolBox 文件夹中，运行 install.sh 脚本（适用于 Linux 发行版）：<br>./install.sh
复制<br>以完成所有 MToolBox 依赖项的完整安装。这可能需要一些时间，请耐心等待，直到整个过程成功完成。我们强烈建议使用安装脚本提供的默认版本：<br>
<br>GSNAP 2015-12-31.v7
<br>Anaconda distribution 2-2.5.0
<br>Zlib 版本 1.2.8
<br>MUSCLE 版本 3.8.31
<br>samtools 版本 1.3
<br>GSNAP 数据库生成的默认 Kmer 值是 15。不过，如果您想在完整安装过程中更改上述版本或参数，请指定以下选项：<br>./install.sh -g &lt;gsnap_version&gt; -a &lt;anaconda_version&gt; -z &lt;zlib_version&gt; -m &lt;muscle_file&gt; -s &lt;samtools_version&gt; -k &lt;kmer_to_build_gsnap_db&gt;
复制<br>要重新安装/更新某个 MToolBox 软件依赖项，请执行：<br>./install.sh -i &lt;software_name&gt;
复制<br>其中可能的软件名称包括：<br>
<br>gsnap
<br>anaconda
<br>muscle
<br>zlib
<br>samtools
<br>gsnap_db
<br>./install.sh -i gsnap -g 2016-05-25
复制<br><br>
<br>基于 UNIX 的操作系统
<br>MacOS
<br>运行 install.sh 脚本（参见安装部分）时，将默认安装以下所有依赖项：<br>
<br>Python 2.7 (<a data-tooltip-position="top" aria-label="http://www.python.org" rel="noopener nofollow" class="external-link" href="http://www.python.org" target="_blank">www.python.org</a>, 包含在 Anaconda 发行版中, <a rel="noopener nofollow" class="external-link" href="https://www.continuum.io/downloads" target="_blank">https://www.continuum.io/downloads</a>)<br>

<br>GSNAP (<a rel="noopener nofollow" class="external-link" href="http://research-pub.gene.com/gmap/" target="_blank">http://research-pub.gene.com/gmap/</a>)<br>

<br>Samtools (<a rel="noopener nofollow" class="external-link" href="https://sourceforge.net/projects/samtools/files/samtools/" target="_blank">https://sourceforge.net/projects/samtools/files/samtools/</a>)<br>

<br>MUSCLE (<a rel="noopener nofollow" class="external-link" href="http://www.drive5.com/muscle/downloads.htm" target="_blank">http://www.drive5.com/muscle/downloads.htm</a>)<br>

<br>ZLIB (<a rel="noopener nofollow" class="external-link" href="http://zlib.net/" target="_blank">http://zlib.net/</a>)<br>

<br>GATK（可选，仅当用户希望运行 GATK IndelRealigner 时。<a data-tooltip-position="top" aria-label="https://software.broadinstitute.org/gatk/download/%EF%BC%89%E3%80%82%E7%94%A8%E6%88%B7%E9%9C%80%E8%A6%81%E5%B0%86" rel="noopener nofollow" class="external-link" href="https://software.broadinstitute.org/gatk/download/%EF%BC%89%E3%80%82%E7%94%A8%E6%88%B7%E9%9C%80%E8%A6%81%E5%B0%86" target="_blank">https://software.broadinstitute.org/gatk/download/）。用户需要将</a> GATK 包放入 MToolBox/ext_tools 文件夹中：
  mv GenomeAnalysisTK.jar /path/to/MToolBox/MToolBox/ext_tools/
<br><br>默认情况下，MToolBox 采用 RSRS（重建智人参考序列，PMID: 22482806）作为线粒体参考基因组，hg19 作为核参考基因组。或者，用户也可以选择使用 rCRS（修订的剑桥参考序列）。MToolBox 使用的 hg19 核基因组和线粒体 DNA 的 Fasta 文件可在 <a rel="noopener nofollow" class="external-link" href="https://sourceforge.net/projects/mtoolbox/" target="_blank">https://sourceforge.net/projects/mtoolbox/</a> 上获取，以方便用户使用。然而，在流水线的 v.1.0 版本中，这些文件现在通过 install.sh MToolBox 脚本默认下载和安装，连同所需的 GSNAP 数据库。<br>MToolBox 文件夹包含 MITOMAP_HMTDB_known_indels.vcf 文件，其中包含 127 个在 MITOMAP 和 HmtDB 中注释的已知插入缺失变异，以及 GATK 的 GenomeAnalysisTK.jar 模块使用的相关 intervals_file.list。MToolBox 文件夹还包括两个以制表符分隔的文件，patho_table.txt 和 sitevar_modified.txt，分别包含在注释步骤中使用的变异特异性和位点特异性信息。<br><br>对于每个样本，输出文件夹和文件的基本名称将从输入文件名中解析。<br>
<br>BAM/SAM 文件：BAM 或 SAM 文件必须重命名为 &lt;sample_name&gt;.ext，例如：
<br>mv HG00096.chrom20.ILLUMINA.bwa.GBR.low_coverage.20101123.bam HG00096.bam
复制<br>这样“HG00096”将成为输出的基本名称。<br>
<br>FASTQ 文件：对于配对末端数据，FASTQ 文件必须重命名为 &lt;sample_name&gt;.R1.fastq 和 &lt;sample_name&gt;.R2.fastq；对于单端数据，必须重命名为 &lt;sample_name&gt;.fastq。FASTQ 压缩输入文件可以接受 *.fastq.gz 扩展名。
<br>重要：请注意，MToolBox 每个样本只能识别一对配对末端的 fastq 文件（R1+R2）和一个单端 fastq 文件。<br><br><br>
<br>-i 配置文件 [强制]
<br>-m mapExome 脚本的选项 [参见 mapExome.py -h 了解详情]
<br>-a assembleMTgenome 脚本的选项 [参见 assembleMTgenome.py -h 了解详情]
<br>-c mt-classifier 脚本的选项 [参见 mt-classifier.py -h 了解详情]
<br><br>
<br>-h 显示此帮助信息
<br>-v 显示版本信息
<br>用法：<br>#此命令将在 test_config.sh 文件中指定的样本集上运行 MToolBox，将 GSNAP 线程数设置为 20 (-m "-t 20..")，即从读取端允许保留 indel 的最小核苷酸距离为 10 （-a“-t 10”）和在 FASTA 共有序列中保留核苷酸变异的异质性阈值 0.6（-a“-z 0.6”）。
MToolBox.sh -i test_config.sh -m "-t 20" -a "-t 10 -z 0.6"
复制<br><br>MToolBox 的默认输出包括：<br>
<br>VCF_file.vcf：包含所有与 RSRS/rCRS 比较的线粒体变异位点和其他元信息。
<br>mt_classification_best_results.csv：报告每个序列的最佳单倍群预测结果。如果排序结果中有多个具有相同概率的最佳单倍群预测，输出将包含所有这些预测。
<br>prioritized_variants.txt：仅包含每个样本分析的优先变异的注释，这些变异是由三个参考序列（rCRS、RSRS 和 MHCS）识别的，并按核苷酸变异性递增排序。
<br>summary_&lt;date_time&gt;.txt：报告所选选项的简要摘要、预测的单倍群、每个样本的总变异和优先变异数量，以及仅针对 NGS 数据的重建基因组覆盖率、同质性和异质性变异数量。
<br>OUT_&lt;sample_name&gt; 文件夹包含：

<br>outmt.sam：映射到人类线粒体 DNA 的读取；
<br>logmt.txt：线粒体 DNA 映射的 GSNAP 日志文件；
<br>outmt.fastq：从 outmt.sam 文件中提取的单端读取的 fastq 文件；
<br>outmt1.fastq：从 outmt.sam 文件中提取的配对读取的 fastq 文件；
<br>outmt2.fastq：从 outmt.sam 文件中提取的配对读取的 fastq 文件；
<br>outhumanS.sam：映射到整个基因组的人类基因组的单端读取；
<br>loghumanS.txt：人类基因组映射（单端读取）的 GSNAP 日志文件；
<br>outhumanP.sam：映射到整个基因组的人类基因组的配对读取；
<br>loghumanP.txt：人类基因组映射（配对读取）的 GSNAP 日志文件；
<br>OUT.sam：唯一映射到线粒体基因组的读取对齐；
<br>OUT2.sam：在经过 IndelRealigner 和/或 MarkDuplicates 处理后唯一映射到线粒体基因组的读取对齐。即使禁用这两个过程，也会生成此文件；
<br>mtDNAassembly-table.txt：描述组装位置的主要表格；
<br>mtDNAassembly-Contigs.fasta：包含所有重建 contig 的 fasta 文件；
<br>mtDNAassembly-coverage.txt：包含每个 contig 和已知线粒体注释的覆盖率的文本文件；
<br>logassemble.txt：assembleMTgenome.py 脚本的日志文件；
<br>sorted.csv：包含预测概率超过 90% 的每个单倍群的表格。包括以下字段：

<br>N = 片段序列相对于 RSRS 的 SNP 数量；
<br>Nph = 在 Phylotree 中映射的 SNP 数量（在 N 中）；
<br>Nph_tot = 整个基因组中定义单倍群的 SNP 数量；
<br>Nph_exp = 片段区域中定义单倍群的 SNP 数量；
<br>P_Hg = 单倍群的预测百分比值（Nph/Nph_exp*100）；
<br>Missing sites = 在查询基因组中不存在但预期在其相应路径上的变异。这些变异也可能指向测序错误；


<br>merged_diff.csv：报告查询基因组与三个序列（RSRS、rCRS 和 hg_MHCS（Macro-Haplogroup Consensus Sequence））之间的 SNP；
<br>&lt;sample_name&gt;.csv：包含表格，其中报告了 Phylotree Build 15 中所有单倍群的相同数据，如 &lt;sequence_name&gt;.sorted.csv 文件，但不包括 Missing Sites 字段；
<br>annotation.csv：对 merged_diff.csv 文件的进一步解释，为每个 mt 变异等位基因提供多个注释，查询基因组和三个序列（RSRS、rCRS 和 hg_MHCS）之间：

<br>Sample = 样本名称；
<br>Variant Allele = 线粒体基因组中的核苷酸位置及变异等位基因；
<br>HF = VCF 文件中报告的异质性比例；
<br>CI_lower;CI_upper = 异质性比例置信区间的上下限；
<br>RSRS = 如果为“是”，则变异被 RSRS 识别；
<br>MHCS = 如果为“是”，则变异被 Macro-Haplogroup Consensus Sequence 识别；
<br>rCRS = 如果为“是”，则变异被 rCRS 识别；
<br>Haplogroup = 最佳预测单倍群；
<br>Other Haplogroups = 如果为“+”，则该变异定义了其他单倍群；
<br>Locus = 线粒体基因座；
<br>Nt Variability = SiteVar 变异性值；
<br>Codon Position = 密码子内的核苷酸位置；
<br>Aa Change = 氨基酸变化；
<br>Aa variability = MitVarProt 氨基酸变异性值；
<br>tRNA annotation = 线粒体 tRNA 基因的特定信息（在 tRNA 中的位置；tRNA 类型；三叶草二级结构区域；成熟核苷酸；特定位置在 tRNA 折叠中的作用）；
<br>Disease score = 综合疾病评分，作为非同义变异致病性预测评分的加权平均。详情参见相关出版物（PMID: 26621530）；
<br>RNA predictions = rRNA 基因中的 49 个变异和 tRNA 基因中的 207 个变异的评分（PMID: 24092330；PMID: 21882289；PMID: 23696415）。评分在 0 到 1 的范围内。rRNA 的阈值为 0.51，tRNA 的阈值为 0.31。低致病性低于固定阈值；
<br>MutPred pred = MutPred 预测（高致病性，低致病性）；
<br>MutPred Score = MutPred 致病性评分（0.000-1.000）；
<br>PolyPhen-2 HumDiv Pred = Polyphen-2 HumDiv 预测（良性，可能有害，可能有害，未知）；
<br>PolyPhen-2 HumDiv Prob = Polyphen-2 HumDiv 概率（0.000-1.000）；
<br>PolyPhen-2 HumVar Pred = Polyphen-2 HumVar 预测（良性，可能有害，可能有害，未知）；
<br>PolyPhen-2 HumVar Prob = Polyphen-2 HumVar 概率（0.000-1.000）；
<br>PANTHER Pred = 通过 SNPs&amp;GO 软件进行的 PANTHER 预测（中性，疾病，未分类）；
<br>PANTHER Prob = 通过 SNPs&amp;GO 软件进行的 PANTHER 概率（0.000-1.000）；
<br>PhD-SNP Pred = 通过 SNPs&amp;GO 软件进行的 PhD-SNP 预测（中性，疾病，未分类）；
<br>PhD-SNP Prob = 通过 SNPs&amp;GO 软件进行的 PhD-SNP 概率（0.000-1.000）；
<br>SNPs&amp;GO Pred = 通过 SNPs&amp;GO 软件进行的 SNPs&amp;GO 预测（中性，疾病，未分类）；
<br>SNPs&amp;GO Prob = 通过 SNPs&amp;GO 软件进行的 SNPs&amp;GO 概率（0.000-1.000）；
<br>Mitomap Associated Disease(s) = MITOMAP 疾病相关突变注释；
<br>Mitomap Homoplasmy = MITOMAP 同质性状态注释；
<br>Mitomap Heteroplasmy = MITOMAP 异质性状态注释；
<br>Somatic Mutations = MITOMAP 体细胞突变的细胞或组织类型注释；
<br>SM Homoplasmy = 体细胞突变的同质性状态注释；
<br>SM Heteroplasmy = 体细胞突变的异质性状态注释；
<br>ClinVar = ClinVar 疾病相关突变注释；
<br>OMIM Link = OMIM 条目链接；
<br>dbSNP ID = dbSNP 数据库中的 rs ID；
<br>Mamit-tRNA link = Mamit-tRNA 站点注释链接；
<br>PhastCons20Way = 使用 hg38+rCRS 作为参考序列计算的 20 个脊椎动物的 PhastCons 保守性评分；
<br>PhyloP20Way = 使用 hg38+rCRS 作为参考序列计算的 20 个脊椎动物的 PhyloP 保守性评分；
<br>AC/AN 1000 Genomes = 在 1000 Genomes 中找到的可能致病变异的等位基因计数与等位基因数量的比率；
<br>1000 Genomes Homoplasmy = 1000 Genomes 变异中的同质性状态注释；
<br>1000 Genomes Heteroplasmy = 1000 Genomes 变异中的异质性状态注释。




<br>警告：请注意，异质性比例和相关的置信区间仅会报告针对选择的参考序列进行读取映射的变异。<br><br>这些脚本位于 MToolBox 的 aux 文件夹中。<br>
<br>get_prioritized_var_and_summary.sh 是一个辅助脚本，用于从 MToolBox 的 annotation.csv 文件中生成 summary.txt 和 prioritized_variant.txt 文件。<br>
运行以下命令以获取脚本使用帮助：<br>
./get_prioritized_var_and_summary.sh
<br>filter_HF.py 是一个辅助脚本，用于过滤 MToolBox VCF 文件（版本 &lt; 1.2 生成的文件）的 HF 和 DP，并将多等位基因 SNP 分割为每行一个。<br>
python filter_HF.py 
<br>filter_HF_v2.py 是一个辅助脚本，用于过滤 MToolBox VCF 文件（版本 &gt;= 1.2 生成的文件）的 HF 和 DP，并将多等位基因 SNP 分割为每行一个。<br>
python filter_HF_v2.py
<br><br>python filter_HF_v2.py HG00119 HG00119.vcf 0.8 100 txt HG00119.txt No
复制<br><br>]]></description><link>软件\其它生信软件\k-s\mtoolbox.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/MToolBox.md</guid><pubDate>Sun, 28 Jul 2024 08:36:26 GMT</pubDate></item><item><title><![CDATA[mtPhyl 软件]]></title><description><![CDATA[ 
 <br><br>这是一个专注于线粒体 DNA 的系统发育的软件，具备很多功能，多篇文献提到。<br>
这个软件最初被放到谷歌云端协作平台，但是后来谷歌更新之后就找不到了。这里我放一个离线版本，可以正常使用。<a data-tooltip-position="top" aria-label="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/mtphyl5.003.zip?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1726414714&amp;Signature=W950pO420G5lWcBHZhtMzg4hffM%3D" rel="noopener nofollow" class="external-link" href="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/mtphyl5.003.zip?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1726414714&amp;Signature=W950pO420G5lWcBHZhtMzg4hffM%3D" target="_blank">下载地址</a><br><br>这个困扰了我很久，软件的输入的文件格式是 fasta，但是对格式有一定的要求，这里给一个<a data-tooltip-position="top" aria-label="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/mtPhyl%E6%A8%A1%E6%9D%BF.fasta?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1725514850&amp;Signature=v6%2BVF%2FEYQarPV3X6y%2F1rvpiJw0U%3D" rel="noopener nofollow" class="external-link" href="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/mtPhyl%E6%A8%A1%E6%9D%BF.fasta?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1725514850&amp;Signature=v6%2BVF%2FEYQarPV3X6y%2F1rvpiJw0U%3D" target="_blank">模板</a>。<br><br>输入的 ID 必须以 &gt;gi| 开头，然后后面再加上自己的 ID。例如：<br>&gt;gi|K1910
GATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCTCATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAAT
复制<br><br>
<br>点击 import
<br>extract 到一个文件夹
<br>选 add files from folder <br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409040956422.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409040959183.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
]]></description><link>软件\其它生信软件\k-s\mtphyl：数据导入.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/mtPhyl：数据导入.md</guid><pubDate>Wed, 04 Sep 2024 01:59:56 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409040956422.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409040956422.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[准备工作]]></title><description><![CDATA[ 
 <br><br>
<br>参考基因组：可以选用 GRCH37 或者 GRCH38 。

<br>参考基因组可以在 NCBI 下载。我在这里已经建立好了两个版本的索引，足以应对大多数情况。
<br>建立索引：利用 BWA 的 index。
<br>获得索引文件。


<br>下载 NUMTs-detection-1.0

<br>这个包可以在 Github 下载。但是正如作者所说，这些脚本已经不再维护。里面有很多语法已经被淘汰。地址： <a data-tooltip-position="top" aria-label="https://github.com/WeiWei060512/NUMTs-detection" rel="noopener nofollow" class="external-link" href="https://github.com/WeiWei060512/NUMTs-detection" target="_blank">WeiWei060512/NUMTs-detection: Detecting NUMTs from WGS (github.com)</a>
<br>解压至 Linux 系统。
<br>对里面的一些文件进行修改。


<br><br><br>修改目的：<br>
<br>无法使用模组，因为缺乏高性能计算环境，因此在这里注释掉。
<br>修改了输出的 split.bam。源代码最后一句删掉了相关文件，并且在该 shell 脚本的 Python 中也没有出现过这个文件。但是在另外一个 sh 中有用的，所以我建议最后还是不要删除。这个文件被指向了一个 wgs 的目录，这应该是一个错误。
<br>#! /bin/bash

################################################################################
## This script detects NUMTs from whole genome sequencing BAM files
## samtools, samblaster and blat need to be installed to run the pipeline
## samtools can be downloaded at http://www.htslib.org/download/
## samblaster can be downloaded at https://github.com/GregoryFaust/samblaster
## blat can be downloaded at http://hgdownload.soe.ucsc.edu/admin/exe/
################################################################################

## load modules on HPC
# module load samblaster/0.1.24
# module load samtools 
# module load Sambamba/0.6.6


INPUT_BAM=/home/luolintao/Reference_GRCH/INPUT_TEST/HG006_5X.bam # input WGS bam file
OUTPUT_DIR=/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT # output folder path
REF_GRCh38=/home/luolintao/Reference_GRCH/GRCh38_latest_genomic.fna # human reference genome

CLUSTER_SCRIPT='/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/scripts/searchNumtCluster_fromDiscordantReads.py'
BREAKPOINT_SCRIPT='/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/scripts/searchBreakpoint_fromblatoutputs.py'

SAMPLE_ID1="${INPUT_BAM##*/}"
SAMPLE_ID2=${SAMPLE_ID1%.bam}
OUTPUT="${OUTPUT_DIR}/${SAMPLE_ID2}"

INPUT_DISC="${OUTPUT}.mt.disc.sam"
# INPUT_SPLIT="${OUTPUT_wgs}.mt.split.sam" 我至今不能明白为什么这个前缀包含了一个wgs。可能只有上帝能明白。
INPUT_SPLIT="${OUTPUT}.mt.split.sam"

# 文件预处理
echo "正在使用samtools预处理文件!"
samtools view -@ 16 -m 10G -h -F 2 $INPUT_BAM | grep -e @ -e MT -e chrM | samtools sort -@ 16 -m 10G -n  | samtools view -h | samblaster --ignoreUnmated -e -d $INPUT_DISC -s $INPUT_SPLIT -o /dev/null
# 聚类查找
python3 $CLUSTER_SCRIPT ${SAMPLE_ID2} ${INPUT_BAM} ${INPUT_DISC}
echo "查找聚类已经完成，现在开始寻找断点!"


# 定义文件名
filelines=$(cat ${INPUT_DISC}.breakpointINPUT.tsv)


# 使用制表符作为分隔符读取文件的每一行，并将其字段分配给相应的变量
while IFS=$'\t' read -r sampleID cluster_no disFile splitFile wgsBAM chr start end; do
    # 去除 chr 字段中的多余字符（如括号和引号）
    chr=$(echo $chr | tr -d "(),'")    
    # 输出当前行的各个字段，方便调试
    echo "$sampleID $cluster_no $disFile $splitFile $wgsBAM $chr $start $end"    
    # 构建区域字符串，用于 samtools 提取指定区域
    REGION="${chr}:${start}-${end}"    
    # 构建输出文件的前缀路径
    OUTPUT="${OUTPUT_DIR}/${sampleID}_${chr}.${start}.${end}"    
    #使用 samtools 从 BAM 文件中提取指定区域的数据，并保存为 SAM 格式
    samtools view "${wgsBAM}" "${REGION}" &gt; "${OUTPUT}.sam"    
    # 使用 awk 过滤掉特定 CIGAR 值的行，并提取第1和第10列，将结果保存为 FASTA 格式
    awk '$6 !~ /150M|149M|148M|149S|148S/' "${OUTPUT}.sam" | cut -f1,10 &gt; "${OUTPUT}.fasta"
    # 使用 perl 脚本在每行前添加 '&gt;' 符号，符合 FASTA 格式要求
    perl -pi -e 's/^/&gt;/g' "${OUTPUT}.fasta"    
    # 使用 perl 脚本将制表符替换为换行符，符合 FASTA 格式要求
    perl -pi -e 's/\t/\n/g' "${OUTPUT}.fasta"    
    # 使用 BLAT 工具将 FASTA 文件比对到参考基因组，结果保存为 PSL 格式
    /home/luolintao/blat "${REF_GRCh38}" "${OUTPUT}.fasta" "${OUTPUT}.psl"    
    # 运行 Python 脚本处理 BLAT 生成的 PSL 文件，提取断点信息
    python3 "${BREAKPOINT_SCRIPT}" "${OUTPUT}.psl" "${sampleID}" "${chr}" "${start}" "${end}" "${OUTPUT}"
    # 删除临时生成的 FASTA 文件
    rm "${OUTPUT}.fasta"    
    # 删除临时生成的 SAM 文件
    rm "${OUTPUT}.sam"
done &lt;&lt;&lt; "$filelines"
复制<br><br>这个文件是上述 shell 需要调用的。但是里面存在一些问题：<br>
<br>不规范的缩进。
<br>不再被维护的 pandas 语法。<br>
为了不改变原有功能，我对部分语句进行了维护。使用的版本是 Python 3.9.15。<br>
修改之后的代码如下：
<br>#!/usr/bin/env python

################################################################################
## This script takes outputs from NUMT_detection.sh to generates NUMT clusters
################################################################################

import fileinput
import sys, os
import pandas as pd
import glob
import scipy.stats as stats
import numpy as np

#################### Extract cluster from mtDNA discordant sam files  #############################

def cluster(data, maxgap):
    data.sort()
    groups = [[data[0]]]
    for x in data[1:]:
        if abs(x - groups[-1][-1]) &lt;= maxgap:
            groups[-1].append(x)
        else:
            groups.append([x])
    return groups

sampleID, wgsBAM, input1 = sys.argv[1:]

sampleID = sampleID.replace(".mt.disc", "")

df0 = pd.read_csv(input1, names=['QNAME', 'FLAG', 'RNAME', 'POS', 'MAPQ', 'CIGAR', 'RNEXT', 'PNEXT', 'TLEN', 'SEQ', 'QUAL', 'SM', 'RG', 'NM', 'BC', 'OC', 'ZX', 'ZY', 'SA'], sep="\t", engine='python', comment="@")

df = df0[~df0.RNAME.str.contains("Un_|random|\.")]
df1 = df[(df["MAPQ"].astype(int) &gt; 0) &amp; ((df['RNAME'] == "MT") | (df['RNAME'] == "chrM") | (df['RNEXT'] == "MT") | (df['RNEXT'] == "chrM"))]

##### remove reads map to mtDNA #####
df3 = df1[~df1.RNAME.isin(['chrM', 'MT'])]

##### order by chromosome and pos #####
df3 = df3.sort_values(['RNAME', 'POS'])

##### look for the clutser by mapgap on pos #####
##### extract the clusters with number of elements no less than 5 #####

output1 = pd.DataFrame([])

df_chr = df3.groupby(['RNAME'])
for clusterID, myclusters in df_chr:
    myclusters['POS'] = myclusters['POS'].astype(int)
    sub_cluster = cluster(myclusters['POS'].tolist(), maxgap=500)
    for x in sub_cluster:
        if len(x) &gt;= 2:
            mycluster = x
            df_cluster = df3[df3.POS.isin(mycluster)]
            df_cluster_pairMT = df[df.QNAME.isin(df_cluster['QNAME'])]
            mt_cluster = cluster(df_cluster['PNEXT'].tolist(), maxgap=500)
            for y in mt_cluster:
                df_cluster_pairMT_out = df_cluster_pairMT[df_cluster_pairMT.PNEXT.isin(y)]
                df_cluster_pairMT_out = df_cluster_pairMT_out.assign(
                    subCluster_No=len(y),
                    Cluster_No=len(x),
                    Cluster_ID=f"{clusterID}_{min(df_cluster['POS'])}_{max(df_cluster['POS'])}_MTboth_{min(df_cluster_pairMT_out['PNEXT'])}_{max(df_cluster_pairMT_out['PNEXT'])}"
                )
                output = pd.concat([pd.DataFrame(), df_cluster_pairMT_out], ignore_index=True)

            output1 = pd.concat([output1, output])
            output1["IndividualID"] = sampleID
            if len(output1) != 0:
                output1['clusterID'] = output1['RNAME'].astype(str) + "_" + output1['Cluster_No'].astype(str)
                output2 = output1.groupby(['IndividualID', 'Cluster_ID', 'Cluster_No', 'subCluster_No']).size().to_frame('size').reset_index()
            else:
                continue

output1.to_csv(input1 + '.cluster.tsv', sep='\t', header=True, index=False)
output2.to_csv(input1 + '.cluster.summary.tsv', sep='\t', header=False, index=True)

##### generate cluster range for defining the breakpoints ######

output2['disFile'] = input1
output2['splitFile'] = input1.replace('disc', 'split')
output2['wgsBAM'] = wgsBAM
df_pos = pd.DataFrame(output2['Cluster_ID'].str.split('_').tolist(), columns=['chr', 'start', 'end', 'chrM', 'mtstart', 'mtend'])
del output2['Cluster_ID']
del output2['subCluster_No']
del output2['size']
output3 = pd.concat([output2, df_pos[['chr', 'start', 'end']]], axis=1)
output3 = output3.drop_duplicates(['chr', 'start', 'end'])
output3['start'] = output3['start'].astype(int) - 500
output3['end'] = output3['end'].astype(int) + 500 + 150
output3['Cluster_No'] = output3['Cluster_No'].astype(int)

##### output to file #####
output3.to_csv(input1 + '.breakpointINPUT.tsv', sep='\t', header=False, index=False)

复制<br><br>也是上述 shell 需要调用的。但是里面存在很大的问题：<br>
<br>使用了旧版本的 pandas 语法。令人遗憾的，新版本的语法似乎不能很好读取 blat 生成的 psl 文件，标题行存在很大的问题。为了不让原本的功能丧失，我只能够用最愚蠢的办法将数值转为字符串。尽管这会报错，但是并不影响最终的结果。
<br>在 GRCH38 版本中，染色体的名字是以 NCXXXXXX 命名的，不再使用了 chr。因此，需要重新对其进行映射。
<br>可以根据自己的需求就筛选过滤措施，这对于低深度的测序也许有一定的作用。<br>
修改之后的脚本：
<br>#!/usr/bin/env python
################################################################################
## This script takes outputs from searchNumtCluster_fromDiscordantReads.py and NUMT_detection.sh 
## to look for NUMT breakpoints
################################################################################

import sys, os
import pandas as pd

def classify_breakpoint(row, type='nu'):
    mismatchLEN = 3 # 默认是3 请在这里选择过滤措施，选择更大的数量会得到更多的结果，但是可能会并不会特别精确。
    readLEN = 150 # 默认是150 请在这里选择过滤措施，选择更长的长度会得到更多的结果，但是可能会并不会特别精确。
    if type == 'nu':
        if row['strand'] == "+" and row['Qend'] &gt;= readLEN - mismatchLEN:
            return "nu_Tstart_Bright"
        elif row['strand'] == "+" and row['Qstart'] &lt;= mismatchLEN:
            return "nu_Tend_Bleft"
        elif row['strand'] == "-":
            return "nu_NegStrand"
        else:
            return "nu_useLess"
    else:
        if row['strand'] == "+" and row['Qend'] &gt;= readLEN - mismatchLEN:
            return "mt_Tstart"
        elif row['strand'] == "+" and row['Qstart'] &lt;= mismatchLEN:
            return "mt_Tend"
        elif row['strand'] == "-" and row['Qend'] &gt;= readLEN - mismatchLEN:
            return "mt_Tend"
        elif row['strand'] == "-" and row['Qstart'] &lt;= mismatchLEN:
            return "mt_Tstart"
        else:
            return "mt_useLess"

# 从命令行读取输入参数
INPUT_PSL, SAMPLEID, CHR, START, END, OUTPUT = sys.argv[1:]
START, END = int(START), int(END)

# 读取数据并预处理
psl_columns = [
    "match", "misMatch", "repMatch", "Ns", "QgapCount", "QgapBases", "TgapCount", "TgapBases", "strand",
    "Qname", "Qsize", "Qstart", "Qend", "Tname", "Tsize", "Tstart", "Tend", "blockCount", "blockSizes",
    "qStarts", "tStarts"
]
df = pd.read_csv(INPUT_PSL, skiprows=5, sep="\t", names=psl_columns)
df['matchLEN'] = df['Tend'] - df['Tstart']

# 过滤数据，过滤措施
filtered_df = df[(df['matchLEN'] &lt; 170) &amp; (df['misMatch'] &lt;= 7)] # 默认是df[(df['matchLEN'] &lt; 140) &amp; (df['misMatch'] &lt;= 3)]请在这里选择过滤措施，选择更大的数量会得到更多的结果，但是可能会并不会特别精确。
filtered_df = filtered_df[(filtered_df['Tend'] &gt;= 140) | (filtered_df['Tend'] &lt;= 10)] # 默认是[(filtered_df['Tend'] &gt;= 147) | (filtered_df['Tend'] &lt;= 3)]请在这里选择过滤措施，选择更长的长度会得到更多的结果，但是可能会并不会特别精确。

# Tname映射
tname_mapping = {
    'NC_012920.1': 'MT',
    'NC_000001.11': 'chr1',
    'NC_000002.12': 'chr2',
    'NC_000003.12': 'chr3',
    'NC_000004.12': 'chr4',
    'NC_000005.10': 'chr5',
    'NC_000006.12': 'chr6',
    'NC_000007.14': 'chr7',
    'NC_000008.11': 'chr8',
    'NC_000009.12': 'chr9',
    'NC_000010.11': 'chr10',
    'NC_000011.10': 'chr11',
    'NC_000012.12': 'chr12',
    'NC_000013.11': 'chr13',
    'NC_000014.9': 'chr14',
    'NC_000015.10': 'chr15',
    'NC_000016.10': 'chr16',
    'NC_000017.11': 'chr17',
    'NC_000018.10': 'chr18',
    'NC_000019.10': 'chr19',
    'NC_000020.11': 'chr20',
    'NC_000021.9': 'chr21',
    'NC_000022.11': 'chr22',
    'NC_000023.11': 'chrX',
    'NC_000024.10': 'chrY'
}

filtered_df['Tname_mapped'] = filtered_df['Tname'].map(tname_mapping).fillna(filtered_df['Tname'])

# 分离线粒体和核序列
mt_df = filtered_df.loc[filtered_df['Tname_mapped'] == 'MT'].copy()
nu_df = filtered_df.loc[(filtered_df['Tname_mapped'] == CHR) &amp; (filtered_df['Tstart'] &gt; START) &amp; (filtered_df['Tend'] &lt; END)].copy()

if not nu_df.empty:
    # 应用分类函数
    nu_df.loc[:, 'pointGroup'] = nu_df.apply(classify_breakpoint, axis=1, type='nu')
    if not mt_df.empty:
        mt_df.loc[:, 'pointGroup'] = mt_df.apply(classify_breakpoint, axis=1, type='mt')

    nu_df.loc[:, 'Group'] = nu_df['pointGroup'].str.replace(r'_T.*B', '', regex=True)
    nu_df.loc[:, 'chr'] = CHR
    if not mt_df.empty:
        mt_df.loc[:, 'chr'] = 'chrM'

    def group_and_count(df, by_cols):
        return df.groupby(by_cols).size().reset_index(name="readsCount")

    # 核DNA断点
    nu_left = group_and_count(nu_df.loc[nu_df['pointGroup'] == 'nu_Tend_Bleft'], ['pointGroup', 'Group', 'chr', 'Tend', 'strand'])
    nu_right = group_and_count(nu_df.loc[nu_df['pointGroup'] == 'nu_Tstart_Bright'], ['pointGroup', 'Group', 'chr', 'Tstart', 'strand'])
    nu_both = pd.concat([nu_left, nu_right])

    # 同时映射到线粒体的核DNA断点
    nu_mt = nu_df.loc[nu_df['Qname'].isin(mt_df['Qname'])]
    nu_mt_left = group_and_count(nu_mt.loc[nu_mt['pointGroup'] == 'nu_Tend_Bleft'], ['pointGroup', 'Group', 'chr', 'Tend', 'strand'])
    nu_mt_right = group_and_count(nu_mt.loc[nu_mt['pointGroup'] == 'nu_Tstart_Bright'], ['pointGroup', 'Group', 'chr', 'Tstart', 'strand'])
    nu_mt_both = pd.concat([nu_mt_left, nu_mt_right])

    # 线粒体断点
    if not mt_df.empty:
        mt_tend = group_and_count(mt_df.loc[mt_df['pointGroup'] == 'mt_Tend'], ['pointGroup', 'chr', 'Tend', 'strand'])
        mt_tstart = group_and_count(mt_df.loc[mt_df['pointGroup'] == 'mt_Tstart'], ['pointGroup', 'chr', 'Tstart', 'strand'])
        mt_both = pd.concat([mt_tend, mt_tstart])
        mt_both['Group'] = 'UKn'

        # 同时映射到核DNA的线粒体断点
        mt_conf = pd.concat([
            group_and_count(mt_df.loc[(mt_df['Qname'].isin(nu_df.loc[nu_df['pointGroup'] == 'nu_Tend_Bleft', 'Qname'])) &amp; (mt_df['pointGroup'] == 'mt_Tstart')], ['pointGroup', 'chr', 'Tstart', 'strand']),
            group_and_count(mt_df.loc[(mt_df['Qname'].isin(nu_df.loc[nu_df['pointGroup'] == 'nu_Tend_Bleft', 'Qname'])) &amp; (mt_df['pointGroup'] == 'mt_Tend')], ['pointGroup', 'chr', 'Tend', 'strand']),
            group_and_count(mt_df.loc[(mt_df['Qname'].isin(nu_df.loc[nu_df['pointGroup'] == 'nu_Tstart_Bright', 'Qname'])) &amp; (mt_df['pointGroup'] == 'mt_Tstart')], ['pointGroup', 'chr', 'Tstart', 'strand']),
            group_and_count(mt_df.loc[(mt_df['Qname'].isin(nu_df.loc[nu_df['pointGroup'] == 'nu_Tstart_Bright', 'Qname'])) &amp; (mt_df['pointGroup'] == 'mt_Tend')], ['pointGroup', 'chr', 'Tend', 'strand'])
        ])

        # 捕获并忽略异常
        try:
            mt_conf['Group'] = mt_conf.apply(lambda row: 'mtLeft' if 'left' in row['pointGroup'] else 'mtRight', axis=1)
        except ValueError as e:
            print(f"尽管这里出现了一个问题: {e}, 但是我们并不打算解决它，因为它并不影响最终的结果。")

        all_breakpoints = pd.concat([nu_both, mt_both])
        mt_conf['sampleID'] = SAMPLEID
        mt_conf['Tstart'] = mt_conf['Tstart'].fillna(-1).astype(int)
        mt_conf['Tend'] = mt_conf['Tend'].fillna(-1).astype(int)
    else:
        all_breakpoints = nu_both
        mt_conf = pd.DataFrame()

    # 输出结果
    all_breakpoints['sampleID'] = SAMPLEID
    all_breakpoints['Tstart'] = all_breakpoints['Tstart'].fillna(-1).astype(int)
    all_breakpoints['Tend'] = all_breakpoints['Tend'].fillna(-1).astype(int)

    confident_breakpoints = pd.concat([nu_mt_both, mt_conf])
    confident_breakpoints['sampleID'] = SAMPLEID
    confident_breakpoints['Tstart'] = confident_breakpoints['Tstart'].fillna(-1).astype(int)
    confident_breakpoints['Tend'] = confident_breakpoints['Tend'].fillna(-1).astype(int)

    # 写入文件
    confident_breakpoints.to_csv(OUTPUT + '.Breakpoints.tsv', sep='\t', header=False, index=False)
else:
    print("过滤后没有发现核序列。")

复制<br><br><br>该文件包含断点信息。每行表示一个断点，通常包括以下列：<br>
<br>pointGroup: 断点组
<br>Group: 断点类别
<br>chr: 染色体
<br>Tend: 结束位置
<br>strand: 链方向
<br>readsCount: 读取计数
<br>Tstart: 起始位置
<br>sampleID: 样本ID
<br>示例数据：<br>nu_Tend_Bleft	nuleft	chr1	634078	+	1	-1	HG001
nu_Tstart_Bright	nuright	chr1	-1	+	1	633739	HG001
nu_Tstart_Bright	nuright	chr1	-1	+	1	633939	HG001
复制<br><br>该文件包含每个找到的断点的信息。每行表示一个断点区域，通常包括以下列：<br>
<br>sampleID: 样本ID
<br>cluster_no: 聚类编号
<br>disFile: 不一致的文件路径
<br>splitFile: 分裂的文件路径
<br>wgsBAM: WGS BAM文件路径
<br>chr: 染色体编号
<br>start: 起始位置
<br>end: 结束位置
<br>HG001	3	/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT/HG001.mt.disc.sam	/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT/HG001.mt.split.sam	/home/luolintao/Reference_GRCH/INPUT_TEST/HG001.bam	('chr1',)	633396	634563
HG001	2	/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT/HG001.mt.disc.sam	/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT/HG001.mt.split.sam	/home/luolintao/Reference_GRCH/INPUT_TEST/HG001.bam	('chr11',)	49861375	49863007
HG001	3	/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT/HG001.mt.disc.sam	/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT/HG001.mt.split.sam	/home/luolintao/Reference_GRCH/INPUT_TEST/HG001.bam	('chr5',)	32337638	32339245

复制<br><br>该文件包含聚类的摘要信息。每行表示一个聚类，通常包括以下列：<br>
<br>IndividualID: 样本ID
<br>Cluster_ID: 聚类ID
<br>Cluster_No: 聚类编号
<br>subCluster_No: 子聚类编号
<br>size: 聚类大小
<br>0	HG001	('chr1',)_633896_633913_MTboth_9735_9872	3	3	3
1	HG001	('chr11',)_49861875_49862357_MTboth_16089_16340	2	2	2
2	HG001	('chr5',)_32338138_32338595_MTboth_14835_14835	3	1	1
复制<br>在这里，需要具体解释一下：<br>
前三列很好理解。但是针对后面：<br>
<br>
第四列*(Cluster_No)：这是主聚类中读段的总数。这些读段是基于它们在染色体上的位置（POS）进行聚类的，聚类的条件是相邻读段之间的距离不超过 500 个碱基对。检测出的满足第三列条件的 NUMT 的数量。

<br>
第五列和第六列表示在这个聚类中的子聚类数目，它们是对这些读段进一步聚类后满足特定条件的读段数目。根据代码的逻辑，第五列（subCluster_No）和第六列（subCluster_No）的值在通常情况下会相同。(subCluster_No)：这是子聚类中读数的总数。这些读数是基于它们在配对读数的位置（PNEXT）进行进一步聚类的，聚类的条件同样是相邻读数之间的距离不超过 500 个碱基对。<br>
NUMTs 是线粒体 DNA 插入到核基因组中的片段，通常我们预期插入到核基因组中的 NUMT 片段会比它们的原始线粒体序列短或相等。然而，你的示例中出现了相反的情况，这确实需要解释。在你的例子中，核基因组中的序列长度（444 bp）大于线粒体中的序列长度（190 bp）。有几种可能的解释：

<br>
插入事件和重排：

<br>NUMTs 插入到核基因组中时，可能会发生重排或扩展，从而导致插入片段在核基因组中的长度增加。
<br>核基因组中的插入片段可能包含了其他序列，这些序列可能是插入事件导致的。


<br>
重复序列：

<br>核基因组中可能包含重复序列，这些重复序列与线粒体 DNA 部分相同，但总体长度较长。
<br>这些重复序列可能是由于插入事件或其他基因组重排造成的。


<br>
比对错误或读数拼接：

<br>在比对过程中，可能会出现错误，导致比对到核基因组的读数长度增加。
<br>读数拼接也可能会引入额外的序列，从而增加比对长度。


<br><br>该文件包含聚类的详细信息。每行表示一个聚类的具体信息，通常包括以下列：<br>
<br>QNAME: 序列名称
<br>FLAG: 标志
<br>RNAME: 参考序列名称
<br>POS: 位置
<br>MAPQ: 比对质量
<br>CIGAR: 比对描述
<br>RNEXT: 下一个参考名称
<br>PNEXT: 下一个位置
<br>TLEN: 模板长度
<br>SEQ: 序列
<br>QUAL: 质量
<br>SM: 样本
<br>RG: 读取组
<br>NM: 不匹配数
<br>BC: 条形码
<br>OC: 原始 CIGAR
<br>ZX: 自定义标记1
<br>ZY: 自定义标记2
<br>SA: 辅助比对
<br>subCluster_No: 子聚类编号
<br>Cluster_No: 聚类编号
<br>Cluster_ID: 聚类ID
<br>IndividualID: 样本ID
<br>clusterID: 聚类ID
<br>QNAME	FLAG	RNAME	POS	MAPQ	CIGAR	RNEXT	PNEXT	TLEN	SEQ	QUAL	SM	RG	NM	BC	OC	ZX	ZY	SA	subCluster_No	Cluster_No	Cluster_ID	IndividualID	clusterID
HISEQ1:11:H8GV6ADXX:1:2212:16190:45635	97	chr1	633900	32	148M	chrM	9735	0	TCTCTTATACTAGTATCCTTAATCATTTTTATTGCCACAACTAACCTCCTCGGACTCCTGCCTCACTCATTTACACCAACCACCCAACTATCTATAAACCTAGCCATGGCCATCCCCTTATGAGCGGGCGCAGTGATTATAGGCTTTC	C									3	3	('chr1',)_633896_633913_MTboth_9735_9872	HG001	chr1_3
HISEQ1:17:H947YADXX:2:2206:7902:6711	97	chr1	633913	32	148M	chrM	9872	0	TATCCTTAATCATTTTTATTGCCACAACTAACCTCCTCGGACTCCTGCCTCACTCATTTACACCAACCACCCAACTATCTATAAACCTAGCCATGGCCATCCCCTTATGAGCGGGCGCAGTGATTATAGGCTTTCGCTCTAAGATTAA										3	3	('chr1',)_633896_633913_MTboth_9735_9872	HG001	chr1_3
HWI-D00360:5:H814YADXX:2:2107:18825:98678	161	chr1	633896	20	148M	chrM	9818	0	CTGATCTCTTATACTAGTATCCTTAATCATTTTTATTGCCACAACTAACCTCCTCGGACTCCTGCCTCACTCATTTACACCAACCACCCAACTATCTATAAACCTAGCCATGGCCATCCCCTTATGAGCGCGCGCAGTGATTATAGGC	&lt;									3	3	('chr1',)_633896_633913_MTboth_9735_9872	HG001	chr1_3
HWI-D00360:5:H814YADXX:2:1106:18751:35433	113	chr11	49862357	70	148M	chrM	16089	0	GTATTTAATGTAATTTATAGAGAACCGTTTGAATGAAACTAAGTTTTTACTGGAAATACAGCAATTTTTTTTTTTTCAGAATATGCTTATAGGTGTGGAATTGCAGAGGCTGTTGGTCTTCCAAGTATTCCTGTTCATCCAATTGGAT	CEEDDDEECDDDDDDEDEDDCDB									2	2	('chr11',)_49861875_49862357_MTboth_16089_16340	HG001	chr11_2
HWI-D00360:6:H81VLADXX:1:2211:17678:67136	65	chr11	49861875	70	143M5S	chrM	16340	0	GGAAAGGAAAAGAAAAGAAAAGTAATGATTAGATTTATTTTTAAAGTCTTGCTTATTACAATGATGGAAAATTTGAGATTTTCCATCATATTGTATGTATTAGTTTTTTTCTTTTGTTGATTGAGCAGCATTCCATTGTGGGAAAATA	CCCFFFFFHHHHHJIIJJJJJJHHJIJJJJJJJJJJIIJJJJJJJJHIJJJJJJJJJJJJJJJJJJJJJJJJJJJJJHHHHHHHFFFFFFFEEEEEEEFFFDEDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEDEDDDDDDDDD	PG:Z:novoalign	AS:i:90	UQ:i:90	NM:i:1	MD:Z:22A120				2	2	('chr11',)_49861875_49862357_MTboth_16089_16340	HG001	chr11_2
HISEQ1:17:H947YADXX:2:1209:10750:98109	145	chr5	32338595	70	148M	chrM	14835	0	TTTTGTATTTTTAGTAGAGATGGGGTTTCTCCACATTGGTCAGGCTGGTCTCGAACTCCCAGCCTCAGGTGATCTGCCTGTCTTGGCCTCCCAAAGTGCTGGGATTACAGGCATGAGCCATTGCACCCAGCTGAGTAAATCAGGTTTT	BDDCC									1	3	('chr5',)_32338138_32338595_MTboth_14835_14835	HG001	chr5_3

复制<br><br><br>我真的是服了 circos 这个软件了。他很强大，的确，也很弱智。一点也不智能。真不敢相信在2024年我还能见到如同 WindowsXP 一般的软件。转念一想，科研嘛，大概都是这样的。不然人人都是科学家。<br><br><a data-tooltip-position="top" aria-label="https://circos.ca/software/download/" rel="noopener nofollow" class="external-link" href="https://circos.ca/software/download/" target="_blank">Download // CIRCOS Circular Genome Data Visualization</a><br>
将压缩包解压到 Linux 环境。其实这个软件 win 也能运行，但是不太方便。<br>运行 circos 需要一些环境配置，但是这些都不太难。官网查一查就行了，问问呢 ChatGPT 也不会出错。<br><br>修改代码如下：<br>################################################################################
## 本脚本生成circos图
## 需要安装Circos
## Circos可以从 http://circos.ca/software/download/circos/ 下载
################################################################################

# 引入Circos的housekeeping配置文件
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/housekeeping.conf&gt;&gt;

# Circos的一般设置
anti_aliasing* = no  # 禁用抗锯齿
max_points_per_track* = 30000  # 每个轨道的最大点数

# 引入颜色、字体和模式的配置文件
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/colors_fonts_patterns.conf&gt;&gt;
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/colors.brewer.conf&gt;&gt;
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/colors.ucsc.conf&gt;&gt;

# 引入NUMTs的ideogram配置文件
&lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/ideogram_NUMTs.conf&gt;&gt; 
# 引入NUMTs的刻度配置文件
&lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/ticks_NUMTs.conf&gt;&gt;

# karyotype设置，使用人类karyotype文件
&lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/karyotype_NUMTs.conf&gt;&gt;
karyotype* = /mnt/e/Scientifc_software/circos-current/circos-0.69-9/data/karyotype/karyotype.human.hg38.txt


# 染色体显示和缩放设置
# chromosomes_display_default = no
# chromosomes_units   = 0.1  # 染色体单位
# chromosomes     = /hs[1-9XYM]/  # 要显示的染色体
# chromosomes_reverse = hsM  # 反转M染色体
# chromosomes_radius = hsM:1.0r  # M染色体的半径
# chromosomes_scale   = hsM=0.5r  # M染色体的缩放

# 图片设置
&lt;image&gt;
angle_offset* = -90  # 角度偏移
file*  = CircosPlot_allBreakpoint.germline.png # 输出文件名
svg*   = no  # 使用SVG格式
png* = yes # 使用PNG格式
radius* = 1500p  # 减少图像半径以提高速度

# 引入图片配置文件
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/image.conf&gt;&gt;
&lt;/image&gt;

# NUMTs链接设置
&lt;links&gt;
&lt;link&gt;
ribbon           = no  # 不使用带状显示
bezier_radius    = 0r  # 贝塞尔曲线半径
crest                = 0.50  # 贝塞尔曲线的峰值
bezier_radius_purity = 1  # 贝塞尔曲线半径纯度
file		= /mnt/c/Users/victo/Desktop/circos_format_data_no_header.txt # mtDNA和核基因组NUMTs之间的链接文件
radius		= 0.999r  # 链接的半径
thickness	= 10  # 链接的厚度

# 引入链接规则配置文件
&lt;rules&gt;
&lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/links_allBreakpoints.soma.conf&gt;&gt;
&lt;/rules&gt;
&lt;/link&gt;
&lt;/links&gt;

# # 绘图设置
# &lt;plots&gt;
# # 引入中心的MitoGenes配置文件
# &lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/MitoGenes.centre.germline.conf&gt;&gt; weiwei的文件夹怎么可能找到？

# &lt;plot&gt;
# type            = tile  # 绘图类型为瓷砖
# file            = mtFragments_germline.txt  # mtFragments文件
# r1                      = 1.15r  # 外半径
# r0                      = 0.5r  # 内半径
# orientation             = out  # 方向为向外
# layers                  = 1  # 图层数
# margin                  = 0.1u  # 边距
# thickness               = 5  # 厚度
# padding                 = 0.1  # 内边距

# color                   = vdred  # 颜色为深红色
# layers_overflow         = grow  # 图层溢出时扩展

# stroke_thickness        = 1  # 描边厚度
# stroke_color            = white  # 描边颜色为白色

# &lt;/plot&gt;

# &lt;/plots&gt;

复制<br>注意
这里面的所有的路径一定要修改成自己的路径。推荐使用绝对路径。
<br><br>&lt;ideogram&gt;

&lt;spacing&gt;
# 默认间距设置为染色体半径的0.002倍
default = 0.002r

# 在边缘处是否显示轴断裂
axis_break_at_edge = yes

# 是否显示轴断裂
axis_break = yes

# 设置轴断裂的样式为2
axis_break_style = 2

# 断裂样式1的定义
&lt;break_style 1&gt;
stroke_color = black      # 描边颜色为黑色
fill_color = blue         # 填充颜色为蓝色
thickness = 0.25r         # 厚度为0.25倍染色体半径
stroke_thickness = 2p     # 描边厚度为2像素
&lt;/break_style&gt;

# 断裂样式2的定义
&lt;break_style 2&gt;
stroke_color = black      # 描边颜色为黑色
stroke_thickness = 5p     # 描边厚度为5像素
thickness = 2r            # 厚度为2倍染色体半径
&lt;/break_style&gt;

# 设置染色体hs1和hsM之间的间距为4倍染色体半径
&lt;pairwise hs1 hsM&gt;
spacing = 4r
&lt;/pairwise&gt;

# 设置染色体hsY和hsM之间的间距为4倍染色体半径
&lt;pairwise hsY hsM&gt;
spacing = 4r
&lt;/pairwise&gt;

&lt;/spacing&gt;

# Ideogram位置，填充和轮廓
radius = 0.85r               # 半径设置为0.85倍染色体半径
thickness = 80p              # 厚度为20像素
fill = yes                   # 是否填充
stroke_color = dgrey         # 描边颜色为深灰色
stroke_thickness = 0p        # 描边厚度为2像素

#label.conf
show_label = yes             # 是否显示标签
label_font = default         # 标签字体为默认字体
label_radius = 1.075r        # 标签半径为1.075倍染色体半径
label_size = 30              # 标签大小为30
label_parallel = yes         # 标签是否平行于染色体

##bands.conf
show_bands = yes             # 是否显示染色体带
fill_bands = yes             # 是否填充染色体带
band_transparency = 4        # 染色体带透明度

radius* = 0.85r              # 半径设置为0.85倍染色体半径

&lt;/ideogram&gt;

复制<br><br>karyotype = /mnt/e/Scientifc_software/circos-current/circos-0.69-9/data/karyotype/karyotype.human.hg38.txt # 指定karyotype文件的路径，该文件定义了染色体的基本信息（如名称、长度、带）。
chromosomes_display_default = no # 禁用默认显示所有染色体，只显示在chromosomes参数中明确指定的染色体。
chromosomes_units   = 0.1 # 设置染色体的单位长度，以百万碱基对（Mb）为单位（这里是0.1 Mb）。
chromosomes     = /hs[1-9XYM]/ # 通过正则表达式指定要显示的染色体，这里是人类的染色体1-9，X，Y和线粒体M。
chromosomes_reverse = hsM # 反转显示指定的染色体，这里是线粒体M。
# 在这里修改染色体的颜色
chromosomes_color   = hs1=black,hs2=orange,hs3=yellow,hs4=green,hs5=blue,hs6=dpurple,hs7=red,hs8=orange,hs9=yellow,hs10=green,hs11=blue,hs12=dpurple,hs13=red,hs14=orange,hs15=yellow,hs16=green,hs17=blue,hs18=dpurple,hs19=red,hs20=orange,hs21=yellow,hs22=green,hsX=blue,hsY=vdblue,hsM=vlblue
#chromosomes_color  = hsM=vlblue
chromosomes_radius = hsM:1r # 为线粒体染色体指定显示半径，这里是1.05倍的默认半径。
chromosomes_scale   = hsM=0.5r # 为线粒体染色体指定显示比例尺，这里是0.5倍的默认比例尺。

复制<br><br>&lt;rule&gt;
# 条件：在染色体hs1和线粒体染色体hsM之间
condition = between(hs1,hsM)
# 颜色：chr1（应在颜色定义文件中定义）
color = black
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs2和线粒体染色体hsM之间
condition = between(hs2,hsM)
# 颜色：chr2（应在颜色定义文件中定义）
color = orange
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs3和线粒体染色体hsM之间
condition = between(hs3,hsM)
# 颜色：chr3（应在颜色定义文件中定义）
color = yellow
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs4和线粒体染色体hsM之间
condition = between(hs4,hsM)
# 颜色：chr4（应在颜色定义文件中定义）
color = green
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs5和线粒体染色体hsM之间
condition = between(hs5,hsM)
# 颜色：chr5（应在颜色定义文件中定义）
color = blue
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs6和线粒体染色体hsM之间
condition = between(hs6,hsM)
# 颜色：chr6（应在颜色定义文件中定义）
color = cdpurple
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs7和线粒体染色体hsM之间
condition = between(hs7,hsM)
# 颜色：chr7（应在颜色定义文件中定义）
color = red
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs8和线粒体染色体hsM之间
condition = between(hs8,hsM)
# 颜色：chr8（应在颜色定义文件中定义）
color = orange
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs9和线粒体染色体hsM之间
condition = between(hs9,hsM)
# 颜色：chr9（应在颜色定义文件中定义）
color = yellow
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs10和线粒体染色体hsM之间
condition = between(hs10,hsM)
# 颜色：chr10（应在颜色定义文件中定义）
color = green
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs11和线粒体染色体hsM之间
condition = between(hs11,hsM)
# 颜色：chr11（应在颜色定义文件中定义）
color = blue
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs12和线粒体染色体hsM之间
condition = between(hs12,hsM)
# 颜色：chr12（应在颜色定义文件中定义）
color = dpurple
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs13和线粒体染色体hsM之间
condition = between(hs13,hsM)
# 颜色：chr13（应在颜色定义文件中定义）
color = red
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs14和线粒体染色体hsM之间
condition = between(hs14,hsM)
# 颜色：chr14（应在颜色定义文件中定义）
color = orange
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs15和线粒体染色体hsM之间
condition = between(hs15,hsM)
# 颜色：chr15（应在颜色定义文件中定义）
color = yellow
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs16和线粒体染色体hsM之间
condition = between(hs16,hsM)
# 颜色：chr16（应在颜色定义文件中定义）
color = green
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs17和线粒体染色体hsM之间
condition = between(hs17,hsM)
# 颜色：chr17（应在颜色定义文件中定义）
color = blue
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs18和线粒体染色体hsM之间
condition = between(hs18,hsM)
# 颜色：chr18（应在颜色定义文件中定义）
color = dpurple
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs19和线粒体染色体hsM之间
condition = between(hs19,hsM)
# 颜色：chr19（应在颜色定义文件中定义）
color = red
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs20和线粒体染色体hsM之间
condition = between(hs20,hsM)
# 颜色：chr20（应在颜色定义文件中定义）
color = orange
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs21和线粒体染色体hsM之间
condition = between(hs21,hsM)
# 颜色：chr21（应在颜色定义文件中定义）
color = yellow
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs22和线粒体染色体hsM之间
condition = between(hs22,hsM)
# 颜色：chr22（应在颜色定义文件中定义）
color = green
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hsX和线粒体染色体hsM之间
condition = between(hsX,hsM)
# 颜色：chrx（应在颜色定义文件中定义）
color = blue
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hsY和线粒体染色体hsM之间
condition = between(hsY,hsM)
# 颜色：chry（应在颜色定义文件中定义）
color = vdblue
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

复制<br><br># 是否显示刻度
show_ticks = yes
# 是否显示刻度标签
show_tick_labels = yes
&lt;ticks&gt;
# 刻度的半径，设置在染色体外侧半径+10像素的位置
radius = dims(ideogram,radius_outer) + 10p
# 刻度线的厚度
thickness = 3p
# 刻度线的方向，设置为向外
orientation = out
# 刻度线的颜色
color = black
# 刻度标签的大小
size = 12p
# 标签的偏移量
label_offset = 5p
# 标签的格式，这里设置为显示整数
format = %d
&lt;tick&gt;
# 默认情况下不显示刻度
chromosomes_display_default = no
# 仅对线粒体染色体显示刻度
chromosomes = hsM
# 刻度的间隔，设置为2000
spacing = 2000
# 是否显示刻度标签
show_label = yes
# 标签的半径，设置在染色体外侧半径+50像素的位置
label_radius = dims(ideogram,radius_outer) + 50p
# 标签是否平行于刻度线，这里设置为否
label_parallel = no
# 标签的大小
label_size = 30p
&lt;/tick&gt;
&lt;/ticks&gt;

复制<br>修改的地方有几点：<br>
<br>排除了一些指代不明的路径：最显然的就是 MitoGenes.centre.germline.conf 这个配置文件中的路径。里面指向了一个非常有趣的路径：/home/wwei1/Scripts/Circos/MitoGenes_codingGenes.txt。嗯，我很确定这一定是作者的私人电脑。
<br>添加了大量的注释，因为我不是很了解 Pl 语法，所以我只能这样才能看得懂。我觉得 pl 有点像 Latex，都是分片段式的写作。
<br>使用方法：<br>/mnt/e/Scientifc_software/circos-current/circos-0.69-9/bin/circos -conf /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/circos_allNUMTs.conf
复制<br>记得改路径！<br><br><br>这个脚本可以把生成出来的 mt.disc.sam.cluster.tsv 文件转成 circos 能够识别的格式。<br><br>QNAME	FLAG	RNAME	POS	MAPQ	CIGAR	RNEXT	PNEXT	TLEN	SEQ	QUAL	SM	RG	NM	BC	OC	ZX	ZY	SA	subCluster_No	Cluster_No	Cluster_ID	IndividualID	clusterID
HISEQ1:20:H9V1RADXX:2:2103:12132:43712	81	chr1	633911	28	148M	chrM	10226	0	AGTATCCTTAATCATTTTTATTGCCACAACTAACCTCCTCGGACTCCTGCCTCACTCATTTACACCAACCACCCAACTATCTATAAACCTAGCCATGGCCATCCCCTTATGAGCGGGCGCAGTGATTATAGGCTTTCGCTCTAAGATT	CDDDDDDDEEDDDDDDDDDDDDDDDCDC									1	3	('chr1',)_633902_633918_MTboth_10226_10226	HG002_5X	chr1_3
HISEQ1:18:H8VC6ADXX:1:1215:7921:64214	177	chr11	49862122	70	148M	chrM	16373	0	CTTGTGGGCATGTGCTCATCTTTCTAGAGTAAATACCCAGTAATGGAATTGCTGTGCCATAGTGCACATTTCTGCTTGACATTGCTTTTTAAAAGAGTTACCTTAAGTGATTGTATAATTTTAGCCTAAATTATCACAAGCATTGTAT	DD									4	4	('chr11',)_49862020_49862289_MTboth_16095_16391	HG002_5X	chr11_4
HISEQ1:18:H8VC6ADXX:1:2103:3036:6488	177	chr11	49862289	70	148M	chrM	16095	0	CATTCTCGCTACATTTGAATTGTTAATCTGTTTTTCTTTAGCAATTCTAGCAAATGTGAAATTAGAATGTATTTAATGTAATTTATAGAGAACCGTTTGAATGAAACTAAGTTTTTACTGGAAATACAGCAATTTTTTTTTTTTCAGA	C&gt;500&lt;5(C									4	4	('chr11',)_49862020_49862289_MTboth_16095_16391	HG002_5X	chr11_4
HISEQ1:19:H8VDAADXX:2:2201:6106:14884	177	chr11	49862020	70	3S145M	chrM	16338	0	GAAATACTATGGATTGTTTATTCACTCTTCTGTTAGAAACCTGGACTTTGTCTAATATTTGGCTAATATAAACATGGCTGTTTTGAACAATATTGTACACGTCTTCTTGTGGGCATGTGCTCATCTTTCTAGAGTAAATACCCAGTAA	EEEDC									4	4	('chr11',)_49862020_49862289_MTboth_16095_16391	HG002_5X	chr11_4
HISEQ1:20:H9V1RADXX:1:1101:17382:26035	113	chr11	49862183	70	148M	chrM	16391	0	GTGCACATTTCTGCTTGACATTGCTTTTTAAAAGAGTTACCTTAAGTGATTGTATAATTTTAGCCTAAATTATCACAAGCATTGTATGAGGATTTCAGTTGCTCCACATTCTCGCTACATTTGAATTGTTAATCTGTTTTACTTTAGC										4	4	('chr11',)_49862020_49862289_MTboth_16095_16391	HG002_5X	chr11_4
HISEQ1:18:H8VC6ADXX:1:1109:1327:84770	81	chr21	9676786	32	148M	chrM	12811	0	TATGTGACTATTTGCATGTTACAGCAGTGTGTCAGTGTGCTGTGTGAAGTGTTTTCATGTGTGTGACTATTTCCGTGTTATAGCAGTGTGTCCGTATGCTGTGTGAAGTGTTTTCGTGTATATGACTATTTGCGTGTTACAGCAGTGT	CDDDDCACDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDBCCCCDCDDDDDDDDDDDDDDDDEDDDDDDDDDDEEEEEEFFFFFFHHHGHIJIIHJIIIJJJJJJJJJJJJJJJJJJJJJJJIIJJJJJJJJJJHHHHHFFFFFCCC	PG:Z:novoalign	AS:i:0	UQ:i:0	NM:i:0	MD:Z:148				5	5	('chr21',)_9676197_9676786_MTboth_12389_12811	HG002_5X	chr21_5
HISEQ1:18:H8VC6ADXX:2:1104:13981:10006	97	chr21	9676333	28	148M	chrM	12706	0	GTGTTATAGCAGTGTGTCAGTGTGCTGCGTGACGTGTTTTCATGTGTATATGAGTATTTGTGTGTTATAGCCATGTGTCAGTGTGCTGTGTGTTTTGTTTATGTGACTATTTGCGTGTTATAGCAGTGTGTCAGTGTGCTGTGTGAAG	B									5	5	('chr21',)_9676197_9676786_MTboth_12389_12811	HG002_5X	chr21_5
HISEQ1:19:H8VDAADXX:2:2203:3229:99021	97	chr21	9676197	30	148M	chrM	12389	0	TCATGTGTATATGACTATTTGCATGTTATAGCAGTGTGTCAGTGTGCTGTGTGACTTTGGTGTATGTGACTATTTGCATGTTACAGCAGTGTGTCAGTGTGCTGTGGGAAGGGTTTTCATGTATATGACTATTTGCGTGTTATGGCAG	CCCFFFFDHHHHHJJJJJJJJJJJJJJJJJJJJJIIIIJJJJHIIIJJJHIHIJJJJJJJGGGJIIHIIJJJJJJJJJJJIJJJJJJHHHHEHFFFFDEDCCCECEDDBDDDD&lt;ADDDDDCCDEEEEEDDDDEEEDDDDDDCDDCDDB	PG:Z:novoalign	AS:i:60	UQ:i:60	NM:i:2	MD:Z:106T36A4				5	5	('chr21',)_9676197_9676786_MTboth_12389_12811	HG002_5X	chr21_5
HISEQ1:20:H9V1RADXX:2:2104:5110:91237	97	chr21	9676218	32	148M	chrM	12746	0	CATGTTATAGCAGTGTGTCAGTGTGCTGTGTGACTTTGGTGTATGTGACTATTTGCATGTTACAGCAGTGTGTCAGTGTGCTGTGGGAAGGGTTTTCATGTATATGACTATTTGCGTGTTATAGCAGTGTGTCAGTGTGCTGCGTGAC										5	5	('chr21',)_9676197_9676786_MTboth_12389_12811	HG002_5X	chr21_5
HISEQ1:20:H9V1RADXX:2:2106:12761:29990	161	chr21	9676198	17	148M	chrM	12452	0	CATGTGTATATGACTATTTGCATGTTATAGCAGTGTGTCAGTGTGCTGTGTGACTTTGGTGTATGTGACTATTTGCATGTTACAGCAGTGTGTCAGTGTGCTGTGGGAAGGGTTTTCATTTATATGACTATTTGCGTGTTATAGCAGT	CCCFFFFDHHGBHGIGIJJIIIGHEJJGCEHJJJJIIGIJIAHHIJFI&gt;GCFHHBGGGCE=8BFHGICGHICHIIB									5	5	('chr21',)_9676197_9676786_MTboth_12389_12811	HG002_5X	chr21_5
HISEQ1:20:H9V1RADXX:1:2110:10981:37943	81	chr5	32338499	70	148M	chrM	14831	0	CTCACTACAACCTCCGCCTCCCAGGTTCAAGAGATTCTTCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCATGTGCCACTGTGCCCAGCTAATTTTGTATTTTTAGTAGAGATGGGGTTTCTCCACATTGGTCAGGCTGGTCTC	AECCDDDDB?DDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDBBBDDDBDDDDDDDDDDDDDEEEEEEEEFFFFFFHHHEJJJJJJIJJJJJJJJJJJJJIIJJJJJJIJJJJJJJJJJJJJJJJJIJJJIJJHHHHHFFFFFCCC	PG:Z:novoalign	AS:i:0	UQ:i:0	NM:i:0	MD:Z:148				1	3	('chr5',)_32338282_32338638_MTboth_14831_14831	HG002_5X	chr5_3
HISEQ1:18:H8VC6ADXX:1:2114:15204:54396	113	chr9	129996	70	148M	chrM	6262	0	GCATATATGTTACTGTACTGAACAGTGTATGGAAATAATAACGCAATGGTAAGTATTTGCGTGACAGTAATTTTTCAGCTCCATCGTAATCTTATGCAGTCTGACTAAAACGCTGTTACGCGGTGCATGACTATACTTATTTTTAAAT	DEEEEDDDDDDDEDDEDDEDDCDDDDDDEEEEEEEEDDDDDDDDDDCDDEDDDDDDDDDDDDDEDDDDDDDDDDEEEEDFFFFHHHHJJJJIJJJJJJJJJIHGJJJJJHJJJJJIHGJJJJJJJJJJJIJJIHFHHHHHFFFFFCCC	PG:Z:novoalign	AS:i:30	UQ:i:30	NM:i:1	MD:Z:118T29				2	2	('chr9',)_129555_129996_MTboth_6262_6296	HG002_5X	chr9_2
HISEQ1:18:H8VC6ADXX:2:2203:12359:8789	65	chr9	129555	70	148M	chrM	6296	0	AGCCAGTCACAGAAGGACAAATATTGCATGAATCCACTAATATCAGGTGTCTAAAACAGTGAAACTCATCAAATCAGAAAGTAAAACGGTGGTTACCAGGGGTGAGAGGGAGACGAAAATTGGGGGGGGCTGTTCAATGGGGATAATT	CCCFFFDFHHFGHJJJBHIJJJIJJJIJJJIJJJJGIIGIIJIJJJJBFGIIIIJJGJG?FHIJJJJJIJJIJGIJGJHGHAEHHFFFDACD									2	2	('chr9',)_129555_129996_MTboth_6262_6296	HG002_5X	chr9_2

复制<br><br>import pandas as pd

# Load the uploaded file
file_path = '/mnt/c/Users/victo/Desktop/HG002_5X.mt.disc.sam.cluster.tsv'
data = pd.read_csv(file_path, sep='\t')

# Extract the relevant column
cluster_id_col = data['Cluster_ID']

# Define a function to convert the Cluster_ID column into the desired format
def convert_to_circos_format(cluster_id):
    parts = cluster_id.split('_')
    hs1 = parts[0].replace("('", "").replace("',)", "")
    start1 = parts[1]
    end1 = parts[2]
    hsM = 'hsM'
    startM = parts[4]
    endM = parts[5]
    return f"{hs1} {start1} {end1} {hsM} {startM} {endM}"

# Apply the function to the Cluster_ID column
circos_format_data = cluster_id_col.apply(convert_to_circos_format)

# Create a DataFrame from the results
circos_format_df = circos_format_data.str.split(expand=True)
circos_format_df.columns = ['hs1', 'start1', 'end1', 'hsM', 'startM', 'endM']

# Remove the header and replace 'chr' with 'hs'
circos_format_df_no_header = circos_format_df.replace({'chr': 'hs'}, regex=True)

# Save the result to a file without the header
output_file_path = '/mnt/c/Users/victo/Desktop/circos_format_data_no_header.txt'
circos_format_df_no_header.to_csv(output_file_path, sep=' ', index=False, header=False)

print(f"File saved to {output_file_path}")

复制<br><br>hs1 633902 633918 hsM 10226 10226
hs11 49862020 49862289 hsM 16095 16391
hs14 49862020 49862289 hsM 16095 16391
hs13 49862020 49862289 hsM 16095 16391
hs11 49862020 49862289 hsM 16095 16391
hs12 49862020 49862289 hsM 16095 16391
hs4 9676197 9676786 hsM 12389 12811
hs4 9676197 9676786 hsM 12389 12811
hs4 9676197 9676786 hsM 12389 12811
hs4 9676197 9676786 hsM 12389 12811
hs3 9676197 9676786 hsM 12389 12811
hs21 9676197 9676786 hsM 12389 12811
hs20 9676197 9676786 hsM 12389 12811
hs21 9676197 9676786 hsM 12389 12811
hs5 32338282 32338638 hsM 14831 14831
hs9 129555 129996 hsM 6262 6296
hsy 129555 129996 hsM 6262 6296
复制]]></description><link>软件\其它生信软件\k-s\numt-detector.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/NUMT-detector.md</guid><pubDate>Sun, 28 Jul 2024 08:36:36 GMT</pubDate></item><item><title><![CDATA[NUMT-detector错误排查]]></title><description><![CDATA[ 
 <br>7个 Python 脚本<br>4个 shell 脚本<br>
<br>mtVariantCalling.sh
<br>nanopolish_methylationDetection.sh
<br>NUMTs_detection.sh
<br>VarDetection_fromDiscSplitReads.sh
<br>
<br>searchNumtCluster_fromDiscordantReads.py
<br>searchBreakpoint_fromblatoutputs.py
<br>
<br>enrichment_creatingRefgenome.py
<br>enrichment_simulation.py
<br>generateVariantTable.Human.py
<br>generateVariantTable.HumanChimp.py
<br>groupNumtCluster_fromMultipleSamples.py
<br>Turn_cluster_to_circos.py<br>6个 circos 脚本<br>
<br>circos_allNUMTs.conf
<br>ticks_NUMTs.conf
<br>MitoGenes.centre.germline.conf
<br>links_allBreakpoints.soma.conf
<br>karyotype_NUMTs.conf
<br>ideogram_NUMTs.conf
<br>NUMTs-detection-1.0压缩包<br>根据分析结果的 NUMTs 断点进行可视化<br>CIRCOS软件的使用<br>################################################################################
## 本脚本生成circos图
## 需要安装Circos
## Circos可以从 http://circos.ca/software/download/circos/ 下载
################################################################################

# 引入Circos的housekeeping配置文件
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/housekeeping.conf&gt;&gt;

# Circos的一般设置
anti_aliasing* = no  # 禁用抗锯齿
max_points_per_track* = 30000  # 每个轨道的最大点数

# 引入颜色、字体和模式的配置文件
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/colors_fonts_patterns.conf&gt;&gt;
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/colors.brewer.conf&gt;&gt;
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/colors.ucsc.conf&gt;&gt;

# 引入NUMTs的ideogram配置文件
&lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/ideogram_NUMTs.conf&gt;&gt; 
# 引入NUMTs的刻度配置文件
&lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/ticks_NUMTs.conf&gt;&gt;

# karyotype设置，使用人类karyotype文件
&lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/karyotype_NUMTs.conf&gt;&gt;
karyotype* = /mnt/e/Scientifc_software/circos-current/circos-0.69-9/data/karyotype/karyotype.human.hg38.txt


# 染色体显示和缩放设置
# chromosomes_display_default = no
# chromosomes_units   = 0.1  # 染色体单位
# chromosomes     = /hs[1-9XYM]/  # 要显示的染色体
# chromosomes_reverse = hsM  # 反转M染色体
# chromosomes_radius = hsM:1.0r  # M染色体的半径
# chromosomes_scale   = hsM=0.5r  # M染色体的缩放

# 图片设置
&lt;image&gt;
angle_offset* = -90  # 角度偏移
file*  = CircosPlot_allBreakpoint.germline.png # 输出文件名
svg*   = no  # 使用SVG格式
png* = yes # 使用PNG格式
radius* = 1500p  # 减少图像半径以提高速度

# 引入图片配置文件
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/image.conf&gt;&gt;
&lt;/image&gt;

# NUMTs链接设置
&lt;links&gt;
&lt;link&gt;
ribbon           = no  # 不使用带状显示
bezier_radius    = 0r  # 贝塞尔曲线半径
crest                = 0.50  # 贝塞尔曲线的峰值
bezier_radius_purity = 1  # 贝塞尔曲线半径纯度
file		= /mnt/c/Users/victo/Desktop/circos_format_data_no_header.txt # mtDNA和核基因组NUMTs之间的链接文件
radius		= 0.999r  # 链接的半径
thickness	= 10  # 链接的厚度

# 引入链接规则配置文件
&lt;rules&gt;
&lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/links_allBreakpoints.soma.conf&gt;&gt;
&lt;/rules&gt; 
&lt;/link&gt;
&lt;/links&gt;

# # 绘图设置
# &lt;plots&gt;
# # 引入中心的MitoGenes配置文件
# &lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/MitoGenes.centre.germline.conf&gt;&gt; weiwei的文件夹怎么可能找到？

# &lt;plot&gt;
# type            = tile  # 绘图类型为瓷砖
# file            = mtFragments_germline.txt  # mtFragments文件
# r1                      = 1.15r  # 外半径
# r0                      = 0.5r  # 内半径
# orientation             = out  # 方向为向外
# layers                  = 1  # 图层数
# margin                  = 0.1u  # 边距
# thickness               = 5  # 厚度
# padding                 = 0.1  # 内边距

# color                   = vdred  # 颜色为深红色
# layers_overflow         = grow  # 图层溢出时扩展

# stroke_thickness        = 1  # 描边厚度
# stroke_color            = white  # 描边颜色为白色

# &lt;/plot&gt;

# &lt;/plots&gt;

复制<br>运行 /home/luolintao/NUMTs-detection-1.0/scripts/NUMTs_detection.sh<br>Python 的语法太旧了
缩进问题<br>
路径引用不正确。
<br>Python 格式问题
字符串和数值的错误引用。
<br>shell 语法问题
cut 语法切出来的名字不对，加了很多莫名其妙的_。
<br>/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/scripts/searchBreakpoint_fromblatoutputs.py<br>未被使用的 split 文件
虽然定义了了该文件的路径，但是整个脚本中并没有传递这个参数。
<br>路径不明
有些 conf 指向软件默认安装目录，但有些不是<br>
有些 conf 指向作者的私人电脑，但是我没有找到这些文件
<br>多重定义
有些 conf 对于同一个变量进行了多次定义，导致软件报错。<br>
软件操作很繁琐，每次报错只会报一个错，排查起来过于浪费时间。
<br># chrM Genes
&lt;plot&gt;
type            = heatmap
file            = /home/wwei1/Scripts/Circos/MitoGenes_Dloop.txt
r1                      = 0.4r
r0                      = 0.25r
color   = pastel1-4-qual-1
&lt;/plot&gt;

&lt;plot&gt;
type            = heatmap
file            = /home/wwei1/Scripts/Circos/MitoGenes_codingGenes.txt
r1                      = 0.4r
r0                      = 0.25r
color   = pastel1-4-qual-2
&lt;/plot&gt;

复制<br><br>
<br>参考基因组：可以选用 GRCH37 或者 GRCH38 。

<br>参考基因组可以在 NCBI 下载。我在这里已经建立好了两个版本的索引，足以应对大多数情况。
<br>建立索引：利用 BWA 的 index。
<br>获得索引文件。


<br>下载 NUMTs-detection-1.0

<br>这个包可以在 Github 下载。但是正如作者所说，这些脚本已经不再维护。里面有很多语法已经被淘汰。地址： <a data-tooltip-position="top" aria-label="https://github.com/WeiWei060512/NUMTs-detection" rel="noopener nofollow" class="external-link" href="https://github.com/WeiWei060512/NUMTs-detection" target="_blank">WeiWei060512/NUMTs-detection: Detecting NUMTs from WGS (github.com)</a>
<br>解压至 Linux 系统。
<br>对里面的一些文件进行修改。


<br><br><br>修改目的：<br>
<br>无法使用模组，因为缺乏高性能计算环境，因此在这里注释掉。
<br>修改了输出的 split.bam。源代码最后一句删掉了相关文件，并且在该 shell 脚本的 Python 中也没有出现过这个文件。但是在另外一个 sh 中有用的，所以我建议最后还是不要删除。这个文件被指向了一个 wgs 的目录，这应该是一个错误。
<br>#! /bin/bash

################################################################################
## This script detects NUMTs from whole genome sequencing BAM files
## samtools, samblaster and blat need to be installed to run the pipeline
## samtools can be downloaded at http://www.htslib.org/download/
## samblaster can be downloaded at https://github.com/GregoryFaust/samblaster
## blat can be downloaded at http://hgdownload.soe.ucsc.edu/admin/exe/
################################################################################

## load modules on HPC
# module load samblaster/0.1.24
# module load samtools 
# module load Sambamba/0.6.6


INPUT_BAM=/home/luolintao/Reference_GRCH/INPUT_TEST/HG006_5X.bam # input WGS bam file
OUTPUT_DIR=/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT # output folder path
REF_GRCh38=/home/luolintao/Reference_GRCH/GRCh38_latest_genomic.fna # human reference genome

CLUSTER_SCRIPT='/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/scripts/searchNumtCluster_fromDiscordantReads.py'
BREAKPOINT_SCRIPT='/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/scripts/searchBreakpoint_fromblatoutputs.py'

SAMPLE_ID1="${INPUT_BAM##*/}"
SAMPLE_ID2=${SAMPLE_ID1%.bam}
OUTPUT="${OUTPUT_DIR}/${SAMPLE_ID2}"

INPUT_DISC="${OUTPUT}.mt.disc.sam"
# INPUT_SPLIT="${OUTPUT_wgs}.mt.split.sam" 我至今不能明白为什么这个前缀包含了一个wgs。可能只有上帝能明白。
INPUT_SPLIT="${OUTPUT}.mt.split.sam"

# 文件预处理
echo "正在使用samtools预处理文件!"
samtools view -@ 16 -m 10G -h -F 2 $INPUT_BAM | grep -e @ -e MT -e chrM | samtools sort -@ 16 -m 10G -n  | samtools view -h | samblaster --ignoreUnmated -e -d $INPUT_DISC -s $INPUT_SPLIT -o /dev/null
# 聚类查找
python3 $CLUSTER_SCRIPT ${SAMPLE_ID2} ${INPUT_BAM} ${INPUT_DISC}
echo "查找聚类已经完成，现在开始寻找断点!"


# 定义文件名
filelines=$(cat ${INPUT_DISC}.breakpointINPUT.tsv)


# 使用制表符作为分隔符读取文件的每一行，并将其字段分配给相应的变量
while IFS=$'\t' read -r sampleID cluster_no disFile splitFile wgsBAM chr start end; do
    # 去除 chr 字段中的多余字符（如括号和引号）
    chr=$(echo $chr | tr -d "(),'")    
    # 输出当前行的各个字段，方便调试
    echo "$sampleID $cluster_no $disFile $splitFile $wgsBAM $chr $start $end"    
    # 构建区域字符串，用于 samtools 提取指定区域
    REGION="${chr}:${start}-${end}"    
    # 构建输出文件的前缀路径
    OUTPUT="${OUTPUT_DIR}/${sampleID}_${chr}.${start}.${end}"    
    #使用 samtools 从 BAM 文件中提取指定区域的数据，并保存为 SAM 格式
    samtools view "${wgsBAM}" "${REGION}" &gt; "${OUTPUT}.sam"    
    # 使用 awk 过滤掉特定 CIGAR 值的行，并提取第1和第10列，将结果保存为 FASTA 格式
    awk '$6 !~ /150M|149M|148M|149S|148S/' "${OUTPUT}.sam" | cut -f1,10 &gt; "${OUTPUT}.fasta"
    # 使用 perl 脚本在每行前添加 '&gt;' 符号，符合 FASTA 格式要求
    perl -pi -e 's/^/&gt;/g' "${OUTPUT}.fasta"    
    # 使用 perl 脚本将制表符替换为换行符，符合 FASTA 格式要求
    perl -pi -e 's/\t/\n/g' "${OUTPUT}.fasta"    
    # 使用 BLAT 工具将 FASTA 文件比对到参考基因组，结果保存为 PSL 格式
    /home/luolintao/blat "${REF_GRCh38}" "${OUTPUT}.fasta" "${OUTPUT}.psl"    
    # 运行 Python 脚本处理 BLAT 生成的 PSL 文件，提取断点信息
    python3 "${BREAKPOINT_SCRIPT}" "${OUTPUT}.psl" "${sampleID}" "${chr}" "${start}" "${end}" "${OUTPUT}"
    # 删除临时生成的 FASTA 文件
    rm "${OUTPUT}.fasta"    
    # 删除临时生成的 SAM 文件
    rm "${OUTPUT}.sam"
done &lt;&lt;&lt; "$filelines"
复制<br><br>这个文件是上述 shell 需要调用的。但是里面存在一些问题：<br>
<br>不规范的缩进。
<br>不再被维护的 pandas 语法。<br>
为了不改变原有功能，我对部分语句进行了维护。使用的版本是 Python 3.9.15。<br>
修改之后的代码如下：
<br>#!/usr/bin/env python

################################################################################
## This script takes outputs from NUMT_detection.sh to generates NUMT clusters
################################################################################

import fileinput
import sys, os
import pandas as pd
import glob
import scipy.stats as stats
import numpy as np

#################### Extract cluster from mtDNA discordant sam files  #############################

def cluster(data, maxgap):
    data.sort()
    groups = [[data[0]]]
    for x in data[1:]:
        if abs(x - groups[-1][-1]) &lt;= maxgap:
            groups[-1].append(x)
        else:
            groups.append([x])
    return groups

sampleID, wgsBAM, input1 = sys.argv[1:]

sampleID = sampleID.replace(".mt.disc", "")

df0 = pd.read_csv(input1, names=['QNAME', 'FLAG', 'RNAME', 'POS', 'MAPQ', 'CIGAR', 'RNEXT', 'PNEXT', 'TLEN', 'SEQ', 'QUAL', 'SM', 'RG', 'NM', 'BC', 'OC', 'ZX', 'ZY', 'SA'], sep="\t", engine='python', comment="@")

df = df0[~df0.RNAME.str.contains("Un_|random|\.")]
df1 = df[(df["MAPQ"].astype(int) &gt; 0) &amp; ((df['RNAME'] == "MT") | (df['RNAME'] == "chrM") | (df['RNEXT'] == "MT") | (df['RNEXT'] == "chrM"))]

##### remove reads map to mtDNA #####
df3 = df1[~df1.RNAME.isin(['chrM', 'MT'])]

##### order by chromosome and pos #####
df3 = df3.sort_values(['RNAME', 'POS'])

##### look for the clutser by mapgap on pos #####
##### extract the clusters with number of elements no less than 5 #####

output1 = pd.DataFrame([])

df_chr = df3.groupby(['RNAME'])
for clusterID, myclusters in df_chr:
    myclusters['POS'] = myclusters['POS'].astype(int)
    sub_cluster = cluster(myclusters['POS'].tolist(), maxgap=500)
    for x in sub_cluster:
        if len(x) &gt;= 2:
            mycluster = x
            df_cluster = df3[df3.POS.isin(mycluster)]
            df_cluster_pairMT = df[df.QNAME.isin(df_cluster['QNAME'])]
            mt_cluster = cluster(df_cluster['PNEXT'].tolist(), maxgap=500)
            for y in mt_cluster:
                df_cluster_pairMT_out = df_cluster_pairMT[df_cluster_pairMT.PNEXT.isin(y)]
                df_cluster_pairMT_out = df_cluster_pairMT_out.assign(
                    subCluster_No=len(y),
                    Cluster_No=len(x),
                    Cluster_ID=f"{clusterID}_{min(df_cluster['POS'])}_{max(df_cluster['POS'])}_MTboth_{min(df_cluster_pairMT_out['PNEXT'])}_{max(df_cluster_pairMT_out['PNEXT'])}"
                )
                output = pd.concat([pd.DataFrame(), df_cluster_pairMT_out], ignore_index=True)

            output1 = pd.concat([output1, output])
            output1["IndividualID"] = sampleID
            if len(output1) != 0:
                output1['clusterID'] = output1['RNAME'].astype(str) + "_" + output1['Cluster_No'].astype(str)
                output2 = output1.groupby(['IndividualID', 'Cluster_ID', 'Cluster_No', 'subCluster_No']).size().to_frame('size').reset_index()
            else:
                continue

output1.to_csv(input1 + '.cluster.tsv', sep='\t', header=True, index=False)
output2.to_csv(input1 + '.cluster.summary.tsv', sep='\t', header=False, index=True)

##### generate cluster range for defining the breakpoints ######

output2['disFile'] = input1
output2['splitFile'] = input1.replace('disc', 'split')
output2['wgsBAM'] = wgsBAM
df_pos = pd.DataFrame(output2['Cluster_ID'].str.split('_').tolist(), columns=['chr', 'start', 'end', 'chrM', 'mtstart', 'mtend'])
del output2['Cluster_ID']
del output2['subCluster_No']
del output2['size']
output3 = pd.concat([output2, df_pos[['chr', 'start', 'end']]], axis=1)
output3 = output3.drop_duplicates(['chr', 'start', 'end'])
output3['start'] = output3['start'].astype(int) - 500
output3['end'] = output3['end'].astype(int) + 500 + 150
output3['Cluster_No'] = output3['Cluster_No'].astype(int)

##### output to file #####
output3.to_csv(input1 + '.breakpointINPUT.tsv', sep='\t', header=False, index=False)

复制<br><br>也是上述 shell 需要调用的。但是里面存在很大的问题：<br>
<br>使用了旧版本的 pandas 语法。令人遗憾的，新版本的语法似乎不能很好读取 blat 生成的 psl 文件，标题行存在很大的问题。为了不让原本的功能丧失，我只能够用最愚蠢的办法将数值转为字符串。尽管这会报错，但是并不影响最终的结果。
<br>在 GRCH38 版本中，染色体的名字是以 NCXXXXXX 命名的，不再使用了 chr。因此，需要重新对其进行映射。
<br>可以根据自己的需求就筛选过滤措施，这对于低深度的测序也许有一定的作用。<br>
修改之后的脚本：
<br>#!/usr/bin/env python
################################################################################
## This script takes outputs from searchNumtCluster_fromDiscordantReads.py and NUMT_detection.sh 
## to look for NUMT breakpoints
################################################################################

import sys, os
import pandas as pd

def classify_breakpoint(row, type='nu'):
    mismatchLEN = 3 # 默认是3 请在这里选择过滤措施，选择更大的数量会得到更多的结果，但是可能会并不会特别精确。
    readLEN = 150 # 默认是150 请在这里选择过滤措施，选择更长的长度会得到更多的结果，但是可能会并不会特别精确。
    if type == 'nu':
        if row['strand'] == "+" and row['Qend'] &gt;= readLEN - mismatchLEN:
            return "nu_Tstart_Bright"
        elif row['strand'] == "+" and row['Qstart'] &lt;= mismatchLEN:
            return "nu_Tend_Bleft"
        elif row['strand'] == "-":
            return "nu_NegStrand"
        else:
            return "nu_useLess"
    else:
        if row['strand'] == "+" and row['Qend'] &gt;= readLEN - mismatchLEN:
            return "mt_Tstart"
        elif row['strand'] == "+" and row['Qstart'] &lt;= mismatchLEN:
            return "mt_Tend"
        elif row['strand'] == "-" and row['Qend'] &gt;= readLEN - mismatchLEN:
            return "mt_Tend"
        elif row['strand'] == "-" and row['Qstart'] &lt;= mismatchLEN:
            return "mt_Tstart"
        else:
            return "mt_useLess"

# 从命令行读取输入参数
INPUT_PSL, SAMPLEID, CHR, START, END, OUTPUT = sys.argv[1:]
START, END = int(START), int(END)

# 读取数据并预处理
psl_columns = [
    "match", "misMatch", "repMatch", "Ns", "QgapCount", "QgapBases", "TgapCount", "TgapBases", "strand",
    "Qname", "Qsize", "Qstart", "Qend", "Tname", "Tsize", "Tstart", "Tend", "blockCount", "blockSizes",
    "qStarts", "tStarts"
]
df = pd.read_csv(INPUT_PSL, skiprows=5, sep="\t", names=psl_columns)
df['matchLEN'] = df['Tend'] - df['Tstart']

# 过滤数据，过滤措施
filtered_df = df[(df['matchLEN'] &lt; 170) &amp; (df['misMatch'] &lt;= 7)] # 默认是df[(df['matchLEN'] &lt; 140) &amp; (df['misMatch'] &lt;= 3)]请在这里选择过滤措施，选择更大的数量会得到更多的结果，但是可能会并不会特别精确。
filtered_df = filtered_df[(filtered_df['Tend'] &gt;= 140) | (filtered_df['Tend'] &lt;= 10)] # 默认是[(filtered_df['Tend'] &gt;= 147) | (filtered_df['Tend'] &lt;= 3)]请在这里选择过滤措施，选择更长的长度会得到更多的结果，但是可能会并不会特别精确。

# Tname映射
tname_mapping = {
    'NC_012920.1': 'MT',
    'NC_000001.11': 'chr1',
    'NC_000002.12': 'chr2',
    'NC_000003.12': 'chr3',
    'NC_000004.12': 'chr4',
    'NC_000005.10': 'chr5',
    'NC_000006.12': 'chr6',
    'NC_000007.14': 'chr7',
    'NC_000008.11': 'chr8',
    'NC_000009.12': 'chr9',
    'NC_000010.11': 'chr10',
    'NC_000011.10': 'chr11',
    'NC_000012.12': 'chr12',
    'NC_000013.11': 'chr13',
    'NC_000014.9': 'chr14',
    'NC_000015.10': 'chr15',
    'NC_000016.10': 'chr16',
    'NC_000017.11': 'chr17',
    'NC_000018.10': 'chr18',
    'NC_000019.10': 'chr19',
    'NC_000020.11': 'chr20',
    'NC_000021.9': 'chr21',
    'NC_000022.11': 'chr22',
    'NC_000023.11': 'chrX',
    'NC_000024.10': 'chrY'
}

filtered_df['Tname_mapped'] = filtered_df['Tname'].map(tname_mapping).fillna(filtered_df['Tname'])

# 分离线粒体和核序列
mt_df = filtered_df.loc[filtered_df['Tname_mapped'] == 'MT'].copy()
nu_df = filtered_df.loc[(filtered_df['Tname_mapped'] == CHR) &amp; (filtered_df['Tstart'] &gt; START) &amp; (filtered_df['Tend'] &lt; END)].copy()

if not nu_df.empty:
    # 应用分类函数
    nu_df.loc[:, 'pointGroup'] = nu_df.apply(classify_breakpoint, axis=1, type='nu')
    if not mt_df.empty:
        mt_df.loc[:, 'pointGroup'] = mt_df.apply(classify_breakpoint, axis=1, type='mt')

    nu_df.loc[:, 'Group'] = nu_df['pointGroup'].str.replace(r'_T.*B', '', regex=True)
    nu_df.loc[:, 'chr'] = CHR
    if not mt_df.empty:
        mt_df.loc[:, 'chr'] = 'chrM'

    def group_and_count(df, by_cols):
        return df.groupby(by_cols).size().reset_index(name="readsCount")

    # 核DNA断点
    nu_left = group_and_count(nu_df.loc[nu_df['pointGroup'] == 'nu_Tend_Bleft'], ['pointGroup', 'Group', 'chr', 'Tend', 'strand'])
    nu_right = group_and_count(nu_df.loc[nu_df['pointGroup'] == 'nu_Tstart_Bright'], ['pointGroup', 'Group', 'chr', 'Tstart', 'strand'])
    nu_both = pd.concat([nu_left, nu_right])

    # 同时映射到线粒体的核DNA断点
    nu_mt = nu_df.loc[nu_df['Qname'].isin(mt_df['Qname'])]
    nu_mt_left = group_and_count(nu_mt.loc[nu_mt['pointGroup'] == 'nu_Tend_Bleft'], ['pointGroup', 'Group', 'chr', 'Tend', 'strand'])
    nu_mt_right = group_and_count(nu_mt.loc[nu_mt['pointGroup'] == 'nu_Tstart_Bright'], ['pointGroup', 'Group', 'chr', 'Tstart', 'strand'])
    nu_mt_both = pd.concat([nu_mt_left, nu_mt_right])

    # 线粒体断点
    if not mt_df.empty:
        mt_tend = group_and_count(mt_df.loc[mt_df['pointGroup'] == 'mt_Tend'], ['pointGroup', 'chr', 'Tend', 'strand'])
        mt_tstart = group_and_count(mt_df.loc[mt_df['pointGroup'] == 'mt_Tstart'], ['pointGroup', 'chr', 'Tstart', 'strand'])
        mt_both = pd.concat([mt_tend, mt_tstart])
        mt_both['Group'] = 'UKn'

        # 同时映射到核DNA的线粒体断点
        mt_conf = pd.concat([
            group_and_count(mt_df.loc[(mt_df['Qname'].isin(nu_df.loc[nu_df['pointGroup'] == 'nu_Tend_Bleft', 'Qname'])) &amp; (mt_df['pointGroup'] == 'mt_Tstart')], ['pointGroup', 'chr', 'Tstart', 'strand']),
            group_and_count(mt_df.loc[(mt_df['Qname'].isin(nu_df.loc[nu_df['pointGroup'] == 'nu_Tend_Bleft', 'Qname'])) &amp; (mt_df['pointGroup'] == 'mt_Tend')], ['pointGroup', 'chr', 'Tend', 'strand']),
            group_and_count(mt_df.loc[(mt_df['Qname'].isin(nu_df.loc[nu_df['pointGroup'] == 'nu_Tstart_Bright', 'Qname'])) &amp; (mt_df['pointGroup'] == 'mt_Tstart')], ['pointGroup', 'chr', 'Tstart', 'strand']),
            group_and_count(mt_df.loc[(mt_df['Qname'].isin(nu_df.loc[nu_df['pointGroup'] == 'nu_Tstart_Bright', 'Qname'])) &amp; (mt_df['pointGroup'] == 'mt_Tend')], ['pointGroup', 'chr', 'Tend', 'strand'])
        ])

        # 捕获并忽略异常
        try:
            mt_conf['Group'] = mt_conf.apply(lambda row: 'mtLeft' if 'left' in row['pointGroup'] else 'mtRight', axis=1)
        except ValueError as e:
            print(f"尽管这里出现了一个问题: {e}, 但是我们并不打算解决它，因为它并不影响最终的结果。")

        all_breakpoints = pd.concat([nu_both, mt_both])
        mt_conf['sampleID'] = SAMPLEID
        mt_conf['Tstart'] = mt_conf['Tstart'].fillna(-1).astype(int)
        mt_conf['Tend'] = mt_conf['Tend'].fillna(-1).astype(int)
    else:
        all_breakpoints = nu_both
        mt_conf = pd.DataFrame()

    # 输出结果
    all_breakpoints['sampleID'] = SAMPLEID
    all_breakpoints['Tstart'] = all_breakpoints['Tstart'].fillna(-1).astype(int)
    all_breakpoints['Tend'] = all_breakpoints['Tend'].fillna(-1).astype(int)

    confident_breakpoints = pd.concat([nu_mt_both, mt_conf])
    confident_breakpoints['sampleID'] = SAMPLEID
    confident_breakpoints['Tstart'] = confident_breakpoints['Tstart'].fillna(-1).astype(int)
    confident_breakpoints['Tend'] = confident_breakpoints['Tend'].fillna(-1).astype(int)

    # 写入文件
    confident_breakpoints.to_csv(OUTPUT + '.Breakpoints.tsv', sep='\t', header=False, index=False)
else:
    print("过滤后没有发现核序列。")

复制<br><br><br>该文件包含断点信息。每行表示一个断点，通常包括以下列：<br>
<br>pointGroup: 断点组
<br>Group: 断点类别
<br>chr: 染色体
<br>Tend: 结束位置
<br>strand: 链方向
<br>readsCount: 读取计数
<br>Tstart: 起始位置
<br>sampleID: 样本ID
<br>示例数据：<br>nu_Tend_Bleft	nuleft	chr1	634078	+	1	-1	HG001
nu_Tstart_Bright	nuright	chr1	-1	+	1	633739	HG001
nu_Tstart_Bright	nuright	chr1	-1	+	1	633939	HG001
复制<br><br>该文件包含每个找到的断点的信息。每行表示一个断点区域，通常包括以下列：<br>
<br>sampleID: 样本ID
<br>cluster_no: 聚类编号
<br>disFile: 不一致的文件路径
<br>splitFile: 分裂的文件路径
<br>wgsBAM: WGS BAM文件路径
<br>chr: 染色体编号
<br>start: 起始位置
<br>end: 结束位置
<br>HG001	3	/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT/HG001.mt.disc.sam	/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT/HG001.mt.split.sam	/home/luolintao/Reference_GRCH/INPUT_TEST/HG001.bam	('chr1',)	633396	634563
HG001	2	/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT/HG001.mt.disc.sam	/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT/HG001.mt.split.sam	/home/luolintao/Reference_GRCH/INPUT_TEST/HG001.bam	('chr11',)	49861375	49863007
HG001	3	/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT/HG001.mt.disc.sam	/home/luolintao/NUMTs-detection-1.0/NUMTs-detection-1.0/RESULT/HG001.mt.split.sam	/home/luolintao/Reference_GRCH/INPUT_TEST/HG001.bam	('chr5',)	32337638	32339245

复制<br><br>该文件包含聚类的摘要信息。每行表示一个聚类，通常包括以下列：<br>
<br>IndividualID: 样本ID
<br>Cluster_ID: 聚类ID
<br>Cluster_No: 聚类编号
<br>subCluster_No: 子聚类编号
<br>size: 聚类大小
<br>0	HG001	('chr1',)_633896_633913_MTboth_9735_9872	3	3	3
1	HG001	('chr11',)_49861875_49862357_MTboth_16089_16340	2	2	2
2	HG001	('chr5',)_32338138_32338595_MTboth_14835_14835	3	1	1
复制<br>在这里，需要具体解释一下：<br>
前三列很好理解。但是针对后面：<br>
<br>
第四列*(Cluster_No)：这是主聚类中读段的总数。这些读段是基于它们在染色体上的位置（POS）进行聚类的，聚类的条件是相邻读段之间的距离不超过 500 个碱基对。检测出的满足第三列条件的 NUMT 的数量。

<br>
第五列和第六列表示在这个聚类中的子聚类数目，它们是对这些读段进一步聚类后满足特定条件的读段数目。根据代码的逻辑，第五列（subCluster_No）和第六列（subCluster_No）的值在通常情况下会相同。(subCluster_No)：这是子聚类中读数的总数。这些读数是基于它们在配对读数的位置（PNEXT）进行进一步聚类的，聚类的条件同样是相邻读数之间的距离不超过 500 个碱基对。<br>
NUMTs 是线粒体 DNA 插入到核基因组中的片段，通常我们预期插入到核基因组中的 NUMT 片段会比它们的原始线粒体序列短或相等。然而，你的示例中出现了相反的情况，这确实需要解释。在你的例子中，核基因组中的序列长度（444 bp）大于线粒体中的序列长度（190 bp）。有几种可能的解释：

<br>
插入事件和重排：

<br>NUMTs 插入到核基因组中时，可能会发生重排或扩展，从而导致插入片段在核基因组中的长度增加。
<br>核基因组中的插入片段可能包含了其他序列，这些序列可能是插入事件导致的。


<br>
重复序列：

<br>核基因组中可能包含重复序列，这些重复序列与线粒体 DNA 部分相同，但总体长度较长。
<br>这些重复序列可能是由于插入事件或其他基因组重排造成的。


<br>
比对错误或读数拼接：

<br>在比对过程中，可能会出现错误，导致比对到核基因组的读数长度增加。
<br>读数拼接也可能会引入额外的序列，从而增加比对长度。


<br><br>该文件包含聚类的详细信息。每行表示一个聚类的具体信息，通常包括以下列：<br>
<br>QNAME: 序列名称
<br>FLAG: 标志
<br>RNAME: 参考序列名称
<br>POS: 位置
<br>MAPQ: 比对质量
<br>CIGAR: 比对描述
<br>RNEXT: 下一个参考名称
<br>PNEXT: 下一个位置
<br>TLEN: 模板长度
<br>SEQ: 序列
<br>QUAL: 质量
<br>SM: 样本
<br>RG: 读取组
<br>NM: 不匹配数
<br>BC: 条形码
<br>OC: 原始 CIGAR
<br>ZX: 自定义标记1
<br>ZY: 自定义标记2
<br>SA: 辅助比对
<br>subCluster_No: 子聚类编号
<br>Cluster_No: 聚类编号
<br>Cluster_ID: 聚类ID
<br>IndividualID: 样本ID
<br>clusterID: 聚类ID
<br>QNAME	FLAG	RNAME	POS	MAPQ	CIGAR	RNEXT	PNEXT	TLEN	SEQ	QUAL	SM	RG	NM	BC	OC	ZX	ZY	SA	subCluster_No	Cluster_No	Cluster_ID	IndividualID	clusterID
HISEQ1:11:H8GV6ADXX:1:2212:16190:45635	97	chr1	633900	32	148M	chrM	9735	0	TCTCTTATACTAGTATCCTTAATCATTTTTATTGCCACAACTAACCTCCTCGGACTCCTGCCTCACTCATTTACACCAACCACCCAACTATCTATAAACCTAGCCATGGCCATCCCCTTATGAGCGGGCGCAGTGATTATAGGCTTTC	C									3	3	('chr1',)_633896_633913_MTboth_9735_9872	HG001	chr1_3
HISEQ1:17:H947YADXX:2:2206:7902:6711	97	chr1	633913	32	148M	chrM	9872	0	TATCCTTAATCATTTTTATTGCCACAACTAACCTCCTCGGACTCCTGCCTCACTCATTTACACCAACCACCCAACTATCTATAAACCTAGCCATGGCCATCCCCTTATGAGCGGGCGCAGTGATTATAGGCTTTCGCTCTAAGATTAA										3	3	('chr1',)_633896_633913_MTboth_9735_9872	HG001	chr1_3
HWI-D00360:5:H814YADXX:2:2107:18825:98678	161	chr1	633896	20	148M	chrM	9818	0	CTGATCTCTTATACTAGTATCCTTAATCATTTTTATTGCCACAACTAACCTCCTCGGACTCCTGCCTCACTCATTTACACCAACCACCCAACTATCTATAAACCTAGCCATGGCCATCCCCTTATGAGCGCGCGCAGTGATTATAGGC	&lt;									3	3	('chr1',)_633896_633913_MTboth_9735_9872	HG001	chr1_3
HWI-D00360:5:H814YADXX:2:1106:18751:35433	113	chr11	49862357	70	148M	chrM	16089	0	GTATTTAATGTAATTTATAGAGAACCGTTTGAATGAAACTAAGTTTTTACTGGAAATACAGCAATTTTTTTTTTTTCAGAATATGCTTATAGGTGTGGAATTGCAGAGGCTGTTGGTCTTCCAAGTATTCCTGTTCATCCAATTGGAT	CEEDDDEECDDDDDDEDEDDCDB									2	2	('chr11',)_49861875_49862357_MTboth_16089_16340	HG001	chr11_2
HWI-D00360:6:H81VLADXX:1:2211:17678:67136	65	chr11	49861875	70	143M5S	chrM	16340	0	GGAAAGGAAAAGAAAAGAAAAGTAATGATTAGATTTATTTTTAAAGTCTTGCTTATTACAATGATGGAAAATTTGAGATTTTCCATCATATTGTATGTATTAGTTTTTTTCTTTTGTTGATTGAGCAGCATTCCATTGTGGGAAAATA	CCCFFFFFHHHHHJIIJJJJJJHHJIJJJJJJJJJJIIJJJJJJJJHIJJJJJJJJJJJJJJJJJJJJJJJJJJJJJHHHHHHHFFFFFFFEEEEEEEFFFDEDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDEEEEDEDDDDDDDDD	PG:Z:novoalign	AS:i:90	UQ:i:90	NM:i:1	MD:Z:22A120				2	2	('chr11',)_49861875_49862357_MTboth_16089_16340	HG001	chr11_2
HISEQ1:17:H947YADXX:2:1209:10750:98109	145	chr5	32338595	70	148M	chrM	14835	0	TTTTGTATTTTTAGTAGAGATGGGGTTTCTCCACATTGGTCAGGCTGGTCTCGAACTCCCAGCCTCAGGTGATCTGCCTGTCTTGGCCTCCCAAAGTGCTGGGATTACAGGCATGAGCCATTGCACCCAGCTGAGTAAATCAGGTTTT	BDDCC									1	3	('chr5',)_32338138_32338595_MTboth_14835_14835	HG001	chr5_3

复制<br><br><br>我真的是服了 circos 这个软件了。他很强大，的确，也很弱智。一点也不智能。真不敢相信在2024年我还能见到如同 WindowsXP 一般的软件。转念一想，科研嘛，大概都是这样的。不然人人都是科学家。<br><br><a data-tooltip-position="top" aria-label="https://circos.ca/software/download/" rel="noopener nofollow" class="external-link" href="https://circos.ca/software/download/" target="_blank">Download // CIRCOS Circular Genome Data Visualization</a><br>
将压缩包解压到 Linux 环境。其实这个软件 win 也能运行，但是不太方便。<br>运行 circos 需要一些环境配置，但是这些都不太难。官网查一查就行了，问问呢 ChatGPT 也不会出错。<br><br>修改代码如下：<br>################################################################################
## 本脚本生成circos图
## 需要安装Circos
## Circos可以从 http://circos.ca/software/download/circos/ 下载
################################################################################

# 引入Circos的housekeeping配置文件
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/housekeeping.conf&gt;&gt;

# Circos的一般设置
anti_aliasing* = no  # 禁用抗锯齿
max_points_per_track* = 30000  # 每个轨道的最大点数

# 引入颜色、字体和模式的配置文件
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/colors_fonts_patterns.conf&gt;&gt;
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/colors.brewer.conf&gt;&gt;
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/colors.ucsc.conf&gt;&gt;

# 引入NUMTs的ideogram配置文件
&lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/ideogram_NUMTs.conf&gt;&gt; 
# 引入NUMTs的刻度配置文件
&lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/ticks_NUMTs.conf&gt;&gt;

# karyotype设置，使用人类karyotype文件
&lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/karyotype_NUMTs.conf&gt;&gt;
karyotype* = /mnt/e/Scientifc_software/circos-current/circos-0.69-9/data/karyotype/karyotype.human.hg38.txt


# 染色体显示和缩放设置
# chromosomes_display_default = no
# chromosomes_units   = 0.1  # 染色体单位
# chromosomes     = /hs[1-9XYM]/  # 要显示的染色体
# chromosomes_reverse = hsM  # 反转M染色体
# chromosomes_radius = hsM:1.0r  # M染色体的半径
# chromosomes_scale   = hsM=0.5r  # M染色体的缩放

# 图片设置
&lt;image&gt;
angle_offset* = -90  # 角度偏移
file*  = CircosPlot_allBreakpoint.germline.png # 输出文件名
svg*   = no  # 使用SVG格式
png* = yes # 使用PNG格式
radius* = 1500p  # 减少图像半径以提高速度

# 引入图片配置文件
&lt;&lt;include /mnt/e/Scientifc_software/circos-current/circos-0.69-9/etc/image.conf&gt;&gt;
&lt;/image&gt;

# NUMTs链接设置
&lt;links&gt;
&lt;link&gt;
ribbon           = no  # 不使用带状显示
bezier_radius    = 0r  # 贝塞尔曲线半径
crest                = 0.50  # 贝塞尔曲线的峰值
bezier_radius_purity = 1  # 贝塞尔曲线半径纯度
file		= /mnt/c/Users/victo/Desktop/circos_format_data_no_header.txt # mtDNA和核基因组NUMTs之间的链接文件
radius		= 0.999r  # 链接的半径
thickness	= 10  # 链接的厚度

# 引入链接规则配置文件
&lt;rules&gt;
&lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/links_allBreakpoints.soma.conf&gt;&gt;
&lt;/rules&gt;
&lt;/link&gt;
&lt;/links&gt;

# # 绘图设置
# &lt;plots&gt;
# # 引入中心的MitoGenes配置文件
# &lt;&lt;include /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/confs/MitoGenes.centre.germline.conf&gt;&gt; weiwei的文件夹怎么可能找到？

# &lt;plot&gt;
# type            = tile  # 绘图类型为瓷砖
# file            = mtFragments_germline.txt  # mtFragments文件
# r1                      = 1.15r  # 外半径
# r0                      = 0.5r  # 内半径
# orientation             = out  # 方向为向外
# layers                  = 1  # 图层数
# margin                  = 0.1u  # 边距
# thickness               = 5  # 厚度
# padding                 = 0.1  # 内边距

# color                   = vdred  # 颜色为深红色
# layers_overflow         = grow  # 图层溢出时扩展

# stroke_thickness        = 1  # 描边厚度
# stroke_color            = white  # 描边颜色为白色

# &lt;/plot&gt;

# &lt;/plots&gt;

复制<br>注意
这里面的所有的路径一定要修改成自己的路径。推荐使用绝对路径。
<br><br>&lt;ideogram&gt;

&lt;spacing&gt;
# 默认间距设置为染色体半径的0.002倍
default = 0.002r

# 在边缘处是否显示轴断裂
axis_break_at_edge = yes

# 是否显示轴断裂
axis_break = yes

# 设置轴断裂的样式为2
axis_break_style = 2

# 断裂样式1的定义
&lt;break_style 1&gt;
stroke_color = black      # 描边颜色为黑色
fill_color = blue         # 填充颜色为蓝色
thickness = 0.25r         # 厚度为0.25倍染色体半径
stroke_thickness = 2p     # 描边厚度为2像素
&lt;/break_style&gt;

# 断裂样式2的定义
&lt;break_style 2&gt;
stroke_color = black      # 描边颜色为黑色
stroke_thickness = 5p     # 描边厚度为5像素
thickness = 2r            # 厚度为2倍染色体半径
&lt;/break_style&gt;

# 设置染色体hs1和hsM之间的间距为4倍染色体半径
&lt;pairwise hs1 hsM&gt;
spacing = 4r
&lt;/pairwise&gt;

# 设置染色体hsY和hsM之间的间距为4倍染色体半径
&lt;pairwise hsY hsM&gt;
spacing = 4r
&lt;/pairwise&gt;

&lt;/spacing&gt;

# Ideogram位置，填充和轮廓
radius = 0.85r               # 半径设置为0.85倍染色体半径
thickness = 80p              # 厚度为20像素
fill = yes                   # 是否填充
stroke_color = dgrey         # 描边颜色为深灰色
stroke_thickness = 0p        # 描边厚度为2像素

#label.conf
show_label = yes             # 是否显示标签
label_font = default         # 标签字体为默认字体
label_radius = 1.075r        # 标签半径为1.075倍染色体半径
label_size = 30              # 标签大小为30
label_parallel = yes         # 标签是否平行于染色体

##bands.conf
show_bands = yes             # 是否显示染色体带
fill_bands = yes             # 是否填充染色体带
band_transparency = 4        # 染色体带透明度

radius* = 0.85r              # 半径设置为0.85倍染色体半径

&lt;/ideogram&gt;

复制<br><br>karyotype = /mnt/e/Scientifc_software/circos-current/circos-0.69-9/data/karyotype/karyotype.human.hg38.txt # 指定karyotype文件的路径，该文件定义了染色体的基本信息（如名称、长度、带）。
chromosomes_display_default = no # 禁用默认显示所有染色体，只显示在chromosomes参数中明确指定的染色体。
chromosomes_units   = 0.1 # 设置染色体的单位长度，以百万碱基对（Mb）为单位（这里是0.1 Mb）。
chromosomes     = /hs[1-9XYM]/ # 通过正则表达式指定要显示的染色体，这里是人类的染色体1-9，X，Y和线粒体M。
chromosomes_reverse = hsM # 反转显示指定的染色体，这里是线粒体M。
# 在这里修改染色体的颜色
chromosomes_color   = hs1=black,hs2=orange,hs3=yellow,hs4=green,hs5=blue,hs6=dpurple,hs7=red,hs8=orange,hs9=yellow,hs10=green,hs11=blue,hs12=dpurple,hs13=red,hs14=orange,hs15=yellow,hs16=green,hs17=blue,hs18=dpurple,hs19=red,hs20=orange,hs21=yellow,hs22=green,hsX=blue,hsY=vdblue,hsM=vlblue
#chromosomes_color  = hsM=vlblue
chromosomes_radius = hsM:1r # 为线粒体染色体指定显示半径，这里是1.05倍的默认半径。
chromosomes_scale   = hsM=0.5r # 为线粒体染色体指定显示比例尺，这里是0.5倍的默认比例尺。

复制<br><br>&lt;rule&gt;
# 条件：在染色体hs1和线粒体染色体hsM之间
condition = between(hs1,hsM)
# 颜色：chr1（应在颜色定义文件中定义）
color = black
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs2和线粒体染色体hsM之间
condition = between(hs2,hsM)
# 颜色：chr2（应在颜色定义文件中定义）
color = orange
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs3和线粒体染色体hsM之间
condition = between(hs3,hsM)
# 颜色：chr3（应在颜色定义文件中定义）
color = yellow
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs4和线粒体染色体hsM之间
condition = between(hs4,hsM)
# 颜色：chr4（应在颜色定义文件中定义）
color = green
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs5和线粒体染色体hsM之间
condition = between(hs5,hsM)
# 颜色：chr5（应在颜色定义文件中定义）
color = blue
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs6和线粒体染色体hsM之间
condition = between(hs6,hsM)
# 颜色：chr6（应在颜色定义文件中定义）
color = cdpurple
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs7和线粒体染色体hsM之间
condition = between(hs7,hsM)
# 颜色：chr7（应在颜色定义文件中定义）
color = red
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs8和线粒体染色体hsM之间
condition = between(hs8,hsM)
# 颜色：chr8（应在颜色定义文件中定义）
color = orange
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs9和线粒体染色体hsM之间
condition = between(hs9,hsM)
# 颜色：chr9（应在颜色定义文件中定义）
color = yellow
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs10和线粒体染色体hsM之间
condition = between(hs10,hsM)
# 颜色：chr10（应在颜色定义文件中定义）
color = green
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs11和线粒体染色体hsM之间
condition = between(hs11,hsM)
# 颜色：chr11（应在颜色定义文件中定义）
color = blue
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs12和线粒体染色体hsM之间
condition = between(hs12,hsM)
# 颜色：chr12（应在颜色定义文件中定义）
color = dpurple
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs13和线粒体染色体hsM之间
condition = between(hs13,hsM)
# 颜色：chr13（应在颜色定义文件中定义）
color = red
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs14和线粒体染色体hsM之间
condition = between(hs14,hsM)
# 颜色：chr14（应在颜色定义文件中定义）
color = orange
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs15和线粒体染色体hsM之间
condition = between(hs15,hsM)
# 颜色：chr15（应在颜色定义文件中定义）
color = yellow
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs16和线粒体染色体hsM之间
condition = between(hs16,hsM)
# 颜色：chr16（应在颜色定义文件中定义）
color = green
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs17和线粒体染色体hsM之间
condition = between(hs17,hsM)
# 颜色：chr17（应在颜色定义文件中定义）
color = blue
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs18和线粒体染色体hsM之间
condition = between(hs18,hsM)
# 颜色：chr18（应在颜色定义文件中定义）
color = dpurple
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs19和线粒体染色体hsM之间
condition = between(hs19,hsM)
# 颜色：chr19（应在颜色定义文件中定义）
color = red
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs20和线粒体染色体hsM之间
condition = between(hs20,hsM)
# 颜色：chr20（应在颜色定义文件中定义）
color = orange
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs21和线粒体染色体hsM之间
condition = between(hs21,hsM)
# 颜色：chr21（应在颜色定义文件中定义）
color = yellow
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hs22和线粒体染色体hsM之间
condition = between(hs22,hsM)
# 颜色：chr22（应在颜色定义文件中定义）
color = green
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hsX和线粒体染色体hsM之间
condition = between(hsX,hsM)
# 颜色：chrx（应在颜色定义文件中定义）
color = blue
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

&lt;rule&gt;
# 条件：在染色体hsY和线粒体染色体hsM之间
condition = between(hsY,hsM)
# 颜色：chry（应在颜色定义文件中定义）
color = vdblue
# 厚度：1像素
# thickness = 1
# z轴坐标：0
z = 0
# 半径：0.998倍的默认半径
radius1 = 0.998r
&lt;/rule&gt;

复制<br><br># 是否显示刻度
show_ticks = yes
# 是否显示刻度标签
show_tick_labels = yes
&lt;ticks&gt;
# 刻度的半径，设置在染色体外侧半径+10像素的位置
radius = dims(ideogram,radius_outer) + 10p
# 刻度线的厚度
thickness = 3p
# 刻度线的方向，设置为向外
orientation = out
# 刻度线的颜色
color = black
# 刻度标签的大小
size = 12p
# 标签的偏移量
label_offset = 5p
# 标签的格式，这里设置为显示整数
format = %d
&lt;tick&gt;
# 默认情况下不显示刻度
chromosomes_display_default = no
# 仅对线粒体染色体显示刻度
chromosomes = hsM
# 刻度的间隔，设置为2000
spacing = 2000
# 是否显示刻度标签
show_label = yes
# 标签的半径，设置在染色体外侧半径+50像素的位置
label_radius = dims(ideogram,radius_outer) + 50p
# 标签是否平行于刻度线，这里设置为否
label_parallel = no
# 标签的大小
label_size = 30p
&lt;/tick&gt;
&lt;/ticks&gt;

复制<br>修改的地方有几点：<br>
<br>排除了一些指代不明的路径：最显然的就是 MitoGenes.centre.germline.conf 这个配置文件中的路径。里面指向了一个非常有趣的路径：/home/wwei1/Scripts/Circos/MitoGenes_codingGenes.txt。嗯，我很确定这一定是作者的私人电脑。
<br>添加了大量的注释，因为我不是很了解 Pl 语法，所以我只能这样才能看得懂。我觉得 pl 有点像 Latex，都是分片段式的写作。
<br>使用方法：<br>/mnt/e/Scientifc_software/circos-current/circos-0.69-9/bin/circos -conf /mnt/e/Scientifc_software/NUMTs-detection-1.0/scripts/circos_allNUMTs.conf
复制<br>记得改路径！<br><br><br>这个脚本可以把生成出来的 mt.disc.sam.cluster.tsv 文件转成 circos 能够识别的格式。<br><br>QNAME	FLAG	RNAME	POS	MAPQ	CIGAR	RNEXT	PNEXT	TLEN	SEQ	QUAL	SM	RG	NM	BC	OC	ZX	ZY	SA	subCluster_No	Cluster_No	Cluster_ID	IndividualID	clusterID
HISEQ1:20:H9V1RADXX:2:2103:12132:43712	81	chr1	633911	28	148M	chrM	10226	0	AGTATCCTTAATCATTTTTATTGCCACAACTAACCTCCTCGGACTCCTGCCTCACTCATTTACACCAACCACCCAACTATCTATAAACCTAGCCATGGCCATCCCCTTATGAGCGGGCGCAGTGATTATAGGCTTTCGCTCTAAGATT	CDDDDDDDEEDDDDDDDDDDDDDDDCDC									1	3	('chr1',)_633902_633918_MTboth_10226_10226	HG002_5X	chr1_3
HISEQ1:18:H8VC6ADXX:1:1215:7921:64214	177	chr11	49862122	70	148M	chrM	16373	0	CTTGTGGGCATGTGCTCATCTTTCTAGAGTAAATACCCAGTAATGGAATTGCTGTGCCATAGTGCACATTTCTGCTTGACATTGCTTTTTAAAAGAGTTACCTTAAGTGATTGTATAATTTTAGCCTAAATTATCACAAGCATTGTAT	DD									4	4	('chr11',)_49862020_49862289_MTboth_16095_16391	HG002_5X	chr11_4
HISEQ1:18:H8VC6ADXX:1:2103:3036:6488	177	chr11	49862289	70	148M	chrM	16095	0	CATTCTCGCTACATTTGAATTGTTAATCTGTTTTTCTTTAGCAATTCTAGCAAATGTGAAATTAGAATGTATTTAATGTAATTTATAGAGAACCGTTTGAATGAAACTAAGTTTTTACTGGAAATACAGCAATTTTTTTTTTTTCAGA	C&gt;500&lt;5(C									4	4	('chr11',)_49862020_49862289_MTboth_16095_16391	HG002_5X	chr11_4
HISEQ1:19:H8VDAADXX:2:2201:6106:14884	177	chr11	49862020	70	3S145M	chrM	16338	0	GAAATACTATGGATTGTTTATTCACTCTTCTGTTAGAAACCTGGACTTTGTCTAATATTTGGCTAATATAAACATGGCTGTTTTGAACAATATTGTACACGTCTTCTTGTGGGCATGTGCTCATCTTTCTAGAGTAAATACCCAGTAA	EEEDC									4	4	('chr11',)_49862020_49862289_MTboth_16095_16391	HG002_5X	chr11_4
HISEQ1:20:H9V1RADXX:1:1101:17382:26035	113	chr11	49862183	70	148M	chrM	16391	0	GTGCACATTTCTGCTTGACATTGCTTTTTAAAAGAGTTACCTTAAGTGATTGTATAATTTTAGCCTAAATTATCACAAGCATTGTATGAGGATTTCAGTTGCTCCACATTCTCGCTACATTTGAATTGTTAATCTGTTTTACTTTAGC										4	4	('chr11',)_49862020_49862289_MTboth_16095_16391	HG002_5X	chr11_4
HISEQ1:18:H8VC6ADXX:1:1109:1327:84770	81	chr21	9676786	32	148M	chrM	12811	0	TATGTGACTATTTGCATGTTACAGCAGTGTGTCAGTGTGCTGTGTGAAGTGTTTTCATGTGTGTGACTATTTCCGTGTTATAGCAGTGTGTCCGTATGCTGTGTGAAGTGTTTTCGTGTATATGACTATTTGCGTGTTACAGCAGTGT	CDDDDCACDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDBCCCCDCDDDDDDDDDDDDDDDDEDDDDDDDDDDEEEEEEFFFFFFHHHGHIJIIHJIIIJJJJJJJJJJJJJJJJJJJJJJJIIJJJJJJJJJJHHHHHFFFFFCCC	PG:Z:novoalign	AS:i:0	UQ:i:0	NM:i:0	MD:Z:148				5	5	('chr21',)_9676197_9676786_MTboth_12389_12811	HG002_5X	chr21_5
HISEQ1:18:H8VC6ADXX:2:1104:13981:10006	97	chr21	9676333	28	148M	chrM	12706	0	GTGTTATAGCAGTGTGTCAGTGTGCTGCGTGACGTGTTTTCATGTGTATATGAGTATTTGTGTGTTATAGCCATGTGTCAGTGTGCTGTGTGTTTTGTTTATGTGACTATTTGCGTGTTATAGCAGTGTGTCAGTGTGCTGTGTGAAG	B									5	5	('chr21',)_9676197_9676786_MTboth_12389_12811	HG002_5X	chr21_5
HISEQ1:19:H8VDAADXX:2:2203:3229:99021	97	chr21	9676197	30	148M	chrM	12389	0	TCATGTGTATATGACTATTTGCATGTTATAGCAGTGTGTCAGTGTGCTGTGTGACTTTGGTGTATGTGACTATTTGCATGTTACAGCAGTGTGTCAGTGTGCTGTGGGAAGGGTTTTCATGTATATGACTATTTGCGTGTTATGGCAG	CCCFFFFDHHHHHJJJJJJJJJJJJJJJJJJJJJIIIIJJJJHIIIJJJHIHIJJJJJJJGGGJIIHIIJJJJJJJJJJJIJJJJJJHHHHEHFFFFDEDCCCECEDDBDDDD&lt;ADDDDDCCDEEEEEDDDDEEEDDDDDDCDDCDDB	PG:Z:novoalign	AS:i:60	UQ:i:60	NM:i:2	MD:Z:106T36A4				5	5	('chr21',)_9676197_9676786_MTboth_12389_12811	HG002_5X	chr21_5
HISEQ1:20:H9V1RADXX:2:2104:5110:91237	97	chr21	9676218	32	148M	chrM	12746	0	CATGTTATAGCAGTGTGTCAGTGTGCTGTGTGACTTTGGTGTATGTGACTATTTGCATGTTACAGCAGTGTGTCAGTGTGCTGTGGGAAGGGTTTTCATGTATATGACTATTTGCGTGTTATAGCAGTGTGTCAGTGTGCTGCGTGAC										5	5	('chr21',)_9676197_9676786_MTboth_12389_12811	HG002_5X	chr21_5
HISEQ1:20:H9V1RADXX:2:2106:12761:29990	161	chr21	9676198	17	148M	chrM	12452	0	CATGTGTATATGACTATTTGCATGTTATAGCAGTGTGTCAGTGTGCTGTGTGACTTTGGTGTATGTGACTATTTGCATGTTACAGCAGTGTGTCAGTGTGCTGTGGGAAGGGTTTTCATTTATATGACTATTTGCGTGTTATAGCAGT	CCCFFFFDHHGBHGIGIJJIIIGHEJJGCEHJJJJIIGIJIAHHIJFI&gt;GCFHHBGGGCE=8BFHGICGHICHIIB									5	5	('chr21',)_9676197_9676786_MTboth_12389_12811	HG002_5X	chr21_5
HISEQ1:20:H9V1RADXX:1:2110:10981:37943	81	chr5	32338499	70	148M	chrM	14831	0	CTCACTACAACCTCCGCCTCCCAGGTTCAAGAGATTCTTCTGCCTCAGCCTCCCGAGTAGCTGGGATTACAGGCATGTGCCACTGTGCCCAGCTAATTTTGTATTTTTAGTAGAGATGGGGTTTCTCCACATTGGTCAGGCTGGTCTC	AECCDDDDB?DDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDBBBDDDBDDDDDDDDDDDDDEEEEEEEEFFFFFFHHHEJJJJJJIJJJJJJJJJJJJJIIJJJJJJIJJJJJJJJJJJJJJJJJIJJJIJJHHHHHFFFFFCCC	PG:Z:novoalign	AS:i:0	UQ:i:0	NM:i:0	MD:Z:148				1	3	('chr5',)_32338282_32338638_MTboth_14831_14831	HG002_5X	chr5_3
HISEQ1:18:H8VC6ADXX:1:2114:15204:54396	113	chr9	129996	70	148M	chrM	6262	0	GCATATATGTTACTGTACTGAACAGTGTATGGAAATAATAACGCAATGGTAAGTATTTGCGTGACAGTAATTTTTCAGCTCCATCGTAATCTTATGCAGTCTGACTAAAACGCTGTTACGCGGTGCATGACTATACTTATTTTTAAAT	DEEEEDDDDDDDEDDEDDEDDCDDDDDDEEEEEEEEDDDDDDDDDDCDDEDDDDDDDDDDDDDEDDDDDDDDDDEEEEDFFFFHHHHJJJJIJJJJJJJJJIHGJJJJJHJJJJJIHGJJJJJJJJJJJIJJIHFHHHHHFFFFFCCC	PG:Z:novoalign	AS:i:30	UQ:i:30	NM:i:1	MD:Z:118T29				2	2	('chr9',)_129555_129996_MTboth_6262_6296	HG002_5X	chr9_2
HISEQ1:18:H8VC6ADXX:2:2203:12359:8789	65	chr9	129555	70	148M	chrM	6296	0	AGCCAGTCACAGAAGGACAAATATTGCATGAATCCACTAATATCAGGTGTCTAAAACAGTGAAACTCATCAAATCAGAAAGTAAAACGGTGGTTACCAGGGGTGAGAGGGAGACGAAAATTGGGGGGGGCTGTTCAATGGGGATAATT	CCCFFFDFHHFGHJJJBHIJJJIJJJIJJJIJJJJGIIGIIJIJJJJBFGIIIIJJGJG?FHIJJJJJIJJIJGIJGJHGHAEHHFFFDACD									2	2	('chr9',)_129555_129996_MTboth_6262_6296	HG002_5X	chr9_2

复制<br><br>import pandas as pd

# Load the uploaded file
file_path = '/mnt/c/Users/victo/Desktop/HG002_5X.mt.disc.sam.cluster.tsv'
data = pd.read_csv(file_path, sep='\t')

# Extract the relevant column
cluster_id_col = data['Cluster_ID']

# Define a function to convert the Cluster_ID column into the desired format
def convert_to_circos_format(cluster_id):
    parts = cluster_id.split('_')
    hs1 = parts[0].replace("('", "").replace("',)", "")
    start1 = parts[1]
    end1 = parts[2]
    hsM = 'hsM'
    startM = parts[4]
    endM = parts[5]
    return f"{hs1} {start1} {end1} {hsM} {startM} {endM}"

# Apply the function to the Cluster_ID column
circos_format_data = cluster_id_col.apply(convert_to_circos_format)

# Create a DataFrame from the results
circos_format_df = circos_format_data.str.split(expand=True)
circos_format_df.columns = ['hs1', 'start1', 'end1', 'hsM', 'startM', 'endM']

# Remove the header and replace 'chr' with 'hs'
circos_format_df_no_header = circos_format_df.replace({'chr': 'hs'}, regex=True)

# Save the result to a file without the header
output_file_path = '/mnt/c/Users/victo/Desktop/circos_format_data_no_header.txt'
circos_format_df_no_header.to_csv(output_file_path, sep=' ', index=False, header=False)

print(f"File saved to {output_file_path}")

复制<br><br>hs1 633902 633918 hsM 10226 10226
hs11 49862020 49862289 hsM 16095 16391
hs14 49862020 49862289 hsM 16095 16391
hs13 49862020 49862289 hsM 16095 16391
hs11 49862020 49862289 hsM 16095 16391
hs12 49862020 49862289 hsM 16095 16391
hs4 9676197 9676786 hsM 12389 12811
hs4 9676197 9676786 hsM 12389 12811
hs4 9676197 9676786 hsM 12389 12811
hs4 9676197 9676786 hsM 12389 12811
hs3 9676197 9676786 hsM 12389 12811
hs21 9676197 9676786 hsM 12389 12811
hs20 9676197 9676786 hsM 12389 12811
hs21 9676197 9676786 hsM 12389 12811
hs5 32338282 32338638 hsM 14831 14831
hs9 129555 129996 hsM 6262 6296
hsy 129555 129996 hsM 6262 6296
复制NUMT-detector补充生成NUMTs分布位置及断点错误排查问题排查]]></description><link>软件\其它生信软件\k-s\numt-detector错误排查.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/NUMT-detector错误排查.canvas</guid><pubDate>Tue, 29 Oct 2024 09:53:55 GMT</pubDate></item><item><title><![CDATA[软件介绍]]></title><description><![CDATA[ 
 <br><br>PAML（Phylogenetic Analysis by Maximum Likelihood）是一款广泛使用的生物信息学软件，主要用于基于最大似然方法的分子序列数据的进化分析。这个工具主要用来估计核苷酸或氨基酸序列之间的进化关系，如分支长度的估计。PAML 特别适用于复杂的统计模型，如可变替换率和不同的进化模型。<br>请注意，这个软件不适用于大规模数据的最大似然树建立!!!
相反的，你应该需要使用其它建树软件建立最大似然树，并连同 树文件 和 序列文件 一同输入到 PAMLX 软件中进行计算。<br>
建树软件 <a data-href="iqtree：线粒体最大似然树" href="软件\iqtree\iqtree：线粒体最大似然树.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="🗣" aria-label="🗣" data-icon="🗣" aria-hidden="true" style="transform: translateY(0px);"></span>iqtree：线粒体最大似然树</a><img class="emoji" draggable="false" alt="🗣" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f5e3.svg" height="18px" style="max-width: 100%;"> 等
<br><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409031655470.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>
<br>seqfile：指定序列数据文件的路径。
<br>treefile：指定进化树文件的路径。
<br><br>
<br>outfile name：输出文件的名称。
<br>location：输出文件的保存位置。
<br><br>
<br>fix k：固定转换/颠换比率（κ）的值。如果选中，用户必须提供κ的值。请阅读<a data-href="图解核苷酸替换模型（Nucleotide substitution models）" href="术语\图解核苷酸替换模型（nucleotide-substitution-models）.html" class="internal-link" target="_self" rel="noopener nofollow">图解核苷酸替换模型（Nucleotide substitution models）</a>

<br>fix_kappa 用于指定是否固定 K80、F84 或 HKY85 模型中的转换与颠换比率参数 κ。
<br>如果 fix_kappa = 1，则 kappa 的值被固定；
<br>如果 fix_kappa = 0，则 kappa 的值用作迭代的初始估计值。
<br>对于 JC69 或 F81（没有 κ 参数）以及 TN93 和 REV（分别有两个和五个速率参数，且都从数据中估计）模型，fix_kappa 和 kappa 无效。
<br>fix_kappa = 2 与 nhomo = 5 一起用于 baseml 中指定非平稳模型，其中整个速率矩阵 Q（包括交换性参数和碱基频率参数）在不同分支上变化。


<br>fix α：固定 gamma 分布形状参数（α）。如果选中，α的值为0，表示不考虑位点间的变异。

<br>fix_alpha 和 alpha 选项控制跨位点的可变替换速率的 gamma 分布的形状参数 α。当选中了 fix_alpha 且alpha = 0（0 表示无穷大）时，所有位点的替换率相同。正值的 alpha 表示使用离散 gamma 模型，ncatG 是离散 gamma 模型的类别数。


<br>different alpha's for genes：为不同基因设置不同的 alpha 值。
<br>ncatG：离散 gamma 模型的类别数。
<br>fix ρ：固定相关性参数ρ。选中时，ρ的值为0，表示位点间的替换率独立。
<br>TipDate：如果进行时间相关的序列分析，此处可以输入样本的采集时间。
<br>time unit：时间单位，用于时间树分析。
<br>nparK：选择非参数速率模型的类型。
<br>Small_Diff：算法中使用的数值微分阈值。
<br>ndata：数据集的数量，用于多数据集分析。

<br>ndata 设置ndata 变量用于指定序列文件中数据集的数量，有助于处理模拟数据集或多基因对齐数据。具体设置如下：
<br>ndata = 100：所有数据集/对齐使用相同的树结构（一个树块）。
<br>ndata = 100 separate_trees：每个对齐有其自己的树块。
<br>ndata = 100 maintree：使用主树文件生成每个基因对齐的子树，并进行最大似然（ML）分析。
<br>ndata = 100 maintree 1：同上，进行ML分析。
<br>ndata = 100 maintree 0：生成基因树文件，但不运行ML分析。
<br>我们一般选择默认。


<br><br>
<br>runmode：选择树的使用方式，0 表示使用用户提供的树。

<br>runmode = 0：评估树结构文件中指定的树拓扑。
<br>runmode = 1 和 2：通过启发式搜索算法构建进化树，其中1从多分枝树开始，2从星形树开始。
<br>runmode = 3：逐步添加法。
<br>runmode = 4 和 5：从给定或计算的树开始进行NNI（最近邻互换）扰动。
<br>不建议对大规模数据集执行搜树，因为该软件的速度不能满足需求！


<br>model：选择核苷酸替换模型，7 表示使用 REV（GTR）模型。

<br>模型编号：0 至 8 对应不同的替换模型，如 JC69、K80、F81、HKY85 等。
<br>model = 9 和 10：分别对应特殊情况的 REV/GTR 和 UNREST 模型。
<br>自定义速率模型：如 UNRESTu 和 REVu，允许用户指定具有相同速率的核苷酸对。
<br>具体参见<a data-href="图解核苷酸替换模型（Nucleotide substitution models）" href="术语\图解核苷酸替换模型（nucleotide-substitution-models）.html" class="internal-link" target="_self" rel="noopener nofollow">图解核苷酸替换模型（Nucleotide substitution models）</a>


<br>clock：选择分子钟模型，0 表示不使用分子钟。

<br>clock 变量定义了分子钟假设的不同模型：
<br>clock = 0：无分子钟模型，分支速率完全自由变化，使用无根树。
<br>clock = 1：全局分子钟模型，所有分支速率相同，适用于有根树。
<br>clock = 2：局部分子钟模型，大多数分支符合钟模型，默认速率为1，但某些特定分支可有不同速率。
<br>clock = 3：用于多基因或多区段数据的分析，允许不同数据区段的分支速率以不同方式变化。
<br>对于人类的 Y 染色体和 mtDNA 来说，我们一般选择严格分子钟，在这里，也就是说我们选择1.另外，我们需要注意，如果我们输入的 DNA 中明显分区，那么我们就应该选择3.


<br>Mgene：选择是否对基因或数据分区进行不同处理，0 表示速率相同。

<br>多基因或多位点分析（Mgene）Mgene = 0：未使用 G 选项，假设完全同质。
<br>Mgene = 1：分区模型，对每个基因或位点使用相同的模型。
<br>Mgene = 2、3、4：不同的设置允许基因之间具有不同的频率和速率参数。
<br>这点比较适合一段 DNA 序列包含多个分区的情况！


<br>nhomo：选择是否使用非同质性模型，0 表示同质模型。

<br>nhomo = 0：基本替换模型，碱基频率参数通过观察频率平均值估计。
<br>nhomo = 1：同质模型，通过最大似然迭代估计频率参数 πT, πC 和 πA。
<br>nhomo = 2：每个树枝使用一个转换/颠换比率（κ），适用于 K80、F84 和 HKY85 模型。
<br>nhomo = 3, 4, 5：非同质模型，碱基组成在树上发生漂移，不同树枝使用不同的频率参数。
<br>nhomo = 3：每个末端分支、所有内部分支和根使用各自的一套频率参数。
<br>nhomo = 4：为根和每个分支设定不同的初始和末端频率参数。
<br>nhomo = 5：用户指定多套频率参数，并定义每个分支使用哪套参数。


<br>fix blength：选择是否固定分支长度。
<br>optimization method：选择参数优化方法。
<br>icode：选择遗传密码表，用于编码序列。
<br><br>
<br>getSE：计算参数的标准误差。

<br>建议勾选


<br>RateAncestor：计算祖先节点的速率。

<br>可以勾选。即使勾选，也可以在结果中忽视。


<br>clean data：在分析前清洗数据。

<br>可以勾选。


<br><br>让我们来看看别人如何使用。PAML 软件经常被用来计算<a data-href="最近共同祖先时间(Time to most recent common ancestor，MRCA)" href="术语\最近共同祖先时间(time-to-most-recent-common-ancestor，mrca).html" class="internal-link" target="_self" rel="noopener nofollow">最近共同祖先时间(Time to most recent common ancestor，MRCA)</a> 。怎么计算呢？<br>
首先，利用建树软件获得最大似然树（例如 RaxML-NG、<a data-href="iqtree：基础操作" href="软件\iqtree\iqtree：基础操作.html" class="internal-link" target="_self" rel="noopener nofollow">iqtree：基础操作</a>等），然后将序列与树文件丢给 PAML 计算最大似然值。获得的最大似然值可以被当作是遗传距离的一种指标。<br>当然，你也可以直接把序列之间的平均核苷酸差异数目当成是遗传距离的指标。并不一定说要把最大似然值作为遗传距离的指标。<a data-href="ρ（rho）方法" href="术语\ρ（rho）方法.html" class="internal-link" target="_self" rel="noopener nofollow">ρ（rho）方法</a> <a data-href="σ方法" href="术语\σ方法.html" class="internal-link" target="_self" rel="noopener nofollow">σ方法</a>。<br>知道了遗传距离之后，就可以通过以下公式求得<a data-href="最近共同祖先时间(Time to most recent common ancestor，MRCA)" href="术语\最近共同祖先时间(time-to-most-recent-common-ancestor，mrca).html" class="internal-link" target="_self" rel="noopener nofollow">最近共同祖先时间(Time to most recent common ancestor，MRCA)</a>：<br><br>突变率往往在之前的研究中提到，单位一般是  或者 。具体查看 <a data-href="2009 AJHG 净化选择校正：改进的人类线粒体分子钟" href="文献及报道\文献\2024年阅读\7-12月\2009-ajhg-净化选择校正：改进的人类线粒体分子钟.html" class="internal-link" target="_self" rel="noopener nofollow">2009 AJHG 净化选择校正：改进的人类线粒体分子钟</a>。<br><br>
In details, we used PAMLX v1.3.1 (Yang 1997) to calculate maximum-likelihood (ML)  estimates, assuming the HKY85 mutation model with gamma-distributed (32 categories) rates (plus  invariant sites) and two partitions: coding region (positions 00577–16023) and control region  (positions 16024–00576), as described elsewhere (Achilli et al. 2013). We converted ML mutational  distances into years by employing both the corrected molecular clock embedded in the calculator of  (Soares et al. 2009) and the linear mutation rate recently published of 2.7±0.2 x 10-8 base substitution  per nucleotide per year (Posth et al. 2016)<a data-footref="1" href="about:blank#fn-1-5c8c56d3c4b9c60f" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>.
<br>由上我们可知，该研究者使用该软件。选定了 HKY85 模型，并设定了32种突变速率。<br>不明白模型的区别？看看这个：<a data-href="图解核苷酸替换模型（Nucleotide substitution models）" href="术语\图解核苷酸替换模型（nucleotide-substitution-models）.html" class="internal-link" target="_self" rel="noopener nofollow">图解核苷酸替换模型（Nucleotide substitution models）</a>。<br>然后，作者将 mtDNA 分隔成2个区域，分别是控制区和编码区。计算得到了最大似然值的距离，然后根据分子钟转化为时间。<br><br>加入我想选择最熟悉的 GTR+G 模型，应该如何设置呢？<br>
<br>首先，GTR 模型通常设置为：model = 7；
<br>设置分子钟模型为严格分子钟：clock = 1；
<br>启用伽马分布 (G) 和不变位点 (I)：如下，我们需要注意伽马分布的类别数需要自行设定，一个比较保险的方式是设定为 5. 当然，你也可以设定的更多。具体的优缺点请自行 chatgpt。
<br>fix_alpha = 0
alpha = 0.5
ncatG = 5
复制<br><br><br>
<br>
<br>Mitogenome Diversity in Sardinians: A Genetic Window onto an Island's Past 附件<a href="about:blank#fnref-1-5c8c56d3c4b9c60f" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>软件\其它生信软件\k-s\pamlx：最大似然计算.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/PAMLX：最大似然计算.md</guid><pubDate>Tue, 03 Sep 2024 09:41:45 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f5e3.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f5e3.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br>
<a data-tooltip-position="top" aria-label="https://www.robertlanfear.com/partitionfinder/tutorial/" rel="noopener nofollow" class="external-link" href="https://www.robertlanfear.com/partitionfinder/tutorial/" target="_blank">PartitionFinder tutorial (robertlanfear.com)</a><br>
Cognato AI, Vogler AP. Exploring data interaction and nucleotide alignment in a multiple gene analysis of Ips (Coleoptera: Scolytinae). Systematic Biology. 2001 Nov 1;50(6):758-80.
<br>简单来说，该软件能够以相当快的速度对 phy 文件进行分析，获得构建系统发育树的最佳参数。<br><br>假如你只有一个 fasta 文件，不要紧，可以通过多种方法将其转为 phy 文件格式。作者提到了一个软件：Geneious。你可以从这里下载（免费版本）： <a rel="noopener nofollow" class="external-link" href="http://www.geneious.com/" target="_blank">http://www.geneious.com/</a> 针对任何对齐序列（如果你对於对齐有什么问题，可以查看 <a data-href="MAFFT：使用教程" href="软件\其它生信软件\k-s\mafft：使用教程.html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：使用教程</a> 和 <a data-href="Trimal：自动修剪序列不可靠区域" href="软件\其它生信软件\t-z\trimal：自动修剪序列不可靠区域.html" class="internal-link" target="_self" rel="noopener nofollow">Trimal：自动修剪序列不可靠区域</a>），只需要在 导出 时选择 phy 格式即可。<br>现在你获得了 phy 文件的对齐文件，你需要再准备一个参数的配置文件 cfg。你可以在该软件的软件包中找到模板，并进行修改成适合你自己的参数。<br><br>地址： <a rel="noopener nofollow" class="external-link" href="https://github.com/brettc/partitionfinder/releases/latest" target="_blank">https://github.com/brettc/partitionfinder/releases/latest</a><br>
下载之后，解压到电脑。可以在 win/Linux 运行。以下以 linux 为范例。<br><br>软件使用 python2.7.X 版本。版本比较老，可以创建虚拟环境：<br># 创建环境
conda create -n partitionfinder_env python=2.7
# 激活环境
conda activate partitionfinder_env
复制<br>另外，你可能需要一些安装包：<br>conda install numpy
pip install numexpr==2.6.9
# conda install numexpr==2.6.9
# conda install numexpr
pip install tables==3.4.4
# conda install tables==3.4.4
# conda install tables
pip install scikit-learn==0.20.4
# conda install scikit-learn==0.20.4
# conda install scikit-learn
复制<br>准备完毕之后，就可以使用了。<br><br>举个例子，在 partitionfinder-2.1.1/examples 中，以 partitionfinder-2.1.1/examples/nucleotide/partition_finder.cfg 为例，打开该文件，查看其中的参数：<br>## ALIGNMENT FILE ##
alignment = test.phy;

## BRANCHLENGTHS: linked | unlinked ##
branchlengths = linked;

## MODELS OF EVOLUTION: all | allx | mrbayes | beast | gamma | gammai | &lt;list&gt; ##
models = GTR, GTR+G, GTR+I+G;

# MODEL SELECCTION: AIC | AICc | BIC #
model_selection = aicc;

## DATA BLOCKS: see manual for how to define ##
[data_blocks]
Gene1_pos1 = 1-789\3;
Gene1_pos2 = 2-789\3;
Gene1_pos3 = 3-789\3;
Gene2_pos1 = 790-1449\3;
Gene2_pos2 = 791-1449\3;
Gene2_pos3 = 792-1449\3;
Gene3_pos1 = 1450-2208\3;
Gene3_pos2 = 1451-2208\3;
Gene3_pos3 = 1452-2208\3;

## SCHEMES, search: all | user | greedy | rcluster | rclusterf | kmeans ##
[schemes]
search = greedy;

复制<br>具体的参数你可以在软件手册中查到，这里简略说说：<br>
<br>ALIGNMENT FILE：输入文件名字
<br>BRANCHLENGTHS：告诉 PartitionFinder2 是否估计所有分区上的一组分支长度，或者每个分区是否应该有自己的一组独立分支长度。事先可能很难知道这些选项中哪一个是最好的，但并非所有系统发育程序都允许不连锁的分支长度。因此，我们将将此选项保留为“branchlenghts = linked;”&nbsp;PartitionFinder2 手册对此选项有更深入的解释。
<br>models： 为每个分区分析哪些替代模型。我们将选择一组小但合理的模型。保持较小的值在这里很有用，因为它将使我们的分析运行得更快。如果你想更为全面，设置 all 吧。
<br>model_selection：将保留为“AICc”。这意味着模型选择和划分方案比较将使用修正后的艾凯克信息准则进行。您应该始终选择此选项而不是 AIC，但您选择 AICc 还是 BIC 仍然是个人选择的问题。有时它确实会影响结果，尽管通常影响不大，而且通常不会影响树拓扑。
<br>data_blocks：最重要的。这是我们定义整个分析所基于的站点集的地方。 PartitionFinder2 的工作原理是基于这些数据块尝试不同的分区方案，因此其想法是使用数据块来定义您认为可能以类似方式演变的站点集。 PartitionFinder2 永远不会尝试细分任何数据块，因此最好定义大量小数据块，而不是几个大数据块（在合理范围内）。对于蛋白质编码基因来说，明智的做法是为每个基因中的每个密码子位置定义一个数据块。如果您不知道密码子位置在哪里，那么弄清楚这一点并向数据块部分中的 PartitionFinder2 提供信息非常重要。未能定义蛋白质编码基因中的密码子位置可能会导致系统发育树的估计非常差。
<br>schemes：告诉 PartitionFinder2 如何比较分区方案。在本教程中，我们将设置“search=greedy”。这告诉 PartitionFinder2 使用 2012 年 MBE 中的 PartitionFinder 论文中描述的启发式搜索算法来搜索良好的分区方案。由于我们定义了 7 个数据块，因此可以分析所有可能的分区方案（'search=all'），但这可能需要相当长的时间，因为 7 个数据块有很多可能的分区方案。如果您的计算机有很多处理器，或者有时间等待，您可能想尝试一下。但对于大多数分析来说，贪婪搜索会得到与 search=all 完全相同的答案。<br>
现在 .cfg 文件已设置完毕，我们只需保存它即可运行 PartitionFinder2。
<br><br># 确保你激活了虚拟环境
cd partitionfinder-2.1.1/examples/nucleotide
# 运行软件
(partitionfinder_env) root@Lin:partitionfinder-2.1.1/examples/nucleotide$ 
python \
'partitionfinder-2.1.1/PartitionFinder.py'\
'partitionfinder-2.1.1/examples/nucleotide/partition_finder.cfg'
复制<br>哗啦啦，运行完成了！<br><br>在 partitionfinder-2.1.1/examples/nucleotide/analysis/best_scheme.txt 中，看到 Best partitioning scheme 中的信息：<br>Scheme Name       : step_4
Scheme lnL        : -5413.049224853516
Scheme AICc       : 10934.7558313
Number of params  : 53
Number of sites   : 2208
Number of subsets : 5

Subset | Best Model | # sites    | subset id                        | Partition names       
1      | GTR+G      | 736        | 15599ff31918c11c18f1186d6302f726 | Gene2_pos1, Gene1_pos1, Gene3_pos1
2      | GTR+G      | 516        | 9b7ee22854477034e1596f067a4f37f3 | Gene3_pos2, Gene1_pos2
3      | GTR+G      | 263        | fb291d83f956259cc94c6ba41b0fdf14 | Gene1_pos3            
4      | GTR        | 220        | 9801c30aa4490587ec45223422b9aed8 | Gene2_pos2            
5      | GTR+G      | 473        | 0f87f6848266d4913a7204898e9de700 | Gene3_pos3, Gene2_pos3
复制<br>排第一的时 GTR+G 因此这个模型最佳！<br><br>接下来你需要去建树。每个软件都有格式要求，Partitionfinder 想到了这一点，因此针对不同的软件给出了不同的命令，都在 partitionfinder-2.1.1/examples/nucleotide/analysis/best_scheme.txt 中：<br>Nexus formatted character sets for IQtree
Warning: the models written in the charpartition are just the best model found in this analysis. Not all models are available in IQtree, so you may need to set up specific model lists for your analysis
# 给IQTREE软件的
#nexus
begin sets;
charset Subset1 = 790-1449\3 1-789\3 1450-2208\3;
charset Subset2 = 1451-2208\3 2-789\3;
charset Subset3 = 3-789\3;
charset Subset4 = 791-1449\3;
charset Subset5 = 1452-2208\3 792-1449\3;
charpartition PartitionFinder = GTR+G:Subset1, GTR+G:Subset2, GTR+G:Subset3, GTR:Subset4, GTR+G:Subset5;
end;

# 给RaxML软件的
RaxML-style partition definitions
Warning: RAxML allows for only a single model of rate heterogeneity in partitioned analyses. I.e. all partitions must be assigned one of three types of model: No heterogeneity (e.g. GTR); +G (e.g. GTR+G); or +I+G (e.g. GTR+I+G). If the best models for your datasetcontain different types of model for different subsets you will need to decide on the best rate heterogeneity model before you run RAxML. If you prefer to do things more rigorously, you can run separate PartitionFinder analyses for each type of rate heterogenetity Then choose the scheme with the lowest AIC/AICc/BIC score. Note that these re-runs will be quick!

DNA, Subset1 = 790-1449\3, 1-789\3, 1450-2208\3
DNA, Subset2 = 1451-2208\3, 2-789\3
DNA, Subset3 = 3-789\3
DNA, Subset4 = 791-1449\3
DNA, Subset5 = 1452-2208\3, 792-1449\3


MrBayes block for partition definitions
Warning: MrBayes only allows a relatively small collection of models. If any model in your analysis is not one that is included in MrBayes (e.g. by setting nst = 1, 2, or 6 for DNA sequences; or is not in the available list of protein models for MrBayes)then this MrBayes block will just set that model to nst = 6 for DNA, or 'wag' for Protein. Similarly, the only additional parameters that this MrBayes block will include are +I and +G. Other  parameters, such as +F and +X, are ignored. If you want to use this MrBayes block for your analysis, please make sure to check it carefully before you use it we've done our best to make it accurate, but there may be errors that remain!
# 给MrBayes软件的
begin mrbayes;

charset Subset1 = 790-1449\3 1-789\3 1450-2208\3;
charset Subset2 = 1451-2208\3 2-789\3;
charset Subset3 = 3-789\3;
charset Subset4 = 791-1449\3;
charset Subset5 = 1452-2208\3 792-1449\3;

partition PartitionFinder = 5:Subset1, Subset2, Subset3, Subset4, Subset5;
set partition=PartitionFinder;

lset applyto=(1) nst=6 rates=gamma;
lset applyto=(2) nst=6 rates=gamma;
lset applyto=(3) nst=6 rates=gamma;
lset applyto=(4) nst=6;
lset applyto=(5) nst=6 rates=gamma;

prset applyto=(all) ratepr=variable;
unlink statefreq=(all) revmat=(all) shape=(all) pinvar=(all) tratio=(all);

end;

复制]]></description><link>软件\其它生信软件\k-s\partitionfinder：一站式解决系统发育树参数问题.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/Partitionfinder：一站式解决系统发育树参数问题.md</guid><pubDate>Sun, 08 Sep 2024 13:16:04 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f600.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f600.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[工作流程]]></title><description><![CDATA[ 
 <br><br><br>从 vcf 文件生成系统发育树（例如，使用 RAxML 或 MEGA，运行多次迭代）。树的质量对分支的 SNP 分配以及所有下游分析有重大影响。<br><br># 将生成一个 branches.snp 文件，包含每个 SNP 映射到树的哪个分支的信息。
phynder -B -o branches.snp tree.nwk tree.vcf.gz
复制<br><br>运行 pathPhynder 来调用给定的古代样本数据集中的 SNP，并找到可以将它们映射到树中的最佳路径和分支。<br># 准备数据 - 这将输出一个用于调用变异的 bed 文件和用于系统发育定位的表格
pathPhynder -s prepare -i tree.nwk -p &lt;prefix_output&gt; -f branches.snp

# 运行 pathphynder
pathPhynder -s all -i tree.nwk -p tree_data/&lt;prefix_output&gt; -b &lt;sample.bam&gt;

# 或者，如果分析多个 bam 文件
pathPhynder -s all -i tree.nwk -p tree_data/&lt;prefix_output&gt; -l &lt;bam_list&gt;
复制<br><br><br>对于每个古代样本，在信息丰富的分支定义位点运行 pileup，并进行脱氨和错配过滤。<br>pathPhynder -s &lt;1 或 pileup_and_filter&gt; -i &lt;tree&gt;.nwk -p tree_data/&lt;prefix_output&gt; -l &lt;sample.list&gt;
复制<br><br>对于每个古代样本，在树的每个分支添加衍生和祖先状态信息。遍历树，评估每个分支上的祖先和衍生标记的数量，并识别最佳路径。<br>pathPhynder -s &lt;2 或 chooseBestPath&gt; -i &lt;tree&gt;.nwk -p tree_data/&lt;prefix_output&gt; -l &lt;bam_list&gt;
复制<br><br>pathPhynder -s &lt;3 或 addAncToTree&gt; -i &lt;tree&gt;.nwk -p tree_data/&lt;prefix_output&gt; -l &lt;bam_list&gt;
复制<br><br>选项:
-s STEP, --step=STEP
指定运行的步骤。选项:
- prepare - 准备运行 pathPhynder 所需的文件。
- all - 运行所有步骤以将古代 SNP 映射到分支 (1,2,3)。
- 1 或 pileup_and_filter - 在古代 bam 文件中运行 pileup 并过滤碱基。
- 2 或 chooseBestPath - 为每个样本找到树的最佳分支/节点。
- 3 或 addAncToTree - 将古代样本添加到树中。
[默认 all]

-i INPUT_TREE, --input_tree=INPUT_TREE
Newick 格式的输入树。[必需]

-f BRANCHES_FILE, --branches_file=BRANCHES_FILE
branches.snp 文件 - 使用 phynder 创建的 SNP 放置文件。

-p PREFIX, --prefix=PREFIX
与树关联的数据文件的前缀。
这些文件在分支分配步骤中之前生成。[必需]

-b BAM_FILE, --bam_file=BAM_FILE
输入 bam 文件。[必需]

-l LIST_OF_BAM_FILES, --list_of_bam_files=LIST_OF_BAM_FILES
bam 文件路径列表。[必需]

-r REFERENCE, --reference=REFERENCE
参考基因组（fasta 格式）。[默认 "/home/luolintao/miniconda3/envs/pathPhynder/lib/R/library/pathphynder/R/../data/reference_sequences/hs37d5_Y.fa.gz"]

-m FILTERING_MODE, --filtering_mode=FILTERING_MODE
pileup 过滤模式。选项: default, no-filter 或 transversions。[默认 "default"]

-t MAXIMUMTOLERANCE, --maximumTolerance=MAXIMUMTOLERANCE
遍历树时容许的最大 ALT 等位基因数量。
如果超过，算法将停止并切换到下一个路径。[默认 3]

-q BASEQUALITY, --baseQuality=BASEQUALITY
samtools mpileup 的最小碱基质量。[默认 20]

-c PILEUP_READ_MISMATCH_THRESHOLD, --pileup_read_mismatch_threshold=PILEUP_READ_MISMATCH_THRESHOLD
接受变异的错配阈值（用于 pileup 中同时存在两种等位基因的情况）。
为了使变异通过过滤，包含最频繁等位基因的读数必须至少占总读数的 x 比例。1 是最严格的，0.5 是最宽松的。[默认 0.7]

-o OUTPUT_PREFIX, --output_prefix=OUTPUT_PREFIX
样本名称。这仅在单个 bam 文件用作输入时有效。[默认 bamFileName]

-G HAPLOGROUPS, --haplogroups=HAPLOGROUPS
已知单倍群定义的 SNP 列表

-h, --help
显示此帮助信息并退出

复制]]></description><link>软件\其它生信软件\k-s\pathphynder：将古代dna上到最大似然树.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/pathPhynder：将古代DNA上到最大似然树.md</guid><pubDate>Fri, 23 Aug 2024 08:38:44 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[准备文件]]></title><description><![CDATA[ 
 <br><a data-href="pathPhynder：将古代DNA上到最大似然树" href="软件\其它生信软件\k-s\pathphynder：将古代dna上到最大似然树.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="🥵" aria-label="🥵" data-icon="🥵" aria-hidden="true" style="transform: translateY(0px);"></span>pathPhynder：将古代DNA上到最大似然树</a><img class="emoji" draggable="false" alt="🥵" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg" height="18px" style="max-width: 100%;"><br><br><br>你需要一个最大似然树的文件。<br>注意
你的最大似然树的文件内出现的所有 ID 必须在下面提到的 VCF 文件内存在！
<br>你如何才能得到一个最大似然树的文件呢？很多软件都可以建树：<a data-href="iqtree：基础操作" href="软件\iqtree\iqtree：基础操作.html" class="internal-link" target="_self" rel="noopener nofollow">iqtree：基础操作</a>，<a data-href="GUIDANCE2 Server ：多序列比对置信软件" href="软件\其它生信软件\a-j\guidance2-server-：多序列比对置信软件.html" class="internal-link" target="_self" rel="noopener nofollow">GUIDANCE2 Server ：多序列比对置信软件</a>，还有 <a data-tooltip-position="top" aria-label="https://github.com/amkozlov/raxml-ng" rel="noopener nofollow" class="external-link" href="https://github.com/amkozlov/raxml-ng" target="_blank">RaxML-ng</a> 等。<br>举例来说：F_ML.bestTree<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408301015385.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>如上所述，你需要一个 VCF 文件。这个 VCF 文件中存在的 ID 必须和最大似然树文件内的 ID 对应。<br>
例如：F.vcf<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408301017894.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>记住，ID 必须一一对应，不能一个 ID 连个单倍群后缀，而另外则没有！<br><br>既然是古 DNA 上树，那么古代 DNA 文件不可或缺。你需要将这些 BAM 文件存放在一个位置，并打印出所有的文件的绝对路径。<br>例如，all_bam_list：<br>/home/zhiyongwang/9_f/925+F/ancient_DNA/0LS10.Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/11KBM1_Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/84001.Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/91KLH18_Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/91KLM2_Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/ARG001.B0101_Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/ARG003.A0101_Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BAY001.A0101_Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BGD004.Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BIY001.Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BIY003.Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BIY005.Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BIY007.Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BIY008.Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BIY009.Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BIY012.Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BOO002.Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BOO004.Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BOT15.Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BRG004.A0101_Y.bam
/home/zhiyongwang/9_f/925+F/ancient_DNA/BRG005.B0101_Y.bam
复制<br><br>这个在软件安装包内存在，不用管。<br><br># 定义常用路径变量，减少重复路径定义
PHYNDER_PATH="/home/zhiyongwang/phynder/phynder" # 不用修改
pathPhynder_script="Rscript /home/zhiyongwang/pathPhynder/pathPhynder.R" # 不用修改
TREE_FILE="你的最大似然树文件"
VCF_FILE="你的VCF文件"
ISOGG_FILE="/home/zhiyongwang/pathPhynder/data/210513.snps_isogg_curated.txt" # 不用修改
BAM_LIST="bam文件绝对路径的txt文件" # 上述的all_bam_list
PREFIX="tree_data/result" # 输出文件的前缀名字，随便写

# 生成包含每个树枝上SNP信息的 branches.snp 文件
$PHYNDER_PATH -B -o branches.snp $TREE_FILE $VCF_FILE

# 输出用于变异调用的 BED 文件和系统发育定位的表格
$pathPhynder_script -s prepare -i $TREE_FILE -p 2M -f branches.snp -G $ISOGG_FILE

# 并行处理 BAM 文件列表，输出日志
nohup bash -c '
cat $BAM_LIST | xargs -P 30 -I {} bash -c '"'"'
    pathPhynder -i $TREE_FILE -p $PREFIX -b {} -s all -t 100 -G $ISOGG_FILE
'"'"'
' &gt; place_new_aDNA.log 2&gt;&amp;1 &amp;
复制<br><br>当所有的程序都运行完成之后，就可以在 PREFIX="tree_data/result" 内找到：<br>
<br>final_tree.nwk
<br>final_tree.pdf <br>
其中 nwk 是树文件，另一个是 pdf。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408301523500.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
]]></description><link>软件\其它生信软件\k-s\pathphynder：y染色体古代dna上系统发育树.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/pathPhynder：Y染色体古代DNA上系统发育树.md</guid><pubDate>Fri, 30 Aug 2024 07:23:43 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44e.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44e.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[PhyloSuite：不简单的工作让系统发育分析变得简单]]></title><description><![CDATA[ 
 <br>
<a data-tooltip-position="top" aria-label="https://sci-hub.se/10.1002/imt2.87" rel="noopener nofollow" class="external-link" href="https://sci-hub.se/10.1002/imt2.87" target="_blank">论文链接</a><br>
<a data-tooltip-position="top" aria-label="https://www.youtube.com/watch?v=qtAL8X3314g" rel="noopener nofollow" class="external-link" href="https://www.youtube.com/watch?v=qtAL8X3314g" target="_blank">视频链接</a><br>
<a data-tooltip-position="top" aria-label="https://github.com/dongzhang0725/PhyloSuite" rel="noopener nofollow" class="external-link" href="https://github.com/dongzhang0725/PhyloSuite" target="_blank">Github链接</a>
<br>这是兰州大学张东团队2023年2月16日在iMeta期刊上发表的题为“Using PhyloSuite for molecular phylogeny and tree-based analyses&nbsp;”的文章，该论文主要是对他们研发出的新软件PhyloSuite进行一个介绍。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271721355.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>新一代测序技术的进步让公共数据库获得的基因数据量得到大幅增加，尽管这为数据分析提供了更多的原材料，但同时也对我们检索和管理能力提出了更高的要求，而对于生信初学者和不太懂计算机的研究人员而言是耗时且困难的。系统发育分析的标准程序是选择和下载GenBank文件，提取目标基因，序列比对再优化，然后比对连接（针对多基因串联），测试得到最佳拟合划分方案和进化模型，再进行系统发育建树，最后可对构建的树进行注释和美化。但往往这些程序的操作可能会非常耗时，尤其是在批量处理数据时，对于生信刚入门的同学来说，无疑是难上加难，PhyloSuite便是为此而生，它是一个简单高效的可视化系统发育分析平台，整合了以上所述的所有分析步骤所需的软件，适用于单基因及多基因联合系统发育分析，只要简单地点击几下鼠标，它就会帮你自动解决一系列流程方面的疑难杂症，让你能把更多的时间和精力放在对科学问题的思考上。<br>今天便以多基因串联建树为例，对PhyloSuite的功能进行一个基本的介绍。<br>PhyloSuite提供了灵活的GenBank获取选项卡，首先在打开PhyloSuite后，点击菜单栏中的“File”选项中的“Import file(s) or ID(s)”后会出现Input窗口，可输入从NCBI获得的ID号。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271703918.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>在输入ID号并单击“start”后，PhyloSuite会从NCBI中提取到GenBank文件并批量输出到工作区内（如下图红色选中区）。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271703273.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
再点击"File"中的“Extract GenBank file”,在弹出的Extracter界面，可在“Lineage&nbsp; color”一栏中根据需求来对纲、目、科等进行颜色的选择，点击“start”后，Phylosuite会将序列以CDS、外显子、内含子等模块进行拆解分类，代替手动剥取基因这一步骤，从而大大节约时间。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271703776.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271703030.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
值得注意的是，在files一栏中文件的由上往下是对你操作步骤顺序的反映，每一个文件对应一个操作流程所产生的结果。接着是通过“Alignment”中的“<a data-href="MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)" href="软件\其它生信软件\a-j\mafft：(multiple-alignment-program-for-amino-acid-or-nucleotide-sequences).html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)</a>”进行一个序列比对，在Input一栏中输入你想选择的基因FASTA文件，然后选择“Alignment Mode”开始运行，再将比对好的结果用Gblock来切除。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271704636.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271704636.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271704668.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>将Gblock切好后的基因序列比对文件进行一个串联，串联后再通过ModelFinder，找到适用于MrBayes（以MrBayes为例）的模型，然后最后通过Mrbayes来建树，建树的结果会生成一个文件，可打开Figtree来查看，并且可以通过iTOL进化树美化网站进行修饰和注释。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271704753.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271705148.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271705691.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271705543.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271705518.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>以上便是本期的内容，总的来说，这是一款非常方便实用的软件，不管是做进化方向研究的科学家还是生信刚入门的同学，都可以试试它，说不定会起到事半功倍的效果。]]></description><link>软件\其它生信软件\k-s\phylosuite：不简单的工作让系统发育分析变得简单.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/PhyloSuite：不简单的工作让系统发育分析变得简单.md</guid><pubDate>Sun, 08 Sep 2024 13:18:10 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271721355.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312271721355.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[PLINK：转换 VCF 到 BED, BIM, FAM]]></title><description><![CDATA[ 
 <br>
<br>
.BED 文件：

<br>这是一个二进制文件，用于存储基因型数据。
<br>.bed 文件通常与 .bim 和 .fam 文件一起使用，这三个文件共同描述了基因型矩阵。
<br>文件中的数据是压缩的，每个位点的基因型用两位二进制数表示（00, 01, 10, 11），使得文件既紧凑又易于快速处理。


<br>
.BIM 文件：

<br>这是一个文本文件，包含了 SNP（单核苷酸多态性）标记的元数据。
<br>每一行代表一个位点，包含六个字段：染色体号、SNP 标识符、遗传距离（摩尔距离）、物理位置以及两个等位基因（通常是 A 和 B）。
<br>.bim 文件帮助在 .bed 文件中定位各个基因型数据点。


<br>
.FAM 文件：

<br>这也是一个文本文件，用于描述样本信息。
<br>每一行代表一个个体，包含六个字段：家族ID、个体ID、父亲ID、母亲ID、性别（1表示男性，2表示女性，0表示未知）和表型（通常是1和2表示不同的表型，-9或0表示未知或未测量的表型）。
<br>.fam 文件在关联分析和群体遗传学研究中尤为重要，因为它提供了分析需要的家族结构和表型信息。


<br>
BED 文件：这是 PLINK 的二进制基因型文件，包含个体的基因型数据。这种格式允许快速的读取和高效的存储。

<br>
BIM 文件：相当于基因型信息的标记文件，列出了每个位点的染色体位置、基因位点标识符、摩尔体位置、以及等位基因类型。

<br>
FAM 文件：描述样本的文件，通常包含家族信息、个体ID、父母信息、性别、表型等。

<br>打开命令行界面（例如终端或命令提示符），使用以下命令将 VCF 文件转换为 PLINK 的 BED, BIM, FAM 格式：<br>plink --vcf 您的文件.vcf --recode compound-genotypes --double-id --make-bed --out 您的文件（无后缀）
复制<br>这里：<br>
<br>--vcf input.vcf 指定了输入的 VCF 文件。
<br>--make-bed 命令告诉 PLINK 创建 BED, BIM, FAM 文件。
<br>--out output_prefix 指定输出文件的前缀。例如，如果您指定 output_prefix 为 mydata，PLINK 将生成 mydata.bed、mydata.bim 和 mydata.fam 文件。
<br>运行这个命令后，您应该会在指定的输出目录中看到三个新文件：.bed、.bim 和 .fam。]]></description><link>软件\其它生信软件\k-s\plink：转换-vcf-到-bed,-bim,-fam.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/PLINK：转换 VCF 到 BED, BIM, FAM.md</guid><pubDate>Fri, 21 Jun 2024 07:30:21 GMT</pubDate></item><item><title><![CDATA[软件下载]]></title><description><![CDATA[ 
 <br>Haplotype Network（单倍型网络）是一种用于研究和可视化遗传序列变异之间关系的工具，尤其在生物信息学、遗传学和考古学等领域中具有重要应用。单倍型（Haplotype）是指一组在个体或物种特定染色体区段上紧密连锁的遗传标记，它们通常作为一个整体一起遗传。这些遗传标记可以是单个核苷酸多态性（SNPs）、插入/缺失（indels）或其他类型的遗传变异。通过分析这些遗传变异的模式，研究人员可以揭示个体或物种之间的遗传关系、进化历史和群体结构。<br>进行绘图之前，应该已经使用DnaSP和Arlequin计算出了Fst。如果没有，请看<a data-href="DnaSP：AMOVA及Fst分析软件操作" href="软件\其它生信软件\a-j\dnasp：amova及fst分析软件操作.html" class="internal-link" target="_self" rel="noopener nofollow">DnaSP：AMOVA及Fst分析软件操作</a>。<br><br><a data-tooltip-position="top" aria-label="https://popart.maths.otago.ac.nz/" rel="noopener nofollow" class="external-link" href="https://popart.maths.otago.ac.nz/" target="_blank">下载地址</a>。<br><br>这个软件的设计十分糟糕，所以数据准备至关重要。<br>
建议认真阅读下列每一个要点，以防止出现格式错误！！<br><br>数据的格式如下所示:<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402041250489.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>PopART 数据格式，主要有两个data和Traits模块，红色部分为主要模板参数，黑色部分需要通过实际数据修改<br>举个例子来说，应该如下所示：<br>#NEXUS

Begin Data;

    Dimensions ntax=12 nchar=13;

    Format datatype=DNA missing=N gap=-;

    Matrix

Hap_1   TACATCAGGGTAG

Hap_2   TACATCAGGGTAC

Hap_3   TACATTAGGGTAC

Hap_4   TCCACCAGGGAAC

Hap_5   TCCATCAGGGTAC

Hap_6   TACATCAGGGTCC

Hap_7   TACAACAGCTTAC

Hap_8   TACAACAGGGTAC

Hap_9   CACCACCACGTAC

Hap_10  TATAACAAGGTAC

Hap_11  TACTTCAGGGAAC

Hap_12  TACAACAGGGAAC

;

END;

 

Begin Traits;

Dimensions NTraits=4;

format labels=yes missing=? separator=Comma;

TraitLabels Fujian Hebei Heilongjiang Jiangsu;

Matrix

 

Hap_1 10,0,0,0

Hap_2 19,9,12,10

Hap_3 1,0,0,0

Hap_4 1,0,0,0

Hap_5 1,0,0,0

Hap_6 0,0,1,0

Hap_7 0,0,1,0

Hap_8 0,0,2,0

Hap_9 0,0,1,0

Hap_10 0,0,0,7

Hap_11 0,0,0,2

Hap_12 0,0,0,1

;

End;
复制<br><br>#NEXUS

Begin Data;

    Dimensions ntax=280 nchar=111;

    Format datatype=DNA missing=N gap=-;

    Matrix

Hap_1 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_2 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_3 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATATTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_4 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_5 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCCTTGATATGTTGTATAAATCCTGAGCTCGTTCCACTCCACCTGTCCAGTTCATCGTATCA
Hap_6 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTACCA
Hap_7 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCCTGGGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_8 CATTGTTGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_9 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAACCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_10 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAGTCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_11 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCGGTTCATCGTATCA
Hap_12 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_13 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAAGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_14 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATTGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_15 CATTGTCGTTTATTGACTGCGTTAGCCAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_16 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCACCGTATCA
Hap_17 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACGAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_18 CATTGTCGTTTATTGACTGCGTTAGCTAAAAACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_19 CATTGTCGTTTATTGATTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_20 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTCATCGTATCG
Hap_21 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACCCCACCTGTCCAGTTCATCGTATCA
Hap_22 CATCGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_23 CATTGTCGTTTATTGACTGCGTTAGCCAAAGACAAATCGCTAGAGGCTTCCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_24 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCATATCA
Hap_25 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCG
Hap_26 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATACGTTGTATGAATCTTGGACTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_27 CATTGTCGTTTATTGACTGCGTTAGCCAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_28 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTCTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_29 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTCTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCGGTTCATCGTATCA
Hap_30 CATTGTCGTTTATTGACTGCGTTAGCTAGAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_31 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGCCCAGTTCATCGTATCA
Hap_32 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTCCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_33 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAACTCGTTCTACTCCACCTGTCCAGTTCACCGTATCA
Hap_34 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTTATCGTATCA
Hap_35 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGCTCATCGTATCA
Hap_36 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTTATCGTATCA
Hap_37 CATTGTCGTTTATTGACTGTGTTAGCTAAAGACAAATCGCTAGAGGCCTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_38 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGCTCATCGTATCA
Hap_39 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCCTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_40 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCTAGTTCATCGTATCA
Hap_41 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACGAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGCTCATCGTATCA
Hap_42 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGCATCA
Hap_43 CATTGTCATTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_44 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTCCATCGTATCA
Hap_45 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGCCCAGTTCATCGTATCA
Hap_46 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTATCCAGTTCATCGTATCA
Hap_47 CATTATCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCG
Hap_48 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCCCGTTCTACTCCACCTGTCCAGTTCATCGTATTA
Hap_49 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAATCCATCGTATCA
Hap_50 CACTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_51 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTTATCATATCA
Hap_52 CATTGTCGTTTATTGGCTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTCGTGTAAATCTTGAGCTCGTTCTATTCCACCTGTCCAGTTCATCGTATCA
Hap_53 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCGTCGTATCA
Hap_54 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTCGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_55 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAACCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCGGTTCATCGTATCA
Hap_56 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACCCCACCTGTCCAGTTCATCGTATCA
Hap_57 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTGTGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_58 CATTGTCGTTTACTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTCGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_59 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAACTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_60 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCACCGTACCA
Hap_61 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATATTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_62 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAAGCTTTCTTTGATATGTTGTATGAATCTTGAACTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_63 CATTGTCGTTTATTGACTGCGTTAGCTAAGGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTGTGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_64 CATTGTCGTTTATTGACTGCGTTAGCTAAAGATAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_65 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCCTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_66 CATTGTCGCTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCACCGTATCA
Hap_67 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACCCCACCTGTCCGGTTCATCGTATCA
Hap_68 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCAACTGTCCAGTTCATCGTATCA
Hap_69 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGCATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_70 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTCCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCACCGTATCA
Hap_71 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTGTGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATTA
Hap_72 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATTA
Hap_73 CATTGTCGTTTATTGACTGCGTTAGATAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTTATCGTATCA
Hap_74 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGGTATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_75 CGTTGTCGTTTATTGACTGCGTTAACTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_76 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTCCACCGTATCA
Hap_77 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTTGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_78 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCTAGTTCGTCGTATCA
Hap_79 CATTGTTGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_80 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAACCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCCTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_81 CATTGTCGTTTATTGACCGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_82 CATTGTTGTTTATTGACTGCGTTAGCTAAAGACAAGTCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_83 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCTAGTTCATCGTATCA
Hap_84 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCG
Hap_85 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTTTACTCCACCTGTCCAGTTCATCGTATCA
Hap_86 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTATTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_87 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTCGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_88 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_89 CATTGTTGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCATATCA
Hap_90 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCCCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_91 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTCGATATGTTGTATGAATCTCGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_92 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGTTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_93 CATTGTCGTTTATTGACTGCGTTAGCTAAAAACAAATCGCTAGAGGCTTTCTTTGATATGCTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_94 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCCACTCCACCTGTCCAGTTCATCGTATCA
Hap_95 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTCCATCGTATCA
Hap_96 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTGGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGCTCATCGTATCA
Hap_97 CATTGTCGTTTATTAACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_98 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATATTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCTAGTTCATCGTATCA
Hap_99 CATTGTCGTTTATTGACTGCGTTAACTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGGATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCACCGTATCA
Hap_100 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGGGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_101 CATTGTCGTTTATTGACTGCGTTAGCCAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCGGTTCATCGTATCA
Hap_102 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAACTCGTTCTACTCCACTTGTCCAGTTCATCGTACCA
Hap_103 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGCTCATCGTATCA
Hap_104 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTTATCGTATTA
Hap_105 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATTGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_106 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGACATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_107 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATACGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_108 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTCCTACTCCACCTGTCTAGTTCATCGTATCA
Hap_109 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCCTGGGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_110 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAACCGCTAGAGGCTTTCTTTGATACGTTGTATGAATTTCGAACTCGTTCTACTCCACCTGTCCAGTTCATCGTATCG
Hap_111 CATTGTCGTTTATTGATTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTGTCA
Hap_112 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAGTCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATTA
Hap_113 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGGTATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_114 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAAGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_115 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTATATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCACCGTATCA
Hap_116 CATTGTCGTTTATTGACTGCGTTAGCTAAAGGCAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_117 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTCGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_118 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_119 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACCCCACCTGTCCAGTTCATCGTATTA
Hap_120 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCACTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTTATCGTATCA
Hap_121 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCCTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCTAGTTCATCGTATCA
Hap_122 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATACGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_123 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAACTCGTTCTACTCCACCTGTCCAGTTCATCGTATCG
Hap_124 CATTGTCGTTTATTGACTGCGTCAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_125 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAACCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_126 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTATATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_127 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCGGTTCATCGTATCA
Hap_128 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGCATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_129 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATACGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_130 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATTA
Hap_131 CATTGTCGCTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_132 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTAATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_133 CATTGTCGTTTATTGACTGTGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_134 CATTGTCGTTTATTGACTGCGTTAGCTAGAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAACTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_135 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCCACTCCACCTGTCCAGTTCATCGTATCA
Hap_136 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAACCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTTATCATATCA
Hap_137 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATATTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_138 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAGTCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATTA
Hap_139 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_140 CATTGTCGTTTATTGACTGCGTTAGCTAAGGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTGTGAATCTTGAGCCCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_141 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGCATCA
Hap_142 CATTGTCGTTTATTGACTGCGTTAGCTAAAAACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCGTCGTATCA
Hap_143 CATTGTCGTTTATTGACTGCGTTGGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCTAGTTCATCGTATCA
Hap_144 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCGTCGTATCA
Hap_145 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCGCTTGTCCAGTTCATCGTATCA
Hap_146 CATTGTCGTTTATCGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_147 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCACTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_148 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAACCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTTCACCTGTCCAGTTCATCGTATCA
Hap_149 CATTGTCGTTTATTGACTGCGTTAGCTAAAAACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTCCATCGTATCA
Hap_150 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTATCCAGTTTATCGTATCA
Hap_151 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCGTCGTATCA
Hap_152 CATTGTCGTCTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_153 CATTGTCGTTTATTGACTGCGTTAGCTAAAAACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCG
Hap_154 CATTGTCGTTTATTGACTGCGTTAGCTAAAAACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTCGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_155 TATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTGCGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_156 CATTATCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCTAGTTCATCGTATCA
Hap_157 CATTGCCGTTTATTGACTGCGTTAGCTAAAGGCAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTTATCGTATCA
Hap_158 CATTGTCGTTTATTGACTGCGTTAGCTAAAAACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_159 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTAATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_160 CATTGTTGTTTATTGACTGCGTTAGCTAAAGACAAACCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_161 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTATATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_162 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAGTCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_163 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAACCGCTAGAGGCTTTCTTTGATACGTTGTATGAATTTCGGACTCGTTCTACTCCACCTGTCCAGTTCATCGTATCG
Hap_164 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGCCCAGTTCATCGTATCA
Hap_165 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAAGCTTTCTTTGACATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_166 CGTTGTCGCTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_167 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAGTCGCTAGAGGCTTTCTTTGATATGCTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_168 CATTGTCGTTTATTGACTGCGTCAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_169 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCCCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_170 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTCGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_171 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAAAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_172 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTAATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGCCCAGTTCATCGTATCA
Hap_173 CATTGTCGTTTATTGGCTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCCTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCTAGTTCATCGTATCA
Hap_174 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCCTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_175 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATGTGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_176 CATTGTCGTTTATTGACTGCGTTAACTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGGATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_177 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGACATGTTATATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_178 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATACGTTGTATGAATCTTGGACTCGTTCTACTCCACCTGTCCAGTTCGTCGTATCA
Hap_179 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTATCCAGTTCATCGTATCA
Hap_180 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTGGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_181 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAGATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCACCATATCA
Hap_182 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCCACTCCACCTGTCCAGTTCATCATATCA
Hap_183 CATTGTCATTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCCCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_184 CATTGTCGTTTATTGACTGCGTTAGCTAGAGACAAACCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTTCACCTGTCCAGTTCATCGTATCA
Hap_185 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCTAGTTCATCGTATTA
Hap_186 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGACTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCACCGTATCA
Hap_187 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGACTTTCTTTGATATGTTATATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_188 CATTGTCGTTTATTGACTGCGTTAGCCAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCGTCGTATCG
Hap_189 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTTCAGTTCATCGTATCA
Hap_190 CATTGTCGTTTATTGACTGCGTTAGCTAAAAACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_191 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTTGTCGTATCA
Hap_192 CATTGTCGTTTATTGACTGCGTTAGCCAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTACCA
Hap_193 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_194 CATTGTCGTTCATTGACTGCGTTAGCTAAAAACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_195 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTACGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_196 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATACGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCGTCGTATCA
Hap_197 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTCGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_198 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAACTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_199 CATTGTTGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTAAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_200 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTAAGCTCGTTCTACTCCACTTGTCCAGTTCGTCGTATCA
Hap_201 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATACGTTGTATGAATCTTAAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_202 CATTGTCGTTTATTGACTGTGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACCCCACCTGTCCAGTTCATCGTATCA
Hap_203 CATTGTCGTTTATTGACTGCGTTAGCCAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_204 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCG
Hap_205 CATTGTCGTTTATTGACTGCATTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_206 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACCCCACCTGTCCAGTTCACCGTATCA
Hap_207 CATTATCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_208 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTACCA
Hap_209 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTTGTCGTATCA
Hap_210 CATTATCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCCACTCCACCTGTCCAGTTCATCGTATCG
Hap_211 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTAAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_212 CATTGTCGTTTGTTGACTGCGCTAGCTAAAGACAAATCGCTAGAGGTTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_213 CATTGTCGTTTATTGACTGCGTTAGCCAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCGGTTCGTCGTATCA
Hap_214 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGTCCGGTTCATCGTATCA
Hap_215 CATTGTCGTTTATTGACTGCGTTAGCTAAAAACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCGGTTCATCGTATCA
Hap_216 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCCTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGCCCAGTTCATCGTATCA
Hap_217 CATTGTCGTTTGTTGACTGCGTTAGCTAAAGACGAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCACCGTATCA
Hap_218 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCCTGAGCTCGTTCTACTCCACCTGTCTAGTTCATCGTATCA
Hap_219 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTTGTCGTATCA
Hap_220 CATTGTCGTTTATTGACTGCGTTAGCTGAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_221 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACGAATCGCTAGAGGCTTCCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_222 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATACGTTGTATGAATTTTGAACTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_223 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTTATCGTATCA
Hap_224 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAGTCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_225 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTCGATATGTTGTATGAATCTTGAACTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_226 CGTTGTCGTTTATTGACTGCGTTAACTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCGTCGTATCA
Hap_227 CATTGTCGTTTATTGACTGCGTTAGCCAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCG
Hap_228 CATTGTCGTTTATTGATTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTACCA
Hap_229 CATTGTCGTTTATTGACTGCGTTAGCCAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCGTCGTATCA
Hap_230 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTGCTCCACCTGTCCAGTTCATCGTATCA
Hap_231 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAAGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCCACTCCACCTGTCCAGTTCGTCGTATCA
Hap_232 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCTACCTGTCCAGTTCATCGTATCA
Hap_233 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGGTATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_234 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTTACCATATCA
Hap_235 CATTGCCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_236 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACGAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCATTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_237 CGTTGTCGTTTATTGACCGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATTGTATCA
Hap_238 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTACGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_239 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCCTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_240 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCCGTCCAGTTCATCGTATCA
Hap_241 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTGTCA
Hap_242 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGGGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_243 CATTGTCGTTTATTGACTGCGTTAGCCAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCCTGAGCTCATTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_244 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGTTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_245 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAACCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_246 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATACGTTGTATGAATCTTGAACTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_247 CATTGTCGTTTATTGACTGCGTTAACTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_248 CATTGTTGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTCCATCGTATCA
Hap_249 CATTGTCGTTTATTGACTGCGTTAGCTAAAAACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_250 CATTGTTGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTATCCAGTTCATCGTATCA
Hap_251 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAAGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTACCA
Hap_252 CATTGTCGTCTATTGACTGCGTTAGCTAAAGACGAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_253 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTTTACTCCACCTGTCCAGTTCATCGTATCA
Hap_254 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTCGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGCTCATCGTATCA
Hap_255 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTCCTACTCCACCTGTCCAGTTCATCATATCA
Hap_256 CATTGTCGTTTGTTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_257 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGTTCATTCTACTCCACCTGTCCAGTTTATCGTATCA
Hap_258 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTAAGCTCGTTCTACTCCACCTGTCCAGTTCACCGTATCA
Hap_259 CATTGTCGTTTATTGATTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTCGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_260 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAGTCTCGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_261 CATTGTCGTCTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGCTCATCGTATCA
Hap_262 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTCGTATAAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_263 CATTGTCGTTTACTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_264 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAATTCATCGTATCA
Hap_265 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAACCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAATTCATCGTATCA
Hap_266 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATTGCCAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_267 CATTGCCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_268 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTGTGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTGTCA
Hap_269 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCCTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_270 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTAAGCTCGTTCTACTCCACTTGTCCAGTTCATCGTATCA
Hap_271 CATTGTCGTTTATTGACTACGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGCCCAGTTCATCGTATCA
Hap_272 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGCTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_273 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAGTCTTGAGCTCGTTCTACTCCGCCTGTCCAGTTCATCGTATCA
Hap_274 CATTGTCGTTTATTGACTACGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_275 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCCTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_276 CATTGTCATTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATAAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_277 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCCCATTCTACTCCACCTGTCCAGTTTATCGTATCA
Hap_278 CGTTGTCGTTTATTGACTGCGTTAGCTAGAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_279 CATTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCCTTCTTTGATACGTTGTATGAATCTTAAGCTCGTTCTACTCCACCTGTCCAGTTCATCGTATCA
Hap_280 CGTTGTCGTTTATTGACTGCGTTAGCTAAAGACAAATCGCTAGAGGCTTTCTTTGATATGTTGTATGAATCTTGAGCTCGTTCTACTCCACCTGTCCAGTTCATTGTATCA
;

END;

 

Begin Traits;

Dimensions NTraits=9;

format labels=yes missing=? separator=Comma;

TraitLabels Austroasiatic HmongMien Mongolic SiniticN SiniticS TaiKadai TibetoBurman Tungusic Turkic;

Matrix

 

Hap_1 17,238,65,361,702,493,204,27,10
Hap_2 5,57,33,234,150,48,45,7,8
Hap_3 1,0,0,1,0,0,0,0,0
Hap_4 3,13,19,85,68,21,34,1,4
Hap_5 3,0,0,0,1,1,0,0,0
Hap_6 1,0,0,0,0,0,0,0,0
Hap_7 0,0,0,6,5,2,0,0,0
Hap_8 0,7,1,21,23,15,6,1,0
Hap_9 0,1,1,14,16,14,1,0,1
Hap_10 0,4,4,42,32,5,14,1,0
Hap_11 0,17,0,2,8,4,9,1,0
Hap_12 0,6,6,19,41,31,21,1,0
Hap_13 0,1,0,1,3,2,0,0,0
Hap_14 0,2,1,8,12,0,2,0,1
Hap_15 0,4,0,4,10,11,0,0,0
Hap_16 0,3,0,34,30,10,9,1,3
Hap_17 0,4,2,5,5,9,5,0,1
Hap_18 0,5,6,35,38,34,3,0,0
Hap_19 0,5,0,12,23,10,1,1,0
Hap_20 0,1,0,0,0,0,0,0,0
Hap_21 0,1,0,1,1,0,0,0,0
Hap_22 0,2,0,0,0,0,0,0,0
Hap_23 0,1,0,0,3,1,0,0,0
Hap_24 0,1,0,2,8,2,1,0,0
Hap_25 0,2,2,21,9,5,1,3,0
Hap_26 0,1,0,2,7,7,0,0,0
Hap_27 0,3,0,32,43,18,1,0,0
Hap_28 0,1,0,0,0,0,0,0,0
Hap_29 0,2,0,0,0,0,0,0,0
Hap_30 0,1,0,0,0,0,0,0,0
Hap_31 0,3,11,22,9,1,10,0,3
Hap_32 0,1,1,0,1,0,0,2,0
Hap_33 0,1,0,0,4,1,0,1,0
Hap_34 0,2,0,14,26,27,7,0,1
Hap_35 0,1,0,0,0,0,0,0,0
Hap_36 0,1,0,2,0,0,1,0,0
Hap_37 0,1,0,0,2,2,1,0,0
Hap_38 0,1,0,1,15,12,0,0,0
Hap_39 0,1,0,1,5,9,0,0,0
Hap_40 0,3,0,23,19,13,4,1,0
Hap_41 0,7,0,0,0,0,6,0,0
Hap_42 0,1,0,0,3,1,0,0,0
Hap_43 0,1,0,1,0,0,0,0,0
Hap_44 0,2,2,0,5,0,0,1,0
Hap_45 0,1,0,0,0,6,2,0,0
Hap_46 0,1,0,3,7,2,0,0,0
Hap_47 0,1,0,0,0,0,0,0,0
Hap_48 0,1,0,1,0,0,0,0,0
Hap_49 0,1,0,2,2,1,0,1,0
Hap_50 0,1,0,1,2,0,0,0,0
Hap_51 0,0,1,17,8,0,5,0,0
Hap_52 0,0,1,0,0,0,0,0,0
Hap_53 0,0,1,2,2,2,0,0,0
Hap_54 0,0,1,1,3,2,0,0,0
Hap_55 0,0,1,0,0,0,0,0,0
Hap_56 0,0,2,14,5,3,1,1,0
Hap_57 0,0,1,0,0,0,0,0,1
Hap_58 0,0,1,0,0,0,0,0,0
Hap_59 0,0,1,2,3,9,0,0,0
Hap_60 0,0,1,0,0,0,0,0,0
Hap_61 0,0,2,0,0,0,0,0,0
Hap_62 0,0,1,0,0,0,0,0,0
Hap_63 0,0,1,2,0,0,0,0,0
Hap_64 0,0,2,0,0,0,0,0,0
Hap_65 0,0,1,0,0,0,0,0,0
Hap_66 0,0,1,1,0,0,0,0,0
Hap_67 0,0,1,3,3,0,0,0,0
Hap_68 0,0,1,0,0,0,0,0,0
Hap_69 0,0,1,0,4,1,0,0,0
Hap_70 0,0,1,0,0,0,0,0,0
Hap_71 0,0,1,0,1,0,0,0,0
Hap_72 0,0,1,0,0,0,0,0,0
Hap_73 0,0,1,0,0,0,0,0,0
Hap_74 0,0,1,1,0,0,0,0,0
Hap_75 0,0,0,4,0,0,0,0,0
Hap_76 0,0,0,1,0,0,0,0,0
Hap_77 0,0,0,1,0,0,0,0,0
Hap_78 0,0,0,2,0,0,0,0,0
Hap_79 0,0,0,1,0,0,0,0,0
Hap_80 0,0,0,1,0,0,0,0,0
Hap_81 0,0,0,3,0,2,0,0,0
Hap_82 0,0,0,3,7,0,1,0,0
Hap_83 0,0,0,1,0,0,1,0,0
Hap_84 0,0,0,2,0,0,0,0,0
Hap_85 0,0,0,1,0,0,1,0,0
Hap_86 0,0,0,1,1,0,0,0,0
Hap_87 0,0,0,1,0,0,0,0,0
Hap_88 0,0,0,2,3,1,0,0,0
Hap_89 0,0,0,1,0,0,0,0,0
Hap_90 0,0,0,7,8,2,1,0,0
Hap_91 0,0,0,1,0,0,0,0,0
Hap_92 0,0,0,1,0,0,0,0,0
Hap_93 0,0,0,1,0,0,0,0,0
Hap_94 0,0,0,1,5,3,1,0,0
Hap_95 0,0,0,1,0,0,0,0,0
Hap_96 0,0,0,1,0,0,0,0,0
Hap_97 0,0,0,2,0,0,0,0,0
Hap_98 0,0,0,1,0,0,0,0,0
Hap_99 0,0,0,1,0,0,0,0,0
Hap_100 0,0,0,4,0,0,0,0,0
Hap_101 0,0,0,1,0,0,0,0,0
Hap_102 0,0,0,1,0,0,0,0,0
Hap_103 0,0,0,3,1,1,0,0,0
Hap_104 0,0,0,1,3,5,0,0,0
Hap_105 0,0,0,2,1,0,0,0,0
Hap_106 0,0,0,2,0,0,2,0,0
Hap_107 0,0,0,1,0,0,0,0,0
Hap_108 0,0,0,1,1,0,0,0,0
Hap_109 0,0,0,2,1,0,0,0,0
Hap_110 0,0,0,4,4,1,0,0,0
Hap_111 0,0,0,1,2,0,0,0,0
Hap_112 0,0,0,1,0,0,0,0,0
Hap_113 0,0,0,1,0,0,0,0,0
Hap_114 0,0,0,1,0,0,0,0,0
Hap_115 0,0,0,2,0,0,1,0,0
Hap_116 0,0,0,1,0,0,0,0,0
Hap_117 0,0,0,1,0,0,0,0,0
Hap_118 0,0,0,1,0,0,0,0,0
Hap_119 0,0,0,1,0,0,0,0,0
Hap_120 0,0,0,1,1,0,0,0,0
Hap_121 0,0,0,1,4,2,0,0,0
Hap_122 0,0,0,1,1,0,0,0,0
Hap_123 0,0,0,1,0,1,0,0,0
Hap_124 0,0,0,2,0,0,0,0,0
Hap_125 0,0,0,3,3,3,1,0,0
Hap_126 0,0,0,1,0,0,0,0,0
Hap_127 0,0,0,1,0,0,0,0,0
Hap_128 0,0,0,2,0,0,0,0,1
Hap_129 0,0,0,1,0,0,0,0,0
Hap_130 0,0,0,1,6,0,0,0,0
Hap_131 0,0,0,1,1,0,0,0,0
Hap_132 0,0,0,1,0,0,0,0,0
Hap_133 0,0,0,1,0,1,0,0,0
Hap_134 0,0,0,1,1,0,0,0,0
Hap_135 0,0,0,1,0,1,1,0,0
Hap_136 0,0,0,1,0,0,1,0,0
Hap_137 0,0,0,1,0,0,0,0,0
Hap_138 0,0,0,1,0,0,0,0,0
Hap_139 0,0,0,1,1,1,0,0,0
Hap_140 0,0,0,1,0,0,0,0,0
Hap_141 0,0,0,1,3,1,0,0,0
Hap_142 0,0,0,1,0,0,0,0,0
Hap_143 0,0,0,1,0,0,0,0,0
Hap_144 0,0,0,2,0,0,0,0,0
Hap_145 0,0,0,1,0,0,0,0,0
Hap_146 0,0,0,1,1,0,0,0,0
Hap_147 0,0,0,1,0,0,0,0,0
Hap_148 0,0,0,1,3,2,1,0,0
Hap_149 0,0,0,1,0,0,0,0,0
Hap_150 0,0,0,1,0,0,0,0,0
Hap_151 0,0,0,2,2,0,0,0,0
Hap_152 0,0,0,2,0,3,0,0,0
Hap_153 0,0,0,1,0,0,0,0,0
Hap_154 0,0,0,1,0,0,0,0,0
Hap_155 0,0,0,1,0,0,0,0,0
Hap_156 0,0,0,1,0,0,0,0,0
Hap_157 0,0,0,1,0,0,0,0,0
Hap_158 0,0,0,1,0,0,0,0,0
Hap_159 0,0,0,1,0,0,0,0,0
Hap_160 0,0,0,1,1,0,0,0,0
Hap_161 0,0,0,1,0,0,0,0,0
Hap_162 0,0,0,2,0,0,0,0,0
Hap_163 0,0,0,1,0,0,0,0,0
Hap_164 0,0,0,1,0,0,0,0,0
Hap_165 0,0,0,1,0,0,0,0,0
Hap_166 0,0,0,1,0,0,0,0,0
Hap_167 0,0,0,1,0,0,0,0,0
Hap_168 0,0,0,1,1,0,0,0,0
Hap_169 0,0,0,1,1,0,0,0,0
Hap_170 0,0,0,2,3,1,1,0,0
Hap_171 0,0,0,1,0,0,0,0,0
Hap_172 0,0,0,1,0,0,0,0,0
Hap_173 0,0,0,1,1,0,0,0,0
Hap_174 0,0,0,1,0,0,0,0,0
Hap_175 0,0,0,1,1,0,0,0,0
Hap_176 0,0,0,1,0,0,0,0,0
Hap_177 0,0,0,1,2,1,3,0,0
Hap_178 0,0,0,1,0,0,0,0,0
Hap_179 0,0,0,1,0,0,0,0,0
Hap_180 0,0,0,0,2,0,0,0,0
Hap_181 0,0,0,0,1,0,0,0,0
Hap_182 0,0,0,0,1,0,0,0,0
Hap_183 0,0,0,0,2,0,0,0,0
Hap_184 0,0,0,0,1,0,0,0,0
Hap_185 0,0,0,0,1,0,0,0,0
Hap_186 0,0,0,0,1,0,0,0,0
Hap_187 0,0,0,0,1,0,0,0,0
Hap_188 0,0,0,0,1,0,0,0,0
Hap_189 0,0,0,0,10,2,0,0,0
Hap_190 0,0,0,0,1,0,0,0,0
Hap_191 0,0,0,0,7,0,0,0,0
Hap_192 0,0,0,0,5,1,0,0,0
Hap_193 0,0,0,0,1,0,0,0,0
Hap_194 0,0,0,0,1,0,0,0,0
Hap_195 0,0,0,0,1,1,0,0,0
Hap_196 0,0,0,0,1,0,0,0,0
Hap_197 0,0,0,0,5,3,1,0,0
Hap_198 0,0,0,0,1,0,0,2,0
Hap_199 0,0,0,0,1,0,0,0,0
Hap_200 0,0,0,0,2,0,0,0,0
Hap_201 0,0,0,0,1,0,0,0,0
Hap_202 0,0,0,0,2,0,0,0,0
Hap_203 0,0,0,0,1,0,0,0,0
Hap_204 0,0,0,0,1,1,0,0,0
Hap_205 0,0,0,0,1,0,0,0,0
Hap_206 0,0,0,0,1,0,0,0,0
Hap_207 0,0,0,0,2,1,0,0,0
Hap_208 0,0,0,0,1,0,0,0,0
Hap_209 0,0,0,0,1,0,0,0,0
Hap_210 0,0,0,0,1,0,0,0,0
Hap_211 0,0,0,0,3,0,0,0,0
Hap_212 0,0,0,0,2,0,0,0,0
Hap_213 0,0,0,0,1,0,0,0,0
Hap_214 0,0,0,0,1,0,0,0,0
Hap_215 0,0,0,0,1,0,0,0,0
Hap_216 0,0,0,0,1,0,0,0,0
Hap_217 0,0,0,0,1,0,0,0,0
Hap_218 0,0,0,0,1,0,0,0,0
Hap_219 0,0,0,0,1,0,0,0,0
Hap_220 0,0,0,0,1,0,0,0,0
Hap_221 0,0,0,0,1,0,0,0,0
Hap_222 0,0,0,0,3,0,0,0,0
Hap_223 0,0,0,0,1,1,0,0,0
Hap_224 0,0,0,0,1,1,0,0,0
Hap_225 0,0,0,0,1,0,0,0,0
Hap_226 0,0,0,0,1,0,0,0,0
Hap_227 0,0,0,0,1,0,0,0,0
Hap_228 0,0,0,0,1,0,0,0,0
Hap_229 0,0,0,0,1,1,0,0,0
Hap_230 0,0,0,0,1,0,0,0,0
Hap_231 0,0,0,0,1,0,0,0,0
Hap_232 0,0,0,0,1,1,0,0,0
Hap_233 0,0,0,0,1,1,0,2,0
Hap_234 0,0,0,0,1,0,0,0,0
Hap_235 0,0,0,0,1,0,0,0,0
Hap_236 0,0,0,0,1,0,0,0,0
Hap_237 0,0,0,0,1,0,0,0,0
Hap_238 0,0,0,0,1,0,0,0,0
Hap_239 0,0,0,0,1,0,0,0,0
Hap_240 0,0,0,0,1,0,0,0,0
Hap_241 0,0,0,0,1,0,0,0,0
Hap_242 0,0,0,0,1,0,0,0,0
Hap_243 0,0,0,0,1,0,0,0,0
Hap_244 0,0,0,0,0,2,0,0,0
Hap_245 0,0,0,0,0,1,0,0,0
Hap_246 0,0,0,0,0,1,0,0,0
Hap_247 0,0,0,0,0,1,0,0,0
Hap_248 0,0,0,0,0,1,0,0,0
Hap_249 0,0,0,0,0,1,0,0,0
Hap_250 0,0,0,0,0,1,0,0,0
Hap_251 0,0,0,0,0,1,0,0,0
Hap_252 0,0,0,0,0,1,0,0,0
Hap_253 0,0,0,0,0,1,0,0,0
Hap_254 0,0,0,0,0,1,0,0,0
Hap_255 0,0,0,0,0,1,0,0,0
Hap_256 0,0,0,0,0,1,0,0,0
Hap_257 0,0,0,0,0,1,0,0,0
Hap_258 0,0,0,0,0,1,1,0,0
Hap_259 0,0,0,0,0,1,0,0,0
Hap_260 0,0,0,0,0,1,0,0,0
Hap_261 0,0,0,0,0,1,0,0,0
Hap_262 0,0,0,0,0,1,0,0,0
Hap_263 0,0,0,0,0,1,0,0,0
Hap_264 0,0,0,0,0,3,0,0,0
Hap_265 0,0,0,0,0,1,0,0,0
Hap_266 0,0,0,0,0,0,1,0,0
Hap_267 0,0,0,0,0,0,2,0,0
Hap_268 0,0,0,0,0,0,1,0,0
Hap_269 0,0,0,0,0,0,3,0,0
Hap_270 0,0,0,0,0,0,1,0,0
Hap_271 0,0,0,0,0,0,1,0,0
Hap_272 0,0,0,0,0,0,2,0,0
Hap_273 0,0,0,0,0,0,1,0,0
Hap_274 0,0,0,0,0,0,3,0,0
Hap_275 0,0,0,0,0,0,1,0,0
Hap_276 0,0,0,0,0,0,1,0,0
Hap_277 0,0,0,0,0,0,1,0,0
Hap_278 0,0,0,0,0,0,1,0,0
Hap_279 0,0,0,0,0,0,0,0,1
Hap_280 0,0,0,0,0,0,0,0,1
;

End;
复制<br>所以，需要准备频率和序列的数据。<br><br>确保之前使用Arlequin已经对数据进行了分析，如果没有，请看<a data-href="DnaSP：AMOVA及Fst分析软件操作" href="软件\其它生信软件\a-j\dnasp：amova及fst分析软件操作.html" class="internal-link" target="_self" rel="noopener nofollow">DnaSP：AMOVA及Fst分析软件操作</a>。<br>注意勾选分析方法应该保证如下（可以多不能少！）：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402041253151.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402041253986.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>分析完成之后，会得到结果文件，找到那个最大的xml文件，用文本编辑器打开，然后找到Haplotype frequencies in populations，将其转化成如下格式。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402041255430.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402041255182.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>Hap_1 10,0,0,0
Hap_2 19,9,12,10
Hap_3 1,0,0,0
Hap_4 1,0,0,0
Hap_5 1,0,0,0
Hap_6 0,0,1,0
Hap_7 0,0,1,0
Hap_8 0,0,2,0
Hap_9 0,0,1,0
Hap_10 0,0,0,7
Hap_11 0,0,0,2
Hap_12 0,0,0,1
复制<br>雷区
注意，第一列与第二列之间需要以空格分隔，其余列需要以逗号分隔。并且中间不能出现任何空行或者多余的空格。不允许使用逗号和制表符。
<br>我在这里写了一个python脚本，可以把频率的excel表格转化成第一列与第二列之间需要以空格分隔，其余列需要以逗号分隔。但是我不确定是否用得上。<br>import pandas as pd
# 读取Excel文件
file_path = 'C:/Users/a/Desktop/工作簿1.xlsx' # Excel文件路径
df = pd.read_excel(file_path)
# 将DataFrame转换为所需格式的字符串
formatted_lines = []
for index, row in df.iterrows():
# 使用iloc通过位置索引访问，将第一列与其余列分开处理
# 第一列后空格，其余列逗号分隔
  formatted_line = f"{row.iloc[0]} " + ",".join([str(row.iloc[i]) for i in range(1, len(row))])
  formatted_lines.append(formatted_line)
 # 将处理过的数据保存到文本文件
output_file_path = 'C:/Users/a/Desktop/Fuckyou.txt' # 输出文件的路径
with open(output_file_path, 'w', encoding='utf-8') as output_file:
  output_file.write("\n".join(formatted_lines))
print(f"文件已成功保存到 {output_file_path}")
复制<br><br>还是在刚才的最大的xml文件中，找到序列信息，并转化成如下格式：<br>Hap_1   TACATCAGGGTAG
Hap_2   TACATCAGGGTAC
Hap_3   TACATTAGGGTAC
Hap_4   TCCACCAGGGAAC
Hap_5   TCCATCAGGGTAC
Hap_6   TACATCAGGGTCC
Hap_7   TACAACAGCTTAC
Hap_8   TACAACAGGGTAC
Hap_9   CACCACCACGTAC
Hap_10  TATAACAAGGTAC
Hap_11  TACTTCAGGGAAC
Hap_12  TACAACAGGGAAC
复制<br>雷区
注意，第一列与第二列之间需要以空格分隔，其余列必须字数相等，其它地区不能出现多余的空格。不允许使用逗号和制表符。
<br>现在修改模板：将黑色部分替换成自己的数据。可以用TXT打开，然后将后缀改为nex。<br>
<img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402041251837.png" referrerpolicy="no-referrer"><br>雷区
注意，需要修改 ntax、nchar、NTraits、TrautLables。
<br>ntax：有多少行数据。<br>
nchar：每一条序列有多少个字符。<br>
NTraits：每一行频率有多少特征。<br>
TrautLables：每一行频率的每个特征分别对应的标签。<br>
例如，上述中NTraits的数目是4，对应着TrautLables中的4个地区。<br>雷区
注意NTraits和TrautLables的数目必须一一对应。<br>
注意TrautLables之间的分隔必须为空格。不允许使用逗号和制表符。
<br><br>打开PopART，点击File→Open。打开刚才修改了后缀的nex文件。<br>如果这一步出现报错，可能的原因很多，但应该都是触碰到了上述雷区。仔细核对是否存在多余的空格。<br>还有一件事，文件名和路径不能出现中文！！！<br>
<br>点击Network→TCS Network。
<br>点击Edit→Set trait colour，自定义喜欢的颜色。
<br>完成！
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402041322305.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\其它生信软件\k-s\popart：基于fst绘制network图.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/PopArt：基于Fst绘制Network图.md</guid><pubDate>Fri, 23 Aug 2024 08:26:29 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402041250489.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402041250489.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[软件下载]]></title><description><![CDATA[ 
 <br>这个版本由Exelixis实验室于2024年4月30日发布。软件开发者包括Alexey M. Kozlov和Alexandros Stamatakis，还有多位贡献者如Diego Darriba、Tomas Flouri等。软件的最新版本可以在其GitHub页面找到，使用过程中的问题或建议可以通过Google论坛讨论。<br><br>这是一个预编译的版本，Linux 应该直接可以使用：<a data-tooltip-position="top" aria-label="https://1drv.ms/u/s!AnGqDjyiZ5t_hflVSbd_Xz0UIOzsZw?e=ezKznm" rel="noopener nofollow" class="external-link" href="https://1drv.ms/u/s!AnGqDjyiZ5t_hflVSbd_Xz0UIOzsZw?e=ezKznm" target="_blank">raxml-ng</a><br><br>命令行输入 raxml-ng [选项] 来运行程序。<br><br>
<br>--help：显示帮助信息。
<br>--version：显示版本信息。
<br>--evaluate：评估一棵树的似然值（含模型和枝长优化）。
<br>--search：最大似然树搜索（默认：10棵拟合树和10棵随机起始树）。
<br>--bootstrap：自动检测重复次数的Bootstrap分析。
<br>--all：一体化分析（ML树搜索 + Bootstrap）。
<br>--support：对一棵参考树（如最佳ML树）和一组重复树（如Bootstrap分析所得）计算双分支支持。
<br>更多命令及详细参数见使用说明。
<br><br>
<br>--tree：指定起始树，可以是随机、拟合或指定的新疆文件。
<br>--msa：指定比对文件。
<br>--msa-format：指定比对文件格式，如FASTA、PHYLIP等。
<br>--data-type：指定数据类型，如DNA、氨基酸等。
<br>更多选项如输出文件前缀、日志详细程度、精度等也可设置。
<br><br>
<br>--model：模型设置或指定分区文件。
<br>--brlen：分区间枝长的关联性。
<br>--opt-model：是否优化所有模型参数。
<br>--opt-branches：是否优化所有枝长。
<br>更多模型相关的设置包括优化方法、似然值精度等。
<br><br>使用 GTR+G 模型建树<br>./raxml-ng --msa testDNA.fa --model GTR+G
复制<br>一步到位<br>./raxml-ng --all --msa testAA.fa --model LG+G8+F --tree pars{10} --bs-trees 200
复制<br># 进入工作目录
cd Raxml-ng/

# 运行 RAxML-NG 构建最大似然树
raxml-ng --all \
         --msa trim_out.fasta \
         --model GTR+G+I \
         --threads 32 \
         --bs-trees 20 \ # 生成 20 个 Bootstrap 树以评估树的稳健性。
         --prefix ml_tree
复制]]></description><link>软件\其它生信软件\k-s\raxml-ng：使用基础.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/RAxML-NG：使用基础.md</guid><pubDate>Mon, 09 Sep 2024 02:37:32 GMT</pubDate></item><item><title><![CDATA[软甲下载]]></title><description><![CDATA[ 
 <br><br>可以谷歌搜索下载，也可以用我这个版本，该版本包括了 win和linux，但是没有 GUI： <a data-tooltip-position="top" aria-label="https://1drv.ms/u/s!AnGqDjyiZ5t_hoZgWzZl00vhYAj7wg?e=upQntR" rel="noopener nofollow" class="external-link" href="https://1drv.ms/u/s!AnGqDjyiZ5t_hoZgWzZl00vhYAj7wg?e=upQntR" target="_blank">SLiM.zip</a><br><br>SLiM home page: <a rel="noopener nofollow" class="external-link" href="http://messerlab.org/slim/" target="_blank">http://messerlab.org/slim/</a><br>
slim-announce mailing list: <a rel="noopener nofollow" class="external-link" href="https://groups.google.com/d/forum/slim-announce" target="_blank">https://groups.google.com/d/forum/slim-announce</a><br>
slim-discuss mailing list: <a rel="noopener nofollow" class="external-link" href="https://groups.google.com/d/forum/slim-discuss" target="_blank">https://groups.google.com/d/forum/slim-discuss</a><br><br>首先在 Linux 解压，然后按照如下进行安装：<br>cd /SLiM # 进入目录
mkdir build # 创建文件夹
# 编译
cd build
cmake ..
cmake --build .
# 安装
sudo make install
# 运行软件
/mnt/e/Scientifc_software/SLiM/build/slim
复制<br>如果运行成功，就会出现如下提示：<br>SLiM version 4.3, built Sep 23 2024 14:49:28.
Git commit SHA-1: unknown (built from a non-Git source archive)
This is a RELEASE build of SLiM.
This is a NON-PARALLEL (SINGLE-THREADED) build of SLiM.

SLiM is a product of the Messer Lab, http://messerlab.org/
Copyright 2013-2024 Philipp Messer.  All rights reserved.

By Benjamin C. Haller, http://benhaller.com/, and Philipp Messer.

---------------------------------------------------------------------------------

SLiM home page: http://messerlab.org/slim/
slim-announce mailing list: https://groups.google.com/d/forum/slim-announce
slim-discuss mailing list: https://groups.google.com/d/forum/slim-discuss

---------------------------------------------------------------------------------

SLiM is free software: you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software Foundation,
either version 3 of the License, or (at your option) any later version.

SLiM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
SLiM.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

---------------------------------------------------------------------------------

usage: slim -v[ersion] | -u[sage] | -h[elp] | -testEidos | -testSLiM |
   [-l[ong] [&lt;l&gt;]] [-s[eed] &lt;seed&gt;] [-t[ime]] [-m[em]] [-M[emhist]] [-x]
   [-d[efine] &lt;def&gt;] [&lt;script file&gt;]
复制]]></description><link>软件\其它生信软件\k-s\slim：群体演化历史建模软件安装教程.html</link><guid isPermaLink="false">软件/其它生信软件/K-S/SLiM：群体演化历史建模软件安装教程.md</guid><pubDate>Tue, 24 Sep 2024 08:54:03 GMT</pubDate></item><item><title><![CDATA[1.染色体长度信息]]></title><description><![CDATA[ 
 <br>原教程地址：<a data-tooltip-position="top" aria-label="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E8%A7%86%E9%A2%91/Advanced%20Circos-iMeta.mp4?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=10000000001718845000&amp;Signature=KTKSIONYKnseaqz8Q%2BEOtqenC7M%3D" rel="noopener nofollow" class="external-link" href="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E8%A7%86%E9%A2%91/Advanced%20Circos-iMeta.mp4?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=10000000001718845000&amp;Signature=KTKSIONYKnseaqz8Q%2BEOtqenC7M%3D" target="_blank">Advanced Circos-iMeta.mp4</a><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620091343.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620091411.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
通过这里可以获得以制表符分隔的长度信息文件，例如 length.txt：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620091514.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
将这个文件放进 Set Input ChrLen File (ChrlD It Length) 选项中。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620091837.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
颜色可以通过 RGB 来表示。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620091943.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
你可以通过自动化的流程生成需要的颜色配色：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620092059.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
例如：<br>Sometimes, we may need to prepare a color scheme for classification. 
To facilate this process, this function is developed.
Users feed a tab-delimited file and set corresponding color column index in TBtools.
TBtools will append random color code 
to each line at the last column.
For example,
====input====
Chr1 10000 20000
Chr2 40000 50000
====output===
Chr1 10000 20000 124,56,88
Chr2 40000 50000 23,124,56
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620092447.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
然后我们通过 Excel 软件删除多余的信息，只保留如下信息：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620092545.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
第二列是 基因名字，第三和第四列是 基因的起始和终止位置。当然，你肯定只需要从中提取出你需要的基因，你可以通过 Excel 表格来实现操作。<br>基因文件到哪里下载？
在 NCBI 官网可以下载 gff 文件。
<br>微微调整一下文字的颜色等：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620092933.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>由于在这里我只想要绘制 NUMTs 的情况，所以就不运行常规的程序了。<br>什么是常规的程序？
One Step McScanX（被包含在 TBtools 中），可以通过 fasta 文件和 gff 文件查找基因的调控关系，从而获得不同位置之间的 link。
<br>总而言之，我们可以获得的最终格式是这样的：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620093253.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
其中：<br>
<br>第一列是一条染色体（例如调控基因所在的染色体）
<br>第四列是与第一列有关系的另一条染色体（例如被调控基因所在的染色体）
<br>第二三列是调控基因所在的染色体的基因的起始和终止的位置
<br>第五六列是被调控基因所在的染色体的基因的起始和终止的位置
<br>第七列是颜色。
<br>你可以在下面添加各种各样的图形（例如热图、组装质量图等等）：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620094016.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620094113.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
\<br>这个软件似乎绘制出来的每个染色体的长度是按照碱基长度来的。不能把 mtDNA 给放大，其他染色体缩小吗？]]></description><link>软件\其它生信软件\t-z\tbtools：advanced-circos：绘制numt弦图教程.html</link><guid isPermaLink="false">软件/其它生信软件/T-Z/TBtools：Advanced Circos：绘制NUMT弦图教程.md</guid><pubDate>Fri, 21 Jun 2024 01:46:45 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620091343.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240620091343.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[利用代理使Onedrive下载速度起飞]]></title><description><![CDATA[ 
 <br>我发现下面两个网址似乎为 onedrive 的下载提供验证，直连能够提供很快的下载速度：<br>2024/07/13 15:57:52 127.0.0.1:50827 accepted //ecs.office.com:443 [http -&gt; direct]
2024/07/13 15:57:56 127.0.0.1:50830 accepted //self.events.data.microsoft.com:443 [http -&gt; direct]
复制<br>只需要在 v2rayn 软件的路由设置中添加 direct 规则：<br>ecs.office.com,
self.events.data.microsoft.com,
inputsuggestions.msdxcdn.microsoft.com
复制<br>然后开始同步，速度就会起飞。]]></description><link>软件\生活窍门\利用代理使onedrive下载速度起飞.html</link><guid isPermaLink="false">软件/生活窍门/利用代理使Onedrive下载速度起飞.md</guid><pubDate>Sat, 13 Jul 2024 08:00:47 GMT</pubDate></item><item><title><![CDATA[一些尝试]]></title><description><![CDATA[ 
 <br><br>我尝试了很多种方法想要构建自己的个人网址，例如网上比较火热的Digital garden,但是很显然，我失败了。因为通过vercel部署会导致DNS污染特别快。因此，我在寻求更加合适的方法。<br>
现在，我利用另一个插件和Github desktop进行发布。<br><br>第三方库中下载 Webpage HTML Export，然后进行如下设置：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240621155015.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240621155026.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
这里有2个地方可以进行设置，仓库的标题可以设置为自己想要的名字。另外，建议不要删除旧的文件，因为我发现一旦开启这个选项，似乎会导致没有修改的文件被删除。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240621155331.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
这里每次导出之后点击save，就可以保存上次导出的文件。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240621155419.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
这里设置导出仓库位置。<br><br>下载一个Github Desktop，然后创建一个Repo，选定文件夹内作为仓库。例如创建在 F:\obsidian-publish，创建成功之后会出现下列文件：<br>F:\obsidian-publish\obsidian-notebook\.gitattributes
F:\obsidian-publish\obsidian-notebook\README.md
复制<br>然后手动创建一个文件夹 F:\obsidian-publish\obsidian-notebook\docs，现在，应该存在如下文件：<br>F:\obsidian-publish\obsidian-notebook\docs
F:\obsidian-publish\obsidian-notebook\.gitattributes
F:\obsidian-publish\obsidian-notebook\README.md
复制<br>我们需要把刚才导出来的文件全部放在 F:\obsidian-publish\obsidian-notebook\docs 中，然后我们可以得到类似如下文件：<br>F:\obsidian-publish\obsidian-notebook\docs
F:\obsidian-publish\obsidian-notebook\docs\主页\
F:\obsidian-publish\obsidian-notebook\docs\lib
复制<br>然后打开 Github Desktop：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240621155954.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240621160110.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>现在你的文件全部在这里：<br>
<a data-tooltip-position="top" aria-label="https://victory-hugo.github.io/obsidian-notebook/%E4%BD%A0%E7%9A%84obsidian%E6%96%87%E4%BB%B6.html" rel="noopener nofollow" class="external-link" href="https://victory-hugo.github.io/obsidian-notebook/%E4%BD%A0%E7%9A%84obsidian%E6%96%87%E4%BB%B6.html" target="_blank">https://victory-hugo.github.io/obsidian-notebook/你的obsidian文件.html</a><br>
<a rel="noopener nofollow" class="external-link" href="https://victory-hugo.github.io/obsidian-notebook/home.html" target="_blank">https://victory-hugo.github.io/obsidian-notebook/home.html</a><br>
<a rel="noopener nofollow" class="external-link" href="https://victory-hugo.github.io/obsidian-notebook/homepage.html" target="_blank">https://victory-hugo.github.io/obsidian-notebook/homepage.html</a><br>
<a rel="noopener nofollow" class="external-link" href="https://victory-hugo.github.io/obsidian-notebook/Home/homepage.html" target="_blank">https://victory-hugo.github.io/obsidian-notebook/Home/homepage.html</a><br>
<a rel="noopener nofollow" class="external-link" href="https://github.com/Victory-Hugo/obsidian-notebook/blob/main/docs/home/homepage.html" target="_blank">https://github.com/Victory-Hugo/obsidian-notebook/blob/main/docs/home/homepage.html</a><br>
<a rel="noopener nofollow" class="external-link" href="https://victory-hugo.github.io/obsidian-notebook/home/homepage.html" target="_blank">https://victory-hugo.github.io/obsidian-notebook/home/homepage.html</a><br>
<a rel="noopener nofollow" class="external-link" href="https://victory-hugo.github.io/biglin/home/homepage.html" target="_blank">https://victory-hugo.github.io/biglin/home/homepage.html</a>]]></description><link>软件\生活窍门\如何利用obsidian构建自己的网址？.html</link><guid isPermaLink="false">软件/生活窍门/如何利用Obsidian构建自己的网址？.md</guid><pubDate>Mon, 04 Nov 2024 12:44:31 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240621155015.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240621155015.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[安装 VSC]]></title><description><![CDATA[ 
 <br>教程来源：<a data-tooltip-position="top" aria-label="https://mdnice.com/writing/7c6fe4c344b645f7867d29580d7616c4" rel="noopener nofollow" class="external-link" href="https://mdnice.com/writing/7c6fe4c344b645f7867d29580d7616c4" target="_blank"><span></span> VS Code | 在VS Code中搭建你的R语言运行环境吧！~（图文介绍超详细） - mdnice 墨滴</a><img class="emoji" draggable="false" alt="🤯" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f92f.svg" height="18px" style="max-width: 100%;"><br><br>官网： <a rel="noopener nofollow" class="external-link" href="https://code.visualstudio.com/" target="_blank">https://code.visualstudio.com/</a><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240520112315.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
我只建议安装这一个插件。因为这个插件已经整合了 R LSP Client 的插件，现在已经整合到这个里面了，无需单独安装。<br><br>接着我们再 R 中输入下面这段代码，选择好离你比较近的镜像后，安装 languageserver。<br>install.packages("languageserver")
复制<br><br>自从 R 语言的版本升级之后，radian 就会出现一些莫名其妙的报错，作者也无法解决。因此我们不建议安装 radian。<br><br>找到你安装 R 的路径，在这里我是如下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240520112630.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>接着我们装一下图形输出包，httpgd，在R中运行下面这段代码吧。<br>
install.packages("httpgd") <br><br>接着我们在VS Code的设置中输入 r.plot.useHttpgd，启用 httpgd。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240520112752.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>由于VS Code和我们在R studio中用的快捷键会不同，所以我们需要做一些修改，打开快捷键设置我们会进入下面这个界面，点击这个<img class="emoji" draggable="false" alt="👇" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f447.svg" height="18px" style="max-width: 100%;">。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240520112822.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240520112850.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
使用Windows的小伙伴可以复制下面这段代码，粘贴即可。<img class="emoji" draggable="false" alt="😘" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f618.svg" height="18px" style="max-width: 100%;"><br>[  
{  
"key": "alt+-",  
"command": "type",  
"when": "editorLangId == r &amp;&amp; editorTextFocus || editorLangId == rmd &amp;&amp; editorTextFocus",  
// if you want using quarto, try this  
// "when": "editorLangId =~ /r|rmd|qmd/ &amp;&amp; editorTextFocus",  
"args": {"text": " &lt;- "}  
},  
{  
"key": "ctrl+shift+m",  
"command": "type",  
"when": "editorLangId == r &amp;&amp; editorTextFocus || editorLangId == rmd &amp;&amp; editorTextFocus",  
"args": {"text": " %&gt;% "}  
},  
{  
"key": "ctrl+shift+m",  
"command": "-workbench.actions.view.problems"  
},  
  
// input indicative of r markdown code chunk  
{  
"key": "ctrl+shift+i",  
"command": "editor.action.insertSnippet",  
"when": "editorTextFocus &amp;&amp; editorLangId == 'rmd'",  
"args": {  
"snippet": "```{r}\n${TM_SELECTED_TEXT}$0\n```"  
},  
"label": "input indicative of r markdown code chunk"  
},  
  
// you can also input indicative of code chunk in `r` file by inserting "# %% ":  
// specifics in `https://github.com/REditorSupport/vscode-R/pull/662`  
{  
"key": "ctrl+shift+i",  
"command": "editor.action.insertSnippet",  
"when": "editorTextFocus &amp;&amp; editorLangId == 'r'",  
"args": {  
"snippet": "$LINE_COMMENT %% "  
},  
"label": "input indicative of code chunk"  
},  
  
// open help panel for selection  
{  
"key": "f1",  
"command": "r.helpPanel.openForSelection",  
"when": "editorTextFocus &amp;&amp; editorLangId == 'r' || editorTextFocus &amp;&amp; editorLangId == 'rmd'"  
},  
  
// RStudio keybinding for R Package development  
{  
"key": "ctrl+shift+b",  
"command": "r.install",  
"when": "resourceLangId == 'r'"  
},  
{  
"key": "ctrl+shift+e",  
"command": "r.check",  
"when": "resourceLangId == 'r'"  
},  
{  
"key": "ctrl+shift+t",  
"command": "r.test",  
"when": "resourceLangId == 'r'"  
},  
{  
"key": "ctrl+shift+d",  
"command": "r.document",  
"when": "resourceLangId == 'r'"  
},  
{  
"key": "ctrl+shift+l",  
"command": "r.loadAll",  
"when": "resourceLangId == 'r'"  
},  
{  
"key": "ctrl+alt+p",  
"command": "r.runCommand",  
"when": "editorTextFocus &amp;&amp; editorLangId == 'r'",  
"args": ".vsc.browser(httpgd::hgd_url(), viewer = \"Beside\")"  
}  
]
复制<br>]]></description><link>软件\生活窍门\在vs-code中搭建你的r语言运行环境.html</link><guid isPermaLink="false">软件/生活窍门/在VS Code中搭建你的R语言运行环境.md</guid><pubDate>Sat, 29 Jun 2024 13:34:30 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f92f.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f92f.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[寻找 easyconnect 使用的端口]]></title><description><![CDATA[ 
 <br>Easyconnect 是一个流氓。一个很好的方法是不使用它。如果非要使用，你可以尝试使用 docker 来隔离它，但是太麻烦了。<br>这里有一个曲线救国的办法，让代理软件不要和它冲突：<br><br>点击 控制面板\网络和 Internet\网络连接\更改适配器设置：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409131516352.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
这里看到 Sangfor 就是该软件专用的接口。<br><br>我们需要让其它软件不要使用这个接口与之冲突即可：<br>
以 Singlebox 为例，在 出站接口名称 换为你正在使用的网络，我在这里是网线连接的因此是 以太网。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409131515076.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
这可以治标，但是不治本。]]></description><link>软件\生活窍门\easyconnect：如何设置不与代理冲突.html</link><guid isPermaLink="false">软件/生活窍门/EasyConnect：如何设置不与代理冲突.md</guid><pubDate>Fri, 13 Sep 2024 07:18:44 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409131516352.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409131516352.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1. <strong>筛选状态下删除数据</strong>]]></title><description><![CDATA[ 
 <br><br>
<br>错误描述：用户在筛选状态下删除了一些可见行，但实际上Excel也会删除隐藏的行。这可能导致不必要的数据丢失。
<br>解决方法：不要筛选，多用排序。
<br><br>
<br>错误描述：在编写公式时，用户可能不理解相对引用（如A1）和绝对引用（如$A$1）的区别，导致复制公式时出错。
<br>解决方法：理解相对引用和绝对引用的含义。在拖动公式或复制公式前，确保使用正确的引用方式，避免公式在其他单元格中计算错误。
<br><br>
<br>错误描述：初学者常使用“合并单元格”来美化表格，但这会影响筛选、排序、复制粘贴等操作，甚至可能导致公式错误。
<br>解决方法：老老实实的复制→ 仅仅粘贴值。
<br><br>
<br>错误描述：Excel默认是自动计算模式，但用户在某些时候手动更改了计算模式为“手动”，导致新输入的数据没有立即更新计算结果。
<br>解决方法：在“公式”选项卡中，确保将计算模式设为“自动”。如果发现计算结果未及时更新，可以按F9手动重新计算。
<br><br>
<br>错误描述：初学者在排序时只选择了一列进行排序，导致其他列的数据没有同步变化，最终数据错乱。
<br>解决方法：在进行排序操作时，一定要选择整个数据区域，确保所有相关列一同排序，保持数据的一致性。或者保证完整的表格内不存在空行空列！
<br><br>
<br>错误描述：不正确设置单元格格式（如文本、数字、日期等）可能导致公式无法正确计算。例如，将文本格式的数字用于数值计算时会出现错误。
<br>解决方法：在输入数据或编写公式时，确保每个单元格的格式正确。如果需要，可以右键单元格，选择“设置单元格格式”，并选择合适的格式类型。针对完全是数字的样本名字，点击右键，设置单元格格式，点击 自定义→类型→0。
<br><br>
<br>错误描述：在使用VLOOKUP或INDEX/MATCH函数时，初学者可能会错误使用这些函数，导致查找失败或返回错误数据。

<br>常见错误包括VLOOKUP的查找列未正确指定、数据未排序时使用VLOOKUP的近似匹配模式等。


<br>解决方法：确保VLOOKUP的查找列是第一个列，并在匹配模式中设置为FALSE以进行精确匹配。如果需要更灵活的查找方式，可以学习使用INDEX和MATCH函数。
<br><br>
<br>错误描述：隐藏列或行后，初学者可能忘记它们的存在，导致在处理数据（如复制、粘贴、计算）时忽略了隐藏的数据。
<br>解决方法：在处理数据前，始终检查是否有隐藏的行或列。如果有，确保自己已经意识到它们的存在并适当处理它们。或者不要隐藏列，尤其不要筛选！
<br><br>
<br>错误描述：用户常将SUM函数误用于非数值数据，或者在需要计算平均值时误用SUM函数，而不是AVERAGE。
<br>解决方法：理解每个聚合函数的用途，比如：

<br>SUM：用于求和。
<br>AVERAGE：用于求平均值。
<br>COUNT：用于计数（只统计数值）。
<br>COUNTA：用于统计非空单元格。


<br><br>
<br>错误描述：用户在插入或删除行列时，常常忽略现有公式中的引用，这会导致公式的计算范围不正确。
<br>解决方法：插入或删除行列后，检查相关公式，确保引用范围已自动更新，或手动调整引用范围。
<br><br>
<br>错误描述：有时用户会忘记保存工作，或在没有备份的情况下频繁覆盖文件，导致数据丢失或不可恢复。
<br>解决方法：养成定期保存文件的习惯，并开启自动保存功能。另外，重要的文件可以使用不同的版本进行保存，避免在覆盖时丢失重要数据。
<br><br>
<br>错误描述：初学者常常为了视觉效果使用合并单元格，尤其是在表格标题中，但这会严重影响数据分析操作（如筛选、排序）。
<br>解决方法：使用“跨列居中”而不是“合并单元格”来保持数据整洁且方便操作。
<br><br>
<br>错误描述：Excel中的空格会导致看似空的单元格实际并不空白，从而影响公式计算（如COUNTA函数）。
<br>解决方法：在数据整理时，可以使用函数 TRIM 去除多余的空格，确保单元格内容与预期一致。最好保证单元格之内不存在空格，直接全部替换！再 excel 内最好使用 _ 替代单元格。
]]></description><link>软件\生活窍门\excel：避雷指南.html</link><guid isPermaLink="false">软件/生活窍门/Excel：避雷指南.md</guid><pubDate>Wed, 04 Sep 2024 03:44:50 GMT</pubDate></item><item><title><![CDATA[软件下载]]></title><description><![CDATA[ 
 <br>NGDC 可以使用 FTP 格式传输。<br><br>链接：  <a data-tooltip-position="top" aria-label="https://1drv.ms/u/s!AnGqDjyiZ5t_hflDBmgAVpkH5t24_Q?e=wJUcPR" rel="noopener nofollow" class="external-link" href="https://1drv.ms/u/s!AnGqDjyiZ5t_hflDBmgAVpkH5t24_Q?e=wJUcPR" target="_blank">FileZilla Pro .zip</a><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409081645755.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409081643321.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\生活窍门\filezilla：如何传输下载ngdc数据？.html</link><guid isPermaLink="false">软件/生活窍门/FileZilla：如何传输下载NGDC数据？.md</guid><pubDate>Sun, 08 Sep 2024 13:01:58 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409081645755.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409081645755.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[设置]]></title><description><![CDATA[ 
 <br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407091502507.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>搜索 latex-workshop tools：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407091503696.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>将 "latex-workshop.latex.tools" 内容进行替换：<br>"latex-workshop.latex.tools": [
        
    
        {
            "name": "latexmk",
            "command": "latexmk",
            // "args": [
            //     "-synctex=1",
            //     "-interaction=nonstopmode",
            //     "-file-line-error",
            //     "-pdf",
            //     "-outdir=%OUTDIR%",
            //     "%DOC%"
            // ],
            "args": [
               "-xelatex",
               "-synctex=1",
               "-interaction=nonstopmode",
               "-file-line-error",
               "%DOC%"
            ],           
            "env": {}
        },
......其余不变
复制]]></description><link>软件\生活窍门\latex：修改vscode默认为xelatex.html</link><guid isPermaLink="false">软件/生活窍门/Latex：修改VScode默认为xelatex.md</guid><pubDate>Tue, 09 Jul 2024 07:04:40 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407091502507.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407091502507.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[WSL是什么]]></title><description><![CDATA[ 
 <br>并不是每个人都能够拥有服务器。即使是服务器也有宕机的时候。<br>为了应急，可以选择在自己的win电脑上安装一个Linux，这个被称为WSL。<br><br>适用于 Linux 的 Windows 子系统 (WSL) 是 Windows 的一项功能，可用于在 Windows 计算机上运行 Linux 环境，而无需单独的虚拟机或双引导。 WSL 旨在为希望同时使用 Windows 和 Linux 的开发人员提供无缝高效的体验。<br><br><br>微软官方给出的安装方式很直接，但是由于太直接了，所以直接给升级到最高的版本。<br>具体可以参见<a data-tooltip-position="top" aria-label="https://learn.microsoft.com/zh-cn/windows/wsl/install" rel="noopener nofollow" class="external-link" href="https://learn.microsoft.com/zh-cn/windows/wsl/install" target="_blank">这里</a>。<br>刚开始我并没有发现什么问题，但是由于我需要使用代理发现WSL会导致Win系统频繁断网，这让我苦不堪言。不得已我只能够卸载WSL。<br><br>手动安装旧版本是我觉得靠谱一点的方式。<br>需要先启用“适用于 Linux 的 Windows 子系统”可选功能，然后才能在 Windows 上安装 Linux 分发。<br>以管理员身份打开 PowerShell（“开始”菜单 &gt;“PowerShell” &gt;单击右键 &gt;“以管理员身份运行”），然后输入以下命令：<br>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
复制<br>下一步千万不要装WSL2.0，照着这样做：<br>
<br>打开微软商店，选择最早的Ubantu版本。

<br>单击以下链接会打开每个分发版的 Microsoft Store 页面：


<br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/store/apps/9N9TNGVNDL3Q" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/store/apps/9N9TNGVNDL3Q" target="_blank">Ubuntu 18.04 LTS</a>
<br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/store/apps/9n6svws3rx71" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/store/apps/9n6svws3rx71" target="_blank">Ubuntu 20.04 LTS</a>
<br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/store/apps/9PN20MSR04DW" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/store/apps/9PN20MSR04DW" target="_blank">Ubuntu 22.04 LTS</a>
<br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/store/apps/9NJFZK00FGKV" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/store/apps/9NJFZK00FGKV" target="_blank">openSUSE Leap 15.1</a>
<br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/store/apps/9MZ3D1TRP8T1" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/store/apps/9MZ3D1TRP8T1" target="_blank">SUSE Linux Enterprise Server 12 SP5</a>
<br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/store/apps/9PN498VPMF3Z" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/store/apps/9PN498VPMF3Z" target="_blank">SUSE Linux Enterprise Server 15 SP1</a>
<br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/store/apps/9PKR34TNCV07" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/store/apps/9PKR34TNCV07" target="_blank">Kali Linux</a>
<br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/store/apps/9MSVKQC78PK6" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/store/apps/9MSVKQC78PK6" target="_blank">Debian GNU/Linux</a>
<br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/store/apps/9n6gdm4k2hnc" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/store/apps/9n6gdm4k2hnc" target="_blank">Fedora Remix for WSL</a>
<br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/store/apps/9NV1GV1PXZ6P" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/store/apps/9NV1GV1PXZ6P" target="_blank">Pengwin</a>
<br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/store/apps/9N8LP0X93VCP" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/store/apps/9N8LP0X93VCP" target="_blank">Pengwin Enterprise</a>
<br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/store/apps/9p804crf0395" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/store/apps/9p804crf0395" target="_blank">Alpine WSL</a>
<br><a data-tooltip-position="top" aria-label="https://www.microsoft.com/store/apps/9msmjqd017x7" rel="noopener nofollow" class="external-link" href="https://www.microsoft.com/store/apps/9msmjqd017x7" target="_blank">Raft（免费试用版）</a>
<br><a data-tooltip-position="top" aria-label="https://apps.microsoft.com/search?query=alma+linux" rel="noopener nofollow" class="external-link" href="https://apps.microsoft.com/search?query=alma+linux" target="_blank">Alma Linux</a>


<br>在分发版的页面中，选择“获取”。

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403041500485.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">


<br>首次启动新安装的 Linux 分发版时，将打开一个控制台窗口，系统会要求你等待一分钟或两分钟，以便文件解压缩并存储到电脑上。 未来的所有启动时间应不到一秒。
<br><br>我在知乎上看到另一个大佬，可以把WSL系统放到D盘去，但是因为我的C盘本身很大，所以就没必要了。<br>原文链接：<a data-tooltip-position="top" aria-label="https://zhuanlan.zhihu.com/p/466001838" rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/466001838" target="_blank">Windows10/11 三步安装wsl2 Ubuntu20.04（任意盘） - 知乎 (zhihu.com)</a>]]></description><link>软件\生活窍门\win10安装wsl1.0.html</link><guid isPermaLink="false">软件/生活窍门/Win10安装WSL1.0.md</guid><pubDate>Fri, 21 Jun 2024 01:04:55 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403041500485.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403041500485.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[创建宏]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://blog.csdn.net/weixin_40575956/article/details/127960138" rel="noopener nofollow" class="external-link" href="https://blog.csdn.net/weixin_40575956/article/details/127960138" target="_blank">word批量修改交叉引用颜色_word交叉引用变蓝色-CSDN博客</a><br>
为增加学术论文可读性，论文中的文献引用和图表的交叉引用字体常设置为特殊颜色。手动一个个设置相当繁琐，我们可以利用Word的宏实现批量修改交叉引用字体颜色。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041534981.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041535181.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041535203.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>我在原作者的基础上添加了一些功能，不需要的时候可以直接删掉：<br>Sub CitingColor()
    For i = 1 To ActiveDocument.Fields.Count '遍历文档所有域
        If Left(ActiveDocument.Fields(i).Code, 4) = " REF" Then 'Word自带的交叉引用的域代码起始4位是" REF"（注意空格）
            ActiveDocument.Fields(i).Select '选中上述几类域
            With Selection.Font
                .Color = RGB(205, 226, 241) '设置字体颜色
                .Bold = True '设置字体为粗体
                .Italic = True '设置字体为斜体
                .Name = "仿宋" '设置字体为仿宋
                .Underline = wdUnderlineSingle '设置下划线
            End With
        End If
    Next
End Sub
复制<br><br>保存关闭，然后双击下列：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041536613.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
即可获得最终结果！]]></description><link>软件\生活窍门\word：批量调整交叉引用的字体.html</link><guid isPermaLink="false">软件/生活窍门/Word：批量调整交叉引用的字体.md</guid><pubDate>Thu, 04 Jul 2024 07:39:34 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041534981.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041534981.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[原始文档]]></title><description><![CDATA[ 
 <br>针对一个使用了Endnote软件插入参考文献的 Word 文件，可以使用如下方式快速替换字体颜色等。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041503747.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041503049.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041504669.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
现在，你就获得了具备颜色的引用：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041505764.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>如何取消下划线以及设置其他的样式呢？<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041507469.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041507705.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041508681.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041508985.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>完成！]]></description><link>软件\生活窍门\word：批量将endnote引用的参考文献字体调整为蓝色.html</link><guid isPermaLink="false">软件/生活窍门/Word：批量将Endnote引用的参考文献字体调整为蓝色.md</guid><pubDate>Thu, 04 Jul 2024 07:09:41 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041503747.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407041503747.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[WSL1 和 WSL2 网络的区别]]></title><description><![CDATA[ 
 <br>在 WSL2 环境中 clone 一个很大的 git 项目，不走代理速度很慢，所以研究了一下怎么让 WSL2 走 Windows 的代理客户端。<br><br>在 WSL1 时代，由于 Linux 子系统和 Windows 共享了网络端口，所以访问 Windows 的代理非常简单。例如 Windows 的代理客户端监听了 8000 端口，那么只需要在 Linux 子系统中执行如下命令，就可以让当前 session 中的请求通过代理访问互联网。<br>export ALL_PROXY="http://127.0.0.1:8000"
复制<br>但是 WSL2 基于 Hyper-V 运行，导致 Linux 子系统和 Windows 在网络上是两台各自独立的机器，从 Linux 子系统访问 Windows 首先需要找到 Windows 的 IP。<br><br><br>有两个关键步骤： 1. WSL2 中配置的代理要指向 Windows 的 IP； 2. Windows 上的代理客户端需要允许来自本地局域网的请求；<br>由于 Linux 子系统也是通过 Windows 访问网络，所以 Linux 子系统中的网关指向的是 Windows，DNS 服务器指向的也是 Windows，基于这两个特性，我们可以将 Windows 的 IP 读取出来。<br>例如，在 Ubuntu 子系统中，通过&nbsp;cat /etc/resolv.conf&nbsp;查看 DNS 服务器 IP。<br># This file was automatically generated by WSL. To stop 
automatic generation of this file, add the following entry to /etc/wsl.conf:# [network]# generateResolvConf = falsenameserver 172.19.80.1
复制<br>可以看到 DNS 服务器是&nbsp;172.19.80.1，通过环境变量&nbsp;ALL_PROXY&nbsp;配置代理：<br>export ALL_PROXY="http://172.19.80.1:7890"
复制<br>7890 是 Windows 上运行的代理客户端的端口，记得要在 Windows 代理客户端上配置允许本地局域网请求。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409132127022.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>另外的网友发现一个更加简单的方法。<br>
<a data-tooltip-position="top" aria-label="https://blog.csdn.net/iftodayhappy/article/details/137236279" rel="noopener nofollow" class="external-link" href="https://blog.csdn.net/iftodayhappy/article/details/137236279" target="_blank">为WSL2.0设置本机代理的配置方案（通过隧道）_wsl 代理-CSDN博客</a>
<br>
<br>把之前在.bashrc 启动文件中配置 http_proxy 和 https_proxy 的逻辑删去，并且关闭 WSL
<br>wsl --shutdown
复制<br>
<br>在我的 window 主机编辑 ~\.wslconfig：去 C:\Users\你的名字\ 新建一个 .wslconfig，然后用记事本打开往里面放这些内容：如"C:\Users\fangy.wslconfig"
<br>[wsl2]
memory=8GB
processors=8
[experimental]
autoMemoryReclaim=gradual
networkingMode=mirrored
dnsTunneling=true
firewall=true
autoProxy=true
sparseVhd=true
复制<br>
<br>重启 WSL
<br>确实自动设置了代理，代理正常工作，很好，不必再手动设置 http_proxy 和 https_proxy 了。]]></description><link>软件\生活窍门\wsl2：为linux设置网络代理.html</link><guid isPermaLink="false">软件/生活窍门/WSL2：为Linux设置网络代理.md</guid><pubDate>Fri, 13 Sep 2024 13:30:59 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409132127022.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409132127022.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[第二节 倾斜工具]]></title><description><![CDATA[ 
 <br>使用矩形绘图工具来绘制正方形或者长方形，并通过倾斜工具进行扭曲变形。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151759474.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
倾斜工具<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151800525.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151800246.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
按Alt拖动复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151801221.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
通过不断复制来铺满画面。<br><br>新建一个图层，置于底层，然后画一个大矩形填充颜色。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151802973.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>]]></description><link>软件\adobe-illustrator绘图\第二节-倾斜工具.html</link><guid isPermaLink="false">软件/Adobe illustrator绘图/第二节 倾斜工具.md</guid><pubDate>Fri, 21 Jun 2024 07:31:11 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151759474.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151759474.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[第六节 直线工具]]></title><description><![CDATA[ 
 <br>直线工具包括以下：<br>
<br>直线工具（在使用的时候，如果按住~键，就可以拖拽出多条直线，很方便！
<br>弧线工具
<br>螺旋线工具
<br>矩形线工具
<br>极坐标工具
<br>效果演示：<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212032136.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
在实际使用过程中，一定要注意↑ ↓ ← →方向键的使用，可以迅速调整生成图形的数量和密度。]]></description><link>软件\adobe-illustrator绘图\第六节-直线工具.html</link><guid isPermaLink="false">软件/Adobe illustrator绘图/第六节 直线工具.md</guid><pubDate>Fri, 21 Jun 2024 07:31:11 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212032136.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212032136.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[第七节 混合工具]]></title><description><![CDATA[ 
 <br>混合工具可以将多个对象的属性产生混合。<br>混合工具可以进行多种操作：<br>
<br>两个或者多个形状进行混合：

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212046339.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">
<br>双击对象进入隔离模式以调整细节：<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212047522.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>文字与文字进行混合

<br>我发现某些版本的Ai可能在进行上述操作时可能遇到问题，我的建议是不要在使用文字工具的时候拖动文本框，直接点击进行键入文字。
<br>然后对图层复制一份，进行移动。
<br>通过混合工具进行混合。
<br>按下enter回车有助于调整混合强度！<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212123687.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>文字与形状进行混合
]]></description><link>软件\adobe-illustrator绘图\第七节-混合工具.html</link><guid isPermaLink="false">软件/Adobe illustrator绘图/第七节 混合工具.md</guid><pubDate>Thu, 20 Jun 2024 12:28:15 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212046339.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212046339.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[第三节 钢笔工具]]></title><description><![CDATA[ 
 <br>钢笔工具绘制矢量图形。其绘制出来的线条叫做路径。<br>
路径分为：<br>
<br>闭合路径
<br>开放路径
<br>钢笔工具是一种手感工具，需要多加练习。如果练习过程中出现困难，无法判断落点，则可以开启橡皮筋功能。快捷键是：ctrl+K。<br>当我们使用钢笔工具勾画出路径之后，可以通过以下方式退出勾画：按住ctrl，点击空白处。<br>以下快捷键可能比较有用：<br><br>熟练生巧，<a data-tooltip-position="top" aria-label="http://bezier.method.ac" rel="noopener nofollow" class="external-link" href="http://bezier.method.ac" target="_blank">练习网址</a>。<br>其他好用的快捷键：<br>]]></description><link>软件\adobe-illustrator绘图\第三节-钢笔工具.html</link><guid isPermaLink="false">软件/Adobe illustrator绘图/第三节 钢笔工具.md</guid><pubDate>Fri, 21 Jun 2024 07:31:11 GMT</pubDate></item><item><title><![CDATA[第四节 文字工具]]></title><description><![CDATA[ 
 <br>我们在固定某些图层的时候，可以使用锁定工具来固定，快捷键是ctrl+2。<br>在我们使用文字工具键入文字之后，可以设置其字体和段落等。可以使用快捷键ctrl+T。<br>文字是可以按照路径去排列的。举例，先用钢笔进行路径勾画。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312211952984.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br><br>文字是一种图形，所以可以通过shift+T进行单个部首修饰。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312211955738.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">]]></description><link>软件\adobe-illustrator绘图\第四节-文字工具.html</link><guid isPermaLink="false">软件/Adobe illustrator绘图/第四节 文字工具.md</guid><pubDate>Fri, 21 Jun 2024 07:31:11 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312211952984.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312211952984.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[第五节 形状工具]]></title><description><![CDATA[ 
 <br>在Ai里面有很多形状工具，例如：<br>
<br>矩形
<br>三角形
<br>圆形
<br>多边形
<br>直线<br>
选择多边形工具,拖动建立形状，保持左键不松开，按↑↓方向键，就可以调整边数。
<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212016133.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br><br>实战演练：<br>
<br>绘制一个六边形
<br>对其施加变化

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212018320.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212020190.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212022169.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>对其施加渐变效果

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212025353.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>大功告成！
]]></description><link>软件\adobe-illustrator绘图\第五节-形状工具.html</link><guid isPermaLink="false">软件/Adobe illustrator绘图/第五节 形状工具.md</guid><pubDate>Fri, 21 Jun 2024 07:31:11 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212016133.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212016133.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[第一节 基础导入导出功能]]></title><description><![CDATA[ 
 <br>Adobe公司致力于开发各种创意和设计工具。<br>
<br>Adobe Photoshop：Adobe Photoshop是一款广泛使用的图像编辑软件，它包含许多AI功能，如内容感知填充、智能选择工具、自动改善功能等。这些功能可以帮助用户更轻松地编辑和改善照片和图像。
<br>Adobe Illustrator：Adobe Illustrator是一款矢量图形设计软件，它也包括一些AI功能，如自动图像跟踪、智能路径简化等，以帮助设计师创建精美的矢量图形。
<br>Ai和PS有着几乎相同的操作逻辑。Ai输出格式有以下常用的几种格式：<br><br>操作快捷键：<br>]]></description><link>软件\adobe-illustrator绘图\第一节-基础导入导出功能.html</link><guid isPermaLink="false">软件/Adobe illustrator绘图/第一节 基础导入导出功能.md</guid><pubDate>Thu, 20 Jun 2024 12:28:11 GMT</pubDate></item><item><title><![CDATA[思维总览]]></title><description><![CDATA[ 
 <br>Adobe公司致力于开发各种创意和设计工具。<br>
<br>Adobe Photoshop：Adobe Photoshop是一款广泛使用的图像编辑软件，它包含许多AI功能，如内容感知填充、智能选择工具、自动改善功能等。这些功能可以帮助用户更轻松地编辑和改善照片和图像。
<br>Adobe Illustrator：Adobe Illustrator是一款矢量图形设计软件，它也包括一些AI功能，如自动图像跟踪、智能路径简化等，以帮助设计师创建精美的矢量图形。
<br>Ai和PS有着几乎相同的操作逻辑。Ai输出格式有以下常用的几种格式：<br><br>操作快捷键：<br>第一节 基础导入导出功能<br>使用矩形绘图工具来绘制正方形或者长方形，并通过倾斜工具进行扭曲变形。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151759474.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
倾斜工具<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151800525.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151800246.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
按Alt拖动复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151801221.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
通过不断复制来铺满画面。<br><br>新建一个图层，置于底层，然后画一个大矩形填充颜色。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151802973.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>第二节 倾斜工具<br>钢笔工具绘制矢量图形。其绘制出来的线条叫做路径。<br>
路径分为：<br>
<br>闭合路径
<br>开放路径
<br>钢笔工具是一种手感工具，需要多加练习。如果练习过程中出现困难，无法判断落点，则可以开启橡皮筋功能。快捷键是：ctrl+K。<br>当我们使用钢笔工具勾画出路径之后，可以通过以下方式退出勾画：按住ctrl，点击空白处。<br>以下快捷键可能比较有用：<br><br>熟练生巧，<a data-tooltip-position="top" aria-label="http://bezier.method.ac" rel="noopener nofollow" class="external-link" href="http://bezier.method.ac" target="_blank">练习网址</a>。<br>其他好用的快捷键：<br>第三节 钢笔工具<br>直线工具包括以下：<br>
<br>直线工具（在使用的时候，如果按住~键，就可以拖拽出多条直线，很方便！
<br>弧线工具
<br>螺旋线工具
<br>矩形线工具
<br>极坐标工具
<br>效果演示：<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212032136.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
在实际使用过程中，一定要注意↑ ↓ ← →方向键的使用，可以迅速调整生成图形的数量和密度。第六节 直线工具<br>混合工具可以将多个对象的属性产生混合。<br>混合工具可以进行多种操作：<br>
<br>两个或者多个形状进行混合：

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212046339.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">
<br>双击对象进入隔离模式以调整细节：<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212047522.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>文字与文字进行混合

<br>我发现某些版本的Ai可能在进行上述操作时可能遇到问题，我的建议是不要在使用文字工具的时候拖动文本框，直接点击进行键入文字。
<br>然后对图层复制一份，进行移动。
<br>通过混合工具进行混合。
<br>按下enter回车有助于调整混合强度！<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212123687.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>文字与形状进行混合
第七节 混合工具<br>我们在固定某些图层的时候，可以使用锁定工具来固定，快捷键是ctrl+2。<br>在我们使用文字工具键入文字之后，可以设置其字体和段落等。可以使用快捷键ctrl+T。<br>文字是可以按照路径去排列的。举例，先用钢笔进行路径勾画。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312211952984.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br><br>文字是一种图形，所以可以通过shift+T进行单个部首修饰。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312211955738.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">第四节 文字工具<br>在Ai里面有很多形状工具，例如：<br>
<br>矩形
<br>三角形
<br>圆形
<br>多边形
<br>直线<br>
选择多边形工具,拖动建立形状，保持左键不松开，按↑↓方向键，就可以调整边数。
<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212016133.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br><br>实战演练：<br>
<br>绘制一个六边形
<br>对其施加变化

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212018320.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212020190.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212022169.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>对其施加渐变效果

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312212025353.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">


<br>大功告成！
第五节 形状工具]]></description><link>软件\adobe-illustrator绘图\思维总览.html</link><guid isPermaLink="false">软件/Adobe illustrator绘图/思维总览.canvas</guid><pubDate>Tue, 29 Oct 2024 09:54:38 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151759474.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312151759474.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[古代 DNA]]></title><description><![CDATA[ 
 <br><br>古代 DNA 对于校正系统发育树具有重要的意义，通过 C14测定的年龄往往比通过分子钟推算出来的共同祖先时间更精准，因此可以认为古代 DNA 是校正时间的“金标准”。<br><br>我们需要准备3个文件：<br>
<br>古代 DNA 序列文件
<br>现代 DNA 序列文件
<br>古代 DNA 时间文件
<br><br>序列文件通常采用 fasta 格式，也可以使用 nex 格式。我们可以使用 geneious 软件轻松转换。序列比对推荐使用 <a data-href="MAFFT：使用教程" href="软件\其它生信软件\k-s\mafft：使用教程.html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：使用教程</a>。我们需要保证古代 DNA 和现代 DNA 的序列的长度一致。<br><br>我们需要制作 新建 Text Document.txt 文件：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409122209592.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>第一列是 ID，第二列是年龄。
注意，ID 必须与 fasta 文件中的 ID 一样！另外，推荐我们使用 BP（before present） 作为时间的单位。原因在于古代 DNA 的时间跨度很长，使用 BCE,BC 等单位可能会弄混。另外，注意，BP 不能出现负数！BP 与 BCE 的换算关系是：
<br><br><br>进行系统发育树建树的前提是：<a data-tooltip-position="top" aria-label="构建系统发育树的重要步骤.canvas" data-href="构建系统发育树的重要步骤.canvas" href="软件\其它生信软件\使用心得\构建系统发育树的重要步骤.html" class="internal-link" target="_self" rel="noopener nofollow">构建系统发育树的重要步骤</a>。<br>
请按照上述操作进行保守区选择和饱和度检测。<br><br>我们需要进行<a data-href="日期随机化检验（Date Randomization Tests, DRTs）" href="术语\日期随机化检验（date-randomization-tests,-drts）.html" class="internal-link" target="_self" rel="noopener nofollow">日期随机化检验（Date Randomization Tests, DRTs）</a>，具体的操作步骤在这里：<a data-href="BEAST：日期随机化检测" href="软件\beast\beast：日期随机化检测.html" class="internal-link" target="_self" rel="noopener nofollow">BEAST：日期随机化检测</a>。<br><br>现在可以将文件导入 BEAUTi 了。其它的设置和仅分析现代 DNA是一致的。我们需要注意的是 Tip ——这个参数一般我们在分析现代 DNA 的时候没有设置，但是在这里我们需要设置：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409122218792.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
依次点击图中，注意这里我们选择的是 Before the present!!!<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409122219996.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
然后我们选择 read from file ，将刚才我们准备好的古代 DNA 时间文件 新建 Text Document.txt 导入进去。<br>为什么我没有选择 use everything？
事实上，这里的选项都可以选，但是，某些 ID 中存在的特殊字符例如 @#_!/ 等都会导致这些方法失效，因此还是按我说的做吧。<br>
现代 DNA 可以不指定时间，若要指定，请指定为 0.
<br>最终，我们获得了 xml 文件，然后放到 BEAST2 中运行即可。<br><br>我发现序列中存在一些特殊字符或者参数设定有些不合理时，该软件会闪退，但是如果我们选择 Scaling 为 None 就不会。我也不知道为什么。
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409122223883.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><br>这一步我们烧掉前 25% 的树。<br>当然，你也可以按照树的 数量 而非百分比烧，也可以烧掉 10% 等。随便你。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409122225822.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>略。<br><br>由于这次我们仅作演示，因此 MCMC 并未设定过长，这导致我们的 ESS 比较低，树的结构有些紊乱，这可以通过增大迭代次数来解决。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409122227377.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\beast\beast：加入古代dna建树校正时间.html</link><guid isPermaLink="false">软件/BEAST/BEAST：加入古代DNA建树校正时间.md</guid><pubDate>Thu, 12 Sep 2024 14:30:27 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409122209592.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409122209592.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[介绍]]></title><description><![CDATA[ 
 <br>
<a data-tooltip-position="top" aria-label="https://user.qzone.qq.com/58001704/2" rel="noopener nofollow" class="external-link" href="https://user.qzone.qq.com/58001704/2" target="_blank">Raindy Qzone</a>
<br><br>病毒或其他病原的进化速率（rate）和时间尺度（timescale）可以通过对具有时间结构（Time-structured）的序列进行系统发育分析获得，应用病毒序列的采样时间进行分子钟校准前，通常需要进行日期随机化检验（date-randomization test）判断分析的数据集中是否有足够的时间信号（Temporal signal）可用于校准。<br>
在人类的古代 DNA 研究中，时间跨度较长导致序列之间的变异很大，另外，我们无法排除测序质量对序列的干扰，因此在进行线粒体 DNA 和 Y 染色体研究时，为了构建带有古代 DNA 的<a data-href="贝叶斯进化树分析（Bayesian Evolutionary Analysis by Sampling Trees，BEAST）" href="术语\贝叶斯进化树分析（bayesian-evolutionary-analysis-by-sampling-trees，beast）.html" class="internal-link" target="_self" rel="noopener nofollow">贝叶斯进化树分析（Bayesian Evolutionary Analysis by Sampling Trees，BEAST）</a>，有必要进行<a data-href="日期随机化检验（Date Randomization Tests, DRTs）" href="术语\日期随机化检验（date-randomization-tests,-drts）.html" class="internal-link" target="_self" rel="noopener nofollow">日期随机化检验（Date Randomization Tests, DRTs）</a>。<br><br>
<br>
两个检验标准（CR1和CR2）：<br>
1. 通过原始（正确的）采样时间进行校准估算获得的进化速率平均值（Mean）与应用日期随机化后的数据获得的进化速率95%置信区间（CI）进行比较（如下图中的小红点与黑色线段的上下限）。如果两者之间没有重合，则通过相对宽松的标准1（即：CR1）；<br>
2. 通过原始（正确的）采样时间估算获得进化速率的95%CI与随机化后的数据获得进化速率的任何区间（如下图的红色虚线段与黑色线段的任意一个值）均没有重合，则能通过更为严格的标准2（即：CR2）；<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111512994.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
两个不同方法：&nbsp;

<br>标准的Bayesian dating permutation tests&nbsp;
<br>相同采样时间归组的&nbsp;Clustered permutation tests。


<br>本文以标准的方法为示例，应用 R 包 TipDatingBeast 进行 DRTs 简明图解分析。<br><br><br>
<br>配置用于BEAST运行的XML文件：应用 BEAUti 1.8.x&nbsp;配置时，在"Tip"标签下，启用&nbsp;Tip-date&nbsp;功能，将每条序列的采样时间根据不同规则提取出来用于校准（如下图所示），其他根据规范逐一配置完成，最好导出配置好的xml文件（本例为PMMoV_DRTs.xml），注意该xml文件中的时期是正确采样时间（非随机化的）：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111515117.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>随机化 XML 文件的采样日期：
<br><br>使用 R 语言进行：<br># 载入TipDatingBeast库，如果没有安装则先安装
if (!require("TipDatingBeast")) {
  install.packages("TipDatingBeast", dependencies = TRUE)
  library(TipDatingBeast)
}
# 指定工作路径
setwd("C:/Users/victo/Desktop")
# 指定你要产生多少份xml文件用于检测，默认20个
rep = 20
# 执行 RandomDates 函数，生成随机化日期的 XML 文件
RandomDates(name="TIP", rep, writeTrees=FALSE)
复制<br><br>应用BEAST分别运行前两步得到的.xml，获得运行日志文件.log。<br>在大批量运行这些xml文件前，建议先随机抽个随机化的xml文件，看看程序是否会存在如下类似报错信息。
SEVERE: Parsing error - poorly formed XML (possibly not an XML file):<br>
The string "--" is not permitted within comments.<br>
java.lang.RuntimeException: Terminate
<br>解决办法： <br>用文本编辑器搜索字符串&nbsp; &nbsp;&nbsp;&lt;!-- write tree log to file&nbsp;，将它后一行的&nbsp;&lt;!--&nbsp;&nbsp;的字符串删除后删除，保存xml 文件。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111518068.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>获得的21个 xxx.log&nbsp;复制到当前工作目录，输入以下命令，对DRTs结果进行绘制：<br># 载入TipDatingBeast库，如果没有安装则先安装
if (!require("TipDatingBeast")) {
  install.packages("TipDatingBeast", dependencies = TRUE)
  library(TipDatingBeast)
}
# 指定工作路径
setwd("C:/Users/victo/Desktop")
# 指定你要烧掉前%多少的树，默认0.1即10%
burnin = 0.1 
# 使用 PlotDRT 函数分析和绘制结果
PlotDRT(name="TIP", rep, burnin=0.1)
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111519067.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>绘制完成，工作目录会生成三个文件，meanRate.stats.csv 和两个 PDF 文件，均为DRTs的结果，一个是原数绘制的，另一个是数值取Log10后绘制的结果。<br><br>可以使用R对 meanRate.stats.csv 进行绘制，效果图如下图所示，DRTs结果表明目的数据集通过DRTs检验，具有时间信号，其采样时间用于校准分子钟。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111520265.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\beast\beast：日期随机化检测.html</link><guid isPermaLink="false">软件/BEAST/BEAST：日期随机化检测.md</guid><pubDate>Thu, 12 Sep 2024 03:07:30 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111512994.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111512994.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[BEAST：替换模型]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="BEAST：使用指南.canvas" data-href="BEAST：使用指南.canvas" href="BEAST：使用指南.canvas" class="internal-link" target="_self" rel="noopener nofollow">BEAST使用指南</a><br>
<a data-href="贝叶斯进化树分析（Bayesian Evolutionary Analysis by Sampling Trees，BEAST）" href="术语\贝叶斯进化树分析（bayesian-evolutionary-analysis-by-sampling-trees，beast）.html" class="internal-link" target="_self" rel="noopener nofollow">贝叶斯进化树分析（Bayesian Evolutionary Analysis by Sampling Trees，BEAST）</a><br>
<a data-href="MrBayes：贝叶斯方法建树" href="软件\beast\mrbayes：贝叶斯方法建树.html" class="internal-link" target="_self" rel="noopener nofollow">MrBayes：贝叶斯方法建树</a><br>BEAST1软件包里面BEAUti程序图形用户界面只给出了3种目前最流行的DNA替换模型: HKY、TrN和GTR。目前，标准的DNA替换模型有11种，也就是说还有8种（JC69、TrNef、K80、F81、SYM、TIM、TVM和TVMef）DNA替换模型没有指定，需要自己想办法解决。<br><br>更多有关BEAST的内容可以访问：<a data-tooltip-position="top" aria-label="https://user.qzone.qq.com/2049968646/main" rel="noopener nofollow" class="external-link" href="https://user.qzone.qq.com/2049968646/main" target="_blank">李老师的个人QQ空间日志</a><br>核苷酸替换模型参数 NST 修正：<br>JC		   nst=1  base=equal  rates=equal  pinv=0
JC+I 	   nst=1  base=equal  rates=equal  pinv=est
JC+G	   nst=1  base=equal  rates=gamma  shape=est  pinv=0
JC+I+G	   nst=1  base=equal  rates=gamma  shape=est  pinv=est
F81		   nst=1  base=est  rates=equal  pinv=0
F81+I	   nst=1  base=est  rates=equal  pinv=est
F81+G	   nst=1  base=est  rates=gamma  shape=est  pinv=0
F81+I+G	   nst=1  base=est  rates=invgamma  shape=est  pinv=est
K80		   nst=2  base=equal  tratio=est  rates=equal  pinv=0
K80+I	   nst=2  base=equal  tratio=est  rates=equal  pin=est
K80+G	   nst=2  base=equal  tratio=est  rates=gamma  shape=est  pinv=0
K80+I+G	   nst=2  base=equal  tratio=est  rates=invgamma  shape=est pinv=est
HKY	   nst=2  base=est  tratio=est  rates=equal  pinv=0
HKY+I	   nst=2  base=est  tratio=est  rates=equal  pinv=est
HKY+G	   nst=2  base=est  tratio=est  rates=gamma  shape=est  pinv=0  
HKY+I+G  nst=2  base=est  tratio=est  rates=invgamma  shape=est  pinv=est  
TrNef	   nst=6  base=equal  rmat=est  rclass=(a b a a e a)  rates=equal  pinv=0
TrNef+I	   nst=6  base=equal  rmat=est  rclass=(a b a a e a) rates=equal  pinv=est
TrNef+G	   nst=6  base=equal  rmat=est  rclass=(a b a a e a) rates=gamma  shape=est  pinv=0
TrNef+I+G	nst=6  base=equal  rmat=est rclass=(a b a a e a) rates=invgamma  shape=est  pinv=est
TrN 	   nst=6  base=est  rmat=est  rclass=(a b a a e a) rates=equal  pinv=0
TrN+I 	   nst=6  base=est  rmat=est  rclass=(a b a a e a) rates=equal  pinv=est
TrN+G	   nst=6  base=est  rmat=est  rclass=(a b a a e a) rates=gamma  shape=est  pinv=0
TrN+I+G	   nst=6  base=est  rmat=est  rclass=(a b a a e a) rates=invgamma  shape=est  pinv=est
K81		   nst=6  base=equal  rmat=est  rclass=(a b c c b a)  rates=equal  pinv=0
K81+I	   nst=6  base=equal  rmat=est  rclass=(a b c c b a)  rates=equal  pinv=est
K81+G	   nst=6  base=equal rmat=est  rclass=(a b c c b a)  rates=gamma  shape=est  pinv=0
K81+I+G	   nst=6  base=equal  rmat=est rclass=(a b c c b a)  rates=invgamma  shape=est  pinv=est
K81uf	   nst=6  base=est  rmat=est  rclass=(a b c c b a)  rates=equal  pinv=0
K81uf+I	   nst=6  base=est  rmat=est  rclass=(a b c c b a)  rates=equal  pinv=est
K81uf+G	   nst=6  base=est  rmat=est  rclass=(a b c c b a)  rates=gamma  shape=est  pinv=0
K81uf+I+G	nst=6  base=est  rmat=est  rclass=(a b c c b a)  rates=invgamma  shape=est  pinv=est
TIMef	   nst=6  base=equal  rmat=est  rclass=(a b c c e a)  rates=equal  pinv=0
TIMef+I	   nst=6  base=equal  rmat=est  rclass=(a b c c e a)  rates=equal  pinv=est
TIMef+G	   nst=6  base=equal rmat=est  rclass=(a b c c e a)  rates=gamma  shape=est  pinv=0
TIMef+I+G	nst=6  base=equal  rmat=est rclass=(a b c c e a)  rates=invgamma  shape=est  pinv=est
TIM		   nst=6  base=est  rmat=est  rclass=(a b c c e a)  rates=equal  pinv=0
TIM+I 	   nst=6  base=est  rmat=est  rclass=(a b c c e a)  rates=equal  pinv=est
TIM+G	   nst=6  base=est  rmat=est  rclass=(a b c c e a)  rates=gamma  shape=est  pinv=0
TIM+I+G	nst=6  base=est  rmatrix=est  rclass=(a b c c e a)  rates=invgamma  shape=est  pinv=est
TVMef	   nst=6  base=equal  rmat=est  rclass=(a b c d b e)  rates=equal  pinv=0
TVMef+I	   nst=6  base=equal  rmat=est  rclass=(a b c d b e)  rates=equal  pinv=est
TVMef+G	nst=6  base=equal rmat=est  rclass=(a b c d b e)  rates=gamma  shape=est  pinv=0
TVMef+I+G	nst=6  base=equal  rmat=est rclass=(a b c d b e)  rates=invgamma  shape=est  pinv=est
TVM		nst=6  base=est  rmat=est  rclass=(a b c d b e)  rates=equal  pinv=0
TVM+I	    nst=6  base=est  rmat=est  rclass=(a b c d b e)  rates=equal  pinv=est
TVM+G	    nst=6  base=est  rmat=est  rclass=(a b c d b e)  rates=gamma  shape=est  pinv=0
TVM+I+G	nst=6  base=est  rmat=est  rclass=(a b c d b e)  rates=invgamma  shape=est  pinv=est
SYM		nst=6  base=equal  rmat=est  rclass= (a b c d e f)  rates=equal  pinv=0
SYM+I	    nst=6  base=equal  rmat=est  rclass= (a b c d e f)  rates=equal  pinv=est
SYM+G	    nst=6  base=equal  rmat=est  rclass= (a b c d e f)  rates=gamma  shape=est pinv=0  
SYM+I+G	nst=6  base=equal  rmat=est  rclass= (a b c d e f)  rates=invgamma  shape=est pinv=est  
GTR		nst=6  base=est  rmat=est  rclass= (a b c d e f)  rates=equal  pinv=0
GTR+I	    nst=6  base=est  rmat=est  rclass= (a b c d e f)  rates=equal  pinv=est
GTR+G	    nst=6  base=est  rmat=est  rclass= (a b c d e f)  rates=gamma  shape=est pinv=0  
GTR+I+G	nst=6  base=est  rmat=est  rclass= (a b c d e f)  rates=invgamma  shape=est pinv=est  
复制<br>注意：其中参数 base 和 rmat 是 paup 模块里的，mrbayes 里不需要设置，rclas 也不是 mrbayes 里的参数。<br>
在 mrbayes 里的 GTR 模型示例如下：<br>
lset  nst=6  rates=equal ;<br>
Prset statefreqpr=dirichlet(1,1,1,1)  pinv=fix(0);<br>BEGIN MRBAYES;
outgroup  name1
outgroup  name2
lset nst=6 rates=invgamma ngammacat=4;
Prset statefreqpr=dirichlet(1,1,1,1);
mcmc ngen=2000000 printfreq=1000 nruns=2 diagnfreq=5000 samplefreq=100 nchains=4 temp=0.1 burninfrac=0.25 checkpoint=yes savebrlens=yes;
sump burnin=5000;
sumt burnin=5000 contype=allcompat showtreeprobs=yes;
END;
复制<br>例如，我希望：<br>
<br>编码区：GTR+F+I+G4
<br>高变区：HKY+F+I 
]]></description><link>软件\beast\beast：替换模型.html</link><guid isPermaLink="false">软件/BEAST/BEAST：替换模型.md</guid><pubDate>Fri, 21 Jun 2024 07:31:17 GMT</pubDate></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br><br>一个对齐的 fasta 文件，可以使用如下脚本把 coding 和 control 区分开。<br>import os
import re
from Bio import SeqIO

# Define input and output file paths
input_fasta_path = r"原始的.fasta"
output_nexus_path = r"TK.nex" # 这里会生成分区的nex文件，大概率不会用到
output_dloop_fasta_path = r"TKDLOOP.FASTA" # 控制区
output_coding_fasta_path = r"TKCODING.FASTA" # 编码区
input_txt_path = r"新建 Text Document.txt" # 输入的提取文件，第一列是ID，第二列是单倍群（也可以只要ID） 

def clean_special_characters(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()
    
    # Remove special characters @, ', and "
    cleaned_content = re.sub(r"[\'\"@]", "", content)
    
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(cleaned_content)

def read_sample_info(txt_path):
    sample_info = {}
    with open(txt_path, 'r', encoding='utf-8') as txt_file:
        # Skip the header
        next(txt_file)
        for line in txt_file:
            parts = line.strip().split('\t')
            if len(parts) == 2:
                sample_id, haplogroup = parts
                sample_info[sample_id] = haplogroup
    return sample_info

def write_nexus(sequences, file_path):
    num_taxa = len(sequences)
    num_characters = len(next(iter(sequences.values())))

    with open(file_path, 'w') as file:
        file.write("#NEXUS\n\n")
        file.write("Begin data;\n")
        file.write(f"Dimensions ntax={num_taxa} nchar={num_characters};\n")
        file.write("Format datatype=dna missing=? gap=-;\n")
        file.write("Matrix\n\n")
        
        for sequence_id, sequence_data in sequences.items():
            file.write(f"{sequence_id}\t{sequence_data}\n")
        
        file.write(";\n")
        file.write("End;\n\n")
        
        file.write("begin assumptions;\n")
        file.write("charset DLOOP = 1-599 16001-16594;\n")
        file.write("charset CODING = 600-16000;\n")
        file.write("end;\n")

def write_fasta(sequences, file_path):
    with open(file_path, 'w') as file:
        for sequence_id, sequence_data in sequences.items():
            file.write(f"&gt;{sequence_id}\n")
            file.write(f"{sequence_data}\n")

def extract_sequences(fasta_path, sample_info, include_haplogroup):
    extracted_sequences = {}
    for record in SeqIO.parse(fasta_path, "fasta"):
        original_id = record.id
        if not sample_info or original_id in sample_info:
            if include_haplogroup and original_id in sample_info:
                new_id = f"{original_id}_{sample_info[original_id]}"
                record.id = new_id
                record.description = new_id
            extracted_sequences[record.id] = str(record.seq)
    return extracted_sequences

def split_sequences(sequences):
    dloop_sequences = {}
    coding_sequences = {}
    for seq_id, seq in sequences.items():
        dloop_seq = seq[:599] + seq[16000:] # 在这里指定区域的位置！
        coding_seq = seq[599:16000] # 在这里指定区域的位置！
        dloop_sequences[seq_id] = dloop_seq
        coding_sequences[seq_id] = coding_seq
    return dloop_sequences, coding_sequences

def calculate_chain_and_log_parameters(num_sequences):
    length_of_chain = 3000 * (num_sequences ** 2)
    log_parameters_every = length_of_chain // 30000
    return length_of_chain, log_parameters_every

def main():
    read_sequence_list = input("是否要读取序列ID列表？请回答YES或者NO: ").strip().upper() == 'YES'
    
    if read_sequence_list:
        clean_special_characters(input_txt_path)
        sample_info = read_sample_info(input_txt_path)
    else:
        sample_info = {}

    include_haplogroup = input("是否需要添加单倍群信息至ID？请输入YES或者NO: ").strip().upper() == 'YES'
    
    extracted_sequences = extract_sequences(input_fasta_path, sample_info, include_haplogroup)
    
    if not extracted_sequences:
        print("没有找到任何序列。")
        return
    
    num_sequences = len(extracted_sequences)
    length_of_chain, log_parameters_every = calculate_chain_and_log_parameters(num_sequences)
    
    print(f"序列数目: {num_sequences}")
    print(f"总代数 (Length of chain): {length_of_chain}")
    print(f"样本容量 (Log parameters every): {log_parameters_every}")
    
    write_nexus(extracted_sequences, output_nexus_path)

    dloop_sequences, coding_sequences = split_sequences(extracted_sequences)
    
    write_fasta(dloop_sequences, output_dloop_fasta_path)
    write_fasta(coding_sequences, output_coding_fasta_path)

    print(f"提取已经完成. 提取的序列已经转为NEX并保存至 {output_nexus_path}")
    print(f"DLOOP序列已经保存至 {output_dloop_fasta_path}")
    print(f"CODING序列已经保存至 {output_coding_fasta_path}")
    print(f"M单倍群60500年前;#N单倍群58200年前;#R单倍群54300年前")

if __name__ == "__main__":
    main()

复制<br><br><br>
<br>导入你的mtDNA序列数据：

<br>启动BEaUTI。
<br>在“File”菜单中选择“Import Alignment”来导入你的mtDNA序列（包括编码区的位置 577–16023）。


<br><br>
<br>设置替代模型：

<br>转到“Partitions”选项卡。
<br>选择你的数据分区，然后点击“Site Model”。
<br>将替代模型设置为“GTR+I”（General Time-Reversible model with Invariant sites）。


<br><br>
<br>设置时钟模型：

<br>转到“Clock Models”选项卡。
<br>选择“Strict Clock”。
<br>在“Clock Rate”字段中输入 1.691 × 10⁻⁸。


<br><br>
<br>设置树的先验信息：

<br>转到“Priors”选项卡。
<br>将“Tree Prior”设置为“Coalescent: Bayesian Skyline”。
<br>将“Number of groups”设置为20。
<br>将“Skyline Model”选择为“Piecewise-linear”。


<br><br>
<br>设置MCMC参数：

<br>转到“MCMC”选项卡。
<br>将“Chain Length”设置为 40,000,000。
<br>将“Store Every”设置为 4000。
<br>将“Pre Burnin”设置为 4,000,000。
<br>为每个群体进行三次独立的运行。


<br><br>
<br>保存设置并生成XML文件：

<br>确认所有设置都已正确配置。
<br>在“File”菜单中选择“Save As”来保存设置并生成BEAST的输入XML文件。


<br>完成这些步骤后，你可以使用生成的XML文件在BEAST中进行分析。这样可以确保你再现文献中描述的BSP分析参数。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407022033728.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407022033418.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407022033395.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407022033852.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407022034907.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407022035950.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
在最后这一步，请生成3个名字不同但参数相同的 xml 文件。并分别用 BEAST 软件运行，最后使用 LogCombiner 软件进行合并即可。<br>注意，没有截图的参数保持原样不要动！<br><br><a data-href="贝叶斯天际线图（Bayesian Skyline Plot, BSP）" href="术语\贝叶斯天际线图（bayesian-skyline-plot,-bsp）.html" class="internal-link" target="_self" rel="noopener nofollow">贝叶斯天际线图（Bayesian Skyline Plot, BSP）</a> 的基础人口规模函数可以指定为人口规模变化的逐步函数或分段线性函数。主要数据是通过分段线性模型获得的。有效种群规模的估计是根据随时间推断的谱系合并率得出的。祖先基因树是根据一般时间可逆（GTR）替换模型推断的，该模型具有第一、第二和第三密码子位置的位点特异性比率。通过重要性采样计算的贝叶斯因子（Newton et al. 1994）表明该模型比常用的 GTR + Γ + I 模型（log Bayes 因子 = 19.1）更好地拟合数据。每个 MCMC 样本均基于 40,000,000 代的运行，每 4,000 代采样一次，前 4,000,000 代作为老化被丢弃。对 MCMC 图的自相关时间的检查表明运行已收敛到平衡分布，并且此时提供了足够的后验样本。所有运行的聚结先验有效样本量至少为 1,​​000<a data-footref="1" href="about:blank#fn-1-3d0ee807868908f1" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a> <a data-footref="2" href="about:blank#fn-2-3d0ee807868908f1" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a>。<br>使用 BEAST（Drummond 和 Rambaut 2007）基于13个蛋白质编码区重建了有效种群大小（Nef）随时间变化的 BSP，如其他地方所述（Atkinson 等人，2008;Atkinson 等人，2009 年）。在 BSP 分析中，采用第一、第二和第三密码子的通用时间可逆替换模型来推断祖先基因树。为了估计 Nef 变化的时间尺度，选择了一个严格的分子钟，其固定速率为每年每个位点1.691e 8次替换（Ho 和 Endicott 2008）。每个马尔可夫链蒙特卡洛模拟运行了 40,000,000 代，每 4,000 代采样一次，前 40,000 代作为老化丢弃。结果使用 Tracer v1.5（<a data-tooltip-position="top" aria-label="http://tree.bio.ed.ac.uk/software/tracer/%EF%BC%8C2009%E5%B9%B412%E6%9C%881%E6%97%A5%E8%AE%BF%E9%97%AE%EF%BC%89%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%82%E4%BA%BA%E5%8F%A3%E5%A2%9E%E9%95%BF%E7%8E%87%E5%92%8C%E4%BA%BA%E5%8F%A3%E5%A2%9E%E9%95%BF%E6%97%B6%E9%97%B4%E6%98%AF%E6%A0%B9%E6%8D%AE%E5%85%88%E5%89%8D%E7%A0%94%E7%A9%B6%E5%90%8E%E7%9A%84%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9B%BE%E8%AE%A1%E7%AE%97%E7%9A%84%EF%BC%88Gignoux" rel="noopener nofollow" class="external-link" href="http://tree.bio.ed.ac.uk/software/tracer/%EF%BC%8C2009%E5%B9%B412%E6%9C%881%E6%97%A5%E8%AE%BF%E9%97%AE%EF%BC%89%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%82%E4%BA%BA%E5%8F%A3%E5%A2%9E%E9%95%BF%E7%8E%87%E5%92%8C%E4%BA%BA%E5%8F%A3%E5%A2%9E%E9%95%BF%E6%97%B6%E9%97%B4%E6%98%AF%E6%A0%B9%E6%8D%AE%E5%85%88%E5%89%8D%E7%A0%94%E7%A9%B6%E5%90%8E%E7%9A%84%E5%A4%A9%E9%99%85%E7%BA%BF%E5%9B%BE%E8%AE%A1%E7%AE%97%E7%9A%84%EF%BC%88Gignoux" target="_blank">http://tree.bio.ed.ac.uk/software/tracer/，2009年12月1日访问）可视化。人口增长率和人口增长时间是根据先前研究后的天际线图计算的（Gignoux</a> 等人，2011 年）<a data-footref="3" href="about:blank#fn-3-3d0ee807868908f1" class="footnote-link" target="_self" rel="noopener nofollow">[3]</a>。<br><br><br><br><br>
<br>
<br>mtDNA Variation Predicts Population Size in Humans and Reveals a Major Southern Asian Chapter in Human Prehistory<a href="about:blank#fnref-1-3d0ee807868908f1" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>Bayesian coalescent inference of major human mitochondrial DNA haplogroup expansions in Africa<a href="about:blank#fnref-2-3d0ee807868908f1" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>River Valleys Shaped the Maternal Genetic Landscape of Han Chinese<a href="about:blank#fnref-3-3d0ee807868908f1" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>软件\beast\beast：线粒体dna的bsp设置.html</link><guid isPermaLink="false">软件/BEAST/BEAST：线粒体DNA的BSP设置.md</guid><pubDate>Thu, 18 Jul 2024 08:22:44 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407022033728.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407022033728.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[安装必要的软件 java]]></title><description><![CDATA[ 
 <br><br>sudo apt-get update
sudo apt-get install cmake build-essential autoconf automake libtool git pkg-config openjdk-11-jdk
复制<br><br>git clone --depth=1 https://github.com/beagle-dev/beagle-lib.git
cd beagle-lib
mkdir build
cd build
复制<br><br><br>cmake -DCMAKE_INSTALL_PREFIX:PATH=$HOME ..
make install
复制<br><br>首先需要安装英伟达驱动：<a data-tooltip-position="top" aria-label="https://developer.nvidia.com/cuda-downloads" rel="noopener nofollow" class="external-link" href="https://developer.nvidia.com/cuda-downloads" target="_blank">链接</a><br>
如果安装成功，可以通过 nvidia-smi 和 nvcc --version 命令查看。<br>cmake -DCMAKE_INSTALL_PREFIX:PATH=$HOME -DBUILD_CUDA=ON -DBUILD_OPENCL=OFF ..
make install
复制<br><br>export LD_LIBRARY_PATH=$HOME/lib:$LD_LIBRARY_PATH
export PKG_CONFIG_PATH=$HOME/lib/pkgconfig:$PKG_CONFIG_PATH
echo 'export LD_LIBRARY_PATH=$HOME/lib:$LD_LIBRARY_PATH' &gt;&gt; ~/.bashrc
echo 'export PKG_CONFIG_PATH=$HOME/lib/pkgconfig:$PKG_CONFIG_PATH' &gt;&gt; ~/.bashrc
source ~/.bashrc
复制<br>如果你使用的是 WSL，那么需要修改一下beagle-lib/CMakeLists.txt：<br>修改前：<br>link_directories(
    ${PROJECT_SOURCE_DIR}/libhmsbeagle
    ${PROJECT_SOURCE_DIR}/libhmsbeagle/CPU
    ${PROJECT_SOURCE_DIR}/libhmsbeagle/GPU
    ${PROJECT_SOURCE_DIR}/libhmsbeagle/JNI
)
复制<br>修改后：<br>link_directories(
    ${PROJECT_SOURCE_DIR}/libhmsbeagle
    ${PROJECT_SOURCE_DIR}/libhmsbeagle/CPU
    ${PROJECT_SOURCE_DIR}/libhmsbeagle/GPU
    ${PROJECT_SOURCE_DIR}/libhmsbeagle/JNI
    /usr/lib/wsl/lib
    /usr/local/cuda/lib64
)
复制<br><br>export LD_LIBRARY_PATH=$HOME/lib:$LD_LIBRARY_PATH
复制<br><br>#!/bin/bash
export PATH=/home/luolintao/SRA_download/sratoolkit.3.1.0-ubuntu64/bin:/home/zhiyongwang/.aspera/cli/bin:/home/bin:/home/guanglinhe/biosoftware/AdmixTools/bin:/home/anaconda3/include:/usr/include:/usr/share/R/include:/home/biosoftware/OpenBLAS:/home/anaconda3/bin:/home/bin:/root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
export LD_LIBRARY_PATH=$HOME/lib:$LD_LIBRARY_PATH
export PERL5LIB="/home/luolintao/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
export PERL_LOCAL_LIB_ROOT="/home/luolintao/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
export PERL_MB_OPT="--install_base \"/home/luolintao/perl5\""
export PERL_MM_OPT="INSTALL_BASE=/home/luolintao/perl5"

# 启动 beast
/home/luolintao/BEASTv1.10.4/BEASTv1.10.4/bin/beast -beagle_cpu -beagle_order 1 /home/luolintao/BEASTv1.10.4/BEASTv1.10.4/INPUT/Han_N.xml

复制<br><br>
<br>-beagle_off: 不使用BEAGLE库进行计算。
<br>-beagle: 如果可用，使用BEAGLE库（默认开启）。
<br>-beagle_info: 显示可用的BEAGLE资源信息。
<br>-beagle_order: 设置资源使用顺序。例如，-beagle_order 1意味着使用资源1。
<br>-beagle_instances: 在多个实例之间划分站点模式。
<br>-beagle_CPU: 使用CPU实例进行计算。
<br>-beagle_GPU: 如果可用，使用GPU实例进行计算。
<br>-beagle_SSE: 如果可用，使用SSE扩展进行计算。
<br>-beagle_SSE_off: 禁用SSE扩展。
<br>-beagle_cuda: 如果可用，使用CUDA并行化进行计算。
<br>-beagle_opencl: 如果可用，使用OpenCL并行化进行计算。
<br>-beagle_single: 如果可用，使用单精度计算。
<br>-beagle_double: 如果可用，使用双精度计算。
<br>-beagle_async: 如果可用，使用异步内核。
<br>-beagle_scaling: 指定使用的缩放方案。
<br>-beagle_rescale: 动态缩放时指定重新缩放的频率。
<br><br>beast -beagle_cuda -beagle_order 1 data.xml
复制<br>/to/your/path/beast/bin/beast -beagle_GPU -beagle_SSE /to/your/path/输入文件.xml
复制<br><br>输入命令 /to/your/path/beast/bin/beast -h 可以查看完整的命令行参数，需要注意的几点有<a data-footref="1" href="about:blank#fn-1-3d0ee807868908f1" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>：  <br>
<br>beast 会根据机器的计算资源，来自动的配置线程数，通常情况下，这个线程数会是你的机器能开启的最大线程，所以，除非你十分了解你的机器或希望约束beast 所调用的资源，那么就你不应该设置一个 --threads 参数来约束 beast 所开启的线程数目。  
<br>beast_instances 的作用是给输入文件划分子分区，注意，这是子分区而不是分区，分区是输入文件中定义的，beast 计算程序不会给输入文件划分分区，根据，如果划分了子分区，一般都会导致计算性能的下降。  
<br>beast_order 用来指定各个分区或子分区依次使用哪些计算资源，如果不指定该参数，那么程序将只会调用起一块计算资源。参数就是1,2,3,4这样的自然数，分别对应机器上的第一块CPU（GPU），第二块CPU（GPU）。  
<br>如果输入文件没有分区，那么即使指定了 beagle_order 选项，也无法调用起多块计算资源，这时可以通过beagle_instances划分子分区来强行调用多块资源来进行计算，但是计算效率未必尽如人意。  
<br>如果输入文件有 4 个分区，那么只有指定了 beagle_order 选项，才会调用起多块资源来并行计算。  
线粒体 DNA 分区为2，可使用 beagle_order 2

<br>执行 /to/your/path/beast/bin/beast -beagle_info 可以查看 beast 识别到的机器上的计算资源。  
<br>每次beast开始计算时，都会在执行命令的目录下产生程序的日志输出文件，如果不删除该日志文件来重新计算同一个输入文件，那么会报错说日志文件已存在，这时可以手动删除该文件或添加 -overwrite 参数来强行覆盖原来的日志输出文件。  
<br>查看英伟达显卡显存和利用效率的命令为：nvidia-smi
<br><br><br>
<br>
<br><a data-tooltip-position="top" aria-label="https://blog.qiql.net/archives/beast" rel="noopener nofollow" class="external-link" href="https://blog.qiql.net/archives/beast" target="_blank"><span></span>Linux 平台 BEAST 安装及调试指南【附安装脚本】 (qiql.net)</a><img class="emoji" draggable="false" alt="🔥" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f525.svg" height="18px" style="max-width: 100%;"><a href="about:blank#fnref-1-3d0ee807868908f1" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>软件\beast\beast：在服务器内运行.html</link><guid isPermaLink="false">软件/BEAST/BEAST：在服务器内运行.md</guid><pubDate>Sat, 29 Jun 2024 11:50:01 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f525.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f525.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[MrBayes：贝叶斯方法建树]]></title><description><![CDATA[ 
 <br>贝叶斯方法建树 MrBayes<br>网址： <a rel="noopener nofollow" class="external-link" href="http://mrbayes.sourceforge.net/" target="_blank">http://mrbayes.sourceforge.net/</a><br>MrBayes 是一款利用贝叶斯方法进行进化树构建的软件。贝叶斯方法建树与最大似然法建树有密切联系，最大似然法是寻找合适的参数（树型、枝长和进化模型，），使得到数据（多序列比对结果）的似然率最大，最大化 P (Data | Tree)；而贝叶斯方法则是利用给定数据，寻找概率最大的树型，最大化 P (Tree | Data)。不仅如此，贝叶斯方法还提供给定数据条件下，各种树型出现的概率，也称后验概率。但实际上各种树型的的后验概率很难直接计算，一般是采用 MCMC 方法来近似。图 3.1 是利用 MCMC(Markov Chain Monte Carlo)方法构建贝叶斯树的流程图。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154503.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>MrBayes 是 DOS 界面的，不需安装可直接使用。它默认读入 nexus 格式的多序列比对结果文件进行分析，我们首先用程序提供的演示序列学习使用方法。<br>3.1 运行 MrBayes，读入 nex 文件，确定参数。<br>解压程序文件夹，可以看到里面有两个可执行文件，mrbayes_x64 适用于 64 位操作系统的电脑，mrbayes_X86 适合 32 位电脑。双击应用程序，打开界面（图 3.2）。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154509.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>在”MrBayes &gt;”控制符后输入 execute examples/primates.nex&nbsp; 点击回车，程序读入演示用的多序列比对文件 primates.nex，并输出相关数据供核对。（图 3.3）  <br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154515.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图 3.3 MrBayes 读入序列<br>如果要分析自己的序列，需先用序列比对软件（如 ClustalX)进行多序列比对，输出比对结果为 MrBayes 可识别的为 nexus 文件，或者用比对结果转换软件将其它格式的比对结果转换成 nexus 格式。<br>Tips: 在用 ClustalX 做多序列比对前，先将要比对的序列 fasta 格式第一行（“&gt;”后）只保留物种名_序列名，这样方便后续分析，用 ClustalX 读入序列后，在 output format option 选中 nexus 格式，对序列进行比对（Do complete alignment）。生成的 nxs 文件可以用写字板打开浏览，里面内容是多条序列比对结果。将它与 mrbayes 可执行文件放在同一目录下即可读入分析。<br>可以在控制符后输入 help lset，查看默认的参数(图 3.4)。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154520.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图 3.4 默认参数（部分）<br>Nucmodel 设定核酸模型，doublet 是二联子核苷酸，有 16 种状态，用于分析核糖体 DNA 茎环结构，codon 是将核酸作为三联体密码子分析的，默认的 4by4 就是将核酸按其四种核苷酸（ACGT）进行分析.<br>Nst 设定替换模型，1 是 JC Model，所有核苷酸替换速率相同，2 是 kimura Model，将转换和颠换区分开来，6 是 General Time Reversible (GTR) model，任意两个核苷酸之间替换速率均不相等，有 6 个速率参数。&nbsp;<br>Code 是选择密码子编码方式的，只有在核酸模型（Nucmodel）选择为 codon 时需要设定。<br>Ploidy 有两个选项，单倍体 haploid 和多倍体 diploid, 只有在设定了 coalescence prior 时需要设定。<br>Rates是设定替换速率的，默认的是equal(所有位点替换速率相同）, 还可选择gamma（位点间替换速率变化服从gamma分布），propinv（有一部分位点的替换速率是不变的），<br>Invgamma (有一部分位点的替换速率是不变的，其余位点的替换速率服从gamma分布)&nbsp; adgamma（相邻位点的替换速率是相关的，其边缘分布为gamma分布）.<br>Ngammacat：由于 gamma 分布是连续的，无法计算某个点的概率，所以这里采用了近似的方法，将连续的 gamma 分布分成几个单元（categories）,每个单元的平均速率作为此单元的替换速率。这里设定的就是独立的单元数目(the number of discrete categories)，默认为 4，这个数字越高，近似效果越好，但需要的时间也越长。<br>Nbetacat：当使用表型数据（morphological data）建树时，替换速率常采用 beta 分布近似，与 gamma 分布相同，需要将连续的分布近似为几个离散的分类，这里设定的就是独立的分类数目。<br>Omegavar 设定各位点间的非同义替换与同义替换速率的比值。Equal 假定各位点间的<br>omega (nonsynonymous/synonymous rate)相同，Ny98 和M3各位点间omega值不同，两个模型的取值范围有所不同。<br>Covarion 设定在进化历史上各位点替换速率是否恒定。选择 yes，则各位点突变速率随时间会发生变化。&nbsp;<br>Coding 设定数据抽样方式，all 适用于所有类型的数据，所有的字符都会被抽中；variable 只适合表型数据和限制性位点（restriction site）数据，只有发生了变化的数据会被抽中； noabsencesite 适合限制性位点数据，所有物种中不存在的位点不抽取。<br>Parsmodel 是否利用简约模型（parsimony model）。<br>在控制符后输入 lset nst=6 rates=invgamma，点击回车(图 3.5)。将进化模型设定为<br>GTR 模型，4 种核苷酸替换速率各不相同，序列中有部分位点不发生替换，其它位点的替换服从 Gamma 分布。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154530.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>这时在控制符后输入 Help lset，查看刚才设定的参数是改变（图 3.6）。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154535.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>如果你分析的是蛋白质序列，需要提前设定氨基酸替换模型，可选的氨基酸替换模型包<br>括 poisson(20 种氨基酸频率相同，替换速率相同)，jones（Jones，1992）, dayhoff(Dayhoff,<br>Schwartz and Orcutt, 1978), mtrev(Adachi and Hasegawa, 1996), mtmam(Cao et al., 1998; Yang, Nielsen, and Hasegawa, 1998), wag(Wheland and Goldman, 2001), rtrev(Dimmic et al., 2002), cprev(Adachi et al., 2000)，vt(Muller and Vingron, 2000)，<br>blosum(Henikoff and Henikoff, 1992)，equalin，gtr。由于蛋白质替换符合哪个模型事<br>先未知，可以设定 prset aamodelpr=mixed，则 MCMC 算法对前 10 个模型分别尝试<br>（jumping between fixed-rate amino acid models），每个模型对结果的贡献与其后验<br>概率成正比。<br>prset 命令是用来设定各个参数的先验概率分布，可以根据你对自己数据的了解来设定，也可以设定一个无信息的先验概率分布（所有模型的概率都均等）。MrBayes 默认的是无信息的先验分布，所以如果对自己的数据没有先验经验，可以不做设定。想了解系统对各个参数的先验设定，在控制符后输入 help prset 即可查看。<br>3.2 MCMC<br>在控制符后输入 mcmc ngen=100000 samplefreq=100 printfreq=100 diagnfreq=1000，点击回车，程序开始运行（图3.7），首先输出你设定的参数和待分析数据情况，然后输出抽样结果。<br>Ngen设定MCMC算法进行的循环代数，也就是对树型、枝长或进化模型参数改变的次数，这里设定为10万次；默认值为100万。因为每次对树型、枝长或进化模型参数改变的并不大，如果每个循环（每次改变）都抽样，输出文件太大，样本相似度太高；所以这里samplefreq 抽样频率设定为100个循环抽一次，100000个循环将会从后验概率分布中抽得1000个样本；默认抽样频率为500代抽一次。printfreq是分析结果输出屏幕的频率，默认是500代输出一次。MCMC默认同时运行两个独立的分析（run），也就是从八个不同的起始树（initial tree，每个分析4棵起始树）开始运行。同时运行两个独立的分析，可以在运行过程中诊断结果是否收敛，刚开始两个分析抽样出来的树差异比较大，但随着代数的增加，它们会收敛，越来越相似，说明我们已经得到了一个好的后验概率分布样本；诊断频率diagnfreq设定每过多少代，检查一下两个分析结果的差异，默认为5000代一次。如果你序列数目比较少，很快就达到收敛状态，ngen可以设置的小一点儿，抽样和诊断频率高一点儿（samplefreq小一点儿）；反之如果你的样本比较大，可能需要更多代数才能达到收敛，这时抽样和诊断频率可以低一点儿（samplefreq大一点儿）。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154546.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图 3.7 MCMC 运行界面（部分）<br>图 3.7 第一列是代数（也即循环数），后面四列数字分别为第一轮运行的四条链各自的对数概率值（log likelihood），[ ]内的对应的是冷链(cold chain)，（）内的是热链（heated chains）。注意冷热链间应该能变换状态（图中上下两行间[]的位置发生变化），如果不能，则算法效率不高，可能需要延长代数或降低冷热链间温度差距（Temp）。*号后的是第二轮运行的四条链的情况。最后一列是估计的完成设定代数还需要的时间。<br>运行结束后如果 standard deviation of split frequencies 小于 0.01 ，在程序询问<br>“Continue the analysis?”时回答 no,否则答 yes,增加世代数继续运行至小于 0.01。<br>运行结束可以看到在输出界面有一个链交换信息（chain swap information），矩阵左上部分是交换频率，这些值如果在 0.1~0.8 之间，说明结果合理，否则要重新设置增加参数，如增加代数 ngen，降低 Temp 等。<br>这时在 MrBayes 可执行程序文件夹内可看到生成五个文件，扩展名为 mcmc 的文件一个，扩展名为 p 和 t 的文件各两个,每个分析（run）一个，mcmc 文件记录的是抽样的信息， p 文件记录了每个抽样的模型参数，可以用写字板打开查看；t 文件是树型和枝长数据，可以用 TreeView 打开，每个 run 有一个树文件，里面包含了 1000 棵树。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154600.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图 3.8 MCMC 运行结束输出界面（部分）<br>3.3 归纳参数和树型（sump &amp; sumt）<br>在控制符后输入sump burnin=250，点击回车运行。<br>Sump对MCMC抽样的替换模型参数（(p文件)）进行总结，由于起始阶段的树型概率并<br>不高，不是最优树，所以要将这部分样本抛弃。burnin后面的250就是这里要抛弃的样本数量。程序默认是将样本的前25％抛弃(（burninfrac = 0.25）)后再总结。你可以改变burnin<br>的数量或比例，如果就用默认的25%，则可以只输入sump即可。输出结果包括三部分内容：首先是数据的log-probability随世代数变化的图，图上的点应该没有明显趋势，说明抽样到达了平稳状态（stationarity）（左图）如果你的分析数据显示随世代数增加，log-probability 有上升或下降的趋势（右图），那么需要增加代数，继续分析；第二部分是两轮MCMC分析的边缘概率估计；第三部分是用到的各个参数取值情况。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154607.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154615.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154620.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154626.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>&nbsp;图 3.9 Summarize the parameter 结果<br>图 3.9 第三张图片共输出了 13 个参数的情况，第一行 TL 是进化树的总枝长，接下来 6 个 r 是两两核苷酸替换速率，再下来 4 个 pi 是四种核苷酸频率，alpha 是 gamma 分布的形状参数，pinvar 是不变位点所占比例。每个参数分别输出其均值 mean，方差 variance， 95％置信区间的 lower 和 upper 值，中位数 median，如果 MCMC 运行结果收敛，最后一栏<br>PSRF(potential scale reduction factor)值应该在 1 左右。<br>然后可以通过 sumt burnin=250 对所有抽样树型进行总结 (同样前 25％的样本被抛弃)，程序对树型进行总结，输出所有枝长参数，同时输出 cladogram，上面标注了每个分枝(clade)的后验概率，还输出 phylogram，各枝的长度代表对应的进化距离（图 3.10）。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154632.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154641.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154644.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图 3.10 Summarize Trees 结果<br>观察程序所在文件夹，可以看到生成了六个文件，扩展名为 parts 的文件里记录的是构<br>建出来的进化树的分枝类型（branch pattern, partition）。扩展名为 tstat、vstat 和 lstat 的文件分别总结了各种树型（topology）、枝长(branch length)和似然值（marginal likelihood）的统计数据，这三个文件可用写字板打开查看；扩展名为 con.tre 的文件就是总结出来的一致树，可用 Treeview 软件打开查看，可看到各分枝的后验概率及枝长（standard deviation from posterior probability）信息；trprobs 文件包含了 MCMC搜索过程中得到的树，且按照后验概率大小排序。]]></description><link>软件\beast\mrbayes：贝叶斯方法建树.html</link><guid isPermaLink="false">软件/BEAST/MrBayes：贝叶斯方法建树.md</guid><pubDate>Fri, 21 Jun 2024 07:31:17 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154503.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606154503.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Mrbayes：系统发育树构建流程]]></title><description><![CDATA[ 
 <br>
<a data-tooltip-position="top" aria-label="https://user.qzone.qq.com/58001704/2" rel="noopener nofollow" class="external-link" href="https://user.qzone.qq.com/58001704/2" target="_blank">Raindy Qzone</a>
<br>贝叶斯法（ Bayesian inference, BI）是基于进化模型的统计推论法，具有完整而坚实的数学和统计学基础，可以处理复杂而接近实际情况的进化模型，可以将现有的系统发育知识整合或体现在先验概率中，通过后验概率直观反映出各分支的可靠性而不需要通过自举法检验。Bi法适用于大或复杂的数据集，其缺点是对进化模型比较敏感，BI法中指定的每个氨基酸的后验概率建立在许多假说条件下，在现实中可能不成立。<br>重要必看！重要必看！重要必看！
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111529889.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><br><br>在这里不阐述了，多个软件都可以进行：<a data-href="MAFFT：使用教程" href="软件\其它生信软件\k-s\mafft：使用教程.html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：使用教程</a>，<a data-href="序列比对（Align）软件评测" href="软件\其它生信软件\使用心得\序列比对（align）软件评测.html" class="internal-link" target="_self" rel="noopener nofollow">序列比对（Align）软件评测</a>，<a data-href="序列比对的思考" href="软件\其它生信软件\使用心得\序列比对的思考.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="❔" aria-label="❔" data-icon="❔" aria-hidden="true" style="transform: translateY(0px);"></span>序列比对的思考</a><img class="emoji" draggable="false" alt="❔" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/2754.svg" height="18px" style="max-width: 100%;">。得到一个比对完成的 fasta 文件。<br><br>将得到的序列提交Gblock在线服务器（<a rel="noopener nofollow" class="external-link" href="http://www.phylogeny.fr/one_task.cgi?task_type=gblocks" target="_blank">http://www.phylogeny.fr/one_task.cgi?task_type=gblocks</a>），得到保守区的序列align_cured.fasta。<br>这个网站目前缺乏维护，已经出现了很多替代品。这里推荐Trimal软件，可以自动修剪去除不可靠的区域：<a data-href="Trimal：自动修剪序列不可靠区域" href="软件\其它生信软件\t-z\trimal：自动修剪序列不可靠区域.html" class="internal-link" target="_self" rel="noopener nofollow">Trimal：自动修剪序列不可靠区域</a>。<br><br>通常有两种方法：  <br>
<br>第一种是PAUP 软件验证替换饱和，简要操作如下：  在PAUP中分别计算p距离和GTR+I+G距离，然后在Excel中做散点图。（a）如果散点分别在y=x直线上，就说明没达到饱和；（b）如果GTR+I+G距离&gt;p距离就说明饱和了。
<br>第二种用DAMBE 软件验证替换饱和，该法最方便实用，推荐使用。只要比较ISS和ISS.c 值大小及显著与否，即可。当ISS小于ISS.c 且p=0.0000（极显著），就说明没序列替换未饱和，可以建树。<br>
在这里使用第二种方法：DAMBE：核苷酸替代饱和度检测<br><br><br><a data-tooltip-position="top" aria-label="http://dambe.bio.uottawa.ca/DAMBE/dambe.aspx" rel="noopener nofollow" class="external-link" href="http://dambe.bio.uottawa.ca/DAMBE/dambe.aspx" target="_blank">XiaLab (uottawa.ca)</a><br>或者你也可以使用如下连接下载，在 Win10及以上电脑：<a data-tooltip-position="top" aria-label="https://1drv.ms/u/s!AnGqDjyiZ5t_hflO2Qz-mZKR2fkGFQ?e=kJEmlp" rel="noopener nofollow" class="external-link" href="https://1drv.ms/u/s!AnGqDjyiZ5t_hflO2Qz-mZKR2fkGFQ?e=kJEmlp" target="_blank">DAMBE.msi</a><br>注意，这里有个 bug：
我们需要在属性中选择兼容模式运行，否则可能在 win11电脑闪退！<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111713579.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>通常有两种方法：  <br>
<br>第一种是PAUP 软件验证替换饱和，简要操作如下：  在 PAUP 中分别计算 p 距离和 GTR+I+G 距离，然后在 Excel 中做散点图。（a）如果散点分别在 y=x 直线上，就说明没达到饱和；（b）如果 GTR+I+G 距离&gt;p 距离就说明饱和了。
<br>第二种用DAMBE 软件验证替换饱和，该法最方便实用，推荐使用。只要比较 ISS 和 ISS.c 值大小及显著与否，即可。当 ISS 小于 ISS.c 且 p=0.0000（极显著），就说明没序列替换未饱和，可以建树。<br>
我们在这里展示第二种方法的具体操作：
<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111706837.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111706165.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111705181.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111533427.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
我们发现了，Iss 小于 Iss.c 且 P&lt;0.05，因此替换没有饱和，适合建树。
<br><br>多种软件都可以计算：<a data-href="iqtree：寻找最优模型及分区" href="软件\iqtree\iqtree：寻找最优模型及分区.html" class="internal-link" target="_self" rel="noopener nofollow">iqtree：寻找最优模型及分区</a>，<a data-href="图解核苷酸替换模型（Nucleotide substitution models）" href="术语\图解核苷酸替换模型（nucleotide-substitution-models）.html" class="internal-link" target="_self" rel="noopener nofollow">图解核苷酸替换模型（Nucleotide substitution models）</a>, <a data-tooltip-position="top" aria-label="http://user.qzone.qq.com/58001704/blog/1369539093" rel="noopener nofollow" class="external-link" href="http://user.qzone.qq.com/58001704/blog/1369539093" target="_blank">其它的软件</a><br><br>我们可以在如下模板中替换：将其添加（2）中的 *.nex 文件中。<br>begin mrbayes;
outgroup TuMV;
lset nst=6 rates=invgamma ngammacat=16; 
Prset statefreqpr=dirichlet(1,1,1,1);
mcmcp savebrlens=yes ngen=2000000 samplefreq=100 nchains=4; # MCMC长度和样本容量等，与BEAST相似。
mcmc;
sumt contype=allcompat burnin=5000;
end;
复制<br><br>输入 exe BI-ref.nex 回车，最后生成 *.tre，即最终的BI树。在运行1000代后都会显示 Average standard deviation of split frequencies。<br>
<br>当这个值 &lt; 0.01 时，说明两次运行的结果差异显著，Convergence 已经达到，这时可以输入 no 终止运行；  
<br>当这个值 &gt;0.01 时，说明两次运行的结果差异不显著，可以输入 yes ，并输入继续运行的代数，直至上述值&lt; 0.01为止。<br>
这个指标不是绝对的，当Average standard deviation of split frequencies值一直达不到理想值，可以通过 tracer 查看 *.p 文件，当所有参数ESS &gt;200时，说明参数已收敛。
<br><br>用 Figtree 查看生成&nbsp;.tre，美化修饰。]]></description><link>软件\beast\mrbayes：系统发育树构建流程.html</link><guid isPermaLink="false">软件/BEAST/Mrbayes：系统发育树构建流程.md</guid><pubDate>Thu, 12 Sep 2024 03:22:18 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111529889.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409111529889.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[文件准备]]></title><description><![CDATA[ 
 <br><br>
<br>fasta 文件
<br>META 文件（也就是分组文件）<br>
如下所示：<br>
fasta 文件：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405052256925.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
META 文件：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405052256353.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><br>我更新了一个脚本，使用 Python 提取相应的序列，然后再进行运行。Python 如下：<br>import sys
import pandas as pd

def read_ids(filename):
    ids = pd.read_csv(filename, sep='\t', header=None, usecols=[0])
    return ids[0].tolist()

def filter_fasta(input_fasta, ids, output_fasta):
    with open(input_fasta, 'r') as fasta_file, open(output_fasta, 'w') as outfile:
        write_sequence = False
        for line in fasta_file:
            if line.startswith('&gt;'):
                sequence_id = line.split('&gt;')[1].strip().split(' ')[0]
                if sequence_id in ids:
                    write_sequence = True
                    outfile.write(line)
                else:
                    write_sequence = False
            elif write_sequence:
                outfile.write(line)

def main(input_ids_file, input_fasta_file, output_fasta_file):
    ids = read_ids(input_ids_file)
    filter_fasta(input_fasta_file, ids, output_fasta_file)
    print("Filtered fasta file has been created.")

if __name__ == '__main__':
    if len(sys.argv) != 4:
        print("Usage: python extract_fasta_sequences.py &lt;meta_file&gt; &lt;fasta_file&gt; &lt;output_file&gt;")
        sys.exit(1)
    main(sys.argv[1], sys.argv[2], sys.argv[3])

复制<br>要把我写的 Python 脚本放在/mnt/e/Scientifc_software/fastHaN-main/fastHaN-main 文件夹下，并且名字不能更改。<br><br>#!/bin/bash

# 定义常用变量
#################################把下面的改了################################
FASTA_PATH="/mnt/c/Users/victo/Desktop/Illumina_mtDNA_hap.fasta" # 你的fasta文件
OUTPUT_PATH="/mnt/c/Users/victo/Desktop" # 输出结果路径
SOFTWARE_PATH="/mnt/e/Scientifc_software/fastHaN-main/fastHaN-main/" # 软件所在路径
META_FILE="/mnt/c/Users/victo/Desktop/新建TextDocument.txt" # META文件所在路径
##################################把上面的改了################################
OUTPUT_FASTA="${OUTPUT_PATH}/filtered_sequences.fasta" #这个不用更改。

# 运行 Python 脚本（需要把我写的Python脚本放在/mnt/e/Scientifc_software/fastHaN-main/fastHaN-main文件夹下，并且名字不能更改#######
###############################################################################################
python3 "${SOFTWARE_PATH}extract_fasta_sequences.py" "$META_FILE" "$FASTA_PATH" "$OUTPUT_FASTA"

# 定义常用变量
EXTRACTED_FASTA_PATH=$OUTPUT_FASTA # 你的fasta文件


# 将fasta序列转为phy并压缩为gz
GZ_FILE="$OUTPUT_PATH/fasta2phylip.phy.gz" # 输出.phy.gz文件
python $SOFTWARE_PATH/Pipline/Fasta2Phylip.py $EXTRACTED_FASTA_PATH | gzip &gt; $GZ_FILE

# 进行network运算
# TCS算法
$SOFTWARE_PATH/fastHaN_linux original_tcs -i $GZ_FILE -t 8 -a 1 -m 1 -o $OUTPUT_PATH/ORIGIN_TCS

# mjn算法
$SOFTWARE_PATH/fastHaN_linux mjn -i $GZ_FILE -t 8 -e 0 -o $OUTPUT_PATH/MJN

# 改良TCS算法
$SOFTWARE_PATH/fastHaN_linux modified_tcs -i $GZ_FILE -t 8 -o $OUTPUT_PATH/TCS

# msn算法
$SOFTWARE_PATH/fastHaN_linux msn -i $GZ_FILE -e 0 -o $OUTPUT_PATH/MSN

# 分组文件整理
python $SOFTWARE_PATH/Script/GenNetworkConfig.py $OUTPUT_PATH/ORIGIN_TCS.json $META_FILE $OUTPUT_PATH/Groupinformation
python $SOFTWARE_PATH/Script/GenNetworkConfig.py $OUTPUT_PATH/MJN.json $META_FILE $OUTPUT_PATH/Groupinformation
python $SOFTWARE_PATH/Script/GenNetworkConfig.py $OUTPUT_PATH/TCS.json $META_FILE $OUTPUT_PATH/Groupinformation
python $SOFTWARE_PATH/Script/GenNetworkConfig.py $OUTPUT_PATH/MSN.json $META_FILE $OUTPUT_PATH/Groupinformation
复制<br><br>修改脚本的 ########################################################## 之前的路径，一键运行。<br>#!/bin/bash

# 定义常用变量
FASTA_PATH="/mnt/c/Users/a/Desktop/Illumina_mtDNA_Filter_recode.fasta" # 你的fasta文件
OUTPUT_PATH="/mnt/c/Users/a/Desktop" # 输出结果路径
SOFTWARE_PATH="/mnt/e/OneDrive/文档（科研）/分析软件/fastHaN-main/fastHaN-main" # 软件所在路径
META_FILE="/mnt/c/Users/a/Desktop/illumina.meta" # META文件所在
##########################################################
# 将fasta序列转为phy并压缩为gz
GZ_FILE="$OUTPUT_PATH/fasta2phylip.phy.gz" # 输出.phy.gz文件
python $SOFTWARE_PATH/Pipline/Fasta2Phylip.py $FASTA_PATH | gzip &gt; $GZ_FILE

# 进行network运算
# TCS算法
$SOFTWARE_PATH/fastHaN_linux original_tcs -i $GZ_FILE -t 8 -a 1 -m 1 -o $OUTPUT_PATH/illumina_ORIGIN_TCS

# mjn算法
$SOFTWARE_PATH/fastHaN_linux mjn -i $GZ_FILE -t 8 -e 0 -o $OUTPUT_PATH/illumina_MJN

# 改良TCS算法
$SOFTWARE_PATH/fastHaN_linux modified_tcs -i $GZ_FILE -t 8 -o $OUTPUT_PATH/illumina_TCS

# msn算法
$SOFTWARE_PATH/fastHaN_linux msn -i $GZ_FILE -e 0 -o $OUTPUT_PATH/illumina_MSN

# 分组文件整理
python $SOFTWARE_PATH/Script/GenNetworkConfig.py $OUTPUT_PATH/illumina_ORIGIN_TCS.json $META_FILE $OUTPUT_PATH/Groupinformation
python $SOFTWARE_PATH/Script/GenNetworkConfig.py $OUTPUT_PATH/illumina_MJN.json $META_FILE $OUTPUT_PATH/Groupinformation
python $SOFTWARE_PATH/Script/GenNetworkConfig.py $OUTPUT_PATH/illumina_TCS.json $META_FILE $OUTPUT_PATH/Groupinformation
python $SOFTWARE_PATH/Script/GenNetworkConfig.py $OUTPUT_PATH/illumina_MSN.json $META_FILE $OUTPUT_PATH/Groupinformation
复制]]></description><link>软件\fasthan\自制fasthan脚本——2024年5月13日更新.html</link><guid isPermaLink="false">软件/FastHaN/自制FastHaN脚本——2024年5月13日更新.md</guid><pubDate>Fri, 21 Jun 2024 07:31:04 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405052256925.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405052256925.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[新功能]]></title><description><![CDATA[ 
 <br><br>将下列2个 python 脚本放在软件目录下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240516175448.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
注意，名字必须一样：<br>
color_replace.py<br>
extract_fasta_sequences.py<br><br>import pandas as pd
import sys

# 获取传入的文件路径
input_file = sys.argv[1]
output_file = sys.argv[2]

# 定义新的颜色列表
new_colors = [+
    '#EA1F1F', '#E88421', '#E5C923',
    '#FFF924', '#9DEF1B', '#42D726',
    '#449657', '#4CCCB3', '#369BA8',
    '#2B7EBC', '#3626D1', '#A128CE','#2D2D2D'
]

# 读取CSV文件
df = pd.read_csv(input_file, delimiter=';', header=None, names=['Group', 'Color', 'Value'])

# 创建一个字典来跟踪颜色的分配以避免重复
assigned_colors = {}

# 替换颜色的函数并处理重复情况
def replace_colors_v3(row, color_index):
    color = new_colors[color_index % len(new_colors)]
    if color in assigned_colors:
        occurrence = assigned_colors[color]
        row['Value'] = f'lines-{occurrence * 2 - 1}'
        assigned_colors[color] += 1
    else:
        assigned_colors[color] = 1
    row['Color'] = color
    return row

# 替换数据框中的颜色
color_index = 0
for i in range(len(df)):
    df.iloc[i] = replace_colors_v3(df.iloc[i], color_index)
    color_index += 1

# 保存修改后的数据框到新的CSV文件
df.to_csv(output_file, sep=';', index=False, header=False)

复制<br><br>import sys
import pandas as pd

def read_ids(filename):
    ids = pd.read_csv(filename, sep='\t', header=None, usecols=[0])
    return ids[0].tolist()

def filter_fasta(input_fasta, ids, output_fasta):
    with open(input_fasta, 'r') as fasta_file, open(output_fasta, 'w') as outfile:
        write_sequence = False
        for line in fasta_file:
            if line.startswith('&gt;'):
                sequence_id = line.split('&gt;')[1].strip().split(' ')[0]
                if sequence_id in ids:
                    write_sequence = True
                    outfile.write(line)
                else:
                    write_sequence = False
            elif write_sequence:
                outfile.write(line)

def main(input_ids_file, input_fasta_file, output_fasta_file):
    ids = read_ids(input_ids_file)
    filter_fasta(input_fasta_file, ids, output_fasta_file)
    print("Filtered fasta file has been created.")

if __name__ == '__main__':
    if len(sys.argv) != 4:
        print("Usage: python extract_fasta_sequences.py &lt;meta_file&gt; &lt;fasta_file&gt; &lt;output_file&gt;")
        sys.exit(1)
    main(sys.argv[1], sys.argv[2], sys.argv[3])

复制<br><br>#!/bin/bash

# 基础路径设置
FASTA_PATH="/mnt/c/Users/victo/Desktop/Illumina_mtDNA_hap.fasta"
OUTPUT_PATH="/mnt/c/Users/victo/Desktop/output"
SOFTWARE_PATH="/mnt/e/Scientifc_software/fastHaN-main/fastHaN-main/"
META_FILE="/mnt/c/Users/victo/Desktop/文本.txt"
META_HAP_FILE="/mnt/c/Users/victo/Desktop/文本_HAP.txt"

# 输出的 FASTA 文件路径
OUTPUT_FASTA="${OUTPUT_PATH}/filtered_sequences.fasta"

# 提取序列并保存
python3 "${SOFTWARE_PATH}extract_fasta_sequences.py" "$META_FILE" "$FASTA_PATH" "$OUTPUT_FASTA"

# 文件转换并压缩
GZ_FILE="$OUTPUT_PATH/fasta2phylip.phy.gz"
python "${SOFTWARE_PATH}Pipline/Fasta2Phylip.py" "$OUTPUT_FASTA" | gzip &gt; "$GZ_FILE"

# 定义一个函数来执行网络计算
run_network_algorithm() {
    algorithm=$1
    input_file=$2
    output_dir=$3
    extra_args=$4
    "${SOFTWARE_PATH}fastHaN_linux" $algorithm -i "$input_file" $extra_args -o "$output_dir"
}

# 执行各种网络计算算法
run_network_algorithm "original_tcs" "$GZ_FILE" "$OUTPUT_PATH/ORIGIN_TCS" "-t 8 -a 1 -m 1"
run_network_algorithm "mjn" "$GZ_FILE" "$OUTPUT_PATH/MJN" "-t 8 -e 0"
run_network_algorithm "modified_tcs" "$GZ_FILE" "$OUTPUT_PATH/TCS" "-t 8"
run_network_algorithm "msn" "$GZ_FILE" "$OUTPUT_PATH/MSN" "-e 0"

# 生成网络配置文件
generate_network_config() {
    json_file=$1
    meta_file=$2
    output_dir=$3
    python "${SOFTWARE_PATH}Script/GenNetworkConfig.py" "$json_file" "$meta_file" "$output_dir"
}

for algorithm in "ORIGIN_TCS" "MJN" "TCS" "MSN"; do
    generate_network_config "$OUTPUT_PATH/${algorithm}.json" "$META_FILE" "$OUTPUT_PATH/Groupinformation"
    generate_network_config "$OUTPUT_PATH/${algorithm}.json" "$META_HAP_FILE" "$OUTPUT_PATH/HAPINFORMATION"
done

# 替换颜色配置文件
replace_color_config() {
    input_file=$1
    output_file=$2
    python3 "${SOFTWARE_PATH}color_replace.py" "$input_file" "$output_file"
}

replace_color_config "$OUTPUT_PATH/Groupinformation_groupconf.csv" "$OUTPUT_PATH/Groupinformation_groupconf_updated.csv"
replace_color_config "$OUTPUT_PATH/HAPINFORMATION_groupconf.csv" "$OUTPUT_PATH/HAPINFORMATION_groupconf_updated_HAP.csv"

复制]]></description><link>软件\fasthan\自制fasthan脚本——2024年5月16日更新.html</link><guid isPermaLink="false">软件/FastHaN/自制FastHaN脚本——2024年5月16日更新.md</guid><pubDate>Fri, 21 Jun 2024 07:31:04 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240516175448.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240516175448.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[详细使用指南]]></title><description><![CDATA[ 
 <br><br><br>首先，下载自制的脚本的软件包。<br>
链接：<a data-href="自制FastHaN脚本——2024年8月16日更新" href="软件\fasthan\自制fasthan脚本——2024年8月16日更新.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>自制FastHaN脚本——2024年8月16日更新</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;"><br><br>脚本需要 Linux 系统运行。<br><br>你需要准备三个文件：<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240522163203.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240522163248.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
用 制表符 分割，没有标题。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240522163330.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
用 制表符 分割，没有标题。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240522163416.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>FASTA_PATH 修改为 fasta 文件路径
<br>OUTPUT_PATH 修改为输出文件路径
<br>SOFTWARE_PATH 修改为软件所在路径，具体可以看看下图：<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240522163527.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>META_FILE 修改为分组文件（按照其他条件分）
<br>META_HAP_FILE 修改为分组文件（按照单倍群分）
<br><br>省略<br><br>运行成功之后，会得到如下文件。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240522163718.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
其中我们需要的是 csv, gml 文件。带 updated 的文件是我配的彩虹色，可以用也可以不用。为了修改颜色，可以到软件的 color_replace.py 文件中修改。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240522163851.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>找到如下文件：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240522163942.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>用浏览器打开。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240522164122.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240522164206.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240522164306.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\fasthan\自制fasthan脚本——2024年5月22日更新.html</link><guid isPermaLink="false">软件/FastHaN/自制FastHaN脚本——2024年5月22日更新.md</guid><pubDate>Fri, 16 Aug 2024 02:24:33 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[更新内容]]></title><description><![CDATA[ 
 <br><a data-href="FastHaN软件——陈华" href="软件\fasthan\fasthan软件——陈华.html" class="internal-link" target="_self" rel="noopener nofollow">FastHaN软件——陈华</a><br>
<a data-href="自制FastHaN脚本——2024年5月13日更新" href="软件\fasthan\自制fasthan脚本——2024年5月13日更新.html" class="internal-link" target="_self" rel="noopener nofollow">自制FastHaN脚本——2024年5月13日更新</a><br>
<a data-href="自制FastHaN脚本——2024年5月16日更新" href="软件\fasthan\自制fasthan脚本——2024年5月16日更新.html" class="internal-link" target="_self" rel="noopener nofollow">自制FastHaN脚本——2024年5月16日更新</a><br>
<a data-href="自制FastHaN脚本——2024年5月22日更新" href="软件\fasthan\自制fasthan脚本——2024年5月22日更新.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>自制FastHaN脚本——2024年5月22日更新</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;"><br>
不想自己配置文件？<br>
下载这个，包含所有脚本：<a data-tooltip-position="top" aria-label="https://1drv.ms/u/s!AnGqDjyiZ5t_hflPAj37JsvZf3tSFA?e=zJJd0G" rel="noopener nofollow" class="external-link" href="https://1drv.ms/u/s!AnGqDjyiZ5t_hflPAj37JsvZf3tSFA?e=zJJd0G" target="_blank">fastHaN-main.zip</a>
<br><br>现在你不需要拆开来准备多个 META 文件了，你只需要一个 META 文件，我们自动将其拆分。<br><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408161016797.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408161131175.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>第一列是 ID，ID 必须在 FASTA 文件中存在，且不能错误。
<br>其余几列是你的分类标准。分类标准可以无限多。
<br>以 制表符 进行分隔。
请注意，表包含标题。

<br><br>#!/bin/bash

# 基础路径设置
FASTA_PATH="M7_all.fasta"
OUTPUT_PATH="output"
SOFTWARE_PATH="fastHaN-main/fastHaN-main/"
META_FILE="Group.txt"

# 获取META文件的列数（不包括第一列）
META_COLS=$(awk '{print NF-1; exit}' "$META_FILE")

# 动态生成META_DIRS数组
META_DIRS=()
for ((i=1; i&lt;=META_COLS; i++)); do
    META_DIRS+=("Column_$i")
done

# 创建输出文件夹
mkdir -p "$OUTPUT_PATH"
for dir in "ORIGIN_TCS" "MJN" "TCS" "MSN" "${META_DIRS[@]}"; do
    mkdir -p "$OUTPUT_PATH/$dir"
done

# 拆分META文件
split_meta_files() {
    input_file=$1
    output_dir=$2
    # 读取每一行（除去第一行标题）
    while IFS= read -r line || [[ -n "$line" ]]; do
        id=$(echo "$line" | awk '{print $1}')
        # 获取列数（包括第一列）
        num_columns=$(awk '{print NF}' &lt;&lt;&lt; "$line")
        # 遍历每一列
        for ((i=2; i&lt;=num_columns; i++)); do
            value=$(echo "$line" | awk -v col="$i" '{print $col}')
            echo -e "$id\t$value" &gt;&gt; "${output_dir}/Column_$((i-1)).txt"
        done
    done &lt; &lt;(tail -n +2 "$input_file")
}

split_meta_files "$META_FILE" "$OUTPUT_PATH"

# 输出的 FASTA 文件路径
OUTPUT_FASTA="${OUTPUT_PATH}/filtered_sequences.fasta"

# 提取序列并保存
python3 "${SOFTWARE_PATH}extract_fasta_sequences.py" "$META_FILE" "$FASTA_PATH" "$OUTPUT_FASTA"

# 文件转换并压缩
GZ_FILE="$OUTPUT_PATH/fasta2phylip.phy.gz"
python3 "${SOFTWARE_PATH}Pipline/Fasta2Phylip.py" "$OUTPUT_FASTA" | gzip &gt; "$GZ_FILE"

# 定义一个函数来执行网络计算
run_network_algorithm() {
    algorithm=$1
    input_file=$2
    output_dir=$3
    extra_args=$4
    "${SOFTWARE_PATH}fastHaN_linux" $algorithm -i "$input_file" $extra_args -o "$output_dir"
}

# 执行各种网络计算算法
run_network_algorithm "original_tcs" "$GZ_FILE" "$OUTPUT_PATH/ORIGIN_TCS" "-t 16 -a 1 -m 1"
run_network_algorithm "mjn" "$GZ_FILE" "$OUTPUT_PATH/MJN" "-t 16 -e 0"
run_network_algorithm "modified_tcs" "$GZ_FILE" "$OUTPUT_PATH/TCS" "-t 16"
run_network_algorithm "msn" "$GZ_FILE" "$OUTPUT_PATH/MSN" "-e 0"

# 生成网络配置文件
generate_network_config() {
    json_file=$1
    meta_file=$2
    output_dir=$3
    python3 "${SOFTWARE_PATH}Script/GenNetworkConfig.py" "$json_file" "$meta_file" "$output_dir"
}

for algorithm in "ORIGIN_TCS" "MJN" "TCS" "MSN"; do
    for dir in "${META_DIRS[@]}"; do
        generate_network_config "$OUTPUT_PATH/${algorithm}.json" "$OUTPUT_PATH/${dir}.txt" "$OUTPUT_PATH/$dir"
    done
done

# 替换颜色配置文件
replace_color_config() {
    input_file=$1
    output_file=$2
    python3 "${SOFTWARE_PATH}color_replace.py" "$input_file" "$output_file"
    echo "正在为你的群组或单倍群创建彩虹色"
}

for dir in "${META_DIRS[@]}"; do
    replace_color_config "$OUTPUT_PATH/${dir}_groupconf.csv" "$OUTPUT_PATH/${dir}_groupconf_updated.csv"
done

复制<br><br><a data-tooltip-position="top" aria-label="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/fastHaN-main.zip?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1001723774867&amp;Signature=Cj7LZPKCqzEQkA4COojc9XxvEaA%3D" rel="noopener nofollow" class="external-link" href="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/fastHaN-main.zip?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1001723774867&amp;Signature=Cj7LZPKCqzEQkA4COojc9XxvEaA%3D" target="_blank">fastHaN-main</a> 如果过期了可以发邮件给我 <a data-href="Homepage" href="home\homepage.html" class="internal-link" target="_self" rel="noopener nofollow">Homepage</a>。]]></description><link>软件\fasthan\自制fasthan脚本——2024年8月16日更新.html</link><guid isPermaLink="false">软件/FastHaN/自制FastHaN脚本——2024年8月16日更新.md</guid><pubDate>Sun, 08 Sep 2024 13:03:45 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[网址]]></title><description><![CDATA[ 
 <br><br><br>
<br>文件计算： <a data-tooltip-position="top" aria-label="https://github.com/ChenHuaLab/fastHaN" rel="noopener nofollow" class="external-link" href="https://github.com/ChenHuaLab/fastHaN" target="_blank">ChenHuaLab/fastHaN: fastHaN is a fast and scalable program for constructing haplotype networks for large samples (github.com)</a>
<br>可视化：<a data-tooltip-position="top" aria-label="https://github.com/sairum/tcsBU" rel="noopener nofollow" class="external-link" href="https://github.com/sairum/tcsBU" target="_blank">sairum/tcsBU: a TCS network beautifier (github.com)</a>
<br><br>
<br>名称: fastHaN
<br>功能: 构建大样本序列数据集的单倍型网络
<br>算法支持: 最小连接网络（MJN）和Templeton-Crandall-Sing（TCS）算法
<br><br>
<br>速度: 单线程模式运行速度远超现有软件
<br>可扩展性: 支持多线程模式，具有良好的扩展性
<br><br>
<br>Linux系统:

<br>下载软件： <a rel="noopener nofollow" class="external-link" href="https://github.com/ChenHuaLab/fastHaN/archive/refs/heads/main.zip" target="_blank">https://github.com/ChenHuaLab/fastHaN/archive/refs/heads/main.zip</a>
<br>并赋予执行权限 (chmod +x fastHaN_linux)
<br>运行测试数据 (./fastHaN_linux mjn -i 测试数据.phy.gz -t 8 -o Test1000)


<br>Windows系统:

<br>在 CMD 窗口运行 (fastHaN_win.exe mjn -i 测试数据.phy.gz -t 8 -o Test1000)


<br><br><br>#!/bin/bash

# 定义常用变量
FASTA_PATH="/mnt/c/Users/a/Desktop/Illumina_mtDNA_Filter_recode.fasta" # 你的fasta文件
OUTPUT_PATH="/mnt/c/Users/a/Desktop" # 输出结果路径
SOFTWARE_PATH="/mnt/e/OneDrive/文档（科研）/分析软件/fastHaN-main/fastHaN-main" # 软件所在路径
META_FILE="/mnt/c/Users/a/Desktop/illumina.meta" # META文件所在

# 将fasta序列转为phy并压缩为gz
GZ_FILE="$OUTPUT_PATH/fasta2phylip.phy.gz" # 输出.phy.gz文件
python $SOFTWARE_PATH/Pipline/Fasta2Phylip.py $FASTA_PATH | gzip &gt; $GZ_FILE

# 进行network运算
# TCS算法
$SOFTWARE_PATH/fastHaN_linux original_tcs -i $GZ_FILE -t 8 -a 1 -m 1 -o $OUTPUT_PATH/illumina_ORIGIN_TCS

# mjn算法
$SOFTWARE_PATH/fastHaN_linux mjn -i $GZ_FILE -t 8 -e 0 -o $OUTPUT_PATH/illumina_MJN

# 改良TCS算法
$SOFTWARE_PATH/fastHaN_linux modified_tcs -i $GZ_FILE -t 8 -o $OUTPUT_PATH/illumina_TCS

# msn算法
$SOFTWARE_PATH/fastHaN_linux msn -i $GZ_FILE -e 0 -o $OUTPUT_PATH/illumina_MSN

# 分组文件整理
python $SOFTWARE_PATH/Script/GenNetworkConfig.py $OUTPUT_PATH/illumina_ORIGIN_TCS.json $META_FILE $OUTPUT_PATH/Groupinformation
python $SOFTWARE_PATH/Script/GenNetworkConfig.py $OUTPUT_PATH/illumina_MJN.json $META_FILE $OUTPUT_PATH/Groupinformation
python $SOFTWARE_PATH/Script/GenNetworkConfig.py $OUTPUT_PATH/illumina_TCS.json $META_FILE $OUTPUT_PATH/Groupinformation
python $SOFTWARE_PATH/Script/GenNetworkConfig.py $OUTPUT_PATH/illumina_MSN.json $META_FILE $OUTPUT_PATH/Groupinformation
复制<br><br>python Fasta2Phylip.py Example50.fasta &gt;  out.phylip

# 压缩
gzip -c out.phylip &gt; out.phy.gz
复制<br><br>original_tcs: 使用Clement等（2000）提出的原始TCS算法<br>
modified_tcs: 使用 Leigh（2015）在 PopART 中实现的 TCS 算法优化<br>
msn: 使用PopART实现的MSN算法优化<br>
mjn: 使用PopART实现的MJN算法优化（Bandelt等，1999）<br><br><br>- `usage: fastHaN original_tcs [arguments]`：使用`fastHaN`软件的`original_tcs`模式时所需输入的命令格式。

input:
    -i    输入的phylip格式文件
options:
    -t    (int)设置线程数，默认为8。这是多线程执行的配置，可以提升程序处理的速度。
    -a    (int)标记含有不明确碱基的位点，`1`表示遮蔽这些位点，`0`表示不遮蔽，默认值为`0`。这个选项用于处理序列数据中的不确定性。
    -m    (int)是否合并中间顶点，`1`表示合并，`0`表示不合并，默认值为`0`。合并中间顶点可以简化网络结构，使得结果更加清晰易读。
output:
    -o    指定输出文件的路径前缀。输出文件将以GML和json格式保存，这些文件格式用于后续的网络可视化或其他形式的数据分析。
复制<br><br>usage: fastHaN modified_tcs [arguments]

input:
    -i    输入的phylip格式文件
options:
    -t    (int)设置线程数，默认为8。这是多线程执行的配置，可以提升程序处理的速度。
output:
    -o    指定输出文件的路径前缀。输出文件将以GML和json格式保存，这些文件格式用于后续的网络可视化或其他形式的数据分析。
复制<br><br>usage: fastHaN msn [arguments]
     
input:
    -i    输入的phylip格式文件
options:
    -e    (int)设定epsilon参数，默认值为0。在构建最小生成树网络时，epsilon参数用于控制在网络构建过程中顶点之间连接的灵活性。较大的epsilon值允许在构建网络时考虑更远的距离，从而可能连接更多的节点，影响网络的密集度和结构。
output:
    -o    输出文件的路径前缀。生成的文件将以GML和JSON格式保存。这些格式主要用于后续的网络可视化或数据分析。
复制<br><br>usage: fastHaN mjn [arguments]
     
input:
    -i    输入的phylip格式文件
options:
    -t    (int)设置线程数，默认为8。这是多线程执行的配置，可以提升程序处理的速度。
    -e    (int)(int)设定epsilon参数，默认值为0。在构建最小生成树网络时，epsilon参数用于控制在网络构建过程中顶点之间连接的灵活性。较大的epsilon值允许在构建网络时考虑更远的距离，从而可能连接更多的节点，影响网络的密集度和结构。
output:
    -o    输出文件的路径前缀。生成的文件将以GML和JSON格式保存。这些格式主要用于后续的网络可视化或数据分析。
复制<br><br>
<br>输入文件 (PHYLIP格式): 包含单倍型的数量和每个单倍型的字符数
<br>输出文件 (GML和Json格式): 表示构建的单倍型网络
<br><br>
<br>使用tcsBU软件对构建的单倍型网络进行可视化，该软件包含在fastHaN软件包中
<br>需要提供META文件指定每个单倍型的组信息（如国家、城市等）
<br>配置文件生成<br>
<br>使用GenNetworkConfig.py Python脚本或手动生成配置文件，用于tcsBU软件的单倍型网络可视化
<br><br>举例：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404291718897.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>3: 单倍型的数量
<br>75: 每个单倍型的字符数
<br>Hap385899: Hap385899的单倍型名称
<br>GATCTG...GTAT：单倍型 Hap385899 的序列
<br><br>GML 文件和 Json 文件都代表构建的单倍型网络：<br>
<br>GML文件用作tcsBU软件的输入以可视化haplotye网络
<br>Json 文件用于为构建的单倍型网络准备颜色主题（请参阅“可视化”部分）。
<br><br>使用 fastHaN 构建单倍型网络后，我们需要使用软件 tcsBU 对其进行可视化。<br>
csBU (<a rel="noopener nofollow" class="external-link" href="https://github.com/sairum/tcsBU" target="_blank">https://github.com/sairum/tcsBU</a>) 是一个基于浏览器的 JavaScript 程序，包含在 fastHaN 的包中。您所需要做的就是解压缩 tcsBU.zip 并双击 index.html 文件。<br>
为了显示一个节点内单倍型的组成，您需要提供一个 META 文件（两列），其中指定每个单倍型的组信息（例如国家、城市等）。<br><br>fastHaN/Visualization/Example”目录中有一个示例文件（Test167.meta）：<br>Hap6825391      SouthAfrica
Hap6825397      SouthAfrica
Hap6825546      Austria
Hap6795850      SouthAfrica
Hap6795842      SouthAfrica
复制<br>
<br>hap6825391：单倍型名称，必须与 phylip 文件中的一致
<br>SouthAfrican：单倍体 Hap6825391 的群体信息
<br><br>您可以使用 GenNetworkConfig.py  的 Python 脚本生成 tcsBU 所需的两个配置文件。<br># generate the config files
python GenNetworkConfig.py Test167.json Test167.meta Test167Conf

# Two config files will be generaged by above command
1. Test167Conf_groupconf.csv
2. Test167Conf_hapconf.csv
复制<br>
<br>Test167Conf_groupconf.csv（3列，分号分隔）,内容如下：<br>
第 1 个：组名称，例如：南非。<br>
第 2 个：由 GenNetworkConfig.py 生成的随机颜色。<br>
第3个：值为“none”的固定列.
<br>SouthAfrica;#4C3D35;none
Austria;#D56234;none
Botswana;#DCBD4D;none
复制<br>
<br>Test167Conf_hapconf.csv（2列，分号分隔）
<br>Hap6825390;SouthAfrica
Hap6825391;SouthAfrica
Hap6825397;SouthAfrica
Hap6825546;Austria
Hap6795850;SouthAfrica
Hap6795842;SouthAfrica
复制<br>第1列：单倍型名称，必须与 phylip 文件中的一致；<br>
第2列：每个单倍型的组名称。<br><br>#!/usr/bin/python3
# -*- coding: utf-8 -*-

#*************************************************************************
#    &gt; File Name: GenNetworkConfig.py
#    &gt; Author: xlzh
#    &gt; Mail: xiaolongzhang2015@163.com 
#    &gt; Created Time: 2021年12月02日 星期四 22时20分30秒
#*************************************************************************

'''
generate the config file for tcsBU webserver (group.csv and haplotype.csv)

Input: 
   1. json file generated by fastHaN
   2. meta file prepared by the user (column-1: sampleID, column-2: sample group)
   
Output:
   1. group.csv (color of each group)
   2. haplotype.csv (group of each haplotype)
'''


import sys
import json
from random import randint


def json_parse(json_file):
    ''' func: parse the json file to obtain the haplotye
    '''
    hap_list = []
    json_wraper = json.load(open(json_file, 'r'))

    # node -&gt; {'id': 0, 'frequency': 1.0, 'title1': 'Sample1', 'title2': 'Sample1;Sample2'}
    for node in json_wraper['nodes']: 
        hap_list.extend(node['title2'].split(';'))

    return hap_list


def read_meta_file(meta_file):
    ''' func: read the meta file and obtain the country for each individual
        meta_dict = {'EPI_ISL_6814923': 'Australia', ...}
    '''
    meta_dict = {}
    meta_fp = open(meta_file, 'r')

    for line in meta_fp:
        l = line.rstrip().split('\t')
        meta_dict[l[0]] = l[1]  # l[0] -&gt; sampleid; l[1] -&gt; country

    return meta_dict


def gen_hap_config(hap_list, meta_dict):
    ''' func: generate the haplotype config
        hap_conf_list = [(sample1, China), (sample2, Korean), ...]
    '''
    hap_conf_list = []

    for hap in hap_list:  # EPI_ISL_6832737 or 'IN12'
        if hap.startswith('IN'):  # skip the intermediate node
            continue

        elif hap not in meta_dict:
            sys.stderr.write("[warning] the group of %s is not given in the meta file\n" % hap)

        else:
            country = meta_dict[hap].replace(' ', '')
            hap_conf_list.append((hap, country))

    return hap_conf_list


def _random_color():
    ''' func: generate color randomly
    '''
    colorArr = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']
    color_list = []

    for i in range(6):
        color_list.append(colorArr[randint(0, 14)])

    return '#' + ''.join(color_list)


def gen_group_config(hap_conf_list):
    ''' func: generate the group config
        group_conf_list = [(China, '#FF011B', 'none'), (Korean, '2693FF', 'none'), ...]
    '''
    group_conf_list = []
    count_dict = {}

    for item in hap_conf_list:
        if item[1] != 'Default' and item[1] not in count_dict:
            rand_color = _random_color()
            count_dict[item[1]] = rand_color
            group_conf_list.append((item[1], rand_color, 'none'))

    return group_conf_list


def write_conf(hap_conf_list, group_conf_list, out_prefix):
    ''' func: write the config file
    '''
    # write the haplotype config file
    hap_fp = open(out_prefix + '_hapconf.csv', 'w')
    for hap in hap_conf_list:
        hap_fp.write("%s;%s\n" % (hap[0], hap[1]))

    # write the group config file
    group_fp = open(out_prefix + '_groupconf.csv', 'w')
    for group in group_conf_list:
        group_fp.write("%s;%s;%s\n" % (group[0], group[1], group[2]))

    hap_fp.close()
    group_fp.close()


def main():
    args = sys.argv
    if len(args) != 4:
        sys.stderr.write("usage: python GetNetworkConfig.py &lt;in.json&gt; &lt;in.meta&gt; &lt;out_prefix&gt;\n")
        sys.exit(-1)

    json_file = args[1]
    meta_file = args[2]
    out_prefix = args[3]

    hap_list = json_parse(json_file)
    meta_dict = read_meta_file(meta_file)
    hap_conf_list = gen_hap_config(hap_list, meta_dict)
    group_conf_list = gen_group_config(hap_conf_list)
    write_conf(hap_conf_list, group_conf_list, out_prefix)
    

if __name__ == '__main__':
    main()

复制]]></description><link>软件\fasthan\fasthan软件——陈华.html</link><guid isPermaLink="false">软件/FastHaN/FastHaN软件——陈华.md</guid><pubDate>Fri, 21 Jun 2024 07:31:05 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404291718897.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404291718897.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[教程一]]></title><description><![CDATA[ 
 <br><br>IQtree 是利用最大似然法构建系统发生树的，具有高效建树、模型选择、超快自展等特点，适用于大数据的系统发育分析。<br><br>
<br>首先在NCBI下载用于建树的序列，把这些序列放到同一个fasta文件里，每条序列的标签名要以“&gt;”开始并且序列标签名中不要有空格和标点等，不然后续无法识别. IQtree支持多种序列数据格式，如:Phylip/ fasta/fas/nexus/clustlw等格式，程序也会自动转为Phylip格式，省去格式转换的步骤。
<br>将上述的 fasta 格式序列文件进行序列比对，<a data-href="MAFFT：使用教程" href="软件\其它生信软件\k-s\mafft：使用教程.html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：使用教程</a>。对高度变异区域进行裁剪。
<br>保存成 fasta 格式。
<br><br>软件下载地址：<a data-tooltip-position="top" aria-label="http://www.iqtree.org/" rel="noopener nofollow" class="external-link" href="http://www.iqtree.org/" target="_blank">IQ-TREE: Efficient phylogenomic software by maximum likelihood (iqtree.org)</a><br>Command-line examples (replace 'iqtree2 ...' by actual path to executable):

1. Infer maximum-likelihood tree from a sequence alignment (example.phy)
   with the best-fit model automatically selected by ModelFinder:
     iqtree2 -s example.phy

2. Perform ModelFinder without subsequent tree inference:
     iqtree2 -s example.phy -m MF
   (use '-m TEST' to resemble jModelTest/ProtTest)

3. Combine ModelFinder, tree search, ultrafast bootstrap and SH-aLRT test:
     iqtree2 -s example.phy --alrt 1000 -B 1000

4. Perform edge-linked proportional partition model (example.nex):
     iqtree2 -s example.phy -p example.nex
   (replace '-p' by '-Q' for edge-unlinked model)

5. Find best partition scheme by possibly merging partitions:
     iqtree2 -s example.phy -p example.nex -m MF+MERGE
   (use '-m TESTMERGEONLY' to resemble PartitionFinder)

6. Find best partition scheme followed by tree inference and bootstrap:
     iqtree2 -s example.phy -p example.nex -m MFP+MERGE -B 1000

7. Use 4 CPU cores to speed up computation: add '-T 4' option

8. Polymorphism-aware model with HKY nucleotide model and Gamma rate:
     iqtree2 -s counts_file.cf -m HKY+P+G

9. PoMo mixture with virtual popsize 5 and weighted binomial sampling:
     iqtree2 -s counts_file.cf -m "MIX{HKY+P{EMP},JC+P}+N5+WB"

To show all available options: run 'iqtree2 -h'

Have a look at the tutorial and manual for more information:
     http://www.iqtree.org
复制<br>需要哪条指令，就复制上述的指令即可。完成之后，会出现几个文件。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405081630868.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
举个例子：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405081631373.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>建树完成后，会在序列文件夹中生成多个文件，覆盖之前产生的文件，主要包括程序运行日志、一致树文件(example.fasta.contree)、ML 树文件(example.fasta.treefile)即 TREEFILE 文件（含有 Bootstrap/UFBoot/SH-aLRT 值的 BP 评估分支置信度），可以用 Figtree 进行查看和赋根，使用 Adode Photoshop 对进化树进行编辑和美化.<br><br><a data-tooltip-position="top" aria-label="https://zhuanlan.zhihu.com/p/408382758" rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/408382758" target="_blank">如何构建进化树 | 基于IQ-TREE - 知乎 (zhihu.com)</a><br><br>是否去除 gap？
是否需要去除对齐序列中的gap取决于具体的分析需求和数据特征。<br>
保留gap：在某些情况下提供重要的信息，尤其是当gap表示插入或缺失事件时,gap可能有助于反映真实的进化历史。<br>
去除gap：对齐中的gap较多且分布不均匀，它们可能引入噪声，影响树的准确性。高度保守的区域或者当gap被认为是对分析有害时，去除它们可能会提高树的质量
]]></description><link>软件\iqtree\iqtree：基础操作.html</link><guid isPermaLink="false">软件/IQtree/iqtree：基础操作.md</guid><pubDate>Sun, 08 Sep 2024 13:16:04 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405081630868.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405081630868.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[文件准备]]></title><description><![CDATA[ 
 <br>可以看看: <a data-href="iqtree：基础操作" href="软件\iqtree\iqtree：基础操作.html" class="internal-link" target="_self" rel="noopener nofollow">iqtree：基础操作</a><br><br><br>partition_file.txt：<br>DNA, TIM2+F+I: HighVar = 1-600 16001-16594
DNA, GTR+F+I+G4: Coding = 601-16000
复制<br>注意，你需要根据自己的数据选择适合的模型，具体你可以参考这个：<br>
<a data-href="BEAST：替换模型" href="软件\beast\beast：替换模型.html" class="internal-link" target="_self" rel="noopener nofollow">BEAST：替换模型</a><br>
<a data-href="iqtree：寻找最优模型及分区" href="软件\iqtree\iqtree：寻找最优模型及分区.html" class="internal-link" target="_self" rel="noopener nofollow">iqtree：寻找最优模型及分区</a><br><br>一个普通的 nex 文件：<br>#NEXUS
Begin data;
Dimensions ntax=8368 nchar=16594;
Format datatype=dna missing=? gap=-;
Matrix
ID1	GATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCT-CCATGCATTTGGTA
ID2	GATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCT-CCATGCATTTGGTA
......
;
End;
复制<br><br>iqtree -s 你的nex文件.nex -spp 分区文件/partition_file.txt -b 1000 -nt AUTO  
复制<br>结果解读可以看这里：<a data-href="iqtree：基础操作" href="软件\iqtree\iqtree：基础操作.html" class="internal-link" target="_self" rel="noopener nofollow">iqtree：基础操作</a>]]></description><link>软件\iqtree\iqtree：线粒体最大似然树.html</link><guid isPermaLink="false">软件/IQtree/iqtree：线粒体最大似然树.md</guid><pubDate>Sat, 13 Jul 2024 08:00:54 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f5e3.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f5e3.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[准备工作]]></title><description><![CDATA[ 
 <br><br><br>我们需要对原始的 fasta 文件进行对齐，因为在建立系统发育树必须使用对齐的文件。我们推荐使用 [[MAFFT]] 软件进行操作。<br><br>sudo apt-get update
sudo apt-get install mafft
复制<br><br>mafft --auto input.fasta &gt; output_aligned.fasta
复制<br>注意一下，我们使用的是自动策略，可能对精确度有一定的影响，我们在这里不展开叙述。<br>
如果为了寻求更加精确的对齐，请参考如下教程。<br>
<br><a data-href="GUIDANCE2 Server ：多序列比对置信软件" href="软件\其它生信软件\a-j\guidance2-server-：多序列比对置信软件.html" class="internal-link" target="_self" rel="noopener nofollow">GUIDANCE2 Server ：多序列比对置信软件</a>。
<br><a data-href="MAFFT：使用教程" href="软件\其它生信软件\k-s\mafft：使用教程.html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：使用教程</a>。<br>
总之，多序列比对，还是推荐MAFFT，基因编码区的多序列比对，更加推荐使用MAFFT基于密码子的方式比对。
<br><br>mtDNA 不同的区域的遵循不同的进化模型，因此，我们需要将不同的区域切割出来，寻找每个区域对应的最优模型，然后再进行 BEAST。<br>得到比对完成之后的 aln.fasta 之后，就可以进行切割了。 在这里，我做了一个 python，可以交互式切割指定的序列。<br>from Bio import SeqIO

def print_sequence_lengths(sequences):
    """打印每个序列的长度"""
    for record in sequences:
        print(f"ID: {record.id}, Length: {len(record.seq)}")

def get_ranges_from_user():
    """交互式获取用户输入的范围"""
    ranges = []
    while True:
        user_input = input("Enter range (e.g., 1-200) or 'OK' to finish: ")
        if user_input.strip().upper() == 'OK':
            break
        try:
            start, end = map(int, user_input.split('-'))
            ranges.append((start, end))
        except ValueError:
            print("Invalid range. Please enter again.")
    return ranges

def split_fasta(input_file, sequences, ranges):
    """
    根据指定的位置范围切割FASTA文件，并保存到单独的文件中。

    :param input_file: 输入的FASTA文件路径
    :param sequences: 序列列表
    :param ranges: 切割范围列表，例如 [(1, 200), (201, 400)]
    """
    base_name = input_file.rsplit(".", 1)[0]
    
    for start, end in ranges:
        output_file = f"{base_name}_{start}-{end}.fasta"
        with open(output_file, "w") as out_f:
            for record in sequences:
                # 提取指定范围的序列
                sub_seq = record.seq[start-1:end]
                sub_record = record[:0]  # 创建一个空记录
                sub_record.seq = sub_seq  # 设置序列
                sub_record.id = record.id  # 保留原ID
                sub_record.description = f"{record.description} [{start}-{end}]"  # 添加范围信息
                # 写入到输出文件
                SeqIO.write(sub_record, out_f, "fasta")
        print(f"Generated {output_file} for range {start}-{end}")

# 输入文件
input_file = "C:/Users/victo/Desktop/最终版本ALN的编码区.fasta"

# 读取FASTA文件中的序列
sequences = list(SeqIO.parse(input_file, "fasta"))

# 打印每个序列的长度
print_sequence_lengths(sequences)

# 获取用户输入的范围
ranges = get_ranges_from_user()

# 调用函数进行切割
split_fasta(input_file, sequences, ranges)

复制<br>得到一些切割之后的文件，我们就开始寻找最优模型。<br>
注意！切割之前的原始文件需要保留，我们后续进行 BEAST 需要原始文件。<br><br>在这里，有许多软件可以帮助寻找最优模型，我们现在使用 iqtree2，因为这个软件经过了更新迭代之后，获得了更强、更广泛的功能，属于建模的万金油。所以我们选择使用它来寻找：<br>
iqtree 的下载地址如下： <a data-tooltip-position="top" aria-label="http://www.iqtree.org/" rel="noopener nofollow" class="external-link" href="http://www.iqtree.org/" target="_blank">IQ-TREE: Efficient phylogenomic software by maximum likelihood (iqtree.org)</a><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240605174230.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
在这里，我推荐使用 Linux版本，因为操作相对来说比较简单。点击 ALL Downloads，可以查看所有的版本。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240605174320.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
下载安装包之后，放到 Linux 环境下，进行解压：<br>tar -xzf 您的压缩包.gz
复制<br>运行相当简单，在目录中寻找 iqtree/iqtree-2.3.4-Linux-intel/bin/iqtree2，然后直接运行它输入参数即可。<br>
在运行之前，建议对已有的 fasta 文件进行删减，只保留你需要进行分析的位点，因为如果位点太多，会导致建树非常慢，而且模型寻找也慢。<br>现在开始运行 iqtree：<br>#!/bin/bash

# 定义输入文件和输出前缀
declare -A FILES # 下面更改为你切割出来的每一个文件
FILES["编码区"]="/home/luolintao/Mydata/10K/最终版本ALN的编码区.fasta"
FILES["D环_"]="/home/luolintao/Mydata/10K/最终版本ALN的D环.fasta"
# 设置IQ-TREE可执行文件的路径
IQTREE_EXEC="/home/luolintao/iqtree/iqtree-2.3.4-Linux-intel/bin/iqtree2"

# 遍历每个文件并运行IQ-TREE的ModelFinder功能
for NAME in "${!FILES[@]}"; do
    INPUT_FILE="${FILES[$NAME]}"
    OUTPUT_PREFIX="/home/luolintao/Mydata/10K/${NAME}_model_selection"

    echo "Running IQ-TREE ModelFinder for $INPUT_FILE..."

    nohup $IQTREE_EXEC -s "$INPUT_FILE" -m MF -nt AUTO -pre "$OUTPUT_PREFIX" &gt; "$OUTPUT_PREFIX.log" 2&gt;&amp;1 &amp;

    # 检查命令是否成功启动
    if [ $? -eq 0 ]; then
        echo "IQ-TREE ModelFinder for $NAME successfully started."
        echo "Output files are prefixed with $OUTPUT_PREFIX"
    else
        echo "IQ-TREE ModelFinder for $NAME encountered an error." &gt;&amp;2
        exit 1
    fi
done

echo "All IQ-TREE ModelFinder tasks have been started."

复制<br>运行完成之后，我们找到后缀为 .iqtree 的文件，文件的内容大致如下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240605181328.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
这里我们观察：<br>
<br>AIC (Akaike Information Criterion)：用于模型选择，较低的AIC值表示较好的模型拟合。
<br>AICc (Corrected Akaike Information Criterion)：对于小样本量的修正AIC。
<br>BIC (Bayesian Information Criterion)：另一个用于模型选择的准则，也较低的BIC值表示较好的模型。
<br>根据表格数据：<br>
<br>AIC 最低：GTR+F+I+G4 (-22875.459, 46120.919)
<br>AICc 最低：GTR+F+I+G4 (-22875.459, 46125.444)
<br>BIC 最低：TIM3e+I+G4 (-23625.409, 48986.330)
<br>我们选择的样本会影响到最优模型的构建，在这里我们选择最低的值。这里出现了3个最低，我们需要选择一个。我们选择 GTR+F+I+G4模型。<br>另外的分割序列也如法炮制，记住我们选择的最优模型。<br>
例如，在我这里，高变区我认为 TIM2+F+I 是最优的模型。<br>
AIC 最低模型：<br>
<br>TIM2+F+I (-1083.148, 2390.296)<br>
AICc 最低模型：
<br>TIM2+F+I (-1083.148, 2442.379)<br>
BIC 最低模型：
<br>HKY+F+I (-1085.821, 2875.122)
<br>后面附带构建的系统发育树，可以目测结构是否大致正确，但是在这里我们不重点关注：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240605181515.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>现在，使用我们一开始的原始文件。将原始文件导入 BEAUTi 软件，<br>
在导入之前，我们需要先把 ALN 文件转为 NEX 文件，转的方式很多，最简单的方法就是直接把 FASTA 导入 MEGA 软件，然后导出来的时候，点击 NEX 就可以了。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240605203652.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
在这里，我们可以看到 NEX 文件的末尾什么都没有，但是我们需要增加分区，分区依然按照我们之前分区进行。<br>
例如：<br>begin assumptions;
charset DLOOP = 1-599;
charset CODING = 600-16594;
end;
复制<br>将这段内容修改为自己的分区，追加到 nex 文件中去。再把新的 nex 文件导入 BEAUti。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240605204158.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240605204235.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
可以看到，我们已经得到了对应的区域。现在，选择2行内容，取消链接：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240605204355.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
用红色方框标记的每个区域都有2个选项：<br>
<br>连接：2个区域用 同一套参数
<br>取消连接：2个区域 不用同一套参数。
<br>所以，我们在这里最好取消连接。得到如下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240605204747.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
当然，这样的分类并不是绝对的，需要根据自己的情况决定是否要设定为相同的 site model 和 clock model。]]></description><link>软件\iqtree\iqtree：寻找最优模型及分区.html</link><guid isPermaLink="false">软件/IQtree/iqtree：寻找最优模型及分区.md</guid><pubDate>Sun, 08 Sep 2024 13:16:04 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240605174230.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240605174230.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[一、引言]]></title><description><![CDATA[ 
 <br><br>在很多生信分析文章中，我们总能看到这样的图，如下图所示：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031230270.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>弦图，主要也是用于描述一个对象在另一个对象中的占比与流向，整体和前面提到的桑基图有些类似；如何用Origin来绘制弦图。<br>二、教学部分<br>
1.&nbsp;首先输入我们提前准备好的数据（数据和我们原来绘制桑基图的数据比较相近）<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031230369.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
2. 然后选择上方的“Plot-Categorical-Chord Diagram（弦图）”<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031240947.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
在Origin中有两种弦图，图标标红部分的左侧为弦图，右侧为比例弦图。关于两者之间的差异，请查看文章最后的部分。我们这里直接选择左侧的按钮进行绘图.<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031240141.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
3. 而如果我们选择右侧的弦图绘制按钮，我们则会得到下面的图，即比例弦图。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031240306.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
从弦图和比例弦图的绘图结果，我们可以看到对于两种弦图来说，我们都能从中看到数据起点到终点的对应关系，比如我们能看到BOC银行把钱借给了yama、saki和kawa。但是我们无法从比例弦图中看到kawa从BOC和ICBC中借到的钱的比例关系，这也正是两者的差别。<br>
<br>最后我们调整下样式和演示，针对弦图可以得到下图。
]]></description><link>软件\origin绘图\origin：教学—弦图绘制.html</link><guid isPermaLink="false">软件/origin绘图/Origin：教学—弦图绘制.md</guid><pubDate>Fri, 21 Jun 2024 07:31:19 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031230270.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312031230270.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[根据经纬度求国家]]></title><description><![CDATA[ 
 <br><br>直接 txt 文件，表不包含标题。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405051401197.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>import googlemaps
import csv

# 替换为你的Google Maps API密钥
api_key = ''
gmaps = googlemaps.Client(key=api_key)

# 从文件中读取市区列表
file_path = 'C:/Users/a/Desktop/新建文本文档.txt'
with open(file_path, 'r', encoding='utf-8') as file:
    countries = [line.strip() for line in file]

# 查询市区的经纬度并实时写入CSV
output_file = 'C:/Users/a/Desktop/result.csv'
with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
    writer = csv.writer(csvfile)
    # 写入标题行
    writer.writerow(['Country', 'Latitude', 'Longitude'])
    
    for country in countries:
        geocode_result = gmaps.geocode(country)
        if geocode_result:
            location = geocode_result[0]['geometry']['location']
            writer.writerow([country, location['lat'], location['lng']])
        else:
            writer.writerow([country, None, None])
        csvfile.flush()
        print(f"Processed {country},{location}")

print("Data has been saved to CSV.")


复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405051414873.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
使用 txt 文件保存，用制表符分割。优先查询后者，提高查询准确度。<br>import googlemaps
import csv

# 替换为你的Google Maps API密钥
api_key = ''
gmaps = googlemaps.Client(key=api_key)

# 从文件中读取省份和市区列表
file_path = 'C:/Users/a/Desktop/地区列表.txt'
with open(file_path, 'r', encoding='utf-8') as file:
    # 分割每一行来获取市区名称
    regions = [line.strip().split('\t')[1] for line in file if '\t' in line]

# 查询市区的经纬度并实时写入CSV
output_file = 'C:/Users/a/Desktop/result.csv'
with open(output_file, 'a', newline='', encoding='utf-8') as csvfile:
    writer = csv.writer(csvfile)
    # 写入标题行
    writer.writerow(['Region', 'Latitude', 'Longitude'])
    
    for region in regions:
        geocode_result = gmaps.geocode(region)
        if geocode_result:
            location = geocode_result[0]['geometry']['location']
            writer.writerow([region, location['lat'], location['lng']])
            print(f"Processed {region},{location}")
        else:
            writer.writerow([region, None, None])
            print(f"Processed {region}, no location found")
        csvfile.flush()

print("Data has been saved to CSV.")

复制]]></description><link>软件\python\地理经纬\python：根据国家、地区求经纬度.html</link><guid isPermaLink="false">软件/Python/地理经纬/python：根据国家、地区求经纬度.md</guid><pubDate>Fri, 21 Jun 2024 07:31:19 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405051401197.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202405051401197.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[准备]]></title><description><![CDATA[ 
 <br>地图上经纬度定位可以直接获取该地区海拔，进而探索海拔对人群的影响。<br><br>为了获取更准确的数值，一个可以使用的 API 至关重要。<br>
<br>Open Elevation API：Open Elevation是一个免费的开源项目，提供了一个简单的API来查找地球上任意位置的海拔高度。虽然它是免费的，但可能在数据精度和请求限制方面与商业服务相比有所不足。
<br>MapQuest Elevation API：MapQuest提供了一个可以查询地点海拔的API服务。MapQuest的开发者服务包括免费和付费计划，具体费用取决于请求的数量和所需服务的类型。
<br>NASA SRTM (Shuttle Radar Topography Mission) 数据：虽然不是一个实时API，NASA的SRTM项目提供了全球大部分地区详细的高程数据。这些数据可以被下载并用于应用程序中，适合需要批量处理海拔数据的情况。
<br>Google Elevation API：一个比较精准 API，但是定价较高。每个月有 200$的免费额度。
<br><br>使用 csv 文件，格式应该如下：<br>Object_ID,Latitude,Longtitude
Tibetan_Amdo10,29.653,91.138
Tibetan_Amdo16,29.653,91.138
Tibetan_Amdo17,29.653,91.138
Tibetan_Amdo9,29.653,91.138
Tibetan_Baima1,29.653,91.138
Tibetan_Baima10,29.653,91.138
Tibetan_Baima11,29.653,91.138
Tibetan_Baima15,29.653,91.138
Tibetan_Baima16,29.653,91.138
Tibetan_Baima17,29.653,91.138
Tibetan_Baima18,29.653,91.138
Tibetan_Baima20,29.653,91.138
Tibetan_Baima21,29.653,91.138
Tibetan_Baima26,29.653,91.138
Tibetan_Baima3,29.653,91.138
Tibetan_Baima4,29.653,91.138
Tibetan_Baima5,29.653,91.138
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403271324577.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>import pandas as pd
import requests

# 替换为您的Google API密钥
api_key = '?????????'

# 定义获取海拔的函数
def get_elevation(lat, lon, api_key):
    url = f"https://maps.googleapis.com/maps/api/elevation/json?locations={lat},{lon}&amp;key={api_key}"
    response = requests.get(url)
    if response.status_code == 200:
        result = response.json()
        # 提取海拔值
        elevation = result['results'][0]['elevation']
        print(f"{lat},{lon}海拔：{elevation}")
        return elevation
    else:
        print("Error:", response.status_code)
        return None

# 读取CSV文件
df = pd.read_csv('C:/Users/a/Desktop/分析表.csv')

# 打开一个新的CSV文件以写入海拔信息
with open('C:/Users/a/Desktop/芯片分析表_HI.csv', 'w') as f:
    f.write("Latitude,Longitude,Elevation\n")  # 写入表头
    for index, row in df.iterrows():
        elevation = get_elevation(row['Latitude'], row['Longitude'], api_key)
        if elevation is not None:
            f.write(f"{row['Latitude']},{row['Longitude']},{elevation}\n")

复制<br>对于大量请求，考虑批量处理和缓存结果以减少 API 调用次数可能会有帮助。<br><br>我们希望把海拔信息放到所有的样本中去，可以继续使用 Python 解决。<br>import pandas as pd

# 读取海拔信息文件
elevation_df = pd.read_csv('/mnt/data/海拔信息.csv')

# 读取需要填充海拔信息的总表文件
main_df = pd.read_csv('/mnt/data/总表.csv')

# 根据经纬度合并海拔信息到总表中
# 注意这里使用了拼写错误的'Lontitude'以保持数据一致性
merged_df = pd.merge(main_df, elevation_df[['Longitude', 'Latitude', 'Elevation']], on=['Longitude', 'Latitude'], how='left')

# 保存合并后的数据到新的CSV文件
merged_file_path = '/mnt/data/总表_带海拔信息.csv'
merged_df.to_csv(merged_file_path, index=False)

复制]]></description><link>软件\python\地理经纬\python：根据经纬度获取海拔.html</link><guid isPermaLink="false">软件/Python/地理经纬/python：根据经纬度获取海拔.md</guid><pubDate>Fri, 21 Jun 2024 07:31:19 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403271324577.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403271324577.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[准备文件]]></title><description><![CDATA[ 
 <br><br>你需要准备一个 csv 文件，格式如下所示：<br>
请注意，原作者把经度错误拼写成了 Longtitude，请你也在这个 csv 文件中如此拼写。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404211638100.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>以下代码需要使用 谷歌API，因此需要注册。<br>import pandas as pd
import requests

def get_country_name(latitude, longitude, api_key):
    """根据经纬度使用Google Maps Geocoding API获取国家名称"""
    url = "https://maps.googleapis.com/maps/api/geocode/json"
    params = {
        'latlng': f"{latitude},{longitude}",
        'key': api_key
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            results = response.json().get('results', [])
            if results:
                for result in results:
                    for component in result.get('address_components', []):
                        if 'country' in component.get('types', []):
                            return component.get('long_name')
    except requests.RequestException as e:
        return f"Error: {e}"
    return "Country not found"

def process_coordinates(file_path, output_file, api_key):
    data = pd.read_csv(file_path)
    with open(output_file, 'w', newline='', encoding='utf-8') as file:
        # 写入列标题
        file.write(','.join(list(data.columns) + ['Country']) + '\n')
        
        for index, row in data.iterrows():
            country_name = get_country_name(row['Latitude'], row['Longtitude'], api_key)
            print(f"Processing Record {index + 1}: {country_name}")  # 打印每个记录的处理状态
            # 写入更新后的行并确保每次都写入磁盘
            file.write(','.join(map(str, row.tolist() + [country_name])) + '\n')
            file.flush()  # 确保数据实时写入磁盘

    print("All records have been processed and saved.")

# 示例使用
api_key = '????????'  # 替换为您的Google Maps API密钥
file_path = 'C:/Users/a/Desktop/求国家.csv'  # 替换为您的CSV文件路径
output_file = 'C:/Users/a/Desktop/updated_file_with_countries.csv'  # 输出文件路径
process_coordinates(file_path, output_file, api_key)

复制]]></description><link>软件\python\地理经纬\python：根据经纬度求国家.html</link><guid isPermaLink="false">软件/Python/地理经纬/python：根据经纬度求国家.md</guid><pubDate>Fri, 21 Jun 2024 07:31:19 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404211638100.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404211638100.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[python：根据中文求拼音]]></title><description><![CDATA[ 
 <br>import pypinyin
import pandas as pd

# 读取文本文件
with open('C:/Users/a/Desktop/拼音.txt', 'r', encoding='utf-8') as file:
    lines = file.read().splitlines()

# 转换为拼音，并首字母大写
pinyin_cities = [
    ''.join(pypinyin.lazy_pinyin(city, style=pypinyin.Style.NORMAL)).capitalize()
    for city in lines
]
# 转换为带声调的拼音
pinyin_cities_toned = [
    ' '.join(pypinyin.lazy_pinyin(city, style=pypinyin.Style.TONE))
    for city in lines
]
# 创建DataFrame
df = pd.DataFrame({'City': lines, 'Pinyin': pinyin_cities,'Pinyin_Toned': pinyin_cities_toned})

# 保存到CSV文件
df.to_csv('C:/Users/a/Desktop/Cities_Pinyin.csv', index=False)
复制]]></description><link>软件\python\地理经纬\python：根据中文求拼音.html</link><guid isPermaLink="false">软件/Python/地理经纬/python：根据中文求拼音.md</guid><pubDate>Fri, 21 Jun 2024 07:31:20 GMT</pubDate></item><item><title><![CDATA[Python：古代DNA饼图准备文件的生成]]></title><description><![CDATA[ 
 <br>绘制古代 DNA 的分布常见两种图形：<br>
<br>散点图：着重强调某种古代 DNA 单倍群是否存在。
<br>饼图：着重强调某种古代 DNA 单倍群的占比。
<br>散点图很简单，这里不阐述。我们开始准备饼图的绘制。<br><br>首先需要整理过后的数据：<br>haplogroup	Lat_int	Long_int	Date_BP
C1b	-56	-69	1369
D1g	-56	-70	1000
C1b	-56	-68	910
D4h	-56	-70	910
C1b	-56	-68	906
C1b	-56	-68	659
C1b	-56	-68	200
C1b	-55	-66	590
C	-55	-66	440
D1g	-55	-66	420
D1g	-55	-66	400
D1g	-55	-66	330
复制<br>表包含标题，请严格按照标题名！haplogroup	Lat_int	Long_int	Date_BP
建议经纬度全部取整，在 excel 中可以通过如下公式进行：取整=int(单元格)
<br><br>import pandas as pd

# 读取数据
file_path = r'C:/Users/victo/Desktop/新建 Text Document.txt'
output_path = r'C:/Users/victo/Desktop'
data = pd.read_csv(file_path, delimiter='\t')

# 交互式询问用户关注的单倍群
interested_haplogroups = []
print("请输入您关注的单倍群，输入空或'OK'结束输入：")
while True:
    print("请继续输入您关注的单倍群，输入空或'OK'结束输入：")
    haplogroup = input().strip()
    if haplogroup.lower() == 'ok' or haplogroup == '':
        break
    interested_haplogroups.append(haplogroup)

# 筛选Date_BP &lt;= 10000的数据，可以自定义
data_filtered = data[data['Date_BP'] &lt;= 10000].copy()

# 将不在用户关注列表中的单倍群分类为 'Other'
data_filtered['haplogroup'] = data_filtered['haplogroup'].apply(lambda x: x if x in interested_haplogroups else 'Other')

# 用户输入时间范围
try:
    data_range = int(input("请输入时间范围（如：2000）："))
except ValueError:
    print("输入错误，请输入一个有效的整数。")
    data_range = 2000  # 默认值或重新输入

# 定义时间区间（每data_range年一个区间）
bins = list(range(int(data_filtered['Date_BP'].min() // data_range * data_range),
                 int(data_filtered['Date_BP'].max()) + data_range, data_range))

# 为数据添加一个区间列
data_filtered.loc[:, 'Year_Bin'] = pd.cut(data_filtered['Date_BP'], bins=bins, right=False)

# 按时间区间、经纬度和单倍群分组，计算每组的数量
grouped_data = data_filtered.groupby(['Year_Bin', 'Lat_int', 'Long_int', 'haplogroup'], observed=True).size().reset_index(name='Count')

# 将数据透视，使每个单倍群成为一个列
pivot_table = grouped_data.pivot_table(index=['Year_Bin', 'Lat_int', 'Long_int'], 
                                       columns='haplogroup', 
                                       values='Count', 
                                       aggfunc='sum',
                                       observed=True).fillna(0).reset_index()

# 确保每个地理位置至少有一个用户感兴趣的单倍群数量大于0
pivot_table = pivot_table[(pivot_table[interested_haplogroups].sum(axis=1) &gt; 0)]

# 计算总数列
pivot_table['Total'] = pivot_table[interested_haplogroups + ['Other']].sum(axis=1)

# 写入过滤后的数据到CSV文件
for period in pivot_table['Year_Bin'].unique():
    subset = pivot_table[pivot_table['Year_Bin'] == period]
    file_name = f'{output_path}/{interested_haplogroups}_{period.left}_{period.right}.csv'
    subset.to_csv(file_name, index=False)

复制<br>现在得到了多个时间段的 csv 文件，现在打开 Arcgis Pro。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410251526241.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410251526552.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410251527979.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410251527938.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>在下图这里添加排除规则，例如我们可以排除某个经纬度下总数小于某个数值的饼图，将其转为散点图，避免对结果的误判和误读。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410251528925.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\地理经纬\python：古代dna饼图准备文件的生成.html</link><guid isPermaLink="false">软件/Python/地理经纬/Python：古代DNA饼图准备文件的生成.md</guid><pubDate>Fri, 25 Oct 2024 07:29:36 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410251526241.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410251526241.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[python：经纬度和地址互转]]></title><description><![CDATA[ 
 <br>import googlemaps
from datetime import datetime

# 用你的API密钥替换YOUR_API_KEY
gmaps = googlemaps.Client(key='AIzaSyCKaJ8zNApYur8NwZM7-EKEC7QZmggXAVQ')

# 地理编码示例，将地址转换为经纬度
geocode_result = gmaps.geocode('北京天安门')

# 打印结果
print(geocode_result)

import googlemaps
from datetime import datetime

# 用你的API密钥替换YOUR_API_KEY
gmaps = googlemaps.Client(key='AIzaSyCKaJ8zNApYur8NwZM7-EKEC7QZmggXAVQ')

# 设置你要进行逆地理编码的经纬度坐标
latitude = 30
longitude = 116

# 进行逆地理编码查询
reverse_geocode_result = gmaps.reverse_geocode((latitude, longitude))

# 打印结果
print(reverse_geocode_result)

复制]]></description><link>软件\python\地理经纬\python：经纬度和地址互转.html</link><guid isPermaLink="false">软件/Python/地理经纬/python：经纬度和地址互转.md</guid><pubDate>Fri, 21 Jun 2024 07:31:20 GMT</pubDate></item><item><title><![CDATA[问题]]></title><description><![CDATA[ 
 <br><br>NGDC 的下载需要调用 API，如果手动去点实在是太慢了。这一点做得没有 <a data-href="python：下载NCBI数据" href="软件\python\数据获取\python：下载ncbi数据.html" class="internal-link" target="_self" rel="noopener nofollow">python：下载NCBI数据</a>好。因此，我们需要分成2个步骤完成。<br><br>登录网站： <a data-tooltip-position="top" aria-label="https://ngdc.cncb.ac.cn/gsa-human/" rel="noopener nofollow" class="external-link" href="https://ngdc.cncb.ac.cn/gsa-human/" target="_blank">Genome Sequence Archive for Human (cncb.ac.cn)</a><br>
例如，我需要下载 HRA000117 项目的所有样本：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408272239687.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>import requests
import csv

# 输入和输出文件路径
input_file = r'ID.txt'
output_file = r'下载详情.csv'

# 打开输出文件
with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
    # 创建CSV写入对象
    csvwriter = csv.writer(csvfile)
    
    # 初始化标志，确保表头只写入一次
    header_written = False
    
    # 读取ID列表并逐个处理
    with open(input_file, 'r') as file:
        for id in file:
            id = id.strip()  # 去除ID前后的空白字符（如换行符）
            if id:  # 如果ID不为空
                # 构造请求URL
                url = f'https://ngdc.cncb.ac.cn/gwh/api/public/assembly/{id}'
                
                try:
                    # 发送GET请求
                    response = requests.get(url)
                    response.raise_for_status()  # 如果请求失败则抛出异常
                    
                    # 将JSON响应转为Python字典
                    response_json = response.json()
                    
                    # 解析JSON对象并转换为适合CSV格式的行
                    # 这里只是一个示例，具体字段需要根据返回的JSON内容调整
                    if not header_written:
                        # 写入表头
                        headers = response_json.keys()
                        csvwriter.writerow(['ID'] + list(headers))
                        header_written = True
                    
                    # 写入数据行
                    row = [id] + list(response_json.values())
                    csvwriter.writerow(row)
                    
                    print(f"ID: {id} 已经成功获取并写入CSV")
                except requests.exceptions.RequestException as e:
                    # 如果请求出错，记录错误信息到CSV中
                    csvwriter.writerow([id, f'请求失败: {str(e)}'])
                    print(f"ID: {id} 获取失败！")

print("任务完成，结果已保存到下载详情.csv")

复制<br>以上脚本可以获得每个 ID 的下载地址。将 json 转换为 csv 文件。<br><br>以下脚本将 csv 文件中提取 ftp 下载的链接，然后依次访问这些链接。<br>import os
import pandas as pd
import requests

# 定义CSV文件路径
csv_file_path = r'下载详情.csv'

# 定义保存文件的目录
download_dir = r'古代DNA'
os.makedirs(download_dir, exist_ok=True)

# 读取CSV文件
df = pd.read_csv(csv_file_path)

# 获取“ftpPathDna”列的所有链接
urls = df['ftpPathDna'].tolist()

# 下载文件
for url in urls:
    file_name = os.path.join(download_dir, url.split('/')[-1])
    print(f"Downloading {file_name}...")
    try:
        response = requests.get(url)
        response.raise_for_status()  # 检查请求是否成功
        with open(file_name, 'wb') as file:
            file.write(response.content)
        print(f"{file_name} downloaded successfully.")
    except requests.exceptions.RequestException as e:
        print(f"Failed to download {file_name}. Error: {e}")

print("All files downloaded.")

复制<br>完成！]]></description><link>软件\python\数据获取\python：下载国家基因组科学数据中心数据（ngdc）.html</link><guid isPermaLink="false">软件/Python/数据获取/python：下载国家基因组科学数据中心数据（NGDC）.md</guid><pubDate>Tue, 27 Aug 2024 14:42:30 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f62e-200d-1f4a8.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f62e-200d-1f4a8.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[下载序列本身]]></title><description><![CDATA[ 
 <br><br>下载 NCBI 数据的常用脚本，绕过了直接使用浏览器下载，避免了经常断线的尴尬问题。<br><br><br>需要准备的是样本 ID 组成的 txt 文件，内容如下所示：<br>OQ707084
OQ707085
OQ707086
OQ707087
OQ707088
OQ707089
OQ707090
OQ707091
OQ707092
OQ707093
复制<br><br>from Bio import Entrez, SeqIO

# 替换为你的电子邮件地址
Entrez.email = "your_email@example.com"

# 从文件读取Accession号列表
accession_list = []
with open("C:/Users/a/Desktop/补充下载NCBI数据.txt", "r") as file:
    for line in file:
        # 移除每行末尾的换行符并添加到列表
        accession_list.append(line.strip())

# 指定保存文件的目录
save_directory = r"C:/Users/a/Desktop/下载序列"

for accession in accession_list:
    # 获取记录
    handle = Entrez.efetch(db="nucleotide", id=accession, rettype="fasta", retmode="text")
    record = SeqIO.read(handle, "fasta")
    handle.close()
    
    # 保存文件，包括完整路径
    filename = f"{save_directory}\\{accession}.fasta"
    SeqIO.write(record, filename, "fasta")
    print(f"Downloaded and saved {filename}")

print("All downloads complete.")

复制<br><br>大多数时候为了下载 NCBI 的序列信息，会选择 fasta 格式，但是这样的格式并不带有样本的信息，例如 经纬度、参考文献 等。这个脚本可以根据 序列号 取回其对应的 参考文献、经纬度、样本别名（即在文献中作者所赋予的 ID），如果 NCBI 没有收录，则返回 invalid。<br><br>需要准备的是样本 ID 组成的 txt 文件，内容如下所示：<br>OQ707084
OQ707085
OQ707086
OQ707087
OQ707088
OQ707089
OQ707090
OQ707091
OQ707092
OQ707093
复制<br><br># 进行代码之前请先准备好你的.txt文件，文件每一行都是一个序列ID

from Bio import Entrez, SeqIO

# 设置您的邮箱地址，可写可不写
Entrez.email = "your_email@example.com"

def download_and_format_features_references(id_list):
    for seq_id in id_list:
        handle = Entrez.efetch(db="nucleotide", id=seq_id, rettype="gb", retmode="text")
        record = SeqIO.read(handle, "genbank")
        country = isolate = lat_lon = "Not Available"
        for feature in record.features:
            if feature.type == "source":
                qualifiers = feature.qualifiers
                country = qualifiers.get("country", ["Not Available"])[0]
                isolate = qualifiers.get("isolate", ["Not Available"])[0]
                lat_lon = qualifiers.get("lat_lon", ["Not Available"])[0]
                break

        reference_titles = ", ".join([ref.title for ref in record.annotations.get("references", []) if ref.title])
        with open ("C:/Users/a/Desktop/下载序列/信息.txt", "a") as output_file:
            output_file.write(f"{seq_id}\t{country}\t{isolate}\t{lat_lon}\t{reference_titles}\n")
        print(f"{seq_id}\t信息已经打印！")
        handle.close()

# 从文件读取序列ID
with open("C:/Users/a/Desktop/新建文本文档.txt", "r") as file:
    example_ids = [line.strip() for line in file.readlines()]

# 调用函数
download_and_format_features_references(example_ids)

复制<br><br>结果应该如下所示：<br>OQ707084	China	Agangrong_M12SK	Not Available	Maternal genetic history of ancient Tibetans over the past 4000 years, Direct Submission
OQ707085	China	Agangrong_M12T	Not Available	Maternal genetic history of ancient Tibetans over the past 4000 years, Direct Submission
OQ707086	China	Agangrong_M13	Not Available	Maternal genetic history of ancient Tibetans over the past 4000 years, Direct Submission
OQ707087	China	Agangrong_M5	Not Available	Maternal genetic history of ancient Tibetans over the past 4000 years, Direct Submission

复制<br>全部以制表符分隔。<br><br>综合以上 2 种功能，可以使用以下脚本：<br><br>需要准备的是样本 ID 组成的 txt 文件，内容如下所示：<br>OQ707084
OQ707085
OQ707086
OQ707087
OQ707088
OQ707089
OQ707090
OQ707091
OQ707092
OQ707093
复制<br><br>from Bio import Entrez, SeqIO

# 设置您的邮箱地址
Entrez.email = "your_email@example.com"

# 指定保存文件的目录
save_directory = r"C:/Users/a/Desktop/下载序列"

# 定义函数以下载序列并提取特征信息
def download_and_process_sequences(id_list):
    for seq_id in id_list:
        # 下载fasta序列
        handle_fasta = Entrez.efetch(db="nucleotide", id=seq_id, rettype="fasta", retmode="text")
        record_fasta = SeqIO.read(handle_fasta, "fasta")
        handle_fasta.close()

        # 保存fasta文件
        filename_fasta = f"{save_directory}\\{seq_id}.fasta"
        SeqIO.write(record_fasta, filename_fasta, "fasta")
        print(f"Downloaded and saved {filename_fasta}")

        # 下载genbank记录以提取特征信息
        handle_gb = Entrez.efetch(db="nucleotide", id=seq_id, rettype="gb", retmode="text")
        record_gb = SeqIO.read(handle_gb, "genbank")
        country = isolate = lat_lon = "Not Available"
        for feature in record_gb.features:
            if feature.type == "source":
                qualifiers = feature.qualifiers
                country = qualifiers.get("country", ["Not Available"])[0]
                isolate = qualifiers.get("isolate", ["Not Available"])[0]
                lat_lon = qualifiers.get("lat_lon", ["Not Available"])[0]
                break

        reference_titles = ", ".join([ref.title for ref in record_gb.annotations.get("references", []) if ref.title])
        with open(f"{save_directory}/信息.txt", "a") as output_file:
            output_file.write(f"{seq_id}\t{country}\t{isolate}\t{lat_lon}\t{reference_titles}\n")
        print(f"{seq_id}\t信息已经打印！")
        handle_gb.close()

# 从同一个文件读取序列ID
id_list = []
with open("C:/Users/a/Desktop/测试.txt", "r") as file:
    for line in file:
        id_list.append(line.strip())

# 调用函数
download_and_process_sequences(id_list)

复制]]></description><link>软件\python\数据获取\python：下载ncbi数据.html</link><guid isPermaLink="false">软件/Python/数据获取/python：下载NCBI数据.md</guid><pubDate>Fri, 21 Jun 2024 07:31:30 GMT</pubDate></item><item><title><![CDATA[打开网址]]></title><description><![CDATA[ 
 <br><br><a data-tooltip-position="top" aria-label="https://www.ncbi.nlm.nih.gov/Traces/wgs/JAHWGD01?display=contigs" rel="noopener nofollow" class="external-link" href="https://www.ncbi.nlm.nih.gov/Traces/wgs/JAHWGD01?display=contigs" target="_blank">JAHWGD000000000.1 Helicobacter pylori :: NCBI (nih.gov)</a><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404092239106.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>得到一个 tsv 文件：<br>sequence_name	accession	length	prot_count	title	status	taxid	organism
Scaffold1	JAHWGD010000001.1	253687	0	Scaffold1, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold2	JAHWGD010000002.1	231945	0	Scaffold2, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold3	JAHWGD010000003.1	227650	0	Scaffold3, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold4	JAHWGD010000004.1	183301	0	Scaffold4, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold5	JAHWGD010000005.1	164631	0	Scaffold5, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold6	JAHWGD010000006.1	93579	0	Scaffold6, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold7	JAHWGD010000007.1	68164	0	Scaffold7, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold8	JAHWGD010000008.1	64157	0	Scaffold8, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold9	JAHWGD010000009.1	58982	0	Scaffold9, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold10	JAHWGD010000010.1	46861	0	Scaffold10, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold11	JAHWGD010000011.1	37050	0	Scaffold11, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold12	JAHWGD010000012.1	36849	0	Scaffold12, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold13	JAHWGD010000013.1	30940	0	Scaffold13, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold14	JAHWGD010000014.1	27846	0	Scaffold14, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold15	JAHWGD010000015.1	26854	0	Scaffold15, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold16	JAHWGD010000016.1	16661	0	Scaffold16, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold17	JAHWGD010000017.1	12852	0	Scaffold17, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold18	JAHWGD010000018.1	12496	0	Scaffold18, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold19	JAHWGD010000019.1	10991	0	Scaffold19, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold20	JAHWGD010000020.1	10050	0	Scaffold20, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold21	JAHWGD010000021.1	7178	0	Scaffold21, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold22	JAHWGD010000022.1	5423	0	Scaffold22, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold23	JAHWGD010000023.1	3892	0	Scaffold23, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold24	JAHWGD010000024.1	3555	0	Scaffold24, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold25	JAHWGD010000025.1	2506	0	Scaffold25, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold26	JAHWGD010000026.1	2057	0	Scaffold26, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold27	JAHWGD010000027.1	1848	0	Scaffold27, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold28	JAHWGD010000028.1	1665	0	Scaffold28, whole genome shotgun sequence	Live	210	Helicobacter pylori
Scaffold29	JAHWGD010000029.1	1113	0	Scaffold29, whole genome shotgun sequence	Live	210	Helicobacter pylori
复制<br>去除不需要的信息，只保留 Accession 列，然后将这一列放进一个 txt 文件中。<br>
将这个文件放到 linux 系统中，保存。<br><br>把 SRA 下载软件放到 linux 中，然后解压：<br>tar -zxvf sratoolkit.3.1.0-ubuntu64.tar.gz
复制<br>然后返回自己的目录,添加到系统路径：<br>vim ~/.bashrc
export PATH=$PATH:/home/luolintao/SRA_download/sratoolkit.3.1.0-ubuntu64/bin
复制<br>例如路径可能是：/home/luolintao/SRA_download/sratoolkit.3.1.0-ubuntu64<br><br>fastq-dump -v
prefetch -v
复制<br>如果成功，就会出现<br>
2024-04-09T 13:51:42 fastq-dump.3.1.0 err: param empty while validating argument list - expected accession
<br><br> while read -r line; do
prefetch "$line"
done &lt; 下载accession.txt
复制<br><br>fastq-dump --fasta 0 SRA_Accession -O output_directory
复制<br><br>创建一个 shell 脚本，然后执行它。<br>#!/bin/bash

# 指定包含.sra文件的目录
sra_dir="/home/luolintao/SRA_download/sratoolkit.3.1.0-ubuntu64"
# 指定输出FASTA文件的目录
output_dir="/home/luolintao/SRA_download/fasta_files"

# 创建输出目录，如果不存在的话
mkdir -p "$output_dir"

# 遍历目录中的所有没有后缀的文件
for sra_file in $sra_dir/*; do
  if [ -f "$sra_file" ]; then  # 确保是文件
    filename=$(basename -- "$sra_file")
    extension="${filename##*.}"
    if [ "$extension" = "$filename" ]; then  # 没有后缀的文件
      echo "正在处理文件：$filename"
      # 使用fastq-dump转换为FASTA，并输出到指定目录
      fastq-dump --fasta 0 "$sra_file" -O "$output_dir" --split-files
    fi
  fi
done

echo "所有文件处理完成。"
复制<br><br>
<br>
将上面的脚本保存到一个文件中，例如convert_sra_to_fasta.sh。

<br>
打开终端，导航到脚本所在的目录。

<br>
赋予脚本执行权限：
bashCopy code
chmod +x convert_sra_to_fasta.sh

<br>
执行脚本：
bashCopy code
./convert_sra_to_fasta.sh

]]></description><link>软件\python\数据获取\python：下载sra.html</link><guid isPermaLink="false">软件/Python/数据获取/python：下载SRA.md</guid><pubDate>Fri, 23 Aug 2024 08:22:32 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404092239106.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404092239106.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）]]></title><description><![CDATA[ 
 <br><a data-href="ρ（rho）方法" href="术语\ρ（rho）方法.html" class="internal-link" target="_self" rel="noopener nofollow">ρ（rho）方法</a> 一种用于估算物种或群体的最近共同祖先（MRCA）时间的分子钟方法。该方法基于假设遗传标记（通常是线粒体 DNA）中的差异累积与时间成正比。通过测量遗传距离（即基因序列中的差异数量）并结合已知的分子钟速率，可以估计 MRCA 的时间。<br>
理论部分在这里：<a data-href="ρ（rho）方法" href="术语\ρ（rho）方法.html" class="internal-link" target="_self" rel="noopener nofollow">ρ（rho）方法</a><br><a data-href="σ方法" href="术语\σ方法.html" class="internal-link" target="_self" rel="noopener nofollow">σ方法</a> 是 <a data-href="ρ（rho）方法" href="术语\ρ（rho）方法.html" class="internal-link" target="_self" rel="noopener nofollow">ρ（rho）方法</a>的一种补充，为其增添了一个上下限的功能，作为方差的估计。<br>
我们可以通过一个脚本进行计算：<br>注意！
经过了一些询问和求证，我发现 <a data-href="ρ（rho）方法" href="术语\ρ（rho）方法.html" class="internal-link" target="_self" rel="noopener nofollow">ρ（rho）方法</a> 的计算步骤与我之前想象的不同。请仔细阅读。
<br><br>假如我希望计算支系的ρ值（举例来说，我希望算 D4），那么我应该拿 D4和哪个支系比较才能得到距今多少年前呢？
不用比较的，只需要计算 D4这个支系内部的平均核苷酸差异数就可以了
<br>D4这个支系内部是否包括 D4的下游单倍群呢？（例如 D4a 等等）
要计算整个 D4，包括下游所有的单倍群
<br>以下代码将实现一个功能，从准备好的 txt 文档中提取指定单倍群的下游单倍群及对应的 ID。<br><br>准备一个文档：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409040916633.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>所用到的系统发育树的文件可以：<a data-tooltip-position="top" aria-label="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/%E7%BA%BF%E7%B2%92%E4%BD%93%E5%8D%95%E5%80%8D%E7%BE%A4phylotree(version17).txt?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1725416291&amp;Signature=qJQ20OzkHnsAHqlcn9eOexHeYy8%3D" rel="noopener nofollow" class="external-link" href="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/%E7%BA%BF%E7%B2%92%E4%BD%93%E5%8D%95%E5%80%8D%E7%BE%A4phylotree(version17).txt?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1725416291&amp;Signature=qJQ20OzkHnsAHqlcn9eOexHeYy8%3D" target="_blank">下载</a><br>import os

# 定义桌面路径
DESKTOP_PATH = os.path.join(os.path.expanduser("~"), 'Desktop')
HAPLOGROUP_FILE_PATH = os.path.join('线粒体单倍群phylotree(version17)2024年8月19日.txt')
INPUT_TXT_PATH = r'1.txt'

def parse_haplogroup_file(lines):
    haplogroups = []
    for line in lines:
        stripped_line = line.strip()
        if stripped_line:
            level = line.count('\t')
            haplogroups.append((level, stripped_line))
    return haplogroups

def find_downstream_haplogroups(haplogroup_name, haplogroups):
    downstream_haplogroups = []
    found = False
    base_level = None

    for level, haplogroup in haplogroups:
        if haplogroup == haplogroup_name:
            found = True
            base_level = level
            downstream_haplogroups.append(haplogroup)
        elif found and level &gt; base_level:
            downstream_haplogroups.append(haplogroup)
        elif found and level &lt;= base_level:
            break

    return downstream_haplogroups

def extract_ids_for_haplogroups(downstream_haplogroups, input_lines):
    haplogroup_to_ids = {}
    for line in input_lines:
        parts = line.strip().split('\t')
        if len(parts) == 2:
            id, haplogroup = parts
            if haplogroup in downstream_haplogroups:
                if haplogroup not in haplogroup_to_ids:
                    haplogroup_to_ids[haplogroup] = []
                haplogroup_to_ids[haplogroup].append(id)
    return haplogroup_to_ids

def main():
    with open(HAPLOGROUP_FILE_PATH, 'r', encoding='utf-8') as file:
        refined_lines = file.readlines()

    haplogroups = parse_haplogroup_file(refined_lines)

    # 交互式要求用户输入单倍群名称
    haplogroup_name = input("请输入单倍群名称：")

    # 查找该单倍群及其所有下游单倍群
    downstream_haplogroups = find_downstream_haplogroups(haplogroup_name, haplogroups)

    # 读取1.txt文件
    with open(INPUT_TXT_PATH, 'r', encoding='utf-8') as input_file:
        input_lines = input_file.readlines()

    # 提取下游单倍群对应的ID
    haplogroup_to_ids = extract_ids_for_haplogroups(downstream_haplogroups, input_lines)

    # 输出文件路径
    output_file_path = os.path.join(DESKTOP_PATH, f'{haplogroup_name}_下游单倍群_IDs.txt')

    # 将结果写入到桌面的文件中
    with open(output_file_path, 'w', encoding='utf-8') as output_file:
        for haplogroup, ids in haplogroup_to_ids.items():
            for id in ids:
                output_file.write(f'{id}\t{haplogroup}\n')

    print(f"已将结果输出到: {output_file_path}")

if __name__ == "__main__":
    main()

复制<br>现在，你得到了输出的文件，可以使用 TBtools 等软件提取对应的 fasta 了。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409040934929.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409040935579.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>现在，准备好了 fasta 文件，是时候计算了！<br><br>from Bio import AlignIO
from itertools import combinations
from multiprocessing import Pool
import math

def calculate_rho_sigma(fasta_file):
"""
计算群体中个体间的平均核苷酸差异 ρ 和 σ
"""
# 读取FASTA文件并进行序列比对
alignment = AlignIO.read(fasta_file, "fasta")

# 初始化变量
total_differences = 0
total_squared_differences = 0
total_comparisons = 0

# 准备所有配对组合
seq_pairs = [(seq1.seq, seq2.seq) for seq1, seq2 in combinations(alignment, 2)]
num_comparisons = len(seq_pairs)

# 使用多进程池进行并行计算
with Pool() as pool:
    differences = pool.starmap(calculate_nucleotide_difference, seq_pairs)

# 计算ρ和σ
for difference in differences:
    total_differences += difference  # n_i
    total_squared_differences += difference ** 2  # n_i^2

# 根据文献公式计算ρ和σ²
rho = total_differences / num_comparisons
sigma_squared = total_squared_differences / (num_comparisons ** 2)
sigma = math.sqrt(sigma_squared)

return rho, sigma


if __name__ == '__main__':
    # 指定FASTA文件路径
    fasta_file = r'C:/Users/victo/Desktop/1.fasta'

    # 计算平均核苷酸差异 π 和 σ
    rho, sigma = calculate_rho_sigma(fasta_file)
    print(f"平均核苷酸差异 ρ: {rho}")
    print(f"σ值: {sigma}")

复制<br><br>from Bio import AlignIO, SeqIO
from itertools import combinations
from multiprocessing import Pool
from pathlib import Path
import math

# 全局变量，定义输入文件和输出文件路径
INPUT_FASTA_FILE = Path('alignment.fasta')
OUTPUT_TXT_FILE = Path('output_results.txt')

# 计算核苷酸差异
def calculate_nucleotide_difference(seq1, seq2):
    """计算两个序列之间的核苷酸差异"""
    return sum(1 for a, b in zip(seq1, seq2) if a != b)

def calculate_rho_sigma(fasta_file):
    """计算群体中个体间的平均核苷酸差异 ρ 和 σ"""
    alignment = AlignIO.read(fasta_file, "fasta")

    seq_pairs = [(seq1.seq, seq2.seq) for seq1, seq2 in combinations(alignment, 2)]
    num_comparisons = len(seq_pairs)

    # 并行处理计算核苷酸差异
    with Pool() as pool:
        differences = pool.starmap(calculate_nucleotide_difference, seq_pairs)

    total_differences = sum(differences)
    total_squared_differences = sum(diff ** 2 for diff in differences)

    rho = total_differences / num_comparisons
    sigma_squared = total_squared_differences / (num_comparisons ** 2)
    sigma = math.sqrt(sigma_squared)

    return rho, sigma

def remove_bases(seq, positions):
    """从后往前删除指定位置的碱基"""
    for pos in sorted(positions, reverse=True):
        seq = seq[:pos-1] + seq[pos:]
    return seq

def write_fasta(fasta_sequences, output_file):
    """将处理后的序列写入FASTA文件"""
    with open(output_file, 'w') as f:
        for header, seq in fasta_sequences:
            f.write(f"&gt;{header}\n")
            for i in range(0, len(seq), 60):
                f.write(f"{seq[i:i+60]}\n")

def process_fasta(input_file):
    """处理FASTA文件并生成4个新的FASTA文件"""
    fasta_sequences = list(SeqIO.parse(input_file, 'fasta'))

    output_files = {
        "Complete_sequence.fasta": [],
        "HVS-I_(16051-16400).fasta": [],
        "HVS-II_(68-263).fasta": [],
        "Control_Region.fasta": []
    }

    positions_to_remove = [16519, 16194, 16183, 16182]

    for fasta in fasta_sequences:
        header, sequence = fasta.id, str(fasta.seq)

        # 第一种情况
        seq_1 = remove_bases(sequence, positions_to_remove)
        output_files["Complete_sequence.fasta"].append((header, seq_1))

        # 第二种情况
        seq_2 = seq_1[16051-1:16397]
        output_files["HVS-I_(16051-16400).fasta"].append((header, seq_2))

        # 第三种情况
        seq_3 = sequence[68-1:263]
        output_files["HVS-II_(68-263).fasta"].append((header, seq_3))

        # 第四种情况
        seq_4 = sequence[16024-1:16569] + sequence[0:576]
        output_files["Control_Region.fasta"].append((header, seq_4))

    # 写入生成的4个FASTA文件
    for output_file, sequences in output_files.items():
        write_fasta(sequences, output_file)

def calculate_for_all_files(output_txt_file):
    """对4个新生成的FASTA文件分别进行ρ和σ的计算，并将结果写入txt文件"""
    fasta_files = [
        'Complete_sequence.fasta',
        'HVS-I_(16051-16400).fasta',
        'HVS-II_(68-263).fasta',
        'Control_Region.fasta'
    ]

    results = {}

    for fasta_file in fasta_files:
        rho, sigma = calculate_rho_sigma(fasta_file)
        region_key = fasta_file.split('_')[0].upper()
        results[f'RHO_{region_key}'] = f"{rho:.6f}"
        results[f'RHO_{region_key}_SE'] = f"{sigma:.6f}"

    # 写入结果到txt文件
    with open(output_txt_file, 'w') as f:
        f.write("SAMPLE\tRHO_CS\tRHO_CS_SE\tRHO_SYN\tRHO_SYN_SE\t"
                "RHO_HVSI\tRHO_HVSI_SE\tRHO_HVSI_TRANSI\t"
                "RHO_HVSI_TRANSI_SE\tRHO_HVSII\tRHO_HVSII_SE\t"
                "RHO_CR\tRHO_CR_SE\n")
        f.write(f"1\t{results.get('RHO_COMPLETE', '0')}\t"
                f"{results.get('RHO_COMPLETE_SE', '0')}\t0\t0\t"
                f"{results.get('RHO_HVS-I', '0')}\t"
                f"{results.get('RHO_HVS-I_SE', '0')}\t0\t0\t"
                f"{results.get('RHO_HVS-II', '0')}\t"
                f"{results.get('RHO_HVS-II_SE', '0')}\t"
                f"{results.get('RHO_CONTROL', '0')}\t"
                f"{results.get('RHO_CONTROL_SE', '0')}\n")

    # 删除临时产生的FASTA文件
    for fasta_file in fasta_files:
        Path(fasta_file).unlink()
        print(f"已经删除了临时文件： {fasta_file}，如需保留删掉相应代码")

if __name__ == '__main__':
    # 处理输入FASTA文件并生成新的FASTA文件
    process_fasta(INPUT_FASTA_FILE)

    # 对新生成的FASTA文件计算 ρ 和 σ 并写入结果文件
    calculate_for_all_files(OUTPUT_TXT_FILE)

复制<br>为了提升计算速度，本代码可以调用 CPU 多核性能导致卡顿。<br>推荐使用第二个代码进行计算，第二个代码将会得到一个 txt 文件，该文件可以直接用于计算：<a data-href="python：ρ（rho）方法计算mtDNA共同祖先时间" href="软件\python\数据科学与格式转换\ρ方法\python：ρ（rho）方法计算mtdna共同祖先时间.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：ρ（rho）方法计算mtDNA共同祖先时间</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">。]]></description><link>软件\python\数据科学与格式转换\ρ方法\python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/ρ方法/python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）.md</guid><pubDate>Tue, 08 Oct 2024 03:33:15 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[背景]]></title><description><![CDATA[ 
 <br>这个代码没有包括 同义突变率 的计算，因为我暂时没想好如何写这样的代码，之后可能会进一步的改进。<br><br>首先，我们需要知道什么是 <a data-href="ρ（rho）方法" href="术语\ρ（rho）方法.html" class="internal-link" target="_self" rel="noopener nofollow">ρ（rho）方法</a>和 <a data-href="σ方法" href="术语\σ方法.html" class="internal-link" target="_self" rel="noopener nofollow">σ方法</a>。请自行复习理论知识。<br>
该代码将以下代码的功能全部集中起来了：<br>
<a data-href="python：ρ（rho）方法计算mtDNA共同祖先时间" href="软件\python\数据科学与格式转换\ρ方法\python：ρ（rho）方法计算mtdna共同祖先时间.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：ρ（rho）方法计算mtDNA共同祖先时间</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;"><br>
<a data-href="python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）" href="软件\python\数据科学与格式转换\ρ方法\python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;"><br><br>需要3个数据：<br><br>我们需要一个线粒体全基因组测序数据，并且经过了比对。由于我加入了删除特定位点的功能<a data-footref="1" href="about:blank#fn-1-3d0ee807868908f1" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>，所以建议使用 <a data-href="MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)" href="软件\其它生信软件\a-j\mafft：(multiple-alignment-program-for-amino-acid-or-nucleotide-sequences).html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：(Multiple alignment program for amino acid or nucleotide sequences)</a> 软件进行如下代码的比对：<br>mafft --add 未比对的文件.fasta --keeplength rCRS.fasta
复制<br>这个代码可以保持长度为16569。<br><br>ID	MT_HAP
FJ748724	A
OM194256	A
HG00565	A
HG00566	A
HG00567	A
KX456634	A
HGDP01227	A
KU682910	A
KU682924	A
KU682951	A
KU682973	A
KU682988	A
KU683271	A
KU683494	A
KU683587	A
.......
复制<br>如上所示，必须将 ID 放在第一列，单倍群放在第二列。其中第一列的 ID 应该和 FASTA 文件中的 ID 对应。<br><br>点击这里下载： <a data-tooltip-position="top" aria-label="https://vip.123pan.cn/1835545223/%E6%96%87%E6%A1%A3%EF%BC%88%E5%85%B1%E4%BA%AB%EF%BC%89/%E7%BA%BF%E7%B2%92%E4%BD%93%E5%8D%95%E5%80%8D%E7%BE%A4phylotree%28version17%292024%E5%B9%B48%E6%9C%8819%E6%97%A5.txt" rel="noopener nofollow" class="external-link" href="https://vip.123pan.cn/1835545223/%E6%96%87%E6%A1%A3%EF%BC%88%E5%85%B1%E4%BA%AB%EF%BC%89/%E7%BA%BF%E7%B2%92%E4%BD%93%E5%8D%95%E5%80%8D%E7%BE%A4phylotree%28version17%292024%E5%B9%B48%E6%9C%8819%E6%97%A5.txt" target="_blank">发育树</a><br><br>运行如下代码，终端会提示你输入希望计算的单倍群以及质量控制指标。<br>import os
from Bio import AlignIO, SeqIO
from Bio.Seq import Seq  # 导入Seq类
from itertools import combinations
from multiprocessing import Pool
from pathlib import Path
import math
import pandas as pd
import numpy as np
import shutil

# 定义桌面路径
DESKTOP_PATH = os.path.join(os.path.expanduser("~"), 'Desktop')
HAPLOGROUP_FILE_PATH = os.path.join('线粒体单倍群phylotree(version17).txt')
INPUT_TXT_PATH = r'基本信息文件.txt'
FASTA_FILE_PATH = r'古代现代对齐.fasta'
OUTPUT_FASTA_PATH = None  # 根据用户输入的单倍群动态生成

# 输出文件路径
OUTPUT_TXT_FILE = Path('output_results.txt')
FINAL_OUTPUT_FILE = Path(f'Rho统计共祖时间.txt')
RHO_RESULT_FILE = Path('ρ结果.txt')

# ------------------- 单倍群提取部分 -------------------
def parse_haplogroup_file(lines):
    print("正在解析Haplogroup文件...")
    haplogroups = []
    for line in lines:
        stripped_line = line.strip()
        if stripped_line:
            level = line.count('\t')
            haplogroups.append((level, stripped_line))
    return haplogroups

def find_downstream_haplogroups(haplogroup_name, haplogroups):
    print("正在查找下级单倍群...")
    downstream_haplogroups = []
    found = False
    base_level = None

    for level, haplogroup in haplogroups:
        if haplogroup == haplogroup_name:
            found = True
            base_level = level
            downstream_haplogroups.append(haplogroup)
        elif found and level &gt; base_level:
            downstream_haplogroups.append(haplogroup)
        elif found and level &lt;= base_level:
            break

    return downstream_haplogroups

def extract_ids_for_haplogroups(downstream_haplogroups, input_lines):
    print("正在提取ID...")
    haplogroup_to_ids = {}
    for line in input_lines:
        parts = line.strip().split('\t')
        if len(parts) == 2:
            id, haplogroup = parts
            if haplogroup in downstream_haplogroups:
                if haplogroup not in haplogroup_to_ids:
                    haplogroup_to_ids[haplogroup] = []
                haplogroup_to_ids[haplogroup].append(id)
    return haplogroup_to_ids

def extract_matching_sequences(fasta_path, ids_to_extract):
    print("正在提取符合条件的序列...")
    """从FASTA文件中提取符合条件的序列"""
    sequences = {}
    with open(fasta_path, 'r') as fasta_file:
        for record in SeqIO.parse(fasta_file, "fasta"):
            if record.id in ids_to_extract:
                sequences[record.id] = record
    return sequences

# ------------------- 新增的序列检查和过滤功能 -------------------
def check_and_filter_sequences(sequences):
    print("正在检查序列质量...")
    """检查序列长度，替换特殊字符，并根据N比例过滤"""
    sequence_lengths = [len(record.seq) for record in sequences.values()]

    # 检查所有序列长度是否一致
    if len(set(sequence_lengths)) &gt; 1:
        print("错误：序列长度不一致，程序终止。")
        exit(1)

    # 检查特殊字符并替换为N
    valid_chars = set("AGCTN-")
    print("正在检查特殊字符并替换为N...")
    for record in sequences.values():
        seq_str = str(record.seq)  # 获取序列的字符串表示
        # 替换非标准碱基字符为N
        new_seq = ''.join([base if base in valid_chars else 'N' for base in seq_str])
        record.seq = Seq(new_seq)  # 使用Bio.Seq模块的Seq类将字符串转换为Seq对象

    # 计算每个序列的N_ratio
    print("正在计算每个序列的N比例...")
    n_ratios = {record.id: record.seq.count('N') / len(record.seq) for record in sequences.values()}

    # 获取用户输入的阈值
    threshold = float(input("请输入需要去除的N比例阈值(例如0.1)："))

    # 过滤N比例超过阈值的序列
    filtered_sequences = {id: seq for id, seq in sequences.items() if n_ratios[id] &lt;= threshold}

    # 提示哪些序列被移除
    removed_ids = [id for id in sequences if id not in filtered_sequences]
    if removed_ids:
        print(f"以下序列因N比例过高被移除: {', '.join(removed_ids)}")
    else:
        print("所有序列的N比例都低于阈值，无需移除。")

    return filtered_sequences

def write_fasta_file(output_path, sequences):
    """将提取的序列写入新的FASTA文件"""
    print("正在写入FASTA文件...")
    with open(output_path, 'w') as output_file:
        SeqIO.write(sequences.values(), output_file, "fasta")

# ------------------- 核苷酸差异计算和ρ、σ部分 -------------------
def calculate_nucleotide_difference(seq1, seq2):
    """计算两个序列之间的核苷酸差异"""
    return sum(1 for a, b in zip(seq1, seq2) if a != b)

def calculate_rho_sigma(fasta_file):
    alignment = AlignIO.read(fasta_file, "fasta")
    seq_pairs = [(seq1.seq, seq2.seq) for seq1, seq2 in combinations(alignment, 2)]
    num_comparisons = len(seq_pairs)

    with Pool() as pool:
        differences = pool.starmap(calculate_nucleotide_difference, seq_pairs)

    total_differences = sum(differences)
    total_squared_differences = sum(diff ** 2 for diff in differences)

    rho = total_differences / num_comparisons
    sigma_squared = total_squared_differences / (num_comparisons ** 2)
    sigma = math.sqrt(sigma_squared)

    return rho, sigma

def remove_bases(seq, positions):
    for pos in sorted(positions, reverse=True):
        seq = seq[:pos-1] + seq[pos:]
    return seq

def write_fasta(fasta_sequences, output_file):
    with open(output_file, 'w') as f:
        for header, seq in fasta_sequences:
            f.write(f"&gt;{header}\n")
            for i in range(0, len(seq), 60):
                f.write(f"{seq[i:i+60]}\n")

def process_fasta(input_file):
    fasta_sequences = list(SeqIO.parse(input_file, 'fasta'))

    output_files = {
        "Complete_sequence.fasta": [],
        "HVS-I_(16051-16400).fasta": [],
        "HVS-II_(68-263).fasta": [],
        "Control_Region.fasta": []
    }
    positions_to_remove = [16519, 16194, 16183, 16182]
    for fasta in fasta_sequences:
        header, sequence = fasta.id, str(fasta.seq)

        seq_1 = remove_bases(sequence, positions_to_remove)
        output_files["Complete_sequence.fasta"].append((header, seq_1))

        seq_2 = seq_1[16051-1:16397]
        output_files["HVS-I_(16051-16400).fasta"].append((header, seq_2))

        seq_3 = sequence[68-1:263]
        output_files["HVS-II_(68-263).fasta"].append((header, seq_3))

        seq_4 = sequence[16024-1:16569] + sequence[0:576]
        output_files["Control_Region.fasta"].append((header, seq_4))

    for output_file, sequences in output_files.items():
        write_fasta(sequences, output_file)

def calculate_for_all_files(output_txt_file, haplogroup_name):
    fasta_files = [
        'Complete_sequence.fasta',
        'HVS-I_(16051-16400).fasta',
        'HVS-II_(68-263).fasta',
        'Control_Region.fasta'
    ]

    results = {}

    for fasta_file in fasta_files:
        print("正在计算，请稍后")
        rho, sigma = calculate_rho_sigma(fasta_file)
        region_key = fasta_file.split('_')[0].upper()
        results[f'RHO_{region_key}'] = f"{rho:.6f}"
        results[f'RHO_{region_key}_SE'] = f"{sigma:.6f}"

    # 使用haplogroup_name作为SAMPLE列
    with open(output_txt_file, 'w') as f:
        f.write("SAMPLE\tRHO_CS\tRHO_CS_SE\tRHO_SYN\tRHO_SYN_SE\t"
                "RHO_HVSI\tRHO_HVSI_SE\tRHO_HVSI_TRANSI\t"
                "RHO_HVSI_TRANSI_SE\tRHO_HVSII\tRHO_HVSII_SE\t"
                "RHO_CR\tRHO_CR_SE\n")
        f.write(f"{haplogroup_name}\t{results.get('RHO_COMPLETE', '0')}\t"
                f"{results.get('RHO_COMPLETE_SE', '0')}\t0\t0\t"
                f"{results.get('RHO_HVS-I', '0')}\t"
                f"{results.get('RHO_HVS-I_SE', '0')}\t0\t0\t"
                f"{results.get('RHO_HVS-II', '0')}\t"
                f"{results.get('RHO_HVS-II_SE', '0')}\t"
                f"{results.get('RHO_CONTROL', '0')}\t"
                f"{results.get('RHO_CONTROL_SE', '0')}\n")

    for fasta_file in fasta_files:
        Path(fasta_file).unlink()

# ------------------- 共祖时间计算部分 -------------------
def calculate_ages(df, rho_col, se_col, multiplier):
    df[f'{rho_col}_AGE'] = df[rho_col] * multiplier
    df[f'{rho_col}_AGE_95LB'] = (df[rho_col] - 1.96 * df[se_col]) * multiplier
    df[f'{rho_col}_AGE_95HB'] = (df[rho_col] + 1.96 * df[se_col]) * multiplier

def process_rho_results(output_txt_file, final_output_file, haplogroup_name, sequence_count):
    df = pd.read_csv(output_txt_file, sep='\t')

    required_columns = [
        'Haplogroup', 'RHO_CS', 'RHO_CS_SE',
        'RHO_SYN', 'RHO_SYN_SE',
        'RHO_HVSI', 'RHO_HVSI_SE',
        'RHO_HVSI_TRANSI', 'RHO_HVSI_TRANSI_SE',
        'RHO_HVSII', 'RHO_HVSII_SE',
        'RHO_CR', 'RHO_CR_SE'
    ]

    for col in required_columns:
        if col not in df.columns:
            df[col] = 0

    # 插入用户输入的单倍群名称
    df['Haplogroup'] = haplogroup_name

    # 插入序列数量
    df['Number'] = sequence_count

    cs_multiplier = 3624
    cs_base = -40.2789
    cs_exp = -0.0263
    df['CS_AGE'] = cs_multiplier * (((np.exp(-(np.exp((df['RHO_CS'] - cs_base) * cs_exp)))) * 0.4794) / 0.4794 * df['RHO_CS'])
    df['CS_AGE_95LB'] = cs_multiplier * (((np.exp(-(np.exp(((df['RHO_CS'] - 1.96 * df['RHO_CS_SE']) - cs_base) * cs_exp)))) * 0.4794) / 0.4794 * (df['RHO_CS'] - 1.96 * df['RHO_CS_SE']))
    df['CS_AGE_95HB'] = cs_multiplier * (((np.exp(-(np.exp(((df['RHO_CS'] + 1.96 * df['RHO_CS_SE']) - cs_base) * cs_exp)))) * 0.4794) / 0.4794 * (df['RHO_CS'] + 1.96 * df['RHO_CS_SE']))

    multipliers = {
        'RHO_SYN': 7872,
        'RHO_HVSI': 16677,
        'RHO_HVSI_TRANSI': 18845,
        'RHO_HVSII': 22388,
        'RHO_CR': 9058
    }

    for rho_col, multiplier in multipliers.items():
        calculate_ages(df, rho_col, f'{rho_col}_SE', multiplier)

    result_columns = [
        'Haplogroup', 'Number', 'CS_AGE', 'CS_AGE_95LB', 'CS_AGE_95HB',
        'RHO_SYN_AGE', 'RHO_SYN_AGE_95LB', 'RHO_SYN_AGE_95HB',
        'RHO_HVSI_AGE', 'RHO_HVSI_AGE_95LB', 'RHO_HVSI_AGE_95HB',
        'RHO_HVSI_TRANSI_AGE', 'RHO_HVSI_TRANSI_AGE_95LB', 'RHO_HVSI_TRANSI_AGE_95HB',
        'RHO_HVSII_AGE', 'RHO_HVSII_AGE_95LB', 'RHO_HVSII_AGE_95HB',
        'RHO_CR_AGE', 'RHO_CR_AGE_95LB', 'RHO_CR_AGE_95HB'
    ]
    result = df[result_columns]
    result.to_csv(final_output_file, sep='\t', index=False, encoding='UTF-8', mode='a', header=False)
    print(result)

# ------------------- 主程序 -------------------
def main():
    # 读取母系单倍群文件
    with open(HAPLOGROUP_FILE_PATH, 'r', encoding='utf-8') as file:
        refined_lines = file.readlines()

    haplogroups = parse_haplogroup_file(refined_lines)

    # 交互式要求用户输入单倍群名称
    haplogroup_name = input("请输入单倍群名称：")

    # 查找该单倍群及其所有下游单倍群
    downstream_haplogroups = find_downstream_haplogroups(haplogroup_name, haplogroups)

    # 读取输入的txt文件
    with open(INPUT_TXT_PATH, 'r', encoding='utf-8') as input_file:
        input_lines = input_file.readlines()

    # 提取下游单倍群对应的ID
    haplogroup_to_ids = extract_ids_for_haplogroups(downstream_haplogroups, input_lines)

    # 收集所有的ID
    all_ids = []
    for ids in haplogroup_to_ids.values():
        all_ids.extend(ids)

    # 从FASTA文件中提取匹配的序列
    matching_sequences = extract_matching_sequences(FASTA_FILE_PATH, all_ids)

    # 进行序列检查和过滤
    filtered_sequences = check_and_filter_sequences(matching_sequences)

    # 输出新的FASTA文件
    global OUTPUT_FASTA_PATH
    OUTPUT_FASTA_PATH = os.path.join(DESKTOP_PATH, f'{haplogroup_name}_sequences.fasta')
    write_fasta_file(OUTPUT_FASTA_PATH, filtered_sequences)

    print(f"已将符合条件的序列输出到: {OUTPUT_FASTA_PATH}")

    # 处理生成的FASTA文件并计算ρ和σ
    process_fasta(OUTPUT_FASTA_PATH)

    # 调用 calculate_for_all_files 时传递 haplogroup_name 参数
    calculate_for_all_files(OUTPUT_TXT_FILE, haplogroup_name)

    # 获取过滤后FASTA文件中的序列数量
    sequence_count = len(filtered_sequences)

    # 处理 output_results.txt 文件并计算共祖时间，添加序列数量和单倍群名称
    process_rho_results(OUTPUT_TXT_FILE, FINAL_OUTPUT_FILE, haplogroup_name, sequence_count)

    # 追加模式将 OUTPUT_TXT_FILE 的内容复制到 ρ结果.txt 文件
    with open(OUTPUT_TXT_FILE, 'r') as source_file:
        with open(RHO_RESULT_FILE, 'a') as target_file:
            shutil.copyfileobj(source_file, target_file)

    print(f"已将 {OUTPUT_TXT_FILE} 的内容追加到 {RHO_RESULT_FILE}")

if __name__ == "__main__":
    main()

复制<br><br>Rho统计共祖时间.txt：<br>D5a	108	28862.656901081224	27976.497605014723	29751.893280052132	0	0.0	0.0	47661.348393	46171.08633636	49151.61044963999	0	0.0	0.0	8539.835436	8154.38929968	8925.28157232	55323.0937	53751.555700079996	56894.63169991999
复制<br>ρ结果.txt：<br>SAMPLE	RHO_CS	RHO_CS_SE	RHO_SYN	RHO_SYN_SE	RHO_HVSI	RHO_HVSI_SE	RHO_HVSI_TRANSI	RHO_HVSI_TRANSI_SE	RHO_HVSII	RHO_HVSII_SE	RHO_CR	RHO_CR_SE
D5a	10.369851	0.151796	0	0	2.857909	0.045592	0	0	0.381447	0.008784	6.107650	0.088519
复制<br>其中 Rho统计共祖时间.txt 中的年份分别对应 ρ结果.txt 中的列标题。<br><br><br>
<br>
<br>删除的位点是极易回复突变的位点，具体你可以在这篇文献的方法中找到：<a data-href="2009 AJHG 净化选择校正：改进的人类线粒体分子钟" href="文献及报道\文献\2024年阅读\7-12月\2009-ajhg-净化选择校正：改进的人类线粒体分子钟.html" class="internal-link" target="_self" rel="noopener nofollow">2009 AJHG 净化选择校正：改进的人类线粒体分子钟</a>、<a data-href="2024 JGG 中国云南新石器时代至青铜时代的母系遗传史" href="文献及报道\文献\2024年阅读\7-12月\2024-jgg-中国云南新石器时代至青铜时代的母系遗传史.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="LiThumbsUp" aria-label="LiThumbsUp" data-icon="LiThumbsUp" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" width="18px" height="18px" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide-thumbs-up"><path d="M7 10v12"></path><path d="M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2a3.13 3.13 0 0 1 3 3.88Z"></path></svg></span>2024 JGG 中国云南新石器时代至青铜时代的母系遗传史</a> 、<a data-href="2024 PO 调查越南南岛语传播中的文化扩散和性别偏倚" href="文献及报道\文献\2024年阅读\7-12月\2024-po-调查越南南岛语传播中的文化扩散和性别偏倚.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="LiQuestionMarkGlyph" aria-label="LiQuestionMarkGlyph" data-icon="LiQuestionMarkGlyph" aria-hidden="true" style="transform: translateY(20%);"><svg xmlns="http://www.w3.org/2000/svg" width="18px" height="18px" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="question-mark-glyph"><path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"></path><path d="M9.09009 9.00003C9.32519 8.33169 9.78924 7.76813 10.4 7.40916C11.0108 7.05019 12.079 6.94542 12.7773 7.06519C13.9093 7.25935 14.9767 8.25497 14.9748 9.49073C14.9748 11.9908 12 11.2974 12 14"></path><path d="M12 17H12.01"></path></svg></span>2024 PO 调查越南南岛语传播中的文化扩散和性别偏倚</a>的方法部分。<a href="about:blank#fnref-1-3d0ee807868908f1" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>软件\python\数据科学与格式转换\ρ方法\python：一次性计算σ+ρ.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/ρ方法/Python：一次性计算σ+ρ.md</guid><pubDate>Wed, 30 Oct 2024 01:30:27 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[理论]]></title><description><![CDATA[ 
 <br>以下代码源自该文献：<br>
<a data-href="2009 AJHG 净化选择校正：改进的人类线粒体分子钟" href="文献及报道\文献\2024年阅读\7-12月\2009-ajhg-净化选择校正：改进的人类线粒体分子钟.html" class="internal-link" target="_self" rel="noopener nofollow">2009 AJHG 净化选择校正：改进的人类线粒体分子钟</a>
<br><br>理论部分在这里：<a data-href="ρ（rho）方法" href="术语\ρ（rho）方法.html" class="internal-link" target="_self" rel="noopener nofollow">ρ（rho）方法</a><br>
除了使用 <a data-href="贝叶斯进化树分析（Bayesian Evolutionary Analysis by Sampling Trees，BEAST）" href="术语\贝叶斯进化树分析（bayesian-evolutionary-analysis-by-sampling-trees，beast）.html" class="internal-link" target="_self" rel="noopener nofollow">贝叶斯进化树分析（Bayesian Evolutionary Analysis by Sampling Trees，BEAST）</a>，还可以使用 ρ方法计算<a data-href="最近共同祖先时间(Time to most recent common ancestor，MRCA)" href="术语\最近共同祖先时间(time-to-most-recent-common-ancestor，mrca).html" class="internal-link" target="_self" rel="noopener nofollow">最近共同祖先时间(Time to most recent common ancestor，MRCA)</a> 时间。该方法提供了一种无偏的估计<a data-footref="1" href="about:blank#fn-1-3d0ee807868908f1" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>。尽管该方法受到了广泛的质疑，但是一些文献依然证明了其合理性<a data-footref="2" href="about:blank#fn-2-3d0ee807868908f1" class="footnote-link" target="_self" rel="noopener nofollow">[2]</a>。<br>注意，在进行下列之前，请确认已经计算了ρ值和σ值。
如果没有，可以<a data-href="python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）" href="软件\python\数据科学与格式转换\ρ方法\python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：计算ρ（rho）和σ（sigma）（2024年10月8日更新）</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">
<br><br>该文献的附加材料中给到了一个 Excel 表格。<a data-tooltip-position="top" aria-label="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2694979/bin/mmc2.xls" rel="noopener nofollow" class="external-link" href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2694979/bin/mmc2.xls" target="_blank">表格下载</a><br>
表格本身是一个计算器，但是针对大规模数据，手动填入耗费时间。因此，可以使用如下代码计算。<br><br>需要填入这样一个表格：<br>SAMPLE	RHO_CS	RHO_CS_SE	RHO_SYN	RHO_SYN_SE	RHO_HVSI	RHO_HVSI_SE	RHO_HVSI_TRANSI	RHO_HVSI_TRANSI_SE	RHO_HVSII	RHO_HVSII_SE	RHO_CR	RHO_CR_SE
复制<br><a data-tooltip-position="top" aria-label="https://1drv.ms/t/s!AnGqDjyiZ5t_hflG99fptnbUGFAJjQ?e=5utxw2" rel="noopener nofollow" class="external-link" href="https://1drv.ms/t/s!AnGqDjyiZ5t_hflG99fptnbUGFAJjQ?e=5utxw2" target="_blank">Rho方法计算模板.txt</a><br><br>import pandas as pd
import numpy as np

# 读取数据
file_path = 'ρ+σ_result.txt'
output_path = 'Rho统计共祖时间.txt'
df = pd.read_csv(file_path, sep='\t')

# 需要的列名
required_columns = [
    'Haplogroup', 'RHO_CS', 'RHO_CS_SE',
    'RHO_SYN', 'RHO_SYN_SE',
    'RHO_HVSI', 'RHO_HVSI_SE',
    'RHO_HVSI_TRANSI', 'RHO_HVSI_TRANSI_SE',
    'RHO_HVSII', 'RHO_HVSII_SE',
    'RHO_CR', 'RHO_CR_SE'
]

# 检查并添加缺失的列，值全部设为0
for col in required_columns:
    if col not in df.columns:
        df[col] = 0

# 定义函数
def calculate_ages(df, rho_col, se_col, multiplier):
    df[f'{rho_col}_AGE'] = df[rho_col] * multiplier
    df[f'{rho_col}_AGE_95LB'] = (df[rho_col] - 1.96 * df[se_col]) * multiplier
    df[f'{rho_col}_AGE_95HB'] = (df[rho_col] + 1.96 * df[se_col]) * multiplier

# 定义计算
cs_multiplier = 3624
cs_base = -40.2789
cs_exp = -0.0263
df['CS_AGE'] = cs_multiplier * (((np.exp(-(np.exp((df['RHO_CS'] - cs_base) * cs_exp)))) * 0.4794) / 0.4794 * df['RHO_CS'])
df['CS_AGE_95LB'] = cs_multiplier * (((np.exp(-(np.exp(((df['RHO_CS'] - 1.96 * df['RHO_CS_SE']) - cs_base) * cs_exp)))) * 0.4794) / 0.4794 * (df['RHO_CS'] - 1.96 * df['RHO_CS_SE']))
df['CS_AGE_95HB'] = cs_multiplier * (((np.exp(-(np.exp(((df['RHO_CS'] + 1.96 * df['RHO_CS_SE']) - cs_base) * cs_exp)))) * 0.4794) / 0.4794 * (df['RHO_CS'] + 1.96 * df['RHO_CS_SE']))

# 定义倍率
multipliers = {
    'RHO_SYN': 7872,
    'RHO_HVSI': 16677,
    'RHO_HVSI_TRANSI': 18845,
    'RHO_HVSII': 22388,
    'RHO_CR': 9058
}

# 循环计算 
for rho_col, multiplier in multipliers.items():
    calculate_ages(df, rho_col, f'{rho_col}_SE', multiplier)

# 生成输出文件
result_columns = [
    'Haplogroup', 'CS_AGE', 'CS_AGE_95LB', 'CS_AGE_95HB',
    'RHO_SYN_AGE', 'RHO_SYN_AGE_95LB', 'RHO_SYN_AGE_95HB',
    'RHO_HVSI_AGE', 'RHO_HVSI_AGE_95LB', 'RHO_HVSI_AGE_95HB',
    'RHO_HVSI_TRANSI_AGE', 'RHO_HVSI_TRANSI_AGE_95LB', 'RHO_HVSI_TRANSI_AGE_95HB',
    'RHO_HVSII_AGE', 'RHO_HVSII_AGE_95LB', 'RHO_HVSII_AGE_95HB',
    'RHO_CR_AGE', 'RHO_CR_AGE_95LB', 'RHO_CR_AGE_95HB'
]
result = df[result_columns]
result.to_csv(output_path, sep='\t', index=False, encoding='UTF-8')

# 打印
print(result)


复制<br><br><br><br>
<br>
<br>Origin and Evolution of Native American mtDNA Variation: A Reappraisal<a href="about:blank#fnref-1-3d0ee807868908f1" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
<br>Correcting for Purifying Selection: An Improved Human Mitochondrial Molecular Clock<a href="about:blank#fnref-2-3d0ee807868908f1" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>软件\python\数据科学与格式转换\ρ方法\python：ρ（rho）方法计算mtdna共同祖先时间.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/ρ方法/python：ρ（rho）方法计算mtDNA共同祖先时间.md</guid><pubDate>Tue, 08 Oct 2024 03:33:49 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[概念]]></title><description><![CDATA[ 
 <br><br>把在一个群体中出现的<br><br>def find_terminal_haplogroups(input_file_path, output_file_path):
    import pandas as pd
    
    # 读取文件并忽略第一行标题
    df = pd.read_csv(input_file_path, sep='\t', header=0)
    
    # 提取所有单倍群
    all_haplogroups = set(df.iloc[:, 0])
    upstream_haplogroups = set(df.iloc[:, 1:].stack())
    
    # 找出末端单倍群（仅在第一列出现的单倍群）
    terminal_haplogroups = all_haplogroups - upstream_haplogroups
    
    # 保存结果
    with open(output_file_path, 'w') as f:
        for haplogroup in terminal_haplogroups:
            f.write(f"{haplogroup}\n")

# 输入和输出文件路径
input_file_path = '逆序等级.txt'
output_file_path = 'terminal_haplogroups.txt'

# 调用函数处理文件
find_terminal_haplogroups(input_file_path, output_file_path)

复制<br><br>]]></description><link>软件\python\数据科学与格式转换\python：查找末端单倍群.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：查找末端单倍群.md</guid><pubDate>Mon, 24 Jun 2024 11:00:29 GMT</pubDate></item><item><title><![CDATA[Python：查找mtDNA上游单倍型（2024年10月23日更新）]]></title><description><![CDATA[ 
 <br>2024年6月更新内容：选定一个级别，可以查询该支系的该级别的单倍群。<br>2024年10月23日更新内容：调整查找逻辑，极大提高速度。
为什么要一行一行去找单倍群呢？首先查重，仅保留一个；查找；还原重复项；完美。
<br>这个脚本的作用是，给定任何一个线粒体单倍型，能够将该单倍型上游的所有单倍型查找出来并放置在一行。<br><br>
<br>请将本文末尾的文件保存为 线粒体单倍群phylotree(version17).txt
<br>请准备好需要查询的文件。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240520171304.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
表不包含标题。
<br><br>import os

# 定义输入、输出文件的路径
BASE_PATH = r'C:/Users/victo/Desktop/'
INPUT_FILE_PATH = os.path.join(BASE_PATH, '需要查询的单倍群.txt')
OUTPUT_FILE_PATH = os.path.join(BASE_PATH, '正序等级.txt')
REVERSED_OUTPUT_FILE_PATH = os.path.join(BASE_PATH, '逆序等级.txt')
NOT_FOUND_FILE_PATH = os.path.join(BASE_PATH, '没有查询到请核实.txt')
HAPLOGROUP_FILE_PATH = os.path.join('F:/OneDrive/文档（科研）/脚本/我的科研脚本/Python/母系专用/线粒体单倍群phylotree(version17).txt')

def parse_haplogroup_file(lines):
    haplogroups = []
    for line in lines:
        stripped_line = line.strip()
        if stripped_line:
            level = line.count('\t')
            haplogroups.append((level, stripped_line))
    return haplogroups

def find_correct_upstream_haplogroups(haplogroup_name, haplogroups):
    upstream_haplogroups = []
    current_haplogroup = None

    for level, haplogroup in reversed(haplogroups):
        if haplogroup == haplogroup_name:
            current_haplogroup = haplogroup
            current_level = level
            upstream_haplogroups.append((level, haplogroup))
        elif current_haplogroup and level &lt; current_level:
            upstream_haplogroups.insert(0, (level, haplogroup))
            current_level = level

    return upstream_haplogroups

def main():
    with open(HAPLOGROUP_FILE_PATH, 'r', encoding='utf-8') as file:
        refined_lines = file.readlines()

    haplogroups = parse_haplogroup_file(refined_lines)

    with open(INPUT_FILE_PATH, 'r', encoding='utf-8') as input_file:
        haplogroup_names = input_file.read().splitlines()

    not_found_haplogroups = []

    with open(OUTPUT_FILE_PATH, 'w', encoding='utf-8') as output_file, \
         open(REVERSED_OUTPUT_FILE_PATH, 'w', encoding='utf-8') as reversed_output_file:
        
        max_level = max(len(find_correct_upstream_haplogroups(name, haplogroups)) for name in haplogroup_names)
        header = [f"Level_{i}" for i in range(max_level)]
        output_file.write("\t".join(header) + "\n")
        reversed_header = [f"Level_{i}" for i in range(max_level-1, -1, -1)]
        reversed_output_file.write("\t".join(reversed_header) + "\n")

        for haplogroup_name in haplogroup_names:
            correct_upstream_haplogroups = find_correct_upstream_haplogroups(haplogroup_name, haplogroups)
            if not correct_upstream_haplogroups:
                not_found_haplogroups.append(haplogroup_name)
                continue

            haplogroup_list = [haplogroup for _, haplogroup in correct_upstream_haplogroups]
            result_line = "\t".join(haplogroup_list) + "\n"
            output_file.write(result_line)
            reversed_result_line = "\t".join(haplogroup_list[::-1]) + "\n"
            reversed_output_file.write(reversed_result_line)

    if not_found_haplogroups:
        with open(NOT_FOUND_FILE_PATH, 'w', encoding='utf-8') as not_found_file:
            for haplogroup_name in not_found_haplogroups:
                not_found_file.write(haplogroup_name + "\n")

if __name__ == "__main__":
    main()
复制<br><br>import os
from concurrent.futures import ProcessPoolExecutor

# 定义输入、输出文件的路径
BASE_PATH = r'C:/Users/victo/Desktop/'
INPUT_FILE_PATH = os.path.join(BASE_PATH, '新建 Text Document.txt')
OUTPUT_FILE_PATH = os.path.join(BASE_PATH, '正序等级.txt')
REVERSED_OUTPUT_FILE_PATH = os.path.join(BASE_PATH, '逆序等级.txt')
NOT_FOUND_FILE_PATH = os.path.join(BASE_PATH, '没有查询到请核实.txt')
HAPLOGROUP_FILE_PATH = os.path.join('F:/OneDrive/文档（科研）/脚本/我的科研脚本/Python/母系专用/线粒体单倍群phylotree(version17)2024年8月19日.txt')

def parse_haplogroup_file(lines):
    haplogroups = []
    for line in lines:
        stripped_line = line.strip()
        if stripped_line:
            level = line.count('\t')
            haplogroups.append((level, stripped_line))
    return haplogroups

def find_correct_upstream_haplogroups(haplogroup_name, haplogroups):
    upstream_haplogroups = []
    current_haplogroup = None

    for level, haplogroup in reversed(haplogroups):
        if haplogroup == haplogroup_name:
            current_haplogroup = haplogroup
            current_level = level
            upstream_haplogroups.append((level, haplogroup))
        elif current_haplogroup and level &lt; current_level:
            upstream_haplogroups.insert(0, (level, haplogroup))
            current_level = level

    return upstream_haplogroups

def process_haplogroup(haplogroup_name, haplogroups):
    correct_upstream_haplogroups = find_correct_upstream_haplogroups(haplogroup_name, haplogroups)
    if not correct_upstream_haplogroups:
        return haplogroup_name, None, None

    haplogroup_list = [haplogroup for _, haplogroup in correct_upstream_haplogroups]
    result_line = "\t".join(haplogroup_list)
    reversed_result_line = "\t".join(haplogroup_list[::-1])
    return haplogroup_name, result_line, reversed_result_line

# 将 haplogroups 作为参数传递
def process_wrapper(args):
    haplogroup_name, haplogroups = args
    return process_haplogroup(haplogroup_name, haplogroups)

def main():
    # 读取单倍群文件
    with open(HAPLOGROUP_FILE_PATH, 'r', encoding='utf-8') as file:
        refined_lines = file.readlines()

    haplogroups = parse_haplogroup_file(refined_lines)

    # 读取输入文件中的单倍群名称并去重
    with open(INPUT_FILE_PATH, 'r', encoding='utf-8') as input_file:
        haplogroup_names = input_file.read().splitlines()

    # 去重处理，只保留一个重复值
    unique_haplogroup_names = list(set(haplogroup_names))

    # 准备要传递给进程的参数 (haplogroup_name, haplogroups)
    args = [(name, haplogroups) for name in unique_haplogroup_names]

    # 用进程池并行处理每个单倍群名称
    with ProcessPoolExecutor(max_workers=os.cpu_count()) as executor:
        results = list(executor.map(process_wrapper, args))

    # 构建一个哈希表，用于快速查找处理结果
    results_dict = {name: (result_line, reversed_result_line) for name, result_line, reversed_result_line in results}

    not_found_haplogroups = [name for name, result_line, _ in results if result_line is None]

    # 写入正序和逆序文件
    with open(OUTPUT_FILE_PATH, 'w', encoding='utf-8') as output_file, \
         open(REVERSED_OUTPUT_FILE_PATH, 'w', encoding='utf-8') as reversed_output_file:

        # 先获取最大层级数量
        max_level = max(len(find_correct_upstream_haplogroups(name, haplogroups)) for name, result_line, _ in results if result_line)

        # 写入表头
        header = [f"Level_{i}" for i in range(max_level)]
        output_file.write("\t".join(header) + "\n")
        reversed_header = [f"Level_{i}" for i in range(max_level-1, -1, -1)]
        reversed_output_file.write("\t".join(reversed_header) + "\n")

        # 遍历原始文件的每一行，按照去重前的顺序写入对应结果
        for haplogroup_name in haplogroup_names:
            if haplogroup_name in results_dict:
                result_line, reversed_result_line = results_dict[haplogroup_name]
                if result_line:
                    output_file.write(result_line + "\n")
                    reversed_output_file.write(reversed_result_line + "\n")
            else:
                not_found_haplogroups.append(haplogroup_name)

    # 写入没有查询到的单倍群
    if not_found_haplogroups:
        with open(NOT_FOUND_FILE_PATH, 'w', encoding='utf-8') as not_found_file:
            for haplogroup_name in set(not_found_haplogroups):
                not_found_file.write(haplogroup_name + "\n")

if __name__ == "__main__":
    main()

复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240520171444.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>点击这里下载发育树文件： <a rel="noopener nofollow" class="external-link" href="https://vip.123pan.cn/1835545223/9626446" target="_blank">https://vip.123pan.cn/1835545223/9626446</a><br>
当然，你也可以自己按照这个要求进行制作：<a data-href="python：phylotree多余信息删除" href="软件\python\数据科学与格式转换\python：phylotree多余信息删除.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：phylotree多余信息删除</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">。]]></description><link>软件\python\数据科学与格式转换\python：查找mtdna上游单倍型（2024年10月23日更新）.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/Python：查找mtDNA上游单倍型（2024年10月23日更新）.md</guid><pubDate>Wed, 23 Oct 2024 07:35:54 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[差异性单倍群]]></title><description><![CDATA[ 
 <br><br>不同的群体中，同一种单倍群可能有不同的频率。例如四川的汉族和苗族之间，M7单倍群的频率可能不同。这代表了群体的遗传结构的差异。<br><br>公式很简单：<br><br><br><br>需要准备2个文件：这2个文件可以从这里获得：<a data-href="python：绘制差异性单倍群的曼哈顿图" href="软件\python\数据科学与格式转换\python：绘制差异性单倍群的曼哈顿图.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：绘制差异性单倍群的曼哈顿图</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;"><br>
<br>Category_totals.txt：每个群体的总数量。<br>
例如：
<br>Manchu	5356
Mongolian	3399
Kazak	494
复制<br>
<br>Haplogroup_counts.txt 每个单倍群在每个群体的数量。<br>
例如：
<br>    Manchu  Kazak   Mongolian
A   432 31  271
A1  166 11  131
A10 1   0   1
A11 15  0   6
A11b    2   0   0
A12a    0   0   2
复制<br><br>import pandas as pd
from scipy.stats import chi2_contingency, fisher_exact

# 读取数据
data = pd.read_csv('/Haplogroup_counts.txt', sep='\t')

# 从Category_totals.txt中读取总和数据
category_totals = pd.read_csv('/Category_totals.txt', sep='\t', header=None, index_col=0)
category_totals.columns = ['Total']

# 提供列名供用户选择
columns = data.columns[1:]  # 排除第一列（单倍群名称）

# 显示可选列名
print("可用的列名如下：")
for i, col in enumerate(columns, start=1):
    print(f"{i}: {col}")

# 交互式选择列
col1_index = int(input("请选择第一列的编号：")) - 1
col2_index = int(input("请选择第二列的编号：")) - 1

col1_name = columns[col1_index]
col2_name = columns[col2_index]

# 获取外部总和数据
total_col1 = category_totals.loc[col1_name, 'Total']
total_col2 = category_totals.loc[col2_name, 'Total']

# 计算每个单倍群在所选群体中的频率
data[f'{col1_name}_freq'] = data[col1_name] / total_col1
data[f'{col2_name}_freq'] = data[col2_name] / total_col2

# 计算频率差异
data['freq_diff'] = abs(data[f'{col1_name}_freq'] - data[f'{col2_name}_freq'])

# 找出频率差异最大的前十个单倍群
rank_number = int(input("请输入需要计算的前几名差异单倍群：（例如输入10）"))
top_10_diff = data.nlargest(rank_number, 'freq_diff')

# 进行卡方检验
top_10_diff['chi2_p_value'] = top_10_diff.apply(
    lambda row: chi2_contingency([[row[col1_name], total_col1 - row[col1_name]], 
                                  [row[col2_name], total_col2 - row[col2_name]]])[1],
    axis=1
)

# 进行Fisher精确检验
top_10_diff['fisher_p_value'] = top_10_diff.apply(
    lambda row: fisher_exact([[row[col1_name], total_col1 - row[col1_name]], 
                              [row[col2_name], total_col2 - row[col2_name]]])[1],
    axis=1
)

# 保存结果至桌面的TXT文件
output_path = '/haplogroup_difference_result.txt'
top_10_diff.to_csv(output_path, sep='\t', index=False)

print(f"结果已保存至 {output_path}")

复制<br><br>将其整理为三线表：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408241546067.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\数据科学与格式转换\python：差异性单倍群统计学检验.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：差异性单倍群统计学检验.md</guid><pubDate>Sat, 24 Aug 2024 07:46:29 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[python：多个fasta、txt合并为一个]]></title><description><![CDATA[ 
 <br>这个脚本已经弃用！
更好的办法建议使用 TBtools 软件！
<br>这个脚本是把多个 fasta 合并为一个  fasta。<br>from Bio import SeqIO
import os

def merge_fasta_files(input_dir, output_file):
    """
    Merge multiple FASTA files from a specified directory into a single FASTA file, remove duplicates using BioPython,
    and print the number of unique sequences in the new fasta file.

    :param input_dir: Directory containing the input FASTA files.
    :param output_file: Path to the output file where the merged and deduplicated FASTA will be saved.
    """
    unique_sequences = {}
    for filename in os.listdir(input_dir):
        if filename.endswith('.fasta') or filename.endswith('.fa'):
            file_path = os.path.join(input_dir, filename)
            # Use BioPython to parse the fasta files
            for record in SeqIO.parse(file_path, "fasta"):
                # Use sequence as key to avoid duplicates
                if record.seq not in unique_sequences:
                    unique_sequences[record.seq] = record.description

    # Write deduplicated sequences to the output file
    with open(output_file, 'w') as outfile:
        for seq, desc in unique_sequences.items():
            SeqIO.write(SeqIO.SeqRecord(seq, id=desc, description=""), outfile, "fasta")

    # Print the number of unique sequences saved
    print("Number of unique sequences in the merged file:", len(unique_sequences))

if __name__ == "__main__":
    input_directory = "C:/Users/a/Desktop"  # Replace with your input directory
    output_filename = "C:/Users/a/Desktop/10K_UNIQ"  # Enter your output file path
    merge_fasta_files(input_directory, output_filename)

复制<br>import os

# 定义文件夹路径
directory = '/home/luolintao/Haplogrep/outcome'

# 定义输出文件路径
output_file = '/home/luolintao/Haplogrep/merged_output.txt'

# 收集所有txt文件
files = [os.path.join(directory, f) for f in os.listdir(directory) if f.endswith('.txt')]

# 合并文件
with open(output_file, 'w') as outfile:
    for i, file_path in enumerate(files):
        with open(file_path, 'r') as infile:
            if i == 0:
                # 对于第一个文件，保留标题行
                outfile.write(infile.read())
            else:
                # 从后续文件中跳过标题行
                next(infile)
                outfile.write(infile.read())

复制]]></description><link>软件\python\数据科学与格式转换\python：多个fasta、txt合并为一个.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：多个fasta、txt合并为一个.md</guid><pubDate>Fri, 23 Aug 2024 08:23:42 GMT</pubDate></item><item><title><![CDATA[输入文件]]></title><description><![CDATA[ 
 <br><br>你需要准备2个表格，第一个是mtDNA 单倍群的共享表格，第二个是Y 单倍群的共享表格，顺序不重要。<br>如何计算共享单倍群？
看这里：<a data-href="python：根据共享单倍群频率绘制人群柱状图" href="软件\python\数据科学与格式转换\python：根据共享单倍群频率绘制人群柱状图.html" class="internal-link" target="_self" rel="noopener nofollow">python：根据共享单倍群频率绘制人群柱状图</a>，<a data-href="python：根据共享单倍群频率绘制人群热图" href="软件\python\数据科学与格式转换\python：根据共享单倍群频率绘制人群热图.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：根据共享单倍群频率绘制人群热图</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">。
<br>如图所示：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410121115505.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.colors import LinearSegmentedColormap

# 设置plt.rcParams以确保输出为矢量图格式并且字体为 Arial
plt.rcParams['pdf.fonttype'] = 42
plt.rcParams['ps.fonttype'] = 42
plt.rcParams['font.family'] = 'Arial'  # 统一设置字体为Arial

# 第一步：加载第一个文件（用实际文件路径替换）
first_file_path = 'C:/Users/victo/Desktop/新建 Text Document.txt'
df = pd.read_csv(first_file_path, sep='\t', index_col=0)
df = df.apply(pd.to_numeric, errors='coerce')  # 将所有值转换为数值类型，无法转换的变为NaN

# 第二步：加载第二个文件（用实际文件路径替换）
second_file_path = 'C:/Users/victo/Desktop/新建 Text Document (2).txt'
second_df = pd.read_csv(second_file_path, sep='\t', index_col=0)
second_df = second_df.apply(pd.to_numeric, errors='coerce')

# 第三步：确保两个DataFrame（数据表）对齐，以避免索引和列错位
aligned_second_df = second_df.reindex(index=df.index, columns=df.columns)

# 第四步：创建上三角掩码和下三角掩码（包括对角线）
upper_tri_mask = np.triu(np.ones_like(df, dtype=bool))  # 上三角掩码
lower_tri_mask = np.tril(np.ones_like(aligned_second_df, dtype=bool))  # 下三角掩码

# 第五步：将两个矩阵合并
# - 使用第一个DataFrame的上三角（包括对角线）
# - 使用对齐后的第二个DataFrame的下三角（包括对角线）
combined_matrix_aligned = df.where(upper_tri_mask, aligned_second_df)

# 第六步：创建具有100种渐变颜色的自定义颜色映射
colors = ["#20364F", "#31646C", "#4E9280", "#96B89B", "#EEEFFF", "#ECD9CF", 
          "#D49C87", "#B86265", "#8B345E", "#50184E"]  # 基础颜色列表
n_colors = 100  # 颜色渐变的总数量

# 使用LinearSegmentedColormap生成颜色渐变映射
cmap = LinearSegmentedColormap.from_list("custom_cmap", colors, N=n_colors)

# 第七步：绘制组合后的热图，并调整纵横比和标签间距
plt.figure(figsize=(14, 12))  # 设置图形尺寸，使间距更大
ax = sns.heatmap(combined_matrix_aligned, cmap=cmap, annot=False, cbar=True, square=False)  # 绘制热图

# 将X轴移动到右侧
ax.xaxis.set_ticks_position('top')
ax.xaxis.set_label_position('top')

# 将Y轴保留在左侧
ax.yaxis.set_ticks_position('left')
ax.yaxis.set_label_position('left')

# 调整标签的间距和方向
plt.xticks(rotation=90, ha='left', fontsize=10)  # X轴标签
plt.yticks(rotation=0, fontsize=10)  # Y轴标签

# 设置图形标题和标签
plt.title('Sharing haplogroups of mtDNA and ChrY', fontsize=14)  # 设置图标题，字体大小14
plt.xlabel('', fontsize=12)  # X轴标签
plt.ylabel('', fontsize=12)  # Y轴标签
plt.tight_layout(pad=2.0)  # 调整布局，增加一些间距，防止标签重叠

# 显示图形
plt.show()

复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410121119530.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>为什么不使用聚类？
你猜。
]]></description><link>软件\python\数据科学与格式转换\python：父系母系共享单倍群.py.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：父系母系共享单倍群.py.md</guid><pubDate>Sat, 12 Oct 2024 03:19:11 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[准备文件]]></title><description><![CDATA[ 
 <br>你可以在这里找到具体的参数设置向导： <a rel="noopener nofollow" class="external-link" href="https://scikit-learn.org.cn/view" target="_blank">https://scikit-learn.org.cn/view</a><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404252118650.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
频率代表每个群体的不同单倍群占这个群体中的比例。<br><br>import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE, Isomap, LocallyLinearEmbedding
import plotly.express as px

# 加载数据
file_path = 'C:/Users/victo/Desktop/PCA.csv'
data = pd.read_csv(file_path)
pca_data = data.drop(columns=data.columns[0])

# 执行PCA
pca = PCA(n_components=2)
pca_results = pca.fit_transform(pca_data.T)  # T表示转置
explained_variance_ratio = pca.explained_variance_ratio_

with open('C:/Users/victo/Desktop/PCA降维结果解释度.txt', 'w') as f:
    # 将解释度写入文件
    f.write('Explained Variance Ratio:\n')
    for i, ratio in enumerate(explained_variance_ratio):
        f.write(f'Component {i+1}: {ratio:.4f}\n')
        f.write('\n')

# 生成PCA结果的txt文件
pca_results_df = pd.DataFrame({
    'Sample Name': pca_data.columns,
    'PC1': pca_results[:, 0],
    'PC2': pca_results[:, 1]
})
pca_results_df.to_csv('C:/Users/victo/Desktop/PCA结果.txt', sep='\t', index=False)

# 执行t-SNE
tsne = TSNE(n_components=2, perplexity=30, learning_rate=200, random_state=42)
tsne_results = tsne.fit_transform(pca_data.T)

# 执行Isomap
isomap = Isomap(n_components=2, n_neighbors=5)
isomap_results = isomap.fit_transform(pca_data.T)

# 执行LLE
lle = LocallyLinearEmbedding(n_components=2, n_neighbors=10, method='standard')
lle_results = lle.fit_transform(pca_data.T)

# 准备结果数据
results_df = pd.DataFrame({
    'PCA1': pca_results[:, 0],
    'PCA2': pca_results[:, 1],
    't-SNE1': tsne_results[:, 0],
    't-SNE2': tsne_results[:, 1],
    'Isomap1': isomap_results[:, 0],
    'Isomap2': isomap_results[:, 1],
    'LLE1': lle_results[:, 0],
    'LLE2': lle_results[:, 1],
    'Ethnic Group': pca_data.columns
})

# 静态可视化
# plt.figure(figsize=(24, 12))
# for i, (label, comp1, comp2) in enumerate(zip(['PCA', 't-SNE', 'Isomap', 'LLE'], 
#                                               ['PCA1', 't-SNE1', 'Isomap1', 'LLE1'], 
#                                               ['PCA2', 't-SNE2', 'Isomap2', 'LLE2'])):
#     plt.subplot(2, 2, i+1)
#     sns.scatterplot(x=comp1, y=comp2, hue='Ethnic Group', data=results_df, palette='viridis')
#     plt.title(f'{label} Visualization of Ethnic Groups')
#     plt.xlabel(f'{label} 1')
#     plt.ylabel(f'{label} 2')
#     plt.legend([],[], frameon=False)  # 隐藏图例以节省空间

# plt.tight_layout()
# plt.show()

# Plotly可视化
def plot_with_plotly(data):
    fig = px.scatter_matrix(
        data,
        dimensions=['PCA1', 't-SNE1', 'Isomap1', 'LLE1', 'PCA2', 't-SNE2', 'Isomap2', 'LLE2'],
        color='Ethnic Group',
        labels={col: col for col in data.columns},
        width=3000,  # 调整宽度
        height=2500  # 调整高度
    )
    fig.update_layout(
        legend=dict(orientation='h', y=1.02, x=1, xanchor='right', yanchor='bottom')
    )
    fig.show()

plot_with_plotly(results_df)

复制]]></description><link>软件\python\数据科学与格式转换\python：根据单倍群频率使用sklearn进行降维大礼包.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：根据单倍群频率使用sklearn进行降维大礼包.md</guid><pubDate>Fri, 23 Aug 2024 08:38:44 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[原理]]></title><description><![CDATA[ 
 <br>文献出处是 <a data-href="早期南岛人：进出台湾" href="文献及报道\文献\2023年阅读\早期南岛人：进出台湾.html" class="internal-link" target="_self" rel="noopener nofollow">早期南岛人：进出台湾</a>。可以根据单倍群频率分布来计算不同群体之间的亲缘关系，类似于 <a data-href="种群配对Fst值（Population pairwise Fst values）" href="术语\种群配对fst值（population-pairwise-fst-values）.html" class="internal-link" target="_self" rel="noopener nofollow">种群配对Fst值（Population pairwise Fst values）</a>。<br><br>我们通过识别共有单倍群的方法来比较不同人群的遗传关系。我们通过成对矩阵的方式，把成对人群共享单倍群的最小频率数值视为该两个人群的共享单倍群值。而这两个人群非共享单倍群的值，即某一单倍群在成对比较中该人群有但是另个一人群没有的单倍群，视为独有单倍群频率。每个人群共享、非共享单倍群的值都除以总计数，从而归一化数据。据此得到的共享单倍群数值来衡量人群之间的基因相似性的程度。<br><br>以 csv 文件准备每个 群体 中的单倍型的分布频率。<br>,Ami,Atayal,Bunun,Paiwan,Puyuma,Rukai,Saisiat,Tsou
A5b1,10,4,2,2,2.6,4,4.2,8.3
B4a1a,0,0,0,8,0.0,0,0.0,0.0
B4a1a3,12,0,0,24,0.0,4,0.0,0.0
B4a2a,0,0,0,0,0.0,0,0.0,0.0
B4b1a2,8,2,34,8,0.0,8,16.7,10.4
B5a2a,2,0,12,0,0.0,0,0.0,2.1
C7a,0,0,0,4,0.0,0,0.0,0.0
D4a,0,0,0,0,0.0,0,0.0,2.1
D4i,8,2,2,12,2.6,2,12.5,4.2
D5a2,0,0,0,0,0.0,0,0.0,0.0
D5b,0,0,0,0,0.0,48,0.0,0.0
D5b1c1,0,4,0,0,2.6,0,0.0,0.0
D6a2,10,0,4,0,5.1,0,0.0,0.0
E1a,0,2,0,0,0.0,0,0.0,0.0
E1a1,4,6,0,0,0.0,0,0.0,0.0
E1a1a,0,0,0,0,0.0,0,0.0,0.0
E1a1a2,2,8,2,2,20.5,2,4.2,2.1
E2b1,0,0,0,0,0,0,0.0,0.0
F1a1d,0,0,4,2,7.7,0,0.0,8.3
F1a3,0,0,4,0,17.9,2,0.0,8.3
F1a3a,0,0,0,0,0.0,0,0.0,0.0
F1a4a1,2,22,2,2,28.2,20,12.5,10.4
F2,2,0,8,0,0.0,0,0.0,4.2
F3b1,0,0,0,12,0.0,0,0.0,0.0
F4b,2,0,18,0,0.0,0,0.0,2.1
M7b3a,4,40,4,10,2.6,6,37.5,10.4
M7c'e'f,0,0,0,0,0.0,0,0.0,0.0
M7c1,8,0,0,0,0.0,0,0.0,0.0
M7c3a,0,0,0,0,0.0,0,0.0,0.0
M7c3b,2,6,2,2,7.7,0,8.3,4.2
M7c3c,0,0,0,12,0.0,0,0.0,0.0
M8a2,2,0,0,0,0.0,0,0.0,0.0
R9c1a,0,4,2,0,2.6,4,4.2,22.9
复制<br><br># 导入所需的库
# 导入所需的库
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# 载入数据，数据为CSV格式，编码为UTF-8
file_path = '人群单倍群频率分布.csv' # 数据文件路径
save_path = '频率表归一化.csv' # 保存文件路径
data = pd.read_csv(file_path, encoding='utf-8') 

# 将单倍群列设置为DataFrame的索引
data.set_index('Unnamed: 0', inplace=True)

# 在这里进行归一化处理，使得每一列的总和不是1而是100
data = data * 100 / data.sum()

# 定义计算共享单倍群矩阵的函数
def calculate_shared_haplogroups_matrix(haplogroups_data):
    # 获取人群数量
    n_populations = haplogroups_data.shape[1]
    # 初始化共享单倍群矩阵，初始值为0
    shared_haplogroups_matrix = np.zeros((n_populations, n_populations))
    
    # 获取人群名称列表
    populations = haplogroups_data.columns
    for i in range(n_populations):
        for j in range(i + 1, n_populations):
            # 计算两个人群之间共享单倍群的最小频率值
            shared_haplogroups = np.minimum(haplogroups_data[populations[i]], haplogroups_data[populations[j]])
            # 注意这里我们不需要再次归一化shared_haplogroups的值，因为它已经根据前面的要求进行了调整
            shared_value = np.sum(shared_haplogroups)
            shared_haplogroups_matrix[i, j] = shared_value
            shared_haplogroups_matrix[j, i] = shared_value
    
    # 将对角线的值设置为100，因为每个人群与自己的共享单倍群值是最大的，并且我们想让它反映出100倍的增加
    np.fill_diagonal(shared_haplogroups_matrix, 100)
    
    # 返回一个新的DataFrame，其索引和列都是人群名称
    return pd.DataFrame(shared_haplogroups_matrix, index=populations, columns=populations)

# 使用函数计算共享单倍群矩阵
shared_matrix = calculate_shared_haplogroups_matrix(data)

# 输出计算得到的共享单倍群矩阵
shared_matrix.to_csv(save_path, encoding='utf-8')
print('共享单倍群矩阵已经保存')

# 读取保存的文件并绘制热图
df = pd.read_csv(save_path, encoding='utf-8', index_col=0)

sns.heatmap(df, cmap='YlGnBu')
plt.show()


复制<br>根据上述的代码可以得到矩阵：<br>,Ami,Atayal,Bunun,Paiwan,Puyuma,Rukai,Saisiat,Tsou
Ami,1.0,0.12359550561797752,0.1797752808988764,0.2247191011235955,0.10612015721504772,0.14606741573033707,0.16956765861875348,0.2050561797752809
Atayal,0.12359550561797752,1.0,0.09,0.11,0.24187906046976512,0.2,0.3608195902048975,0.1955
Bunun,0.1797752808988764,0.09,1.0,0.12,0.13293353323338333,0.12,0.1634182908545727,0.214
Paiwan,0.2247191011235955,0.11,0.12,1.0,0.07596201899050474,0.13,0.18990504747626186,0.161
Puyuma,0.10612015721504772,0.24187906046976512,0.13293353323338333,0.07596201899050474,1.0,0.16891554222888555,0.17382617382617385,0.21539230384807598
Rukai,0.14606741573033707,0.2,0.12,0.13,0.16891554222888555,1.0,0.1924037981009495,0.192
Saisiat,0.16956765861875348,0.3608195902048975,0.1634182908545727,0.18990504747626186,0.17382617382617385,0.1924037981009495,1.0,0.25037481259370314
Tsou,0.2050561797752809,0.1955,0.214,0.161,0.21539230384807598,0.192,0.25037481259370314,1.0
复制<br><br>随便找个网站或者 R 代码也可以可视化。具体可看 <a data-href="R：Fst绘制频率热图矩阵" href="软件\r语言语法\r：fst绘制频率热图矩阵.html" class="internal-link" target="_self" rel="noopener nofollow">R：Fst绘制频率热图矩阵</a>。<br>
<img alt="Figure_1.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403262141478.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>
Figure X. Pairwise matrix showing the proportion of shared haplogroups between different populations. The matrix is calculated by identifying the minimum count of shared haplogroups between each pair of populations. Each cell in the matrix represents the amount of haplogroups shared between the two populations indicated by the corresponding row and column. Diagonal elements (self-comparisons) are excluded or set to zero. Higher values in the matrix indicate greater genetic similarity in terms of shared haplogroups, while lower values indicate fewer haplogroups in common. Non-shared haplogroups, specific to one population, are not represented in this matrix. The color gradient (or numerical values) illustrates the degree of sharing across populations.
<br><br>通过观察矩阵中数值的整体分布，可以识别出共享单倍群的普遍趋势。数值较高的区域意味着这些人群之间有更多的遗传相似性，反之则说明遗传差异较大。<br>一个需要注意的问题是共享单倍群的计算基于单倍群，而非序列。这在很大程度上受限于对单倍群的定义。
不建议生成聚类树（结果难以解释）。<br>
建议将共享单倍群矩阵和柱状图联合起来进行解释和解读。重点在于柱状图。<a data-href="python：根据共享单倍群频率绘制人群柱状图" href="软件\python\数据科学与格式转换\python：根据共享单倍群频率绘制人群柱状图.html" class="internal-link" target="_self" rel="noopener nofollow">python：根据共享单倍群频率绘制人群柱状图</a>。
]]></description><link>软件\python\数据科学与格式转换\python：根据共享单倍群频率绘制人群热图.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：根据共享单倍群频率绘制人群热图.md</guid><pubDate>Tue, 15 Oct 2024 02:37:34 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[方法一（简单粗暴）]]></title><description><![CDATA[ 
 <br><br>在进行这个教程之前请先完成这个： <a data-href="python：根据共享单倍群频率绘制人群热图" href="软件\python\数据科学与格式转换\python：根据共享单倍群频率绘制人群热图.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：根据共享单倍群频率绘制人群热图</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">。得到的数据文件是我们这一步需要的输入文件。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240616143341.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
不明白的可以看<a data-href="python：根据共享单倍群频率绘制人群热图" href="软件\python\数据科学与格式转换\python：根据共享单倍群频率绘制人群热图.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：根据共享单倍群频率绘制人群热图</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">。<br><br>import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go

# Step 1: Load the CSV file
file_path = '共享.csv'  # Replace with your actual file path
data = pd.read_csv(file_path)

# Step 2: Remove the diagonal elements by setting them to zero
data_without_self = data.copy()
for index in data.index:
    group = data.loc[index, 'Unnamed: 0']
    data_without_self.loc[index, group] = 0

# Step 3: Normalize the data for each group
normalized_data = data_without_self.copy()
categories = data.columns[1:]  # Define the categories
for index in normalized_data.index:
    total = normalized_data.loc[index, categories].sum()
    for category in categories:
        normalized_data.loc[index, category] = normalized_data.loc[index, category] / total

# Step 4: Define the color palette
base_colors = ['#EA1F1F', '#E88421', '#E5C923', '#FFF924', '#9DEF1B', '#42D726', '#449657', '#4CCCB3', '#369BA8', '#2B7EBC', '#3626D1', '#A128CE', '#999999']
num_categories = len(categories)

if num_categories &gt; len(base_colors):
    cmap = plt.get_cmap('tab20', num_categories)  # Use 'tab20' colormap to generate more colors
    colors = [cmap(i) for i in range(num_categories)]
    colors = [f'#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}' for r, g, b, _ in colors]  # Convert to hex
else:
    colors = base_colors

# Step 5: Plot the normalized stacked bar chart with specified colors using Matplotlib
fig, ax = plt.subplots(figsize=(10, 6))
bottom = np.zeros(len(normalized_data))
for i, category in enumerate(categories):
    ax.bar(normalized_data['Unnamed: 0'], normalized_data[category], bottom=bottom, label=category, color=colors[i % len(colors)])
    bottom += normalized_data[category].values
ax.set_xlabel('Group')
ax.set_ylabel('Proportion')
ax.set_title('Normalized Comparison of Group Composition')
ax.legend(title='Group', bbox_to_anchor=(1.05, 1), loc='upper left')
ax.grid(False)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Step 6: Plot the normalized stacked bar chart with specified colors using Plotly
# fig = go.Figure()

# for i, category in enumerate(categories):
#     fig.add_trace(go.Bar(
#         x=normalized_data['Unnamed: 0'],
#         y=normalized_data[category],
#         name=category,
#         marker_color=colors[i % len(colors)]
#     ))

# fig.update_layout(
#     barmode='stack',
#     xaxis_title='Group',
#     yaxis_title='Proportion',
#     title='Normalized Comparison of Group Composition',
#     legend_title='Group'
# )

# fig.show()

复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240616143556.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br>通过 NETWORK 分析（例如<a data-href="中值连接网络（Median-Joining Network，MJN）" href="术语\中值连接网络（median-joining-network，mjn）.html" class="internal-link" target="_self" rel="noopener nofollow">中值连接网络（Median-Joining Network，MJN）</a> ），基于西藏个体在网络中的位置，对西藏样本中的所有单倍型进行了分类。设定了一个标准：如果某一单倍型的西藏个体位于独立的分支上、形成一个聚类（cluster），并且这个聚类中的西藏个体占到75%以上，则该单倍型被视为“西藏相关单倍型”。这种单倍型代表了一些和西藏人群有特定联系的遗传特征<a data-footref="1" href="about:blank#fn-1-3d0ee807868908f1" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>。<br>
这就很头痛，不能用一次性的代码进行解决。所以，只能自己手算。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410151040667.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
Haplogroup sharing analysis among ancient Tibet groups, Nepal and Pakistan.
<br><br><br>
<br>
<br>Maternal genetic history of ancient Tibetans over the past 4,000&nbsp;years<a href="about:blank#fnref-1-3d0ee807868908f1" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>软件\python\数据科学与格式转换\python：根据共享单倍群频率绘制人群柱状图.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：根据共享单倍群频率绘制人群柱状图.md</guid><pubDate>Tue, 15 Oct 2024 02:41:07 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br><a data-href="2019 MBE 河流流域塑造了汉族的母系遗传景观" href="文献及报道\文献\2024年阅读\1-6月\2019-mbe-河流流域塑造了汉族的母系遗传景观.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="😀" aria-label="😀" data-icon="😀" aria-hidden="true" style="transform: translateY(0px);"></span>2019 MBE 河流流域塑造了汉族的母系遗传景观</a><img class="emoji" draggable="false" alt="😀" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f600.svg" height="18px" style="max-width: 100%;">文献提到的单倍群频率分布并未直接使用数据本身，而是经过了 z-score 转化。如图所示：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408131741293.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408131742224.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>import pandas as pd
from scipy.stats import zscore

# Load the data from the file
file_path = '新建 Text Document.txt'
data = pd.read_csv(file_path, sep='\t', index_col=0)

# Transpose the matrix
data_transposed = data.transpose()

# Calculate the z-score for each column
z_scores = data_transposed.apply(zscore, axis=0)
z_scores_transposed = z_scores.transpose()
z_scores_transposed.index.name = 'population'
# Define the output path
output_path = 'Z-score_Data.txt'

# Save the z-score data to a text file
z_scores_transposed.to_csv(output_path, sep='\t')

print(f"Z-scores saved to {output_path}")
复制<br><br>得到 Z-score_Data.txt 之后，可以使用 <a data-href="R：Fst绘制频率热图矩阵" href="软件\r语言语法\r：fst绘制频率热图矩阵.html" class="internal-link" target="_self" rel="noopener nofollow">R：Fst绘制频率热图矩阵</a>进行可视化。效果基本如文献中所示。]]></description><link>软件\python\数据科学与格式转换\python：根据频数求z-score.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：根据频数求z-score.md</guid><pubDate>Sun, 29 Sep 2024 09:00:37 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f62e-200d-1f4a8.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f62e-200d-1f4a8.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br><a data-href="种群配对Fst值（Population pairwise Fst values）" href="术语\种群配对fst值（population-pairwise-fst-values）.html" class="internal-link" target="_self" rel="noopener nofollow">种群配对Fst值（Population pairwise Fst values）</a>是一个衡量种群间遗传差异的指标。
具体可看<a data-href="种群配对Fst值（Population pairwise Fst values）" href="术语\种群配对fst值（population-pairwise-fst-values）.html" class="internal-link" target="_self" rel="noopener nofollow">种群配对Fst值（Population pairwise Fst values）</a><br>
我们可以通过人群的序列来计算 Fst，之前的操作可以看 <a data-href="python：将FASTA转换成Arp" href="软件\python\数据科学与格式转换\python：将fasta转换成arp.html" class="internal-link" target="_self" rel="noopener nofollow">python：将FASTA转换成Arp</a>
<br>当我们缺少序列信息，只有单倍群信息的时候也可以计算 Fst，具体操作如下。<br><br>准备一个 txt 文件，第一列是 单倍群的名称，第二列是 样本的名称。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410232037017.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>注意，标题必须是 haplogroup 和 name！<br>haplogroup	name
A	Kazak_Xinjiang
A	Kazak_Xinjiang
A	Kazak_Xinjiang
A	Kazak_Xinjiang
A	Kazak_Xinjiang
A	Manchu_Hebei
A	Manchu_Beijing
复制<br><br>import pandas as pd

# 载入数据
file_path = '新建 Text Document.txt'
output_arp_file_path = 'mtDNA.arp'
data = pd.read_csv(file_path, delimiter='\t')

# Step 1: 为单倍群创建字典
unique_haplogroups = data['haplogroup'].unique()
hapl_dict = {haplogroup: idx + 1 for idx, haplogroup in enumerate(unique_haplogroups)}

# Step 2: 计算单倍群在人群中的出现频率
grouped_data = data.groupby(['name', 'haplogroup']).size().reset_index(name='count')

# Step 3: 生成样本频率文件
samples_file_content = ""
for group_name in grouped_data['name'].unique():
    group_data = grouped_data[grouped_data['name'] == group_name]
    sample_size = group_data['count'].sum()
    samples_block = f"\n\n\tSampleName=\"{group_name}\"\n\tSampleSize={sample_size}\n\tSampleData= {{\n"
    
    for haplogroup, idx in hapl_dict.items():
        count = group_data[group_data['haplogroup'] == haplogroup]['count'].sum()
        frequency = count / sample_size if sample_size &gt; 0 else 0
        samples_block += f"\t\t{idx}\t{frequency:.6f}\n"
    
    samples_block += "\t}\n"
    samples_file_content += samples_block

# Step 4: 生成ARP文件头部内容
nb_samples = len(grouped_data['name'].unique())
profile_content = f"""[Profile]

    Title="The population fixation index(Fst) of mtDNA"

    NbSamples={nb_samples}
    DataType=FREQUENCY
    GenotypicData=0
    LocusSeparator=' '
    MissingData="? "
    Frequency= REL
"""

# Step 5: 生成单倍群定义部分
hapl_list_content = "\n".join([f"{idx}\t{haplogroup}" for haplogroup, idx in hapl_dict.items()])

# Step 6: 合并所有内容为最终的mtDNA.arp文件
combined_content = f'''{profile_content}\n
[Data]\n
[HaplotypeDefinition]\n
\tHaplList={{\n{hapl_list_content}}}\n
[Samples]\n{samples_file_content}'''

# Step 7: 写入最终的ARP文件
with open(output_arp_file_path, 'w') as example_arp_file:
    example_arp_file.write(combined_content)
复制<br><br>输出的是一个 arp 文件，内容大致如下所示：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410232040636.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>我们使用 Arlequin 软件：<br>
其中距离选项可以勾选也可以不勾选，勾选了会额外计算，不勾选能节约时间。<br>
permutation 次数一般默认即可。显著性水平一般认为0.05为阈值。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410232041633.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\数据科学与格式转换\python：根据人群单倍群频率生成arp文件计算fst.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/Python：根据人群单倍群频率生成arp文件计算Fst.md</guid><pubDate>Wed, 23 Oct 2024 12:45:44 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410232037017.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410232037017.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br>饼图反应的是一个整体内部各成分的比例。<br><br>第一列是成分，第二列是类别。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407042146225.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from matplotlib import rcParams

# Load the dataset
file_path = '10K数据集.csv'
data = pd.read_csv(file_path)

# Filter the data for Macro == 'M'
filtered_data = data[data['Macro'] == 'N']

# Count the occurrences of each Haplogroup
haplogroup_counts = filtered_data['Haplogroup'].value_counts()

# Get the top 50 Haplogroups
top_50_haplogroups = haplogroup_counts.head(50)

# Sum the counts of the remaining Haplogroups
other_count = haplogroup_counts[50:].sum()

# Prepare data for pie chart
pie_data = pd.concat([top_50_haplogroups, pd.Series({'Other': other_count})])

# Calculate the total number of Haplogroup 'M'
total_m_count = filtered_data.shape[0]

# Create a natural gradient of colors between the specified SCI colors
def create_color_gradient(start_color, mid_color1, mid_color2, end_color, n):
    gradient_colors = np.linspace(mcolors.hex2color(start_color), mcolors.hex2color(mid_color1), n//3)
    gradient_colors = np.vstack((gradient_colors, np.linspace(mcolors.hex2color(mid_color1), mcolors.hex2color(mid_color2), n//3)))
    gradient_colors = np.vstack((gradient_colors, np.linspace(mcolors.hex2color(mid_color2), mcolors.hex2color(end_color), n - 2*(n//3))))
    return [mcolors.rgb2hex(c) for c in gradient_colors]

# Generate the gradient color palette
# gradient_colors = create_color_gradient('#440054', '#414F8C', '#2C8D8E', '#FDE724', len(pie_data))
gradient_colors = create_color_gradient('#090387','#9611A1','#DD5E66','#FDE724', len(pie_data))
# Set font to vector font
rcParams['pdf.fonttype'] = 42
rcParams['ps.fonttype'] = 42

# Plotting the pie chart with the gradient colors
fig, ax = plt.subplots(figsize=(12, 8))
wedges, texts = ax.pie(pie_data, labels=None, colors=gradient_colors, startangle=140)

# Adding legend
ax.legend(pie_data.index, title="Haplogroups", loc="center left", bbox_to_anchor=(1, 0.5))

plt.title(f'Top 50 Haplogroups in Macro M ({total_m_count})')

# Save the plot as an SVG file with editable text
plt.savefig('C:/Users/victo/Desktop/haplogroup_pie_chart.svg', format='svg')

plt.show()

复制<br><br>import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from matplotlib import rcParams

# Load the dataset
file_path = '10K数据集.csv'
data = pd.read_csv(file_path)

# Filter the data for Macro == 'M'
filtered_data = data[data['Macro'] == 'M']

# Count the occurrences of each Haplogroup
haplogroup_counts = filtered_data['Haplogroup'].value_counts()

# Get the top 50 Haplogroups
top_50_haplogroups = haplogroup_counts.head(50)

# Remove 'Other' category
bar_data = top_50_haplogroups

# Calculate the total number of Haplogroup 'M'
total_m_count = filtered_data.shape[0]

# Create a natural gradient of colors between the specified SCI colors
def create_color_gradient(start_color, mid_color1, mid_color2, end_color, n):
    gradient_colors = np.linspace(mcolors.hex2color(start_color), mcolors.hex2color(mid_color1), n//3)
    gradient_colors = np.vstack((gradient_colors, np.linspace(mcolors.hex2color(mid_color1), mcolors.hex2color(mid_color2), n//3)))
    gradient_colors = np.vstack((gradient_colors, np.linspace(mcolors.hex2color(mid_color2), mcolors.hex2color(end_color), n - 2*(n//3))))
    return [mcolors.rgb2hex(c) for c in gradient_colors]

# Generate the gradient color palette
gradient_colors = create_color_gradient('#440054', '#414F8C', '#2C8D8E', '#FDE724', len(bar_data))

# Set font to vector font
rcParams['pdf.fonttype'] = 42
rcParams['ps.fonttype'] = 42

# Plotting the bar chart with the gradient colors
plt.figure(figsize=(14, 7))
bars = plt.bar(bar_data.index, bar_data.values, color=gradient_colors)

# Adding title and labels
plt.xlabel('Haplogroup')
plt.ylabel('Count')
plt.title(f'Top 50 Haplogroups in Macro M ({total_m_count})')
plt.xticks(rotation=90)

# Save the plot as an SVG file with editable text
plt.tight_layout()
plt.savefig('C:/Users/victo/Desktop/haplogroup_bar_chart.svg', format='svg')

plt.show()

复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407042147048.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407042205464.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\数据科学与格式转换\python：绘制饼图和柱状图.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：绘制饼图和柱状图.md</guid><pubDate>Thu, 04 Jul 2024 14:05:24 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407042146225.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407042146225.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[准备工作]]></title><description><![CDATA[ 
 <br>这个代码针对的是 mtDNA，Y 染色体可以去看：[这里](<a rel="noopener nofollow" class="external-link" href="https://www.yuque.com/yuqueyonghuyzhkuy/fi68oz/prgpziv5gkdy2ggq?singleDoc#" target="_blank">https://www.yuque.com/yuqueyonghuyzhkuy/fi68oz/prgpziv5gkdy2ggq?singleDoc#</a> 《从单倍群频率一键出曼哈顿图》)<br><br>首先，你需要用到这个代码：<a data-href="Python：查找mtDNA上游单倍型（2024年10月23日更新）" href="软件\python\数据科学与格式转换\python：查找mtdna上游单倍型（2024年10月23日更新）.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>Python：查找mtDNA上游单倍型（2024年10月23日更新）</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;"><br>
然后，你需要把上个代码的输出文件（逆序版本）与自己的文件合并形成下列的列：<br>ID	Population	Province	Location_Classfication	Language	Level_18	Level_17	Level_16	Level_15	Level_14	Level_13	Level_12	Level_11	Level_10	Level_9	Level_8	Level_7	Level_6	Level_5	Level_4	Level_3	Level_2	Level_1	Level_0
复制<br>说明一下
并不是说每一列都需要，但是至少 ID 列和单倍群列是必须的。另外，由于你需要进行差异性的统计，因此至少还应该有一列（例如 Province 列）作为差异的计算。使用上述代码的生成的 level 要全部贴过来。注意不要错位。
<br><br>我其实不太想写这玩意儿，这里就我一个人做 mtDNA 的。<br>import pandas as pd
from collections import defaultdict
import matplotlib.pyplot as plt
from adjustText import adjust_text
import os

# 输入文件
data = pd.read_csv('C:/Users/victo/Desktop/新建 Text Document.txt', sep='\t')

# 输出文件路径
outputfile_path = "C:/Users/victo/Desktop"

# 定义函数，找到最下游的单倍群
def find_most_downstream_level(data):
    # 找到最下游的单倍群列
    level_columns = [col for col in data.columns if col.startswith('Level_')]
    level_numbers = [int(col.split('_')[1]) for col in level_columns]
    most_downstream_level = f"Level_{max(level_numbers)}"
    return most_downstream_level

# 定义函数，计算每个类别的总数
def calculate_category_totals(data, column_name):
    # 去除缺失值再计算每个类别的总数
    category_totals = data[column_name].dropna().value_counts().to_dict()
    return category_totals

# 定义函数，计算单倍群的频率
def calculate_haplogroup_frequencies(data, column_name, category_totals):
    # 动态确定最下游的单倍群
    most_downstream_level = find_most_downstream_level(data)
    
    # 清除列名中的空白并检查指定的列是否存在
    data.columns = data.columns.str.strip()
    column_name = column_name.strip()
    if (column_name not in data.columns):
        return f"列名 '{column_name}' 不存在于数据中，请检查输入。"

    # 按最下游的单倍群列和指定列进行分组，然后计算出现次数
    distribution = data.groupby([most_downstream_level, column_name]).size().unstack(fill_value=0).reset_index()

    # 获取指定列中的实际类别
    valid_categories = data[column_name].dropna().unique()  # 去除缺失值

    # 初始化一个字典来存储下游单倍群和单倍群本身
    haplogroup_totals = defaultdict(lambda: defaultdict(int))

    # 计算单倍群和下游单倍群的数量
    for haplogroup in distribution[most_downstream_level]:
        for idx, group in distribution.iterrows():
            if group[most_downstream_level].startswith(haplogroup):
                for category in valid_categories:
                    if category in group:  # 检查类别是否在行中
                        haplogroup_totals[haplogroup][category] += group.get(category, 0)

    # 转为Pandas DataFrame并保存为文件
    total_distribution = pd.DataFrame(haplogroup_totals).T.reset_index()
    total_distribution.columns = [most_downstream_level] + valid_categories.tolist()

    # 输出到桌面的txt文件
    total_distribution.to_csv(f"{outputfile_path}/Haplogroup_counts.txt", sep="\t", encoding="utf-8", index=False)

    # 计算频率
    frequencies = total_distribution.copy()
    for category in valid_categories:
        total_count = category_totals.get(category, 0)  # 使用预先计算的类别总数，并对不存在的类别返回0
        if total_count &gt; 0:
            frequencies[category] = frequencies[category] / total_count
    return frequencies

def calculate_frequency_difference(frequency_result):
    # 询问用户输入两个列名以计算差值
    column1 = input("请输入第一个要计算差值的列名：").strip()
    column2 = input("请输入第二个要计算差值的列名：").strip()

    # 检查列是否存在于频率结果中
    if column1 not in frequency_result.columns or column2 not in frequency_result.columns:
        return f"输入的列名 '{column1}' 或 '{column2}' 不存在于频率结果中，请检查输入。"

    # 计算两个列之间的差值
    frequency_result['Difference'] = frequency_result[column1] - frequency_result[column2]
    return frequency_result, column1, column2

# 定义曼哈顿图的绘制
def plot_manhattan(frequency_result, column1, column2):
    # 确保生成的字体为矢量可编辑
    plt.rcParams['pdf.fonttype'] = 42
    plt.rcParams['ps.fonttype'] = 42

    # 提取绘图所需数据
    haplogroups = frequency_result.columns[0]
    differences = frequency_result['Difference']

    # 设定颜色和形状
    colors = ['#bb2649','#f35d74','#E88421','#E5C923','#ded82d','#8FBC8F', '#37945F',
              '#c6ffe6','#4CCCB3', '#369BA8','#2B7EBC','#d4eaf7','#003f8f','#ffc7ff','#A128CE','#6c35de','#999999','#1F1F1F' ]
    
    # 设置阈值
    thresholds = [-0.01, 0.01]
    print(f"阈值已经被设定为{thresholds}")
    plt.figure(figsize=(15, 5))

    # 为首字母分配颜色
    letter_to_color = {}
    current_color_idx = 0

    # 计算x轴位置
    x_positions = []
    for haplogroup in frequency_result[haplogroups]:
        first_letter = haplogroup[0]
        if (first_letter not in letter_to_color):
            letter_to_color[first_letter] = colors[current_color_idx % len(colors)]
            current_color_idx += 1
        x_positions.append(first_letter)

    unique_letters = list(letter_to_color.keys())
    x_ticks = [x_positions.index(letter) for letter in unique_letters]

    # 绘制单倍群的差值散点图
    texts = []
    for i, haplogroup in enumerate(frequency_result[haplogroups]):
        color = letter_to_color[haplogroup[0]]
        
        # 只绘制差异不为零的散点
        if differences[i] != 0:
            plt.scatter(i, differences[i], color=color, s=50, marker='o')
        
            # 标记超出阈值的点并附上全名标签
            if differences[i] &lt; thresholds[0] or differences[i] &gt; thresholds[1]:
                text = plt.text(i, differences[i], haplogroup, fontsize=8, ha='right')
                texts.append(text)
                # 画线连接点和文本标签
                plt.plot([i, i], [differences[i], differences[i]], 'k-', lw=0.5, color='gray')

    # 添加阈值线
    plt.axhline(y=thresholds[0], color='#1F1F1F', linestyle='--')
    plt.axhline(y=thresholds[1], color='#1F1F1F', linestyle='--')

    # 调整文本避免重叠
    adjust_text(texts, 
                arrowprops=dict(arrowstyle='-&gt;', color='#1F1F1F', lw=0.5, shrinkA=5),
                expand_text=(1.5, 1.5),
                expand_objects=(1.5, 1.5),
                force_text=(0.5, 0.5),
                force_objects=(0.5, 0.5),
                only_move={'points':'y', 'text':'xy'})

    # 设置x轴只显示单倍群的首字母
    plt.xticks(ticks=x_ticks, labels=unique_letters, rotation=0)
    plt.xlabel('Haplogroup')
    plt.ylabel('Frequency Difference')
    plt.title(f"Frequency Difference: {column1} - {column2}")
    plt.tight_layout()
    plt.show()

# 询问用户输入要进行分类计算的列名
column_name = input("请输入要分类计算统计的列名（例如 'Province'）：").strip()

# 计算每个类别的总数
category_totals = calculate_category_totals(data, column_name)

# 将类别总数写入一个新的txt文件
with open(f"{outputfile_path}/Category_totals.txt", 'w', encoding='utf-8') as f:
    for category, total in category_totals.items():
        f.write(f"{category}\t{total}\n")

# 计算单倍群的频率，包括所有下游单倍群
frequency_result = calculate_haplogroup_frequencies(data, column_name, category_totals)

# 显示结果并询问要计算差异的列名
if isinstance(frequency_result, pd.DataFrame):
    print(frequency_result)
    frequency_result.to_csv(f"{outputfile_path}/Haplogroup_frequency.txt", sep="\t", encoding="utf-8")
    
    # 根据用户输入计算频率差异
    frequency_difference_result, column1, column2 = calculate_frequency_difference(frequency_result)
    
    # 显示并保存频率差异结果
    if isinstance(frequency_difference_result, pd.DataFrame):
        print(frequency_difference_result)
        frequency_difference_result.to_csv(f"{outputfile_path}/Frequency_difference.txt", sep="\t", encoding="utf-8")
        
        # 绘制频率差异曼哈顿图
        plot_manhattan(frequency_difference_result, column1, column2)
    else:
        print(frequency_difference_result)
else:
    print(frequency_result)

os.remove(f"{outputfile_path}/Haplogroup_frequency.txt")
print("中间文件已经被删除了，如果你不需要删除，请你删除代码最后2行。")


复制<br>运行代码，会让你输入一些关键的参数，按照提示输入即可。我懒得写了。<br>
绘图的参数可以自己定义颜色之类的。<br>
尽管代码绘图还有瑕疵，但是可以在 Adobe illustrator 改。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408032214544.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>
展示两类群体之间单倍群频率差异的曼哈顿图。该图展示了在两类指定群体之间，不同单倍群频率的差异。x轴代表不同的单倍群，点的位置由单倍群名称的首字母决定，y轴表示两个群体之间的频率差异值。每个标记点显示对应单倍群在两个群体中的差异，不同的颜色代表不同的宏单倍群，超出预设阈值的单倍群用标签标注。
]]></description><link>软件\python\数据科学与格式转换\python：绘制差异性单倍群的曼哈顿图.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：绘制差异性单倍群的曼哈顿图.md</guid><pubDate>Wed, 23 Oct 2024 07:12:27 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br>为了探究一个群体中有多少种单倍群，以及每种单倍群的比例，可以绘制柱状图，类似常染色体的ADMIXTURE。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407230859072.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
第一列是群体，其余列是单倍群的比例。计算公式如下：<br><br><br>import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import numpy as np

# 设置 rcParams 以确保导出的图表是可编辑的
plt.rcParams['pdf.fonttype'] = 42
plt.rcParams['ps.fonttype'] = 42

# 加载数据
file_path = 'C:\\Users\\victo\\Desktop\\新建 Text Document.txt'
data = pd.read_csv(file_path, sep='\t')

# 定义一个函数以生成更多颜色（如果需要）
def generate_colors(num_colors):
    colors = list(mcolors.TABLEAU_COLORS.values())
    if num_colors &gt; len(colors):
        # 如果需要更多颜色，则使用颜色映射生成它们
        colormap = plt.get_cmap('hsv', num_colors)
        colors = [colormap(i) for i in range(num_colors)]
    return colors

# 删除非数值列以便进行绘图
plot_data = data.select_dtypes(include=['float64', 'int64'])

# 检查是否存在 Population 列，并将其设置为索引
if 'Population' in data.columns:
    plot_data.index = data['Population']
else:
    raise ValueError("The 'Population' column is missing from the data.")

# 确定属性的数量
num_attributes = len(plot_data.columns)

# 生成所需数量的颜色
colors = generate_colors(num_attributes)

# 绘制堆积条形图并应用新的颜色
plt.figure(figsize=(12, 8))
plot_data.plot(kind='bar', stacked=True, color=colors)
plt.title('Stacked Bar Chart with Generated Colors')
plt.xlabel('Population')
plt.ylabel('Values')
plt.legend(title='Attributes', bbox_to_anchor=(1.05, 1), loc='upper left')

# 显示图表
plt.show()

复制<br><br>出来的图的颜色是随机的，但是可以在 Ai 中进行修改至喜欢的颜色：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407230902257.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\数据科学与格式转换\python：绘制单倍群成分柱状图.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：绘制单倍群成分柱状图.md</guid><pubDate>Tue, 23 Jul 2024 01:02:49 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407230859072.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407230859072.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br><br>准备一个 csv 文件，表头包含 Province，Haplogroup。例如：<br>ID,Province,Ethnicity,Haplogroup,Latitude,Longitude,Elevation
4,重庆市,汉族,M7c1a2a,29.5656843,106.5511838,219.9486542
6,河北省,汉族,F4a,38.0427599,114.5143,72.94680786
复制<br>准备好 shp 文件以及配套的文件，例如：<br>省面.CPG
省面.dbf
省面.prj
省面.sbn
省面.sbx
省面.shp
省面.shx
复制<br><br>import pandas as pd
import geopandas as gpd
import folium
from folium.features import GeoJson, GeoJsonTooltip

# 加载数据
file_path = 'C:/Users/victo/Desktop/数据清洗整理.csv'
data = pd.read_csv(file_path)

# 过滤指定单倍群并统计各省数量
def count_haplogroup_by_province(haplogroup_name, data):
    filtered_data = data[data['Haplogroup'] == haplogroup_name]
    province_counts = filtered_data['Province'].value_counts().reset_index()
    province_counts.columns = ['Province', 'Count']
    return province_counts

# 计算各省的单倍群频率
def calculate_frequency(data, haplogroup_name):
    total_counts = data['Province'].value_counts().reset_index()
    total_counts.columns = ['Province', 'Total']
    haplogroup_counts = count_haplogroup_by_province(haplogroup_name, data)
    frequency = pd.merge(haplogroup_counts, total_counts, on='Province')
    frequency['Frequency'] = frequency['Count'] / frequency['Total']
    return frequency[['Province', 'Frequency']]

# 获取单倍群 M9a1b1c 在各省的频率
haplogroup_name = 'M9a1b1c'
province_frequency = calculate_frequency(data, haplogroup_name)

# 加载中国省份地理数据
china_map = gpd.read_file('C:/Users/victo/Desktop/省面.shp')

# 检查列名
print(china_map.columns)

# 确认地理数据中的省份名称列
province_column = '省全名'  # 根据实际情况调整列名

# 合并统计数据和地理数据
china_map = china_map.merge(province_frequency, left_on=province_column, right_on='Province', how='left').fillna(0)

# 创建 folium 地图
m = folium.Map(location=[35.8617, 104.1954], zoom_start=4)

# 添加 GeoJson 数据
folium.Choropleth(
    geo_data=china_map,
    name='choropleth',
    data=china_map,
    columns=[province_column, 'Frequency'],
    key_on=f'feature.properties.{province_column}',
    fill_color='YlOrRd',
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name=f'Haplogroup {haplogroup_name} Frequency by Province'
).add_to(m)

# 添加工具提示
folium.GeoJson(
    china_map,
    style_function=lambda x: {'fillColor': '#ffffff00', 'color': 'black', 'weight': 1},
    tooltip=GeoJsonTooltip(
        fields=[province_column, 'Frequency'],
        aliases=['Province: ', 'Frequency: '],
        localize=True
    )
).add_to(m)

# 保存地图
m.save('haplogroup_distribution_map.html')

# 打印 M9a1b1c 单倍群在各省的频率
print(province_frequency)
复制<br><br>
import pandas as pd
import matplotlib.pyplot as plt
import geopandas as gpd
from pypinyin import pinyin, Style

# 加载数据
file_path = 'C:/Users/victo/Desktop/数据清洗整理.csv'
data = pd.read_csv(file_path)

# 过滤指定单倍群并统计各省数量
def count_haplogroup_by_province(haplogroup_name, data):
    filtered_data = data[data['Haplogroup'] == haplogroup_name]
    province_counts = filtered_data['Province'].value_counts().reset_index()
    province_counts.columns = ['Province', 'Count']
    return province_counts

# 获取单倍群在各省的数量
haplogroup_name = 'Z'
province_counts = count_haplogroup_by_province(haplogroup_name, data)

# 计算全国B5a1c的总数量
total_haplogroup_count = province_counts['Count'].sum()

# 计算各省的B5a1c频率
province_counts['Frequency'] = province_counts['Count'] / total_haplogroup_count

# 将中文省份名称转换为拼音
province_counts['Province_pinyin'] = province_counts['Province'].apply(lambda x: ''.join([item[0] for item in pinyin(x, style=Style.NORMAL)]))

# 加载中国省份地理数据
china_map = gpd.read_file('C:/Users/victo/Desktop/省面.shp')

# 确认地理数据中的省份名称列
province_column = '省全名'

# 将地理数据中的省份名称转换为拼音
china_map['Province_pinyin'] = china_map[province_column].apply(lambda x: ''.join([item[0] for item in pinyin(x, style=Style.NORMAL)]))

# 合并统计数据和地理数据
china_map = china_map.merge(province_counts, left_on='Province_pinyin', right_on='Province_pinyin', how='left')
china_map = china_map.infer_objects()  # 确保数据类型正确
china_map = china_map.fillna(0)  # 填充缺失值

# 检查province_counts是否为空
if province_counts.empty:
    print("Error: The haplogroup data is empty. Please check the input data and haplogroup name.")
else:
    # 获取频率的最大值和最小值
    max_frequency = province_counts['Frequency'].max()
    min_frequency = province_counts['Frequency'].min()

    # 绘制热图
    fig, ax = plt.subplots(1, 1, figsize=(10, 18))  # 调整图形高度
    china_map.boundary.plot(ax=ax, linewidth=0.03, color='#8B8B8B')
    china_map.plot(column='Frequency', ax=ax, legend=True,
                   cmap='Spectral_r',  # 使用配色
                   legend_kwds={'label': f"Haplogroup {haplogroup_name} Frequency by Province",
                                'orientation': "vertical"},
                   vmin=min_frequency, vmax=max_frequency)  # 设置颜色条范围

    # 隐藏地图外框的横轴、纵轴的数字标尺
    ax.set_xticks([])
    ax.set_yticks([])

    plt.title(f'Distribution of Haplogroup {haplogroup_name} in China by Province')

    # 添加表格
    table_data = province_counts[['Province_pinyin', 'Count', 'Frequency']].values
    column_labels = ['Province', 'Count', 'Frequency']
    table = plt.table(cellText=table_data,
                      colLabels=column_labels,
                      cellLoc='center',
                      loc='bottom',
                      bbox=[0, -1.4, 1, 1.2])  # 调整表格位置和大小

    table.auto_set_font_size(False)
    table.set_fontsize(8)  # 调整字体大小

    # 调整单元格的高度
    cell_dict = table.get_celld()
    for i in range(len(table_data) + 1):  # 包括标题行
        for j in range(len(column_labels)):
            cell_dict[(i, j)].set_height(0.15)  # 调整单元格高度

    plt.subplots_adjust(left=0.2, bottom=0.4)  # 调整图形布局
    plt.show()

复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606111507.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\数据科学与格式转换\python：绘制省份频率地图.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：绘制省份频率地图.md</guid><pubDate>Fri, 21 Jun 2024 07:31:29 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606111507.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240606111507.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[准备文件]]></title><description><![CDATA[ 
 <br>我们有时候需要计算每一种单倍群（不是仅仅包括宏单倍群）在特定字段（例如省份、语系等）的数量与频率。这对于 mtDNA 来说是一件非常麻烦的事情，因为很多单倍群的命名极其混乱。为了完成这个工作，需要分成2步骤。<br><br>首先按照 <a data-href="Python：查找mtDNA上游单倍型（2024年10月23日更新）" href="软件\python\数据科学与格式转换\python：查找mtdna上游单倍型（2024年10月23日更新）.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>Python：查找mtDNA上游单倍型（2024年10月23日更新）</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">步骤，获得一个这样的文件。你可以从生成的 正序 文件中获得，并将对应的 ID 与基本信息补齐。例如省份等。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409091136058.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>然后按照如下代码进行操作：<br>import pandas as pd
import numpy as np
from multiprocessing import Pool, cpu_count

# 加载数据集
file_path = '正序等级.txt'  # 替换为你的数据文件路径
data = pd.read_csv(file_path,sep="\t")

# 列出单倍群字段
haplogroup_columns = [f'Level_{i}' for i in range(20)]  # Level_0到Level_19

# 获取所有单倍群
def get_unique_haplogroups(df, columns):
    unique_haplogroups = set()
    for col in columns:
        unique_haplogroups.update(df[col].dropna().unique())  # 将各列中的非空唯一值加入集合
    return unique_haplogroups

# 单个省份的统计工作（并行执行的任务）
def calculate_haplogroup_for_province(args):
    province, province_data, haplogroups = args
    province_haplogroup_data = province_data[haplogroup_columns].to_numpy()

    haplogroup_counts = {}
    for haplogroup in haplogroups:
        # 使用 NumPy 的向量化操作来检查单倍群是否出现在该省份的某行中
        mask = np.any(province_haplogroup_data == haplogroup, axis=1)
        # 统计出现次数（每一行最多计数一次）
        haplogroup_counts[haplogroup] = np.sum(mask)
    
    total_samples = len(province_data)
    haplogroup_frequencies = {haplogroup: count / total_samples for haplogroup, count in haplogroup_counts.items()}
    
    return province, haplogroup_counts, haplogroup_frequencies

# 多核计算函数
def calculate_haplogroup_counts_parallel(df, province_col):
    # 获取所有单倍群
    haplogroups = get_unique_haplogroups(df, haplogroup_columns)
    
    # 按省份分组数据
    province_groups = [(province, df[df[province_col] == province], haplogroups) for province in df[province_col].unique()]

    # 使用多核CPU进行并行计算
    with Pool(cpu_count()) as pool:
        results = pool.map(calculate_haplogroup_for_province, province_groups)

    # 汇总结果
    haplogroup_counts = {}
    haplogroup_frequencies = {}

    for province, counts, frequencies in results:
        haplogroup_counts[province] = counts
        haplogroup_frequencies[province] = frequencies

    return haplogroup_counts, haplogroup_frequencies

if __name__ == '__main__':
    # 交互式输入省份字段
    province_field = input("请输入要计算的字段名称，例如 Province_cn: ")

    # 计算结果
    haplogroup_counts, haplogroup_frequencies = calculate_haplogroup_counts_parallel(data, province_field)

    # 将数量结果转换为 DataFrame 以表格形式展示
    haplogroup_counts_df = pd.DataFrame(haplogroup_counts).T.fillna(0)

    # 将频率结果转换为 DataFrame 以表格形式展示
    haplogroup_frequencies_df = pd.DataFrame(haplogroup_frequencies).T.fillna(0)

    # 重置索引，使用户输入的字段成为第一列
    haplogroup_counts_df.index.name = province_field
    haplogroup_frequencies_df.index.name = province_field
    haplogroup_counts_df.reset_index(inplace=True)
    haplogroup_frequencies_df.reset_index(inplace=True)

    # 保存数量和频率表格为CSV文件
    haplogroup_counts_df.to_csv("haplogroup_counts.csv", index=False)
    haplogroup_frequencies_df.to_csv("haplogroup_frequencies.csv", index=False)

    # 输出数量和频率表格
    print("单倍群数量统计表格:")
    print(haplogroup_counts_df)
    print("\n单倍群频率表格:")
    print(haplogroup_frequencies_df)

#####以下是在普通计算机中使用的脚本################
# import pandas as pd
# import numpy as np

# # 加载数据集
# file_path = '你的数据路径.csv'  # 替换为你的数据文件路径
# data = pd.read_csv(file_path)

# # 列出单倍群字段
# haplogroup_columns = [f'Level_{i}' for i in range(20)]  # Level_0到Level_19

# # 获取所有单倍群
# def get_unique_haplogroups(df, columns):
#     unique_haplogroups = set()
#     for col in columns:
#         unique_haplogroups.update(df[col].dropna().unique())  # 将各列中的非空唯一值加入集合
#     return unique_haplogroups

# # 高效计算每个单倍群在每个省份的出现次数
# def calculate_haplogroup_counts(df, province_col):
#     # 创建一个字典来存储结果
#     haplogroup_counts = {}
    
#     # 获取所有单倍群
#     haplogroups = get_unique_haplogroups(df, haplogroup_columns)
    
#     # 对每个省份进行处理
#     for province in df[province_col].unique():
#         haplogroup_counts[province] = {}
#         # 筛选出该省份的数据
#         province_data = df[df[province_col] == province]
#         province_haplogroup_data = province_data[haplogroup_columns].to_numpy()
        
#         # 创建一个省份对应的哈希表，用于存储该省份中每个单倍群的计数
#         for haplogroup in haplogroups:
#             # 使用 NumPy 的向量化操作来检查单倍群是否出现在该省份的某行中
#             mask = np.any(province_haplogroup_data == haplogroup, axis=1)
            
#             # 统计出现次数（每一行最多计数一次）
#             count = np.sum(mask)
            
#             # 保存计数结果
#             haplogroup_counts[province][haplogroup] = count
    
#     return haplogroup_counts

# # 交互式输入省份字段
# province_field = input("请输入要计算的字段名称，例如 Province_cn: ")

# # 计算结果
# haplogroup_counts = calculate_haplogroup_counts(data, province_field)

# # 将结果转换为 DataFrame 以表格形式展示
# haplogroup_df = pd.DataFrame(haplogroup_counts).T.fillna(0)

# # 重置索引，使用户输入的字段成为第一列
# haplogroup_df.index.name = province_field
# haplogroup_df.reset_index(inplace=True)

# # 显示表格结果
# print(haplogroup_df)

# # 如果需要将结果保存为文件，可以使用以下命令：
# # haplogroup_df.to_csv("haplogroup_counts.csv", index=False)

复制<br>如上代码可以获得2个文件：<br>
<br>数量文件：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409091139437.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>频率文件：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409091139438.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>你可能发现了，为什么最后的每个省份的频率之和不为1？
这是因为上下游单倍群之间存在包含关系，而非独立的，因此在计算时上游单倍群已经包含了下游单倍群，固然频率之和就不为1了。
]]></description><link>软件\python\数据科学与格式转换\python：计算各级别线粒体单倍群数量和频率.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：计算各级别线粒体单倍群数量和频率.md</guid><pubDate>Wed, 23 Oct 2024 07:12:27 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[原理]]></title><description><![CDATA[ 
 <br><br>我们使用以下公式来计算单倍型/单倍群的法医学参数。单倍型/单倍群多样性(Haplotype/haplogroup diversity, HD)是基于 Nei 和 Tajima 提出来的公式进行计算：<br>
其中 n 表示观察到单倍型/单倍群的数量，pi 表示第 i个单倍型/单倍群的频率。分辨能力(Discrimination capacity,DC)使用观察的单倍型/单倍群数量和所有单倍型/单倍群数量的比值。<br><a data-href="序列多态性分析（Sequence Polymorphism Analysis）" href="术语\序列多态性分析（sequence-polymorphism-analysis）.html" class="internal-link" target="_self" rel="noopener nofollow">序列多态性分析（Sequence Polymorphism Analysis）</a>中不包含这项。<br><br>准备一个 txt 文件：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240624155053.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import kruskal

# 读取数据
file_path = '新建 Text Document.txt'
output_file_path = 'group_haplotype_diversities.csv'
data = pd.read_csv(file_path, sep='\t')

# 分组并计算每个群体的单倍型多样性
diversities = []
group_sizes = data['Population_Province'].value_counts()

for group, group_data in data.groupby('Population_Province'):
    n = len(group_data)
    if n &gt;= 20:
        haplotype_counts = group_data['Haplo'].value_counts()
        haplotype_frequencies = haplotype_counts / n
        HD = n * (1 - sum(haplotype_frequencies**2)) / (n - 1)
        diversities.append((group, HD, n))

# 转为DataFrame
diversity_df = pd.DataFrame(diversities, columns=['Group', 'Haplotype Diversity', 'Sample Size'])

# 统计学检验
groups = diversity_df['Group'].unique()
group_data = [diversity_df[diversity_df['Group'] == group]['Haplotype Diversity'].values for group in groups]
stat, p = kruskal(*group_data)

# 输出统计学检验结果
print(f"Kruskal-Wallis H检验结果: H-statistic = {stat}, p-value = {p}")

# 保存结果到CSV文件
with open(output_file_path, 'w') as f:
    f.write(f"Kruskal-Wallis H检验结果: H-statistic = {stat}, p-value = {p}\n")
diversity_df.to_csv(output_file_path, mode='a', index=False)

# 排序数据
diversity_df = diversity_df.sort_values(by='Haplotype Diversity')

# 添加群体数量到群体名称
diversity_df['Group'] = diversity_df.apply(lambda row: f"{row['Group']} ({row['Sample Size']})", axis=1)

# 可视化结果：柱状图
plt.figure(figsize=(14, 7))
sns.barplot(x='Group', y='Haplotype Diversity', data=diversity_df, palette='hsv')
plt.xlabel('Group')
plt.ylabel('Haplotype Diversity')
plt.title('Haplotype Diversity of Different Groups')
plt.xticks(rotation=90)  # 群体名称旋转90度便于阅读
plt.tight_layout()

# 展示图表
plt.show()

# 可选：保存图表
# output_chart_path = 'group_haplotype_diversities_barplot.png'
# plt.savefig(output_chart_path)

复制<br><br><img alt="Figure_1.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/Figure_1.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\数据科学与格式转换\python：计算群体单倍群单倍型多样性.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：计算群体单倍群单倍型多样性.md</guid><pubDate>Mon, 28 Oct 2024 09:41:55 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240624155053.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240624155053.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br>这个脚本的作用是，给定一个 txt 文档，里面只有线粒体单倍群，根据 phylotree 计算得到该单倍群下游的共有多少个单倍群（包括自身）。<br><br>一个 txt 文档，如图所示：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240627164132.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>需要的是 线粒体单倍群phylotree(version17).txt，可以通过<a data-tooltip-position="top" aria-label="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/%E7%BA%BF%E7%B2%92%E4%BD%93%E5%8D%95%E5%80%8D%E7%BE%A4phylotree(version17).txt?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1720477816&amp;Signature=P3fhsQWh2K5Qn%2BFe2ET%2F4WlgSNc%3D" rel="noopener nofollow" class="external-link" href="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/%E7%BA%BF%E7%B2%92%E4%BD%93%E5%8D%95%E5%80%8D%E7%BE%A4phylotree(version17).txt?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1720477816&amp;Signature=P3fhsQWh2K5Qn%2BFe2ET%2F4WlgSNc%3D" target="_blank">这里下载</a><br>
如果过期请提醒我。<br><br># 文件路径
haplogroups_file = '新建 Text Document.txt'
phylogroup_file = '线粒体单倍群phylotree(version17).txt'
output_file = 'haplogroup_counts.txt'

def read_haplogroups(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()
    return lines

def find_downstream_haplogroups(haplogroup, lines):
    downstream_haplogroups = []
    haplogroup_level = None
    capture = False

    for line in lines:
        stripped_line = line.strip()
        if not stripped_line:
            continue
        
        current_level = len(line) - len(line.lstrip('\t'))
        if haplogroup_level is None and stripped_line.startswith(haplogroup):
            haplogroup_level = current_level
            capture = True
            continue
        
        if capture:
            if current_level &gt; haplogroup_level:
                downstream_haplogroups.append(stripped_line)
            elif current_level == haplogroup_level:
                break

    return downstream_haplogroups

def count_haplogroups(haplogroups_list, target_haplogroup, phylogroup_lines):
    count = 0
    visited = set()

    def recursive_count(haplogroup):
        nonlocal count
        if haplogroup in visited:
            return
        visited.add(haplogroup)
        haplogroup_count = haplogroups_list.count(haplogroup)
        count += haplogroup_count
        downstream_haplogroups = find_downstream_haplogroups(haplogroup, phylogroup_lines)
        for downstream in downstream_haplogroups:
            recursive_count(downstream)
    
    recursive_count(target_haplogroup)
    return count

def main():
    # 读取目标单倍群
    haplogroups = read_haplogroups(haplogroups_file)
    haplogroups_list = [haplo.strip() for haplo in haplogroups]
    
    # 读取所有单倍群数据
    phylogroup_lines = read_haplogroups(phylogroup_file)
    
    # 查找每个单倍群的下游单倍群并统计数量
    results = {}
    for haplogroup in haplogroups_list:
        if haplogroup not in results:
            count = count_haplogroups(haplogroups_list, haplogroup, phylogroup_lines)
            downstream = find_downstream_haplogroups(haplogroup, phylogroup_lines)
            results[haplogroup] = {
                'count': count,
                'downstream': downstream
            }
    
    # 输出结果到文件
    with open(output_file, 'w', encoding='utf-8') as f:
        for haplogroup, data in results.items():
            f.write(f'{haplogroup}\t{data["count"]}\n')

    print(f'结果已保存到 {output_file}')

if __name__ == '__main__':
    main()

复制]]></description><link>软件\python\数据科学与格式转换\python：计算下游单倍群数量.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：计算下游单倍群数量.md</guid><pubDate>Thu, 27 Jun 2024 08:45:08 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f5a5.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f5a5.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[准备文件]]></title><description><![CDATA[ 
 <br>如果我们已经获得了一个 ALN 文件，同时还需要把一些新的 FASTA 文件放进去。同时我们不希望改变 CONSENSUS 序列的长度，换言之：<br>将多个新的 FASTA 文件中的序列与现有的 ALN 文件中的对齐结果进行整合，并确保在保持原有对齐结果不变的同时，新的序列能够准确地与现有比对对齐。<br><br>
<br>没有对齐的 fasta 文件。
<br>已经对齐的 Aln 文件。
<br><br>我们尽量在 Linux 环境下运行，因为我们需要使用比对的软件，在这里，我们使用 MAFFT。<br><br><br>import subprocess
from Bio import AlignIO, SeqIO

# 定义文件路径
aln_file = "已经比对的文件"
fasta_files = [
    "/mnt/c/Users/victo/Desktop/1.fasta",
    "/mnt/c/Users/victo/Desktop/2.fasta"
    # 这里可以添加更多的FASTA文件路径
]
output_file = "/mnt/c/Users/victo/Desktop/UPDATED_MSA.aln"

# 将所有新的FASTA文件合并到一个临时文件中
temp_fasta_file = "/mnt/c/Users/victo/Desktop/temp_new_sequences.fasta"
with open(temp_fasta_file, "w") as temp_f:
    for fasta_file in fasta_files:
        with open(fasta_file) as fasta_f:
            temp_f.write(fasta_f.read())

# 使用MAFFT的--add选项将新的序列与现有的比对文件进行对齐
mafft_command = ["mafft", "--add", temp_fasta_file, aln_file]
with open(output_file, "w") as output_f:
    subprocess.run(mafft_command, stdout=output_f, check=True)

###############################################
#这里提供了更多的参数来追求更精致的比对###########
###############################################
# import subprocess
# # 使用MAFFT的--addfull选项
# mafft_command = ["mafft", "--addfull", temp_fasta_file, aln_file]
# with open(output_file, "w") as output_f:
#     subprocess.run(mafft_command, stdout=output_f, check=True)
# print(f"新的对齐文件已保存到 {output_file}")


# import subprocess
# # 使用MAFFT的--add选项，带--keeplength
# mafft_command = ["mafft", "--add", temp_fasta_file, "--keeplength", aln_file]
# with open(output_file, "w") as output_f:
#     subprocess.run(mafft_command, stdout=output_f, check=True)
# print(f"新的对齐文件已保存到 {output_file}")

print(f"新的对齐文件已保存到 {output_file}")
复制<br>
<br>
--addprofile：

<br>参数：mafft --addprofile new_sequences.fasta existing_alignment.aln
<br>描述：将新序列作为一个独立的多序列比对文件，与现有比对文件进行全局比对。这种方法通常是最精确的，因为它考虑了所有新序列的上下文。
<br>使用场景：适用于有较多新序列的情况，需要高精度的对齐。


<br>
--addfull：

<br>参数：mafft --addfull new_sequences.fasta existing_alignment.aln
<br>描述：将新序列添加到现有比对中，进行全局比对，考虑整个序列的上下文。
<br>使用场景：适用于需要较高精度对齐但新序列不多的情况。


<br>
--add：

<br>参数：mafft --add new_sequences.fasta existing_alignment.aln
<br>描述：将新序列逐个添加到现有比对中，进行局部比对。这种方法比 --addfull 快，但精度较低。
<br>使用场景：适用于需要快速对齐且新序列较少的情况。


<br>
--keeplength：

<br>参数：mafft --add new_sequences.fasta --keeplength existing_alignment.aln
<br>描述：类似 --add，但确保现有比对的长度保持不变。精度最低，但对已有比对影响最小。
<br>使用场景：适用于需要确保现有比对完全不变的情况，即使新序列的对齐精度较低。


<br><br>除了 MAFFT，还有其他一些常用的多序列比对工具可以用来将新的序列添加到现有的比对中。这些工具包括:<br>
<br>Clustal Omega：一个适合大规模数据的多序列比对工具。
<br>T-Coffee：一个灵活且强大的多序列比对工具，支持多种对齐策略。
<br><br>import subprocess
from Bio import AlignIO, SeqIO

# 定义文件路径
aln_file = "existing_alignment.aln"
fasta_files = ["new_sequences1.fasta", "new_sequences2.fasta"]
temp_fasta_file = "temp_new_sequences.fasta"
output_file = "UPDATED_MSA.aln"

# 合并所有新的FASTA文件到一个临时文件中
with open(temp_fasta_file, "w") as temp_f:
    for fasta_file in fasta_files:
        with open(fasta_file) as fasta_f:
            temp_f.write(fasta_f.read())

# 使用Clustal Omega的--p1和--p2选项
clustalo_command = ["clustalo", "--in1", aln_file, "--in2", temp_fasta_file, "--out", output_file, "--outfmt", "clustal"]
subprocess.run(clustalo_command, check=True)

print(f"新的对齐文件已保存到 {output_file}")

复制<br><br>import subprocess
from Bio import AlignIO, SeqIO

# 定义文件路径
aln_file = "existing_alignment.aln"
fasta_files = ["new_sequences1.fasta", "new_sequences2.fasta"]
temp_fasta_file = "temp_new_sequences.fasta"
output_file = "UPDATED_MSA.aln"

# 合并所有新的FASTA文件到一个临时文件中
with open(temp_fasta_file, "w") as temp_f:
    for fasta_file in fasta_files:
        with open(fasta_file) as fasta_f:
            temp_f.write(fasta_f.read())

# 使用T-Coffee进行比对
t_coffee_command = ["t_coffee", "-other_pg", "aln2tree", "-mode", "quickaln", "-aln", aln_file, "-seq", temp_fasta_file, "-outfile", output_file]
subprocess.run(t_coffee_command, check=True)

print(f"新的对齐文件已保存到 {output_file}")

复制]]></description><link>软件\python\数据科学与格式转换\python：将fasta文件与aln文件合并.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：将FASTA文件与Aln文件合并.md</guid><pubDate>Fri, 21 Jun 2024 07:31:20 GMT</pubDate></item><item><title><![CDATA[准备工作]]></title><description><![CDATA[ 
 <br>这个脚本已经弃用！<br><br>
<br>需要进行分组的FASTA文件。
<br>进行分组的TXT文件。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402011320563.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br>分组文件应该符合如下格式：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402011319719.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br># 这个脚本将FASTA文件中的序列分组到指定的组中

# 该脚本需要两个参数：

# 1. 分组文件的路径

# 2. FASTA文件的路径

# 3. 输出文件的路径

# 4. 分组文件的格式为：

#     样本名称\t分组名称

# 5. FASTA文件的格式为：

#     &gt;sample_name

# 6. 输出文件的格式为：

#     &gt;sample_name\t分组名称

  

# 这样做的目的是为了将多个FASTA文件中的序列分组到一起，以便于使用DnaSP快速分组

  
  

def read_group_file(group_file_path):

    """

    读取分组文件并创建一个映射关系的字典

    """

    group_map = {}

    with open(group_file_path, 'r', encoding='utf-8') as file:

        for line in file:

            parts = line.strip().split('\t')

            if len(parts) == 2:

                sample_name, Group_name = parts

                group_map[sample_name] = Group_name

    return group_map

  

def read_fasta_file(fasta_file_path):

    """

    读取fasta文件并返回一个包含样本名称和序列的字典

    """

    fasta_data = {}

    current_sample = None

    with open(fasta_file_path, 'r') as file:

        for line in file:

            if line.startswith('&gt;'):

                current_sample = line.strip()[1:]

                fasta_data[current_sample] = ''

            else:

                fasta_data[current_sample] += line.strip()

    return fasta_data

  

def write_sorted_fasta_file(fasta_data, output_file_path):

    """

    将排序后的fasta数据写入新文件

    """

    with open(output_file_path, 'w') as output_file:

        for sample in sorted(fasta_data, key=lambda x: fasta_data[x]['province']):

            output_file.write(f'&gt;{sample}\n{fasta_data[sample]["sequence"]}\n')

  

def replace_and_sort_fasta_samples(fasta_file_path, group_file_path, output_file_path):

    """

    替换fasta文件中的样本名称并排序，然后保存到新的文件中

    """

    group_map = read_group_file(group_file_path)

    fasta_data = read_fasta_file(fasta_file_path)

  

    # 替换样本名称并添加省份信息

    replaced_fasta_data = {}

    for name, seq in fasta_data.items():

        Group_name = group_map.get(name, 'Unknown')

        replaced_fasta_data[f'{Group_name} {name}'] = {'sequence': seq, 'province': Group_name}

  

    # 写入排序后的fasta数据到新文件

    write_sorted_fasta_file(replaced_fasta_data, output_file_path)

  

# 使用示例

fasta_file_path = 'C:/Users/a/Desktop/.fasta' # Fasta文件路径

  

group_file_path = 'C:/Users/a/Desktop/.txt' # 分组文件路径

  

output_file_path = 'C:/Users/a/Desktop/.fasta' # 输出文件路径

  

replace_and_sort_fasta_samples(fasta_file_path, group_file_path, output_file_path)
复制]]></description><link>软件\python\数据科学与格式转换\python：将fasta文件中的序列分组到指定的组中.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：将FASTA文件中的序列分组到指定的组中.md</guid><pubDate>Fri, 23 Aug 2024 08:25:16 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402011320563.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402011320563.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[python：将FASTA转换成Arp]]></title><description><![CDATA[ 
 <br>这个脚本可以把FASTA文件转换成Arp，跳过了DnaSP的操作，但是这增加了Arlequin的运算量。需要准备2个文件：<br>
<br>FASTA文件
<br>分组文件<br>
如图所示：
<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402201357957.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
用制表符分隔<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402201358078.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br>我知道你很急，但你先别急。如果你直接把完整序列的fasta文件拿来处理，也不是不行，只是你可能会遇到Arlequin歇菜。<br>为了防止这样的情况发生，我们有必要对上面的fasta文件进行简化，从而减轻计算量。<br><br>
<br>打开<a data-href="MEGA" href="MEGA" class="internal-link" target="_self" rel="noopener nofollow">MEGA</a>
<br>导入原始的fasta文件
<br>点击Analyze
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402211402609.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
4. 根据实际情况选择<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402211403215.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
5. 打开序列<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402211404745.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
6. 点击Data→Export data。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402211404470.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
7. 删去gap等。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402211405590.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
8. 点击OK。导出新的fasta文件，再用这个新的文件进行后续分析。<br><br>这个版本将不会输出.hap文件，而是会强制将所有的序列信息和ID原封不动全部保留在.arp文件。这对于Arlequin运算时间会变长。<br>from collections import defaultdict

# Function to read the file content efficiently
def read_file(file_path, encoding='utf-8'):
    try:
        with open(file_path, 'r', encoding=encoding) as file:
            return file.readlines()
    except UnicodeDecodeError:
        with open(file_path, 'r', encoding='latin1') as file:
            return file.readlines()

# Read the FASTA and Group files
fasta_file_path = 'All_pubilc.fasta'
group_file_path = '新建 Text Document.txt'
arp_file_path = 'All.ALN.arp'

fasta_content = read_file(fasta_file_path)
group_content = read_file(group_file_path)

# Preview the files
fasta_preview = fasta_content[:5]
group_preview = group_content[:5]

fasta_preview, group_preview

# Process the group information
group_dict = defaultdict(list)
for line in group_content:
    sample_name, group_name = line.strip().split('\t')
    group_dict[group_name].append(sample_name)

# Number of unique groups (NbSamples)
nb_samples = len(group_dict)

# Prepare to match FASTA sequences to their respective groups
sequence_dict = {}
current_sample_name = None
for line in fasta_content:
    if line.startswith('&gt;'):
        current_sample_name = line[1:].strip().split()[0]
        sequence_dict[current_sample_name] = []
    elif current_sample_name is not None:
        sequence_dict[current_sample_name].append(line.strip())

# Combine sequence lines
for sample in sequence_dict:
    sequence_dict[sample] = ''.join(sequence_dict[sample])

# Create the .arp file content
arp_content = [
    "[Profile]",
    "   Title = \"Genetic Diversity Analysis\"",
    f"   NbSamples = {nb_samples}",
    "   DataType = DNA",
    "   GenotypicData = 0",
    "   LocusSeparator = NONE",
    "   MissingData = \"N\"",
    "   CompDistMatrix = 1",
    "",
    "[Data]",
    ""
]

# Adding each group's sample information to the .arp file content
for group_name, samples in group_dict.items():
    sample_size = len(samples)
    arp_content.append("[[Samples]]")
    arp_content.append(f"   SampleName = \"{group_name}\"")
    arp_content.append(f"   SampleSize = {sample_size}")
    arp_content.append("   SampleData= {")
    for sample in samples:
        sequence = sequence_dict.get(sample, "N" * 100)
        arp_content.append(f"       {sample} 1 {sequence}")
    arp_content.append("   }")
    arp_content.append("")

# Convert the list to a single string
arp_content_str = '\n'.join(arp_content)

# Previewing the beginning of the arp_content
arp_content_preview = '\n'.join(arp_content[:20])

# Save the .arp content to a new file
with open(arp_file_path, 'w', encoding='utf-8') as file:
    file.write(arp_content_str)
复制<br><br>这个版本会创建一个映射关系的字典，并把序列信息分开保存至.hap文件中。<br>import os
from collections import defaultdict

# 功能函数定义
def read_group_file(group_file_path):
    """读取分组文件并创建一个映射关系的字典"""
    group_map = {}
    with open(group_file_path, 'r', encoding='utf-8') as file:
        for line in file:
            parts = line.strip().split('\t')
            if len(parts) == 2:
                sample_name, group_name = parts
                group_map[sample_name] = group_name
    return group_map

def read_fasta_file(fasta_file_path):
    """读取fasta文件并返回一个包含样本名称和序列的字典"""
    fasta_data = {}
    current_sample = None
    with open(fasta_file_path, 'r') as file:
        for line in file:
            if line.startswith('&gt;'):
                current_sample = line.strip()[1:]
                fasta_data[current_sample] = ''
            else:
                fasta_data[current_sample] += line.strip()
    return fasta_data

def replace_and_sort_fasta_samples(fasta_file_path, group_file_path, output_file_path):
    """替换fasta文件中的样本名称并排序，然后保存到新的文件中"""
    group_map = read_group_file(group_file_path)
    fasta_data = read_fasta_file(fasta_file_path)
    replaced_fasta_data = {}
    for name, seq in fasta_data.items():
        group_name = group_map.get(name, 'Unknown')
        replaced_fasta_data[f'{group_name} {name}'] = {'sequence': seq, 'province': group_name}
    with open(output_file_path, 'w') as output_file:
        for sample in sorted(replaced_fasta_data, key=lambda x: replaced_fasta_data[x]['province']):
            output_file.write(f'&gt;{sample}\n{replaced_fasta_data[sample]["sequence"]}\n')

# 主执行逻辑
if __name__ == "__main__":
    base_path = 'C:/Users/a/Desktop'
    fasta_file_path = os.path.join(base_path, 'Illumina_mtDNA_Filter_recode.fas')#改成你自己文件的名字
    group_file_path = os.path.join(base_path, '新建文本文档.txt')#改成你自己文件的名字
    output_file_path = os.path.join(base_path, 'New.fasta')#别改！！！Don't change it!

    replace_and_sort_fasta_samples(fasta_file_path, group_file_path, output_file_path)
########################################################################################
########################################################################################
########################################################################################

import os
from collections import defaultdict

# 设置基本路径
base_path = 'C:/Users/a/Desktop'#改成你的文件路径

# 文件路径
file_path = os.path.join(base_path, 'New.fasta') #别改！Don't change it!
new_file_path = os.path.join(base_path, 'New.arp')#别改！Don't change it!
new_file_txt_path = os.path.join(base_path, 'New.hap')#别改！Don't change it!
header_arp_path = os.path.join(base_path, '开头.arp')#别改！Don't change it!
final_arp_path = os.path.join(base_path, '最终.arp')#别改！Don't change it!

# 读取和解析 New.fasta 文件
sequences = {}
with open(file_path, 'r') as file:
    for line in file:
        line = line.strip()
        if line.startswith('&gt;'):
            parts = line[1:].split(' ')
            group = parts[0]
            seq_id = parts[1]
            sequences[seq_id] = {'group': group, 'sequence': ''}
        else:
            sequences[seq_id]['sequence'] += line

# 计算组别数量
group_set = set(details['group'] for details in sequences.values())
Group_Number = len(group_set)

# 初始化用于存储唯一序列及其对应hap类型的字典和统计
unique_sequences = {}
group_hap_counts = defaultdict(lambda: defaultdict(int))
hap_counter = 1

# 分配hap类型并统计
for seq_id, details in sequences.items():
    seq = details['sequence']
    group = details['group']
    if seq not in unique_sequences:
        hap_label = f'Hap_{hap_counter}'
        unique_sequences[seq] = hap_label
        hap_counter += 1
    else:
        hap_label = unique_sequences[seq]
    group_hap_counts[group][hap_label] += 1

# 写入New.arp文件
with open(new_file_path, 'w', encoding='utf-8') as new_file:
    for group, haps in group_hap_counts.items():
        new_file.write(f'[[Samples]]\nSampleName = "{group}"\nSampleSize = {sum(haps.values())}\nSampleData= {{\n')
        for hap, count in haps.items():
            new_file.write(f'    {hap} {count}\n')
        new_file.write('}}\n\n')

# 写入New.hap文件
with open(new_file_txt_path, 'w', encoding='utf-8') as txt_file:
    for seq, hap_label in unique_sequences.items():
        txt_file.write(f'{hap_label}\t{seq}\n')

# 创建并写入开头.arp文件
with open(header_arp_path, 'w', encoding='utf-8') as header_file:
    header_file.write("[Profile]\n   Title = \"Haplotype Data from I fuck DnaSP file\"\n")
    header_file.write(f"   NbSamples = {Group_Number}\n   DataType = DNA\n   GenotypicData = 0\n")#如果你的数据是二倍体，需要将GenotypicData = 1
    header_file.write("   LocusSeparator = NONE\n   MissingData = \"?\"\n   CompDistMatrix = 1\n\n[Data]\n\n")
    header_file.write("[[HaplotypeDefinition]]\n   HaplList = EXTERN \"New.hap\"\n\n")

# 将New.arp的内容追加到开头.arp
with open(header_arp_path, 'a', encoding='utf-8') as header_file, open(new_file_path, 'r', encoding='utf-8') as new_file:
    header_file.write(new_file.read())

# 重命名或移动文件以创建最终.arp
os.rename(header_arp_path, final_arp_path)

# 删除生成的New.arp文件
os.remove(new_file_path)

print(f"最终文件已保存至: {final_arp_path}")
# 删除位于C:/Users/a/Desktop的New.fasta文件
fasta_file_path = os.path.join(base_path, 'New.fasta')
os.remove(fasta_file_path)

print(f"文件 {fasta_file_path} 已被删除。")
print("给我点个赞如何？")


复制]]></description><link>软件\python\数据科学与格式转换\python：将fasta转换成arp.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：将FASTA转换成Arp.md</guid><pubDate>Tue, 23 Jul 2024 02:02:16 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402201357957.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402201357957.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[目的]]></title><description><![CDATA[ 
 <br><br>这个脚本只会把 VCF 文件转为 fasta，不依赖参考基因组。逻辑是只转化测序的位点。同时，这个脚本应该不会考虑 Indels 的情况。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403301633073.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br>def vcf_to_fasta_mtDNA_improved(vcf_path, output_path):
    """
    Convert a VCF file to FASTA format for mtDNA, considering it as haploid and minimizing 'N'.
    
    Args:
    vcf_path (str): Path to the input VCF file.
    output_path (str): Path to save the output FASTA file.
    """
    # 存储样本名的列表
    sample_names = []
    # 用字典存储每个样本的序列，键为样本名，值为序列的列表
    sample_sequences = {}
    
    # 打开并读取VCF文件
    with open(vcf_path, 'r') as file:
        for line in file:
            if line.startswith('##'):
                continue  # 忽略文件头的元信息行
            elif line.startswith('#CHROM'):
                # 提取样本名，这些名字位于文件的第一行，从第10列开始
                parts = line.strip().split('\t')
                sample_names = parts[9:]  # 获取所有样本名
                # 为每个样本初始化序列列表，包括描述行
                for name in sample_names:
                    sample_sequences[name] = [f"&gt;{name}\n"]
            else:
                # 处理VCF文件的数据行
                parts = line.strip().split('\t')
                ref_base = parts[3]  # 参考碱基
                alt_bases = parts[4].split(',')  # 所有替代碱基，以逗号分隔
                # 遍历每个样本的基因型信息
                for i, genotype_info in enumerate(parts[9:], start=9):
                    genotype = genotype_info.split(':')[0]  # 提取基因型
                    # 根据基因型确定使用的碱基
                    if '.' in genotype:
                        base = 'N'  # 未知碱基
                    elif '0/0' in genotype:
                        base = ref_base  # 使用参考碱基
                    else:
                        # 提取第一个非零碱基，考虑到mtDNA应为单倍体
                        alleles = [int(allele) for allele in genotype.replace('.', '0').split('/') if allele.isdigit()]
                        base = ref_base if alleles[0] == 0 else alt_bases[alleles[0]-1]
                    # 添加碱基到样本序列中
                    sample_sequences[sample_names[i-9]].append(base)

    # 将每个样本的序列写入到输出文件
    with open(output_path, 'w') as out_file:
        for sample, seq in sample_sequences.items():
            out_file.write(''.join(seq) + "\n")

# 指定输入VCF文件和输出FASTA文件的路径
vcf_path = 'C:/Users/a/Desktop/Illumina_mtDNA.vcf'  # 请替换为实际的VCF文件路径
output_path = 'C:/Users/a/Desktop/Illumina_mtDNA.fasta'  # 指定输出FASTA文件的路径

# 调用函数，生成FASTA文件
vcf_to_fasta_mtDNA_improved(vcf_path, output_path)

复制<br><br>

def vcf_to_fasta_with_sample_names(vcf_path, output_path):
    sample_names = []  # 用于存储样本名
    sample_sequences = {}
    
    with open(vcf_path, 'r') as file:
        for line in file:
            if line.startswith('##'):
                continue  # 跳过文件的元信息
            elif line.startswith('#CHROM'):
                parts = line.strip().split('\t')
                sample_names = parts[9:]  # 获取样本名
                for name in sample_names:
                    sample_sequences[name] = [f"&gt;{name}\n"]  # 为每个样本初始化序列列表，包括描述行
            else:
                parts = line.strip().split('\t')
                ref_base = parts[3]
                alt_bases = parts[4].split(',')
                for i, genotype_info in enumerate(parts[9:], start=9):
                    genotype = genotype_info.split(':')[0]
                    if '.' in genotype:
                        base = 'N'
                    else:
                        alleles = [int(allele) for allele in genotype.split('/') if allele.isdigit()]
                        base = ''.join([alt_bases[allele-1] if allele &gt; 0 else ref_base for allele in alleles])
                    sample_sequences[sample_names[i-9]].append(base)

    # 写入到输出文件
    with open(output_path, 'w') as out_file:
        for sample, seq in sample_sequences.items():
            out_file.write(''.join(seq) + "\n")  # 将序列和其描述行写入文件

# 指定VCF文件路径和输出文件路径
vcf_path = 'C:/Users/a/Desktop/Illumina_mtDNA.vcf'
output_path = 'C:/Users/a/Desktop/Illumina_mtDNA.fasta'

# 调用函数，生成包含样本名称ID的FASTA文件
vcf_to_fasta_with_sample_names(vcf_path, output_path)

复制]]></description><link>软件\python\数据科学与格式转换\python：将vcf文件伪二倍体转化为单倍体fatsa文件.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：将VCF文件伪二倍体转化为单倍体fatsa文件.md</guid><pubDate>Fri, 21 Jun 2024 07:31:21 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403301633073.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403301633073.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[更新时间]]></title><description><![CDATA[ 
 <br><br>2024年4月29日 ：加入了一个新功能，添加一个马金玥要求的 ;1<br>
并且可以根据 csv 文件的列表剔除多余的序列。<br><br>将 VCF 文件转为 rdf 进行network 软件分析。<br>
由于这个上古软件需要你的 ID 长度必须小于 15 个字符，所以我们需要对 ID 进行重命名来解决这个问题。<br><br><br>请注意，这个脚本读取的是一个伪二倍体的文件并将其转为单倍体。<br>
其原始格式应该类似如下：<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403292241495.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>请使用 csv 格式。标题请完全对应起来。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403301626833.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>import os
import pandas as pd
import re
import csv

def vcf_processing_combined(vcf_path, fasta_output_path, txt_output_path, csv_path, final_rdf_path, mapping_csv_path):
    # Load the CSV file for additional info mapping
    csv_df = pd.read_csv(csv_path)
    id_to_info = {row['Object_ID']: f";{row['Re_Population_Province']};{row['Haplogrouper']}" for index, row in csv_df.iterrows()}
    
    # Process the VCF file to create sequences
    sample_names = []
    sample_sequences = {}
    with open(vcf_path, 'r') as file:
        for line in file:
            if line.startswith('##'):
                continue
            elif line.startswith('#CHROM'):
                parts = line.strip().split('\t')
                all_sample_names = parts[9:]
                sample_names = [name for name in all_sample_names if name in id_to_info]
                for name in sample_names:
                    additional_info = id_to_info.get(name, "")
                    sample_sequences[name] = [f"&gt;{name}{additional_info};\n"]
            else:
                parts = line.strip().split('\t')
                ref_base = parts[3]
                alt_bases = parts[4].split(',')
                genotype_infos = parts[9:]  # Entire genotype info
                # Only process genotype info for filtered sample names
                for name, genotype_info in zip(sample_names, genotype_infos):
                    genotype = genotype_info.split(':')[0]
                    if '.' in genotype:
                        base = 'N'
                    elif '0/0' in genotype:
                        base = ref_base
                    else:
                        alleles = [int(allele) for allele in genotype.replace('.', '0').split('/') if allele.isdigit()]
                        base = ref_base if alleles[0] == 0 else alt_bases[alleles[0]-1]
                    sample_sequences[name].append(base)
    
    # Write the output FASTA file
    with open(fasta_output_path, 'w') as out_file:
        for sample, seq in sample_sequences.items():
            out_file.write(''.join(seq) + "\n")
    
    # Extract SNP positions and write to TXT file with FASTA appended
    numbers = []
    with open(vcf_path, 'r') as vcf_file:
        numbers = [line.split('\t')[1] for line in vcf_file if not line.startswith('#')]
    count = len(numbers)
    with open(txt_output_path, 'w') as output_file:
        output_file.write("  ;1.0\n")
        output_file.write(';'.join(numbers) + ';')
        output_file.write('\n')
        output_file.write(';'.join(['10'] * count) + ';')
    
    # Append FASTA content to the TXT file
    with open(fasta_output_path, 'r') as fasta_file, open(txt_output_path, 'a') as txt_file:
        fasta_content = fasta_file.read()
        txt_file.write("\n")  # Separator
        txt_file.write(fasta_content)
    
    os.remove(fasta_output_path)  # Remove the intermediate FASTA file
    
    # Rename sequences in the TXT file and create the final RDF file
    def extract_and_rename_handling_encoding(file_path):
        new_names_map = []
        seq_number = 1
        with open(file_path, 'r', encoding='latin-1') as file:
            for line in file:
                if line.startswith('&gt;'):
                    original_name = line[1:].split(';')[0]
                    if original_name not in id_to_info:  # Check if sequence should be included
                        continue
                    underscore_pos = original_name.find('_')
                    second_char = original_name[underscore_pos + 1] if underscore_pos != -1 and underscore_pos + 1 &lt; len(original_name) else ''
                    new_name = f"{original_name[0]}{second_char}{seq_number}"
                    seq_number += 1
                    new_names_map.append((original_name, new_name))
        return new_names_map
    
    new_names_map_handling_encoding = extract_and_rename_handling_encoding(txt_output_path)
    
    with open(mapping_csv_path, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['Original Name', 'New Name'])
        writer.writerows(new_names_map_handling_encoding)
    
    name_map = {old: new for old, new in new_names_map_handling_encoding}
    
    # Add a ';1' after the first semicolon in the line
    with open(txt_output_path, 'r', encoding='latin-1') as original_file, open(final_rdf_path, 'w', encoding='utf-8') as new_file:
        for line in original_file:
            if line.startswith('&gt;'):
                parts = line.split(';', 1)
                line = f"{parts[0]};1;{parts[1]}"
                original_name = parts[0][1:]
                if original_name in name_map:
                    new_name = name_map[original_name]
                    line = line.replace(original_name, new_name, 1)
            new_file.write(line)
    
    os.remove(txt_output_path)  # Optionally remove the intermediate TXT file

# Define your paths
vcf_path = 'C:/Users/a/Desktop/Illumina_mtDNA.vcf'
fasta_output_path = 'C:/Users/a/Desktop/一个悲惨的即将被删除的文件.fasta'
txt_output_path = 'C:/Users/a/Desktop/一个中间文件.txt'
csv_path = 'C:/Users/a/Desktop/Illumina芯片分析表.csv'
final_rdf_path = 'C:/Users/a/Desktop/Final.rdf'
mapping_csv_path = 'C:/Users/a/Desktop/映射关系.csv'

# Execute the combined function with the necessary paths
try:
    vcf_processing_combined(vcf_path, fasta_output_path, txt_output_path, csv_path, final_rdf_path, mapping_csv_path)
    print("所有的文件都成功处理,并且已删除中间文件\n今天是一个好结局")
except Exception as e:
    print(f"中间出现了一些问题,请检查你的VCF文件和CSV文件\n今天是一个普通结局")

复制<br><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403301625347.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403301625795.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>这个代码功能差不多，但是不包含重命名的步骤，可能没什么用。<br>import os
import pandas as pd

def vcf_processing_combined(vcf_path, fasta_output_path, txt_output_path, csv_path):
    # Load the CSV file
    csv_df = pd.read_csv(csv_path)
    
    # Create a dictionary to map IDs to their group and haplogroup
    id_to_info = {row['Object_ID']: f";{row['Re_Population_Province']};{row['Haplogrouper']}" for index, row in csv_df.iterrows()}
    
    # Process the VCF file
    sample_names = []
    sample_sequences = {}
    with open(vcf_path, 'r') as file:
        for line in file:
            if line.startswith('##'):
                continue
            elif line.startswith('#CHROM'):
                parts = line.strip().split('\t')
                sample_names = parts[9:]
                for name in sample_names:
                    additional_info = id_to_info.get(name, "")
                    sample_sequences[name] = [f"&gt;{name}{additional_info};\n"]
            else:
                parts = line.strip().split('\t')
                ref_base = parts[3]
                alt_bases = parts[4].split(',')
                for i, genotype_info in enumerate(parts[9:], start=9):
                    genotype = genotype_info.split(':')[0]
                    if '.' in genotype:
                        base = 'N'
                    elif '0/0' in genotype:
                        base = ref_base
                    else:
                        alleles = [int(allele) for allele in genotype.replace('.', '0').split('/') if allele.isdigit()]
                        base = ref_base if alleles[0] == 0 else alt_bases[alleles[0]-1]
                    sample_sequences[sample_names[i-9]].append(base)
    
    # Write the output FASTA file
    with open(fasta_output_path, 'w') as out_file:
        for sample, seq in sample_sequences.items():
            out_file.write(''.join(seq) + "\n")
    
    print(f"FASTA file has been successfully written to {fasta_output_path}")

# Example usage



# Call the function with the necessary paths


    # 然后，从相同的VCF文件生成txt文件，并在最后追加FASTA内容
    numbers = []
    with open(vcf_path, 'r') as vcf_file:
        numbers = [line.split('\t')[1] for line in vcf_file if not line.startswith('#')]
    count = len(numbers)
    with open(txt_output_path, 'w') as output_file:
        output_file.write("  ;1.0\n")
        output_file.write(';'.join(numbers) + ';')
        output_file.write('\n')
        output_file.write(';'.join(['10'] * count) + ';')

    # 从FASTA文件读取内容并追加到txt文件中
    with open(fasta_output_path, 'r') as fasta_file, open(txt_output_path, 'a') as txt_file:
        fasta_content = fasta_file.read()
        txt_file.write("\n")  # 添加分隔
        txt_file.write(fasta_content)
    
    print(f"Data has been successfully written and FASTA content appended to {txt_output_path}")
    print(f"Extracted {count} numbers.")
    if count == 100:
        print(';'.join(['10'] * count) + ';')

    # 文件重命名
    rdf_output_path = txt_output_path.rsplit('.', 1)[0] + '.rdf'
    os.remove(fasta_output_path)
    print("一个不合时宜的fasta文件已经被删除了。")
    
# 指定文件路径
vcf_path = 'C:/Users/a/Desktop/Illumina_mtDNA.vcf' # 替换为你的VCF文件路径
fasta_output_path = 'C:/Users/a/Desktop/Illumina_mtDNA.fasta' # 指定你的fasta文件输出路径
txt_output_path = 'C:/Users/a/Desktop/extracted_numbers_with_count_optimized.rdf' # 指定你的rdf文件输出路径
csv_path = 'C:/Users/a/Desktop/Illumina芯片分析表.csv'  # 替换为你的分组名单

# 执行函数
vcf_processing_combined(vcf_path, fasta_output_path, txt_output_path, csv_path)


复制]]></description><link>软件\python\数据科学与格式转换\python：将vcf文件转为rdf并重新命名id.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：将VCF文件转为rdf并重新命名ID.md</guid><pubDate>Fri, 21 Jun 2024 07:31:22 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403292241495.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403292241495.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[python：快速整理线粒体单倍群至目标上游单倍群（2024年10月23日更新）]]></title><description><![CDATA[ 
 <br>更新内容：
2024年10月23日16:25:17：优化代码逻辑，提高速度
<br>在利用单倍群频率进行 PCA 分析的时候，需要将单倍群划分到合理的级别。我们可以参考之前的研究来将单倍群进行统一。例如，我们可以参考这篇文献 <a data-footref="1" href="about:blank#fn-1-3d0ee807868908f1" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>。附表中存在这样：<br>Haplogroup	Anhui	Beijing	Chongqing	Fujian	Gansu	Guangxi	Guangdong	Guizhou
A9.35 8.46 5.75 4.84 9.03 4.05 3.97 8.28 
B410.43 10.24 11.50 11.94 11.94 12.61 12.23 8.28 
B54.34 4.01 6.42 5.32 3.23 6.76 5.95 10.19 
B60.00 0.00 0.00 0.00 0.00 0.00 0.51 0.00 
C3.39 4.01 3.98 2.10 5.16 4.05 3.07 2.55 
D10.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
D20.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
D415.99 19.71 14.38 12.74 17.42 4.95 8.90 17.83 
D57.32 6.68 5.31 8.23 6.45 2.25 4.48 4.46 
D60.14 0.45 0.44 0.32 0.32 0.90 0.45 0.64 
E0.14 0.00 0.44 0.16 0.00 0.00 0.06 0.00 
F0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
F17.86 8.57 8.63 10.48 10.00 15.32 12.93 12.74 
F23.93 4.57 3.54 4.52 2.58 4.50 3.65 3.82 
F30.68 0.89 2.21 0.97 0.32 2.25 2.37 1.27 
F40.95 1.00 0.44 1.13 0.65 1.35 1.02 0.00 
G0.00 0.11 0.00 0.00 0.00 0.00 0.06 0.00 
G11.76 2.23 2.88 1.29 0.65 0.45 1.15 0.64 
G23.93 3.12 2.88 2.90 3.87 1.80 1.92 3.18 
G31.36 0.67 0.22 0.32 0.65 0.45 0.26 0.00 
G40.00 0.11 0.00 0.00 0.00 0.00 0.00 0.00 
H0.41 0.22 0.22 0.00 1.61 0.00 0.00 0.00 
I0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
J0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
K0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
M0.00 0.11 0.00 0.00 0.00 0.45 0.00 0.00 
.....
复制<br>那么，我们可按照第一列的级别进行筛选。也就是说，将所有下游单倍群全部统一到我们制定的级别中去。<br>
将第一列的所有单倍群保存至一个文档，例如 目标单倍群.txt：<br>M
M7
M8
C
Z
M9
E
Q
D4
D5
D6
O
S
N1
N2
N9
A
X
Y
W
I
R0
JT
R9
B4
U
HV
P
N
R
F1
F2
F3
F4
B5
M1'20'51
M2
M3
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M5
M6
M10
M12'G
M1'20'51
M2
M3
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M4"67
M5
M6
M10
M12'G
M13'46'61
M13'46'61
M14
M15
M17
M19'53
M19'53
M21
M22
M23'75
M23'75
M24'41
M24'41
M25
M26
M27
M28
M29'Q
M31
M32'56
M32'56
M33
M34'57
M34'57
M35
M36
M39'70
M39'70
M40
M42'74
M42'74
M44
M47
M48
M49
M50
M52
M55'77
M55'77
M58
M59
M60
M62'68
M62'68
M69
M71
M72
M73'79
M73'79
M76
M81
M91
M80'D
N5
N3
N7
N8
N10
N11
N13
N14
N21
N22
O
S
R1
R2'JT
R5
R6
R7
R8
R12'21
R12'21
R14
R22
R23
R30
R31
R32
P
G1
G2
G3
G4
复制<br><br>只需要单倍群，例如准备一个名为 需要查询的单倍群.txt:<br>haplogroup
C5d
C5d1
C5d1
C7
C7
C7
C7
C7a2a
C7b
C7b
D2b
D2b2
D3
D3
D4a
D4a
D4a
D4a
D4a
......
复制<br><br>使用之前的脚本：<a data-href="Python：查找mtDNA上游单倍型（2024年10月23日更新）" href="软件\python\数据科学与格式转换\python：查找mtdna上游单倍型（2024年10月23日更新）.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>Python：查找mtDNA上游单倍型（2024年10月23日更新）</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">。我们可以获得一些文件，最重要的是这个文件：逆序等级.txt。<br>Level_19	Level_18	Level_17	Level_16	Level_15	Level_14	Level_13	Level_12	Level_11	Level_10	Level_9	Level_8	Level_7	Level_6	Level_5	Level_4	Level_3	Level_2	Level_1	Level_0
C5dC5bC5CCZM8ML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
C5d1C5dC5bC5CCZM8ML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
C5d1C5dC5bC5CCZM8ML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
C7CCZM8ML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
C7CCZM8ML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
C7CCZM8ML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
C7CCZM8ML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
C7a2aC7a2C7aC7CCZM8ML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
C7bC7aC7CCZM8ML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
C7bC7aC7CCZM8ML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
D2bD2a'bD2D4e1D4e1'3D4eD4DM80'DML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
D2b2D2bD2a'bD2D4e1D4e1'3D4eD4DM80'DML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
D3D4b1cD4b1D4bD4DM80'DML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
D3D4b1cD4b1D4bD4DM80'DML3L3'4L3'4'6L2'3'4'6L2'3'4'5'6L1'2'3'4'5'6
复制<br>你需要认真检查每一步的总数量，因为这个脚本可能无法识别特殊字符*+-等！<br><br>为了把 M,N 和 R* 收上去，还需要一个 错误纠正.txt。<br>
点击这里： <a data-tooltip-position="top" aria-label="https://vip.123pan.cn/1835545223/%E6%96%87%E6%A1%A3%EF%BC%88%E5%85%B1%E4%BA%AB%EF%BC%89/%E9%94%99%E8%AF%AF%E7%BA%A0%E6%AD%A3.txt" rel="noopener nofollow" class="external-link" href="https://vip.123pan.cn/1835545223/%E6%96%87%E6%A1%A3%EF%BC%88%E5%85%B1%E4%BA%AB%EF%BC%89/%E9%94%99%E8%AF%AF%E7%BA%A0%E6%AD%A3.txt" target="_blank">下载地址</a><br><br>import pandas as pd
import re

# 定义预处理函数
def preprocess_haplogroup(haplogroup):
    # 删除特殊字符 * 和 -
    haplogroup = re.sub(r'[\*\-]', '', haplogroup)
    # 处理 + 及其后面的字符
    haplogroup = re.sub(r'\+.*', '', haplogroup)
    return haplogroup

# 读取文件内容
result_df = pd.read_csv(r'C:/Users/victo/Desktop/逆序等级.txt', delimiter='\t')
target_df = pd.read_csv(r'C:/Users/victo/Desktop/目标.txt', header=None, names=['Haplogroup'])

# 读取错误纠正文件
correction_df = pd.read_csv('C:/Users/victo/Desktop/错误纠正.txt', delimiter='\t', header=None, names=['Original', 'Correction'])

# 预处理目标文件
target_df['Haplogroup'] = target_df['Haplogroup'].apply(preprocess_haplogroup)

# 打开输出文件
output_file_path = r'C:/Users/victo/Desktop/最终.txt'
with open(output_file_path, 'w') as output_file:
    # 写入表头
    output_file.write('OriginalHaplogroup\tMatchedHaplogroup\n')
    
    # 遍历结果逆序文件的每一行
    for _, row in result_df.iterrows():
        original_haplogroup = row[0]
        matched_haplogroup = original_haplogroup  # 默认是其本身
        # 从最低等级到最高等级遍历
        for col in row:
            col = str(col).strip()  # 确保col是字符串类型并去除可能的空格
            if pd.notna(col) and target_df['Haplogroup'].str.fullmatch(col).any():
                matched_haplogroup = target_df[target_df['Haplogroup'].str.fullmatch(col)].iloc[0]['Haplogroup']
                break

        # 检查是否需要纠正
        if correction_df['Original'].str.fullmatch(matched_haplogroup).any():
            matched_haplogroup = correction_df[correction_df['Original'].str.fullmatch(matched_haplogroup)].iloc[0]['Correction']
        
        # 写入输出文件
        output_file.write(f"{original_haplogroup}\t{matched_haplogroup}\n")

print(f"结果已保存到 {output_file_path}")

复制<br><br>import pandas as pd
import re

# 定义预处理函数
def preprocess_haplogroup(haplogroup):
    # 删除特殊字符 * 和 -
    haplogroup = re.sub(r'[\*\-]', '', haplogroup)
    # 处理 + 及其后面的字符
    haplogroup = re.sub(r'\+.*', '', haplogroup)
    return haplogroup

# 读取文件内容
result_df = pd.read_csv(r'C:/Users/victo/Desktop/逆序等级.txt', delimiter='\t')

target_df = pd.read_csv(r'F:/OneDrive/文档（科研）/脚本/我的科研脚本/Python/母系专用/目标.txt', header=None, names=['Haplogroup'])
#target_df = pd.read_csv(r'F:/OneDrive/文档（科研）/脚本/我的科研脚本/Python/母系专用/目标粗糙.txt', header=None, names=['Haplogroup'])

# 读取错误纠正文件
correction_df = pd.read_csv('F:/OneDrive/文档（科研）/脚本/我的科研脚本/Python/母系专用/错误纠正.txt', delimiter='\t', header=None, names=['Original', 'Correction'])

# 预处理目标文件
target_df['Haplogroup'] = target_df['Haplogroup'].apply(preprocess_haplogroup)

# 将目标群体和纠正数据转为集合提高查找速度
target_set = set(target_df['Haplogroup'])
correction_dict = dict(zip(correction_df['Original'], correction_df['Correction']))

# 初始化结果列表
result_list = []

# 遍历结果逆序文件的每一行
for _, row in result_df.iterrows():
    original_haplogroup = row[0]
    matched_haplogroup = original_haplogroup  # 默认是其本身
    
    # 从最低等级到最高等级遍历，尽量减少字符串匹配操作
    for col in row:
        col = str(col).strip()  # 确保col是字符串类型并去除可能的空格
        if col in target_set:
            matched_haplogroup = col
            break

    # 检查是否需要纠正
    if matched_haplogroup in correction_dict:
        matched_haplogroup = correction_dict[matched_haplogroup]
    
    # 将结果加入结果列表
    result_list.append(f"{original_haplogroup}\t{matched_haplogroup}")

# 一次性写入文件
output_file_path = r'C:/Users/victo/Desktop/最终.txt'
with open(output_file_path, 'w') as output_file:
    output_file.write('OriginalHaplogroup\tMatchedHaplogroup\n')
    output_file.write('\n'.join(result_list))

print(f"结果已保存到 {output_file_path}")

复制<br>完成！<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240619223339.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br>
<br>
<br>River Valleys Shaped the Maternal Genetic Landscape of Han Chinese<a href="about:blank#fnref-1-3d0ee807868908f1" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>软件\python\数据科学与格式转换\python：快速整理线粒体单倍群至目标上游单倍群（2024年10月23日更新）.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：快速整理线粒体单倍群至目标上游单倍群（2024年10月23日更新）.md</guid><pubDate>Wed, 23 Oct 2024 08:26:18 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[作用]]></title><description><![CDATA[ 
 <br><br>这个脚本是一个根据SPSS软件分析得出的主成分表，以及自己准备的分组文件转呈R语言的代码。<br>我真不知道第一个这样做的人是怎么想的。但是毫无疑问，他一定是牢牢记住了以下黄金准则：<br>
<br>不要注释你的代码：毕竟，你的代码是如此直观，任何人（包括六个月后的你）都能一眼看懂你的意图。谁需要那些烦人的注释呢？未来的你肯定会感激现在的自己，因为解读代码就像破解古代密码一样有趣。
<br>复制粘贴是最佳实践：为什么要浪费时间去理解代码的工作原理呢？当你在互联网上找到一个看起来可以工作的解决方案时，直接复制粘贴到你的项目中就行了。不需要修改，更不需要测试——它肯定能完美运行。
<br>忽略版本控制：版本控制系统，比如Git，实在是太复杂了。保存你所有代码的不同版本和备份，确保你能回溯到任何一个开发阶段——这听起来像是多余的工作。直接在一个文件上工作，用不同的文件名保存不同版本，比如final_project, final_project_really, final_project_really_this_time，这才是高效的方式。
<br>避免学习基础知识：谁需要了解数据结构和算法、计算机科学的基础概念呢？这些东西只会让编程变得更加复杂和难以理解。直接跳到最酷的框架和库，开始构建应用程序吧。当你遇到性能问题或不可解的错误时，一定是计算机的问题，不是你的。
<br>代码优化是浪费时间：如果你的程序可以运行，那么它就是完美的。不要浪费时间去优化代码或是使其运行得更快、更高效。用户完全不介意等待几分钟来加载你的应用程序，或是让他们的设备为了运行一个简单的任务而过热。
<br><br>
<br>分组文件
<br>====Central China====
Dong_Hunan
Gelao_Guizhou
Han_Henan
Tujia_Chongqing
Miao_Chongqing
Han_Chongqing
====East China====
Han_Fujian
Han_Shandong
She_Fujian
Tanka_Fujian
====Northwest====
Han_Shanxi
Baoan_Gansu
Dongxiang_Gansu
Han_Gansu
Han_Shaanxi
Hui_Gansu
Mongolian_InnerMongolia
Salar_Gansu
Yugu_Gansu
====South China====
Han_Guangdong
Han_Hainan
Hui_Hainan
Li_Hainan
====Southwest====
Zhuang_Guangxi
Bai_Guizhou
Bouyei_Guizhou
Dai_Yunnan
Dong_Guizhou
Gelao_Guizhou
Han_Guangxi
Han_Guizhou
Han_Sichuan
Hani_Yunnan
Hui_Guizhou
Hui_Sichuan
Manchu_Guizhou
Maonan_Guizhou
Miao_Guizhou
Miao_Sichuan
Mongolian_Guizhou
Nanjing_Guizhou
Qiang_Sichuan
Shui_Guizhou
Tibetan_Sichuan
Tibetan_Tibet
Tujia_Guizhou
Yao_Guizhou
Yi_Guizhou
Zhuang_Guangxi
复制<br>
<br>主成分分析结果
<br>,1,2,3,4,5,6,7
Han_Chongqing,0.966,,,,,,
Han_Guangdong,0.960,,-0.167,-0.128,,,
Hui_Hainan,0.946,,,,,,
Han_Guangxi,0.943,0.137,-0.212,-0.128,,,
Zhuang_Guangxi,0.936,0.162,-0.166,-0.158,,,
Han_Hainan,0.924,0.157,-0.214,,,,
Han_Shaanxi,0.904,-0.221,,0.107,-0.101,0.206,-0.133
Han_Henan,0.902,-0.249,,0.206,,,-0.126
Tujia_Guizhou,0.897,,,,,,
Dong_Guizhou,0.897,0.121,-0.209,-0.120,,,0.173
.....
.....
.....
复制<br>第一列是名称，第二三四列分别代表第几个主成分。<br><br># 此处填写主成分表格第一列为样本名的表格路径
poplist_path='C:/Users/a/Desktop/poplist.txt'
# 此处填写输出R脚本路径
out_path='C:/Users/a/Desktop/PCAplot.r'
poptext = open(poplist_path).readlines()
# 输出R脚本，编码为utf-8
pca = open(out_path,'w',encoding = 'utf-8')
pop_list=[]
# 写入R脚本头部
pca.writelines("""data=read.table("") # 替换为主成分表格第一列为样本名
pop=data[,1] 
ind=data[,1]
PC1=data[,2] # PC1所在列
PC2=data[,3] # PC2所在列
PC3=data[,4] # PC3所在列
#layout(matrix(c(1,2,3,4),2,2),widths=c(1,1),heights=c(1,1))
layout(matrix(c(1,2)),widths=c(6,6),heights=c(3,1))
par(mar=c(4,4,4,4))
plot(PC1,PC2,type="n",cex.axis=0.5,cex.lab=1,cex.main=1,mgp=c(1,0.1,0), tck=-0.005)
#par(mar = c(4, 4, 1, 0.5), bg = "yellow")   # 设置边距参数和背景色
par(pin=c(6,6))   #定义图形为6英寸宽，6英寸高
par(lwd=2,cex=1.5)   #线条为默认的2倍宽，符号为默认的1.5倍
#par(cex.axis=0.75,font.axis=3)   #坐标轴文字缩放为原来的75%，斜体
frame=data.frame(PC1=PC1,PC2=PC2,name=pop,region=pop)
# 请根据自己的需要替换颜色
to21=c("#EE0000","#0D6E6E","#BA55Dd9c","#87CEFA","#97FFFA",
               "#808000","#ADD8E6","#D2691E","#FFC0CB","#FF69B4","#EE82EE",
               "#BA55D3","#8A2BE2","#0000CD","#000080","#F4A460","#FFF5EE",
               "#FF7F50","#FF6347","#2F4F4F","#48D1CC","#7FFFAA","#8FBC8F",
               "#228B22","#7FFF00","#556B2F","#FFFFF0","#FDF5E6","#FFA500",
               "#FFDEAD","#DEB887","#FAF0E6","#8D5223","#6F96F2","#00CD66",
               "#ABF4DC","#F88BD5","#AB82FF","#FFC534","#3787B4","#FFDAB9",
               "#6B8E23","#FF8C69","#2B2B2C","#D02090","#FF1493","#20B2AA",
               "#708090","#FFFAFA","#CD5C5C","#B22222","#FFFFFF","#808080",
               "#D3D3D3","#F0FFFF","#C0C0C0","#F5FFFA","#F0FFF0","#E6E6FA")
#59 gray
########################
########################
""")
# 写入R脚本主体
j=-1
for i in poptext:
    i=i.strip()
    if i[0] == '=':
        j+=1
        pop_list.append([])
        pop_list[j].append(i.strip("="))
    else:
        pop_list[j].append(i)
for i in range(0,len(pop_list)):
    pca.writelines("".join("".join(pop_list[i][0].split(sep="-")).split())+'_col=to21['+str(i+1)+']\n')
for i in pop_list:
    pca.writelines('# '+i[0]+'\n')
    for j in range(1, len(i)):
        pca.writelines('reg="'+i[j]+'"\n')
        pca.writelines('points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch={},bg={}_col,col={}_col,cex=0.6)\n'.format(str(j-1),"".join("".join(i[0].split(sep="-")).split()),"".join("".join(i[0].split(sep="-")).split())))
pca.writelines("########################\n########################\n# legend\npar(mar=c(5,1,0,2))\nplot.new()\n")
# 写入R脚本尾部
pops=[]
for i in pop_list:
    pops.append('","'.join(i))
pops='"'+'","'.join(pops)+'"'
pca.writelines('pops=   c({})\n'.format(pops))
# cols,borders,symb,fonts
cols=[]
symb=[]
fonts=[]
for i in pop_list:
    cols.append('NA')
    symb.append('NA')
    fonts.append('2')
    for j in range(len(i)-1):
        cols.append("".join("".join(i[0].split(sep="-")).split())+"_col")
        symb.append(str(j))
        fonts.append(str(1))
cols = ",".join(cols)
symb = ",".join(symb)
fonts = ",".join(fonts)
# print(cols)
# print(symb)
# print(fonts)
pca.writelines('cols=   c({})\n'.format(cols))
pca.writelines('borders=c({})\n'.format(cols))
pca.writelines('symb=   c({})\n'.format(symb))
pca.writelines('fonts=  c({})\n'.format(fonts))
pca.writelines('''legend("top",pops,pch=symb,pt.bg=cols,col=borders,ncol=7,
               cex=0.3,pt.cex=0.4,bty="o",text.font=fonts,xpd=TRUE) 
               # ncol代表一行显示几个，cex代表字体大小，pt.cex代表点的大小
               # text.font代表字体，bty代表形状，xpd代表是否显示在页面外面''')
复制<br><br>你可以得到这样的R代码：<br>data=read.table("") # 替换为主成分表格第一列为样本名
pop=data[,1] 
ind=data[,1]
PC1=data[,2] # PC1所在列
PC2=data[,3] # PC2所在列
PC3=data[,4] # PC3所在列
#layout(matrix(c(1,2,3,4),2,2),widths=c(1,1),heights=c(1,1))
layout(matrix(c(1,2)),widths=c(6,6),heights=c(3,1))
par(mar=c(4,4,4,4))
plot(PC1,PC2,type="n",cex.axis=0.5,cex.lab=1,cex.main=1,mgp=c(1,0.1,0), tck=-0.005)
#par(mar = c(4, 4, 1, 0.5), bg = "yellow")   # 设置边距参数和背景色
par(pin=c(6,6))   #定义图形为6英寸宽，6英寸高
par(lwd=2,cex=1.5)   #线条为默认的2倍宽，符号为默认的1.5倍
#par(cex.axis=0.75,font.axis=3)   #坐标轴文字缩放为原来的75%，斜体
frame=data.frame(PC1=PC1,PC2=PC2,name=pop,region=pop)
# 请根据自己的需要替换颜色
to21=c("#EE0000","#0D6E6E","#BA55Dd9c","#87CEFA","#97FFFA",
               "#808000","#ADD8E6","#D2691E","#FFC0CB","#FF69B4","#EE82EE",
               "#BA55D3","#8A2BE2","#0000CD","#000080","#F4A460","#FFF5EE",
               "#FF7F50","#FF6347","#2F4F4F","#48D1CC","#7FFFAA","#8FBC8F",
               "#228B22","#7FFF00","#556B2F","#FFFFF0","#FDF5E6","#FFA500",
               "#FFDEAD","#DEB887","#FAF0E6","#8D5223","#6F96F2","#00CD66",
               "#ABF4DC","#F88BD5","#AB82FF","#FFC534","#3787B4","#FFDAB9",
               "#6B8E23","#FF8C69","#2B2B2C","#D02090","#FF1493","#20B2AA",
               "#708090","#FFFAFA","#CD5C5C","#B22222","#FFFFFF","#808080",
               "#D3D3D3","#F0FFFF","#C0C0C0","#F5FFFA","#F0FFF0","#E6E6FA")
#59 gray
########################
########################
CentralChina_col=to21[1]
EastChina_col=to21[2]
Northwest_col=to21[3]
SouthChina_col=to21[4]
Southwest_col=to21[5]
# Central China
reg="Dong_Hunan"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=0,bg=CentralChina_col,col=CentralChina_col,cex=0.6)
reg="Gelao_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=1,bg=CentralChina_col,col=CentralChina_col,cex=0.6)
reg="Han_Henan"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=2,bg=CentralChina_col,col=CentralChina_col,cex=0.6)
reg="Tujia_Chongqing"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=3,bg=CentralChina_col,col=CentralChina_col,cex=0.6)
reg="Miao_Chongqing"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=4,bg=CentralChina_col,col=CentralChina_col,cex=0.6)
reg="Han_Chongqing"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=5,bg=CentralChina_col,col=CentralChina_col,cex=0.6)
# East China
reg="Han_Fujian"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=0,bg=EastChina_col,col=EastChina_col,cex=0.6)
reg="Han_Shandong"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=1,bg=EastChina_col,col=EastChina_col,cex=0.6)
reg="She_Fujian"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=2,bg=EastChina_col,col=EastChina_col,cex=0.6)
reg="Tanka_Fujian"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=3,bg=EastChina_col,col=EastChina_col,cex=0.6)
# Northwest
reg="Han_Shanxi"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=0,bg=Northwest_col,col=Northwest_col,cex=0.6)
reg="Baoan_Gansu"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=1,bg=Northwest_col,col=Northwest_col,cex=0.6)
reg="Dongxiang_Gansu"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=2,bg=Northwest_col,col=Northwest_col,cex=0.6)
reg="Han_Gansu"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=3,bg=Northwest_col,col=Northwest_col,cex=0.6)
reg="Han_Shaanxi"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=4,bg=Northwest_col,col=Northwest_col,cex=0.6)
reg="Hui_Gansu"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=5,bg=Northwest_col,col=Northwest_col,cex=0.6)
reg="Mongolian_InnerMongolia"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=6,bg=Northwest_col,col=Northwest_col,cex=0.6)
reg="Salar_Gansu"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=7,bg=Northwest_col,col=Northwest_col,cex=0.6)
reg="Yugu_Gansu"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=8,bg=Northwest_col,col=Northwest_col,cex=0.6)
# South China
reg="Han_Guangdong"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=0,bg=SouthChina_col,col=SouthChina_col,cex=0.6)
reg="Han_Hainan"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=1,bg=SouthChina_col,col=SouthChina_col,cex=0.6)
reg="Hui_Hainan"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=2,bg=SouthChina_col,col=SouthChina_col,cex=0.6)
reg="Li_Hainan"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=3,bg=SouthChina_col,col=SouthChina_col,cex=0.6)
# Southwest
reg="Zhuang_Guangxi"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=0,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Bai_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=1,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Bouyei_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=2,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Dai_Yunnan"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=3,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Dong_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=4,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Gelao_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=5,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Han_Guangxi"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=6,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Han_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=7,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Han_Sichuan"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=8,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Hani_Yunnan"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=9,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Hui_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=10,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Hui_Sichuan"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=11,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Manchu_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=12,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Maonan_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=13,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Miao_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=14,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Miao_Sichuan"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=15,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Mongolian_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=16,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Nanjing_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=17,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Qiang_Sichuan"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=18,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Shui_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=19,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Tibetan_Sichuan"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=20,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Tibetan_Tibet"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=21,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Tujia_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=22,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Yao_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=23,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Yi_Guizhou"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=24,bg=Southwest_col,col=Southwest_col,cex=0.6)
reg="Zhuang_Guangxi"
points(subset(frame,region==reg)$PC1,subset(frame,region==reg)$PC2,pch=25,bg=Southwest_col,col=Southwest_col,cex=0.6)
########################
########################
# legend
par(mar=c(5,1,0,2))
plot.new()
pops=   c("Central China","Dong_Hunan","Gelao_Guizhou","Han_Henan","Tujia_Chongqing","Miao_Chongqing","Han_Chongqing","East China","Han_Fujian","Han_Shandong","She_Fujian","Tanka_Fujian","Northwest","Han_Shanxi","Baoan_Gansu","Dongxiang_Gansu","Han_Gansu","Han_Shaanxi","Hui_Gansu","Mongolian_InnerMongolia","Salar_Gansu","Yugu_Gansu","South China","Han_Guangdong","Han_Hainan","Hui_Hainan","Li_Hainan","Southwest","Zhuang_Guangxi","Bai_Guizhou","Bouyei_Guizhou","Dai_Yunnan","Dong_Guizhou","Gelao_Guizhou","Han_Guangxi","Han_Guizhou","Han_Sichuan","Hani_Yunnan","Hui_Guizhou","Hui_Sichuan","Manchu_Guizhou","Maonan_Guizhou","Miao_Guizhou","Miao_Sichuan","Mongolian_Guizhou","Nanjing_Guizhou","Qiang_Sichuan","Shui_Guizhou","Tibetan_Sichuan","Tibetan_Tibet","Tujia_Guizhou","Yao_Guizhou","Yi_Guizhou","Zhuang_Guangxi")
cols=   c(NA,CentralChina_col,CentralChina_col,CentralChina_col,CentralChina_col,CentralChina_col,CentralChina_col,NA,EastChina_col,EastChina_col,EastChina_col,EastChina_col,NA,Northwest_col,Northwest_col,Northwest_col,Northwest_col,Northwest_col,Northwest_col,Northwest_col,Northwest_col,Northwest_col,NA,SouthChina_col,SouthChina_col,SouthChina_col,SouthChina_col,NA,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col)
borders=c(NA,CentralChina_col,CentralChina_col,CentralChina_col,CentralChina_col,CentralChina_col,CentralChina_col,NA,EastChina_col,EastChina_col,EastChina_col,EastChina_col,NA,Northwest_col,Northwest_col,Northwest_col,Northwest_col,Northwest_col,Northwest_col,Northwest_col,Northwest_col,Northwest_col,NA,SouthChina_col,SouthChina_col,SouthChina_col,SouthChina_col,NA,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col,Southwest_col)
symb=   c(NA,0,1,2,3,4,5,NA,0,1,2,3,NA,0,1,2,3,4,5,6,7,8,NA,0,1,2,3,NA,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25)
fonts=  c(2,1,1,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
legend("top",pops,pch=symb,pt.bg=cols,col=borders,ncol=7,
               cex=0.3,pt.cex=0.4,bty="o",text.font=fonts,xpd=TRUE) 
               # ncol代表一行显示几个，cex代表字体大小，pt.cex代表点的大小
               # text.font代表字体，bty代表形状，xpd代表是否显示在页面外面
复制]]></description><link>软件\python\数据科学与格式转换\python：利用python将主成分表转换成r脚本.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：利用Python将主成分表转换成R脚本.md</guid><pubDate>Fri, 23 Aug 2024 08:38:44 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f975.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[python：利用Python快速填写频率表]]></title><description><![CDATA[ 
 <br>这个脚本已经弃用！
更好的办法建议使用 excel软件数据透视表功能！
<br>这个脚本是用来对单倍群的数量和频率进行计算的。<br>
需要准备2个文件：<br>
<br>
填表的模板：第一行是省份（或者你希望分组的依据）；第一列是每种单倍群的名称（不要重复）

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011810364.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">


<br>
数据：第一列是单倍群，第二列是省份（或者你希望分组的依据）（不要去重）表包含标题。

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011808333.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">


<br><br>import pandas as pd
from collections import Counter
import numpy as np

# 读取数据文件
data_txt_path = 'C:/Users/a/Desktop/数据.txt'  # 修改为您的 data.txt 文件路径
with open(data_txt_path, 'r', encoding='utf-8') as file:
    lines = file.readlines()

# 解析数据，获取每行的单倍群和地点
haplogroup_location_pairs = [line.strip().split('\t') for line in lines[1:]]  # 忽略标题行

# 初始化一个字典来存储每个地区的单倍群计数
location_haplogroup_counts = {}
for haplogroup, location in haplogroup_location_pairs:
    if location not in location_haplogroup_counts:
        location_haplogroup_counts[location] = Counter()
    location_haplogroup_counts[location][haplogroup] += 1

# 读取需要更新的 CSV 文件
csv_path = 'C:/Users/a/Desktop/填表.csv'  # 修改为您的 填表.csv 文件路径
df_csv = pd.read_csv(csv_path)

# 更新 DataFrame 的每个地区列
for location, counts in location_haplogroup_counts.items():
    for haplogroup, count in counts.items():
        if haplogroup in df_csv['Unnamed: 0'].values:
            df_csv.loc[df_csv['Unnamed: 0'] == haplogroup, location] = count

# 填充 NaN 为 0，方便计算频率
df_csv_filled = df_csv.fillna(0)

# 计算每个地区的单倍群频率
for location in df_csv_filled.columns[1:]:  # 跳过第一列（单倍群名称）
    total = df_csv_filled[location].sum()
    if total &gt; 0:  # 避免除以0
        df_csv_filled[location] = df_csv_filled[location] / total

# 保存计算频率后的 DataFrame 到新的 CSV 文件
frequency_csv_path = 'C:/Users/a/Desktop/frequency_填表.csv'  # 指定新的文件路径
df_csv_filled.to_csv(frequency_csv_path, index=False)

print(f"频率计算后的 CSV 文件已保存至: {frequency_csv_path}")

复制<br><br>最终得到这样一张表格：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403012108205.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>可以直接使用下列代码进行绘图：<br># 在开始之前请确保你已经安装了下列package
# 载入需要的package
library(ape)
library(igraph)
library(ggplot2)
library(pheatmap)
library(reshape2)
library(ggsci)
library(gridExtra)

# 设置工作路径，你需要把Fst文件和分组文件放到工作路径
setwd("C:/Users/a/Desktop")

# 清除内存
rm(list=ls())

# 读取数据
mydata&lt;-read.table("fst.csv",header=TRUE,sep=",", row.names = 1)
# group &lt;-read.table("group.csv",header=TRUE,sep=",", row.names = 1)

# 创建绘图PDF
pdf("FstMatrix1.pdf", width=11, height=8.5)

# 绘制图像
pheatmap(mydata, 
         cluster_cols=TRUE, # 建议换成FALSE
         cluster_rows=TRUE, # 建议换成FALSE
         angle_col = c("45"),
         fontsize = 8,
         fontsize_row =8,
         fontsize_col =6,
         annotation_col = group, 
         annotation_row = group,
         cellwidth =8, 
         cellheight = 8, 
         cutree_cols=4, # 建议换成1
         cutree_rows=4, # 建议换成1
         main = "FstMatrix",
         color = colorRampPalette(c("#00A087FF","#3C5488FF","#F39B7FFF"))(10000),
         display_numbers = matrix(ifelse(abs(mydata)&gt; 50, "++", ifelse(abs(mydata)&gt;=40,"+"," ")), nrow(mydata)))
# 结束绘图
dev.off()

# 换个样式
pheatmap(mydata, 
         cluster_cols=TRUE, 
         cluster_rows=TRUE, 
         angle_col = c("45"),
         fontsize = 8,
         fontsize_row =8,
         fontsize_col =6,
         annotation_col = group, 
         annotation_row = group,
         cellwidth =8, 
         cellheight = 8, 
         cutree_cols=4,
         cutree_rows=4, 
         main = "FstMatrix",
         color = colorRampPalette(c("#F8F8FF","#91D1C2FF","#3C5488FF"))(10000),
         display_numbers = matrix(ifelse(abs(mydata)&gt; 50, "++", ifelse(abs(mydata)&gt;=40,"+"," ")), nrow(mydata)))

# 换个样式
pheatmap(mydata,
         cluster_cols=TRUE,
         cluster_rows=TRUE,
         angle_col = c("45"),
         fontsize = 8,
         fontsize_row =8,
         fontsize_col =6,
         annotation_col = group,
         annotation_row = group,
         cellwidth =8,
         cellheight = 8,
         cutree_cols=4,
         cutree_rows=4,
         main = "FstMatrix",
         color = colorRampPalette(c("#20364F","#31646C","#4E9280","#96B89B","#DCDFD2","#ECD9CF","#D49C87","#B86265","#8B345E","#50184E"))(10000),
         display_numbers = matrix(ifelse(abs(mydata)&gt; 50, "++", ifelse(abs(mydata)&gt;=40,"+"," ")), nrow(mydata)))

# 换个样式
pheatmap(mydata,
         cluster_cols=TRUE,
         cluster_rows=TRUE,
         angle_col = c("45"),
         fontsize = 8,
         fontsize_row =8,
         fontsize_col =6,
         annotation_col = group,
         annotation_row = group,
         cellwidth =8,
         cellheight = 8,
         cutree_cols=4,
         cutree_rows=4,
         main = "FstMatrix",
         color = colorRampPalette(c("#023047","#126883","#279EBC","#90C9E6","#FC9E7F","#F75B41","#D52120"))(10000),
         display_numbers = matrix(ifelse(abs(mydata)&gt; 50, "++", ifelse(abs(mydata)&gt;=40,"+"," ")), nrow(mydata)))

复制]]></description><link>软件\python\数据科学与格式转换\python：利用python快速填写频率表.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：利用Python快速填写频率表.md</guid><pubDate>Fri, 23 Aug 2024 08:25:53 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011810364.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011810364.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[输入文件]]></title><description><![CDATA[ 
 <br>相关链接如下：
<a data-href="python：根据单倍群频率使用sklearn进行降维大礼包" href="软件\python\数据科学与格式转换\python：根据单倍群频率使用sklearn进行降维大礼包.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>python：根据单倍群频率使用sklearn进行降维大礼包</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;"><br>
<a data-href="Nat. Methods 科学家如何看待高维数据降维，关于PCA、t-SNE与UMAP的应用与挑战" href="文献及报道\报道\nat.-methods-科学家如何看待高维数据降维，关于pca、t-sne与umap的应用与挑战.html" class="internal-link" target="_self" rel="noopener nofollow">Nat. Methods 科学家如何看待高维数据降维，关于PCA、t-SNE与UMAP的应用与挑战</a>
<br><br>需要一个人群的 单倍群频率表格。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410231734929.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
请保存为 txt 文件，以制表符分割。<br><br>import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
import plotly.express as px

# 加载数据
file_path = 'C:/Users/victo/Desktop/新建 Text Document.txt'
data = pd.read_csv(file_path, sep='\t')

# 去掉第一列（假设是非数值数据，例如样本名称）
pca_data = data.drop(columns=data.columns[0])

# 执行PCA
dimension = int(input("请输入要保留的维度数(例如2)："))  # 确保输入的是整数
pca = PCA(n_components=dimension)
pca_results = pca.fit_transform(pca_data.T)  # T表示转置
explained_variance_ratio = pca.explained_variance_ratio_

# 将解释度写入文件
with open('C:/Users/victo/Desktop/PCA降维结果解释度.txt', 'w') as f:
    f.write('Explained Variance Ratio:\n')
    for i, ratio in enumerate(explained_variance_ratio):
        f.write(f'Component {i+1}: {ratio:.4f}\n')

# 生成PCA结果的DataFrame
# 动态生成主成分列名
columns = ['PC' + str(i+1) for i in range(dimension)]
pca_results_df = pd.DataFrame(pca_results, columns=columns)
pca_results_df['Sample Name'] = pca_data.columns

# 保存结果到txt文件
pca_results_df.to_csv('C:/Users/victo/Desktop/PCA结果.txt', sep='\t', index=False)

# 可视化PCA结果（只绘制前两个主成分）
plt.figure(figsize=(8, 6))
sns.scatterplot(x='PC1', y='PC2', data=pca_results_df)
plt.title('PCA Visualization')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.savefig('C:/Users/victo/Desktop/PCA可视化.png')
plt.show()

# 使用Plotly进行可视化
fig = px.scatter(pca_results_df, x='PC1', y='PC2', text='Sample Name', title='PCA Visualization')
fig.update_traces(marker=dict(size=12, opacity=0.8), selector=dict(mode='markers'))
fig.show()

复制<br>运行代码，将提示 请输入要保留的维度数(例如2)：，直接输入数字按 回车 即可。]]></description><link>软件\python\数据科学与格式转换\python：利用sklearn降维pca.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/Python：利用sklearn降维PCA.md</guid><pubDate>Wed, 23 Oct 2024 09:35:45 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[什么是VCF]]></title><description><![CDATA[ 
 <br>这个脚本已经弃用！
更好的办法建议使用 <a data-href="python：将FASTA转换成Arp" href="软件\python\数据科学与格式转换\python：将fasta转换成arp.html" class="internal-link" target="_self" rel="noopener nofollow">python：将FASTA转换成Arp</a>
<br><br>VCF 是生物信息分析中非常重要的一种格式。主要用来描述基因组突变的信息，无论是检测出来的 SNP，indel，cnv，还是 SV，都可以存储格式都为 vcf 格式。从比对生成的 bam 文件中，将潜在变异信息筛选出来，就是 vcf 格式。vcf 是一种列表格式，里面包含很多的内容。需要掌握每一列的信息，并能使用相对应的软件对 vcf 进行处理。处理 VCF 格式软件主要包括 bcftools，vcftools，gatk，python pyvcf，plink 等。<br><br>Arlequin软件能够处理Arp格式的文件，从而进行<a data-href="分子方差分析（AMOVA ，Analysis of Molecular Variance)" href="术语\分子方差分析（amova-，analysis-of-molecular-variance).html" class="internal-link" target="_self" rel="noopener nofollow">分子方差分析（AMOVA ，Analysis of Molecular Variance)</a>和<a data-href="种群配对Fst值（Population pairwise Fst values）" href="术语\种群配对fst值（population-pairwise-fst-values）.html" class="internal-link" target="_self" rel="noopener nofollow">种群配对Fst值（Population pairwise Fst values）</a>。<br>但是需要经历从DnaSP软件对群体进行分类的操作，DnaSP软件手工标记十分费时，所以可以进行如下脚本对VCF文件进行批量分组。<br><br>下载地址：<a data-tooltip-position="top" aria-label="https://github.com/Sandman2127/VCF2ArlequinDiploid" rel="noopener nofollow" class="external-link" href="https://github.com/Sandman2127/VCF2ArlequinDiploid" target="_blank">Sandman2127/VCF2ArlequinDiploid: A script designed to convert GBS/RAD/DNASEQ vcf data to arlequin diploid .arp format files (github.com)</a><br>服务器。<br>前期工作，将VCF文件中的ID号码整理出来，然后用制表符分割写下每个ID对应的分组，这里以地区进行分类。得到分组文件。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401311442808.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>
<br>将压缩包放在服务器内，然后解压。
<br>准备好上述的VCF文件和分组文件。
<br>进入终端。
<br>输入以下代码。
<br># 将软件路径、VCF路径和分群文本路径调整为===绝对路径===
python3 /home/luolintao/VCF2ArlequinDiploid/vcf2ArlequinDiploid.py --vcf /home/luolintao/VCF2ArlequinDiploid/Illumina_mtDNA_origin.vcf --popFile /home/luolintao/VCF2ArlequinDiploid/Group.txt --splitContigs  --debug      
复制<br>运行终端即可。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401311443027.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>]]></description><link>软件\python\数据科学与格式转换\python：批量修改vcf文件至arp格式.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：批量修改VCF文件至Arp格式.md</guid><pubDate>Fri, 23 Aug 2024 08:38:44 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44e.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44e.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[全矩阵转为半矩阵]]></title><description><![CDATA[ 
 <br><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051449614.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>import pandas as pd
import numpy as np

# 读取文件
file_path = '全矩阵.txt'
data = pd.read_csv(file_path, sep='\t', header=None)

# 删除对角线及右上角的内容
mask = np.tril(np.ones(data.shape)).astype(bool)
lower_triangle_data = data.where(mask)

# 将对角线上的0替换为空值
np.fill_diagonal(lower_triangle_data.values, np.nan)

# 保存结果到新的文件，删除第一行的索引
output_file_path = 'C:/Users/victo/Desktop/lower_triangle_matrix.txt'
lower_triangle_data.to_csv(output_file_path, sep="\t", index=False, header=False)

output_file_path
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051450539.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051450539.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>import numpy as np
import pandas as pd

# 读取文件内容
file_path = 'lower_triangle_matrix.txt'
with open(file_path, 'r') as file:
    lines = file.readlines()

# 清理并处理文件中的每一行
processed_lines = []
for line in lines:
    # 移除末尾的制表符并将多个制表符替换为单个制表符
    cleaned_line = '\t'.join(line.strip().split())
    # 将数字字符串转换为浮点数列表，忽略空的条目
    float_numbers = [float(num) for num in cleaned_line.split('\t') if num]
    processed_lines.append(float_numbers)

# 确定矩阵的最大列数
max_length = max(len(line) for line in processed_lines)

# 填充行，使其具有相等的长度
for line in processed_lines:
    while len(line) &lt; max_length:
        line.append(0.0)

# 将处理后的数据转换为NumPy数组
matrix = np.array(processed_lines)

# 将左下部分镜像填充到右上部分
for i in range(matrix.shape[0]):
    for j in range(i+1, matrix.shape[1]):
        matrix[i, j] = matrix[j, i]

# 将矩阵转换为DataFrame以便于可视化
df = pd.DataFrame(matrix)
df.to_csv('全矩阵.txt', index=False, header=False)
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407051449614.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\数据科学与格式转换\python：全矩阵与半矩阵的相互转化.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：全矩阵与半矩阵的相互转化.md</guid><pubDate>Fri, 05 Jul 2024 06:52:35 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f0cf.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f0cf.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[python：删除fasta中的指定位点]]></title><description><![CDATA[ 
 <br>from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord

def remove_positions_from_fasta(input_fasta, output_fasta, positions):
    positions = sorted(positions, reverse=True)  # 逆序排序，先删除靠后的位点
    sequences = SeqIO.parse(input_fasta, "fasta")
    modified_sequences = []

    for seq_record in sequences:
        seq_str = str(seq_record.seq)
        seq_list = list(seq_str)  # 转换为列表，方便修改
        for pos in positions:
            if pos &lt;= len(seq_list):
                del seq_list[pos - 1]  # 删除指定位置的碱基
        modified_seq_str = ''.join(seq_list)
        modified_seq_record = SeqRecord(Seq(modified_seq_str), id=seq_record.id, description=seq_record.description)
        modified_sequences.append(modified_seq_record)
    
    SeqIO.write(modified_sequences, output_fasta, "fasta")

input_fasta = "C:/Users/victo/Desktop/最大似然树修位点.fasta"  # 输入文件名
output_fasta = "C:/Users/victo/Desktop/output.fasta"  # 输出文件名

# 指定要删除的位点
positions_to_remove = [254, 310, 311, 313, 314, 315, 316, 317, 318, 323, 530, 531, 538, 539, 540, 
                       541, 542, 543, 544, 547, 548, 592, 594, 595, 596, 597, 989, 5935, 5936, 
                       5937, 8324, 16238, 16239]

remove_positions_from_fasta(input_fasta, output_fasta, positions_to_remove)

复制]]></description><link>软件\python\数据科学与格式转换\python：删除fasta中的指定位点.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：删除fasta中的指定位点.md</guid><pubDate>Fri, 21 Jun 2024 07:31:26 GMT</pubDate></item><item><title><![CDATA[文件准备]]></title><description><![CDATA[ 
 <br>有时候需要根据一定的条件把 Illustrator 中的文字进行颜色变更或者字体设置等。这个代码可以批量生成。<br><br>一个 txt 文件：<br>Han_Jiangsu
Han_Zhejiang
Han_Shandong
Han_Guangdong
Han_Sichuan
Han_Hebei
Han_Shanghai
Han_Henan
Han_Beijing
Han_Hubei
Han_Hunan
Uyghur_Xinjiang
复制<br>里面是需要更改颜色的文字。<br><br># 读取文件内容
with open('新建 Text Document (2).txt', 'r', encoding='utf-8') as file:
    lines = file.readlines()

# 生成JavaScript代码
template = """
var doc = app.activeDocument;
var textFrames = doc.textFrames;
var targetText;
var changed = 0;
"""

# 添加每个targetText的JavaScript代码
for line in lines:
    target_text = line.strip()
    template += f"""
targetText = "{target_text}";
for (var i = 0; i &lt; textFrames.length; i++) {{
    if (textFrames[i].contents == targetText) {{
        textFrames[i].textRange.characterAttributes.fillColor = new RGBColor();
        textFrames[i].textRange.characterAttributes.fillColor.red = 255;
        textFrames[i].textRange.characterAttributes.fillColor.green = 0;
        textFrames[i].textRange.characterAttributes.fillColor.blue = 0;
        changed++;
    }}
}}
"""

# 添加alert语句
template += """
alert(changed + ' text items changed to red.');
"""

# 保存生成的JavaScript代码到文件
with open('1.jsx', 'w', encoding='utf-8') as file:
    file.write(template)

print("JavaScript代码生成完毕并保存为generated_script.js")

复制<br><br>生成 jsx 代码，然后用 Adobe Illustrator 进行：<br>
文件→脚本→其它脚本 。或者快捷键 ctrl+F12。<br>
选择 jsx 即可。]]></description><link>软件\python\数据科学与格式转换\python：生成变换字体颜色代码给jsx.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：生成变换字体颜色代码给jsx.md</guid><pubDate>Tue, 23 Jul 2024 09:12:44 GMT</pubDate></item><item><title><![CDATA[箱型图]]></title><description><![CDATA[ 
 <br><br>箱型图可以展示数据分布的情况，是否存在离群值等。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408231612741.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
第一列：个体或群体或 ID 等。<br>
第二列：第一个属性。<br>
第三列：第二个属性。<br>
第四列：第三个属性。<br>
第五列：第四个属性。<br><br>import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import f_oneway, kruskal

# 读取上传的文本文件内容
file_path = '新建 Text Document.txt'

# 读取数据为DataFrame
df = pd.read_csv(file_path, sep="\t")

# 根据经度和纬度分组（使用分位数进行分组）
df['Longitude_group'] = pd.qcut(df['Longitude'], q=4, labels=["Q1", "Q2", "Q3", "Q4"])
df['Latitude_group'] = pd.qcut(df['Latitude'], q=4, labels=["Q1", "Q2", "Q3", "Q4"])

# 设置字体和图形参数
plt.rcParams['pdf.fonttype'] = 42  # 使字体在矢量图形中可编辑
plt.rcParams['ps.fonttype'] = 42

# 绘制PC1和PC2相对于经度和纬度分组的箱线图
fig, axes = plt.subplots(2, 2, figsize=(15, 12))

# 颜色设置，使用SCI配色方案（示例颜色）
colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']

# PC1 vs Longitude group
df.boxplot(column='PC1', by='Longitude_group', ax=axes[0, 0], patch_artist=True,
           boxprops=dict(facecolor=colors[0]))
axes[0, 0].set_title('PC1 vs Longitude Group')
axes[0, 0].set_xlabel('Longitude Group')
axes[0, 0].set_ylabel('PC1')

# PC2 vs Longitude group
df.boxplot(column='PC2', by='Longitude_group', ax=axes[0, 1], patch_artist=True,
           boxprops=dict(facecolor=colors[1]))
axes[0, 1].set_title('PC2 vs Longitude Group')
axes[0, 1].set_xlabel('Longitude Group')
axes[0, 1].set_ylabel('PC2')

# PC1 vs Latitude group
df.boxplot(column='PC1', by='Latitude_group', ax=axes[1, 0], patch_artist=True,
           boxprops=dict(facecolor=colors[2]))
axes[1, 0].set_title('PC1 vs Latitude Group')
axes[1, 0].set_xlabel('Latitude Group')
axes[1, 0].set_ylabel('PC1')

# PC2 vs Latitude group
df.boxplot(column='PC2', by='Latitude_group', ax=axes[1, 1], patch_artist=True,
           boxprops=dict(facecolor=colors[3]))
axes[1, 1].set_title('PC2 vs Latitude Group')
axes[1, 1].set_xlabel('Latitude Group')
axes[1, 1].set_ylabel('PC2')

# 去掉灰色背景线条
for ax in axes.flatten():
    ax.grid(False)  # 去掉网格线
    ax.set_facecolor('white')  # 背景设为白色

# 调整图像布局
plt.suptitle('PC1 and PC2 vs Longitude and Latitude Groups')
plt.tight_layout(rect=[0, 0.03, 1, 0.95])

plt.show()

# 分别对PC1和PC2在不同经度组和纬度组之间进行ANOVA和Kruskal-Wallis检验
results = []

# ANOVA和Kruskal-Wallis检验函数
def perform_tests(column, group, group_type):
    anova_result = f_oneway(*[group[column][group[group_type] == g] for g in group[group_type].unique()])
    kruskal_result = kruskal(*[group[column][group[group_type] == g] for g in group[group_type].unique()])
    return anova_result, kruskal_result

# 进行PC1和PC2在经度组之间的检验并保存结果
for col in ['PC1', 'PC2']:
    anova_res, kruskal_res = perform_tests(col, df, 'Longitude_group')
    results.append({
        'Test': f'{col} vs Longitude',
        'ANOVA F-value': anova_res.statistic,
        'ANOVA p-value': anova_res.pvalue,
        'Kruskal-Wallis H-value': kruskal_res.statistic,
        'Kruskal-Wallis p-value': kruskal_res.pvalue
    })

# 进行PC1和PC2在纬度组之间的检验并保存结果
for col in ['PC1', 'PC2']:
    anova_res, kruskal_res = perform_tests(col, df, 'Latitude_group')
    results.append({
        'Test': f'{col} vs Latitude',
        'ANOVA F-value': anova_res.statistic,
        'ANOVA p-value': anova_res.pvalue,
        'Kruskal-Wallis H-value': kruskal_res.statistic,
        'Kruskal-Wallis p-value': kruskal_res.pvalue
    })

# 将结果转换为DataFrame
results_df = pd.DataFrame(results)

# 保存结果为CSV文件
output_file_path = 'statistical_test_results.csv'
results_df.to_csv(output_file_path, index=False)

print(f"统计检验结果已保存到: {output_file_path}")

复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408231615311.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>Test    ANOVA F-value   ANOVA p-value   Kruskal-Wallis H-value  Kruskal-Wallis p-value
PC1 vs Longitude    2.861671142 0.043636961 8.457800512 0.037439795
PC2 vs Longitude    19.4674561  4.41484E-09 34.94433579 1.25169E-07
PC1 vs Latitude 91.85140563 3.75754E-23 54.52219046 8.68241E-12
PC2 vs Latitude 5.416225929 0.002202674 17.29517075 0.000614511
复制<br><br>图：PC1 和 PC2 在不同经纬度分组下的分布情况：此图展示了PC1和PC2在按经度和纬度分组后的箱线图。各个组别分别根据样本的经度和纬度按分位数（Q1至Q4）分组，显示了不同地理位置对主成分（PC1和PC2）的影响。箱线图的中线表示各组的中位数，箱体代表四分位间距（IQR），而须线则延伸至不超过1.5倍IQR的范围。<br>
A. PC1与经度分组：显示了PC1在不同经度分组中的分布情况。可以观察到，PC1在经度上的分布存在统计显著性差异（ANOVA F = 2.8617, p = 0.0436; Kruskal-Wallis H = 8.4578, p = 0.0374）。<br>
B. PC2与经度分组：显示了PC2在不同经度分组中的分布情况。经度对PC2的影响显著（ANOVA F = 19.4675, p &lt; 0.0001; Kruskal-Wallis H =34.9443, p &lt; 0.0001）。<br>
C. PC1与纬度分组：显示了PC1在不同纬度分组中的分布情况。PC1在纬度上的分布同样表现出统计显著性（ANOVA F = 91.8514, p &lt; 0.0001; Kruskal-Wallis H = 54.5222, p &lt; 0.0001）。<br>
D. PC2与纬度分组：显示了PC2在不同纬度分组中的分布情况。PC2在纬度上的差异性极为显著（ANOVA F = 5.4162, p = 0.0022; Kruskal-Wallis H = 17.2951, p &lt; 0.0001）。<br>
此图表明，不同的地理位置（经度和纬度）对PC1和PC2有显著的影响，反映出地理因素对主成分分析结果的显著性贡献。]]></description><link>软件\python\数据科学与格式转换\python：四分位分组箱型图绘制.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：四分位分组箱型图绘制.md</guid><pubDate>Fri, 23 Aug 2024 08:38:44 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[准备文件]]></title><description><![CDATA[ 
 <br>这个脚本已经弃用！
更好的办法建议使用 TBtools 软件！
<br>这个脚本可以根据你的 csv 文件提到的 ID 名字提取对应的序列到新的 fasta 文件中：<br><br>一个普通的 fasta 文件：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404052250359.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>一个 csv 文件：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404052250619.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>请注意，只需要第一列存在即可。<br>
另外，表没有包含标题。<br><br>import pandas as pd

# 从没有标题的CSV文件中读取ID列表
csv_file_path = 'C:/Users/a/Desktop/Illumina芯片分析表.csv'
df_no_header = pd.read_csv(csv_file_path, header=None)
# 创建一个集合，包含所有的ID
id_set = set(df_no_header[0])

# 定义一个函数，使用更严格的逻辑从FASTA文件中提取序列
def read_and_extract_fasta_strict(fasta_path, ids):
    with open(fasta_path, "r") as fasta_file:
        lines = fasta_file.readlines()
    
    extract = False
    extracted_sequences = []
    current_sequence = []
    
    # 遍历每一行
    for line in lines:
        if line.startswith("&gt;"):
            line_id = line.split()[0][1:]  # 提取行中的ID
            if line_id in ids:
                extract = True
                if current_sequence:
                    extracted_sequences.append("".join(current_sequence))
                    current_sequence = []
                # 保持原始ID不变
                updated_id = f"&gt;{line_id}\n"
                current_sequence.append(updated_id)
            else:
                if extract:
                    extracted_sequences.append("".join(current_sequence))
                    current_sequence = []
                extract = False
        else:
            if extract:
                current_sequence.append(line)
                
    if current_sequence:
        extracted_sequences.append("".join(current_sequence))
    
    return extracted_sequences

# FASTA文件路径和新FASTA文件保存路径
fasta_file_path = 'C:/Users/a/Desktop/Illumina_mtDNA_Filter_recode.fasta'
new_fasta_file_path = 'C:/Users/a/Desktop/extracted_sequences.fasta'

# 使用修正后的函数从FASTA文件中提取序列
extracted_sequences_strict = read_and_extract_fasta_strict(fasta_file_path, id_set)

# 将提取的序列保存到新的FASTA文件
with open(new_fasta_file_path, "w") as output_fasta:
    for sequence in extracted_sequences_strict:
        output_fasta.write(sequence)

# 输出新FASTA文件的路径，表示任务完成
print(f"提取的序列已保存至: {new_fasta_file_path}")

复制]]></description><link>软件\python\数据科学与格式转换\python：提取fasta序列至新的fasta.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：提取fasta序列至新的fasta.md</guid><pubDate>Fri, 23 Aug 2024 08:24:02 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404052250359.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404052250359.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[功能介绍]]></title><description><![CDATA[ 
 <br><br>以下脚本的功能是，针对某个特定的线粒体单倍群（例如，M9），分区域（地级市或者省）统计该单倍群以及该单倍群下游的所有单倍群的数量，然后把下游的单倍群累加到上游去，从而计算该地区的单倍群频率。<br>
计算公式如下，以 M9单倍群的某个地区为例：<br><br><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240612092651.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240612092800.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>该脚本会自动检查你的原始数据中不存在但是在完整的系统发育树中存在的单倍群，并打印到终端，方便快速检查。<br>
例如，当我们想绘制 M9 单倍群的时候，针对我的数据，会打印：<br>The following haplogroups were not found in the dataset: E1, E2b1, E2a1, E2a2, E2a1a, (C16261T), E1a2a, E1a2a1, E1a2a2, E1a2a3, E1a2a4, E1a1b, E1a1c, E1a1b1, E1a1b2, E1a1b4, E1a1a1c, E1a1a1b1, E1a1a1b2, C150T, M9a1b1b, M9a1b1a1, M9a1a1c1b2, M9a1a1c1b1a1
复制<br><br>
<br>原始数据，格式如下所示：
<br>Province,City,Haplogroup
四川省,德阳市,B4h
......
复制<br>
<br>地图文件：包括 shp 和附带的数据文件，例如：
<br>市（等积投影）_修正.shx
市（等积投影）_修正.prj
市（等积投影）_修正.dbf
市（等积投影）_修正.cpg
复制<br>
<br>线粒体单倍群系统发育树，在文末给出。
<br><br>import pandas as pd
import matplotlib.pyplot as plt
import geopandas as gpd
from pypinyin import pinyin, Style

# 读取并解析单倍群列表文件
def parse_haplogroup_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        haplogroup_lines = f.readlines()

    haplogroup_tree = {}
    stack = []

    for line in haplogroup_lines:
        stripped_line = line.strip()
        if not stripped_line:
            continue
        indent_level = len(line) - len(stripped_line)
        while len(stack) &gt; 0 and stack[-1][1] &gt;= indent_level:
            stack.pop()
        if stack:
            parent = stack[-1][0]
            haplogroup_tree.setdefault(parent, []).append(stripped_line)
        stack.append((stripped_line, indent_level))

    return haplogroup_tree

# 查找特定单倍群的所有下游单倍群
def find_all_descendants(haplogroup, haplogroup_tree):
    descendants = []
    stack = [haplogroup]
    while stack:
        current = stack.pop()
        if current in haplogroup_tree:
            children = haplogroup_tree[current]
            descendants.extend(children)
            stack.extend(children)
    return descendants

# 替换下游单倍群为上游单倍群，并记录未找到的单倍群
def replace_haplogroups(data, haplogroup_name, haplogroup_tree):
    descendants = find_all_descendants(haplogroup_name, haplogroup_tree)
    found_haplogroups = set(data['Haplogroup'].unique())
    missing_haplogroups = [hap for hap in descendants if hap not in found_haplogroups]
    
    if missing_haplogroups:
        print(f"The following haplogroups were not found in the dataset: {', '.join(missing_haplogroups)}")
    
    data['Haplogroup'] = data['Haplogroup'].apply(lambda x: haplogroup_name if x in descendants else x)
    return data

# 加载数据
file_path = '数据清洗整理.csv'
data = pd.read_csv(file_path)

# 加载并解析单倍群列表文件
haplogroup_file_path = '线粒体单倍群phylotree(version17).txt'
haplogroup_tree = parse_haplogroup_file(haplogroup_file_path)

# 获取单倍群在各省的数量
haplogroup_name = 'M9'
data_replaced = replace_haplogroups(data, haplogroup_name, haplogroup_tree)

# 过滤指定单倍群并统计各省数量
def count_haplogroup_by_province(haplogroup_name, data, haplogroup_tree):
    descendants = find_all_descendants(haplogroup_name, haplogroup_tree)
    
    filtered_data = data[data['Haplogroup'] == haplogroup_name]
    province_counts = filtered_data['Province'].value_counts().reset_index()
    province_counts.columns = ['Province', 'Count']
    
    other_counts = data[~data['Haplogroup'].isin(descendants)].groupby('Province').size().reset_index(name='Total_Other')
    province_counts = province_counts.merge(other_counts, on='Province', how='left')
    return province_counts

province_counts = count_haplogroup_by_province(haplogroup_name, data_replaced, haplogroup_tree)

# 计算各省的频率
province_counts['Frequency'] = province_counts['Count'] / province_counts['Total_Other']

# 将中文省份名称转换为拼音
province_counts['Province_pinyin'] = province_counts['Province'].apply(lambda x: ''.join([item[0] for item in pinyin(x, style=Style.NORMAL)]))

# 加载中国省份地理数据
china_map = gpd.read_file('省面/省面.shp')

# 确认地理数据中的省份名称列
province_column = '省全名'

# 将地理数据中的省份名称转换为拼音
china_map['Province_pinyin'] = china_map[province_column].apply(lambda x: ''.join([item[0] for item in pinyin(x, style=Style.NORMAL)]))

# 合并统计数据和地理数据
china_map = china_map.merge(province_counts, left_on='Province_pinyin', right_on='Province_pinyin', how='left')
china_map = china_map.infer_objects()  # 确保数据类型正确
china_map = china_map.fillna(0)  # 填充缺失值

# 加载其他地理数据
buffer_map = gpd.read_file('省面/0-15KM缓冲国界.shp')
coastline_map = gpd.read_file('省面/海岸.shp')
south_china_sea_box_map = gpd.read_file('省面/南海附图框.shp')
#south_china_sea_box_small_map = gpd.read_file('省面/南海附图框南海诸岛小框.shp')
reef_map = gpd.read_file('省面/珊瑚礁.shp')

# 检查province_counts是否为空
if province_counts.empty:
    print("Error: The haplogroup data is empty. Please check the input data and haplogroup name.")
else:
    # 获取频率的最大值和最小值
    max_frequency = province_counts['Frequency'].max()
    min_frequency = province_counts['Frequency'].min()

    # 绘制热图
    fig, ax = plt.subplots(1, 1, figsize=(10, 18))  # 调整图形高度
    china_map.boundary.plot(ax=ax, linewidth=0.03, color='#8B8B8B')
    china_map.plot(column='Frequency', ax=ax, legend=True,
                   cmap='Spectral_r',  # 使用配色
                   legend_kwds={'label': f"Haplogroup {haplogroup_name} Frequency by Province",
                                'orientation': "vertical"},
                   vmin=min_frequency, vmax=max_frequency)  # 设置颜色条范围

    # 绘制其他shp文件
    buffer_map.plot(ax=ax, color='#8B8B7B', linewidth=0.5)
    coastline_map.plot(ax=ax, color='#8B8B6B', linewidth=0.5)
    south_china_sea_box_map.plot(ax=ax, color='#8B8B5B', linewidth=0.5)
    #south_china_sea_box_small_map.plot(ax=ax, color='#8B8B4B', linewidth=0.5)
    reef_map.plot(ax=ax, color='#8B8B3B', linewidth=0.5)

    # 隐藏地图外框的横轴、纵轴的数字标尺
    ax.set_xticks([])
    ax.set_yticks([])

    plt.title(f'Distribution of Haplogroup {haplogroup_name} in China by Province')

    # 添加表格
    table_data = province_counts[['Province_pinyin', 'Count', 'Frequency']].values
    column_labels = ['Province', 'Count', 'Frequency']
    table = plt.table(cellText=table_data,
                      colLabels=column_labels,
                      cellLoc='center',
                      loc='bottom',
                      bbox=[0, -1.4, 1, 1.2])  # 调整表格位置和大小

    table.auto_set_font_size(False)
    table.set_fontsize(8)  # 调整字体大小

    # 调整单元格的高度
    cell_dict = table.get_celld()
    for i in range(len(table_data) + 1):  # 包括标题行
        for j in range(len(column_labels)):
            cell_dict[(i, j)].set_height(0.15)  # 调整单元格高度

    plt.subplots_adjust(left=0.2, bottom=0.4)  # 调整图形布局

    plt.show()

复制<br><br>其实逻辑实现基本一致，只是把省替换为市罢了。<br>import pandas as pd
import matplotlib.pyplot as plt
import geopandas as gpd
from pypinyin import pinyin, Style

# 读取并解析单倍群列表文件
def parse_haplogroup_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        haplogroup_lines = f.readlines()

    haplogroup_tree = {}
    stack = []

    for line in haplogroup_lines:
        stripped_line = line.strip()
        if not stripped_line:
            continue
        indent_level = len(line) - len(stripped_line)
        while len(stack) &gt; 0 and stack[-1][1] &gt;= indent_level:
            stack.pop()
        if stack:
            parent = stack[-1][0]
            haplogroup_tree.setdefault(parent, []).append(stripped_line)
        stack.append((stripped_line, indent_level))

    return haplogroup_tree

# 查找特定单倍群的所有下游单倍群
def find_all_descendants(haplogroup, haplogroup_tree):
    descendants = []
    stack = [haplogroup]
    while stack:
        current = stack.pop()
        if current in haplogroup_tree:
            children = haplogroup_tree[current]
            descendants.extend(children)
            stack.extend(children)
    return descendants

# 替换下游单倍群为上游单倍群，并记录未找到的单倍群
def replace_haplogroups(data, haplogroup_name, haplogroup_tree):
    descendants = find_all_descendants(haplogroup_name, haplogroup_tree)
    found_haplogroups = set(data['Haplogroup'].unique())
    missing_haplogroups = [hap for hap in descendants if hap not in found_haplogroups]
    
    if missing_haplogroups:
        print(f"The following haplogroups were not found in the dataset: {', '.join(missing_haplogroups)}")
    
    data['Haplogroup'] = data['Haplogroup'].apply(lambda x: haplogroup_name if x in descendants else x)
    return data

# 加载数据
file_path = '数据清洗整理_最终修改.csv'
data = pd.read_csv(file_path)

# 加载并解析单倍群列表文件
haplogroup_file_path = '线粒体单倍群phylotree(version17).txt'
haplogroup_tree = parse_haplogroup_file(haplogroup_file_path)

# 获取单倍群在各市的数量
haplogroup_name = 'M7a1a1'
data_replaced = replace_haplogroups(data, haplogroup_name, haplogroup_tree)

# 过滤指定单倍群并统计各市数量
def count_haplogroup_by_city(haplogroup_name, data, haplogroup_tree):
    descendants = find_all_descendants(haplogroup_name, haplogroup_tree)
    
    filtered_data = data[data['Haplogroup'] == haplogroup_name]
    city_counts = filtered_data['City'].value_counts().reset_index()
    city_counts.columns = ['City', 'Count']
    
    other_counts = data[~data['Haplogroup'].isin(descendants)].groupby('City').size().reset_index(name='Total_Other')
    city_counts = city_counts.merge(other_counts, on='City', how='left')
    return city_counts

city_counts = count_haplogroup_by_city(haplogroup_name, data_replaced, haplogroup_tree)

# 计算各市的频率
city_counts['Frequency'] = city_counts['Count'] / city_counts['Total_Other']

# 将中文城市名称转换为拼音
city_counts['City_pinyin'] = city_counts['City'].apply(lambda x: ''.join([item[0] for item in pinyin(x, style=Style.NORMAL)]))

# 加载中国地级市地理数据
china_map = gpd.read_file('雄鸡地级市/市（等积投影）_修正.shp')

# 确认地理数据中的城市名称列
city_column = '市'

# 将地理数据中的城市名称转换为拼音
china_map['City_pinyin'] = china_map[city_column].apply(lambda x: ''.join([item[0] for item in pinyin(x, style=Style.NORMAL)]))

# 合并统计数据和地理数据
china_map = china_map.merge(city_counts, left_on='City_pinyin', right_on='City_pinyin', how='left')
china_map = china_map.infer_objects()  # 确保数据类型正确
china_map = china_map.fillna(0)  # 填充缺失值

# 加载其他地理数据
multilinestring_map = gpd.read_file('省面/海岸.shp')
linestring_map = gpd.read_file('雄鸡地级市/中国轮廓线.shp')

# 检查city_counts是否为空
if city_counts.empty:
    print("Error: The haplogroup data is empty. Please check the input data and haplogroup name.")
else:
    # 获取频率的最大值和最小值
    max_frequency = city_counts['Frequency'].max()
    min_frequency = city_counts['Frequency'].min()

    # 绘制热图
    fig, ax = plt.subplots(1, 1, figsize=(10, 18))  # 调整图形高度
    china_map.boundary.plot(ax=ax, linewidth=0.03, color='#8B8B8B')
    china_map.plot(column='Frequency', ax=ax, legend=True,
                   cmap='Spectral_r',  # 使用配色
                   legend_kwds={'label': f"Haplogroup {haplogroup_name} Frequency by City",
                                'orientation': "vertical"})  # 删除vmin和vmax，使用默认值

    # 绘制其他shp文件
    #multilinestring_map.plot(ax=ax, color='#8B8B8B', linewidth=0.5)
    linestring_map.plot(ax=ax, color='#8B8B8B', linewidth=0.5)
    # 隐藏地图外框的横轴、纵轴的数字标尺
    ax.set_xticks([])
    ax.set_yticks([])

    plt.title(f'Distribution of Haplogroup {haplogroup_name} in China by City')

    # 添加表格
    table_data = city_counts[['City_pinyin', 'Count', 'Frequency']].values
    column_labels = ['City', 'Count', 'Frequency']
    table = plt.table(cellText=table_data,
                      colLabels=column_labels,
                      cellLoc='center',
                      loc='bottom',
                      bbox=[0, -5, 1, 5])  # 调整表格位置和大小

    table.auto_set_font_size(False)
    table.set_fontsize(5)  # 调整字体大小

    # 调整单元格的高度
    cell_dict = table.get_celld()
    for i in range(len(table_data) + 1):  # 包括标题行
        for j in range(len(column_labels)):
            cell_dict[(i, j)].set_height(0.15)  # 调整单元格高度

    plt.subplots_adjust(left=0.2, bottom=0.4)  # 调整图形布局

    plt.show()

复制<br><br>该发育树通过 phylotree2016年版本构建。<br>
下载地址(有效期至2025年6月)： <a rel="noopener nofollow" class="external-link" href="https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/%E7%BA%BF%E7%B2%92%E4%BD%93%E5%8D%95%E5%80%8D%E7%BE%A4phylotree(version17).txt?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1749692016&amp;Signature=uUB7fAEOfW2cC1TdPlLfMEa2wlM%3D" target="_blank">https://scientific-attach.oss-cn-chengdu.aliyuncs.com/%E9%99%84%E4%BB%B6/%E7%BA%BF%E7%B2%92%E4%BD%93%E5%8D%95%E5%80%8D%E7%BE%A4phylotree(version17).txt?OSSAccessKeyId=LTAI5tELp2DoTHGGZeQkMQmK&amp;Expires=1749692016&amp;Signature=uUB7fAEOfW2cC1TdPlLfMEa2wlM%3D</a>]]></description><link>软件\python\数据科学与格式转换\python：一键绘制线粒体单倍群频率热图.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：一键绘制线粒体单倍群频率热图.md</guid><pubDate>Fri, 21 Jun 2024 07:31:26 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240612092651.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240612092651.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[作用]]></title><description><![CDATA[ 
 <br><br>该脚本的作用是，根据原始的表格计算在某种没类状态下的单倍群频率，并按照字符长度自动生成所有级别的单倍群，然后利用累加原则（上游单倍群=下游单倍群之和）进行累加。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240531095706.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
第一列可以不要，但是需要有 Haplotype 列和 Classfication。<br><br>import pandas as pd
import os 
# 读取原始数据
file_path = 'C:/Users/victo/Desktop/南北方原始数据.csv'  # 请替换为你的文件路径
data = pd.read_csv(file_path)

# 计算每个区域内的每个Haplotype的数量
haplogroup_counts = data.groupby(['Haplotype', 'Classfication']).size().reset_index(name='count')

# 创建数据透视表，将Haplotype作为行，区域作为列
haplogroup_pivot = haplogroup_counts.pivot(index='Haplotype', columns='Classfication', values='count').fillna(0)

# 计算每个区域内每个Haplotype的频率
haplogroup_pivot = haplogroup_pivot.div(haplogroup_pivot.sum(axis=0), axis=1) * 100

# 提取Haplotype列表并处理
haplogroups = data['Haplotype'].tolist()
processed_haplogroups = []

# 按规则处理Haplotype
for haplogroup in haplogroups:
    processed_haplogroups.append(haplogroup)
    while len(haplogroup) &gt; 1:
        haplogroup = haplogroup[:-1]
        processed_haplogroups.append(haplogroup)

# 去重并排序
unique_processed_haplogroups = sorted(set(processed_haplogroups))

# 创建包含处理后Haplotype的新DataFrame
final_df = pd.DataFrame(unique_processed_haplogroups, columns=['Haplotype'])

# 合并最终DataFrame和Haplotype频率DataFrame
proce_df = final_df.merge(haplogroup_pivot, how='left', left_on='Haplotype', right_index=True).fillna(0)

# 将结果保存到CSV文件
proce_df.to_csv('./PROCE.csv', index=False)
df_cleaned = pd.read_csv('./PROCE.csv')

# 将频率列转换为数值类型
df_cleaned.iloc[:, 1:] = df_cleaned.iloc[:, 1:].apply(pd.to_numeric, errors='coerce').fillna(0)

# 获取Haplotype列表
haplogroups = df_cleaned['Haplotype'].tolist()

# 初始化累加频率字典
cumulative_freq = {col: {hg: 0 for hg in haplogroups} for col in df_cleaned.columns[1:]}

# 定义检查Haplotype是否是另一个Haplotype下级的函数
def is_descendant(parent, child):
    return child.startswith(parent) and len(child) &gt; len(parent)

# 假设 is_descendant 函数和 haplogroups, df_cleaned, cumulative_freq 数据框已定义

# 缓存 is_descendant 结果
descendant_cache = {}

for parent in haplogroups:
    # 先处理 parent 自身的数据
    for col in df_cleaned.columns[1:]:
        if not df_cleaned.loc[df_cleaned['Haplotype'] == parent, col].empty:
            cumulative_freq[col][parent] += df_cleaned.loc[df_cleaned['Haplotype'] == parent, col].values[0]
    
    for child in haplogroups:
        if (parent, child) not in descendant_cache:
            descendant_cache[(parent, child)] = is_descendant(parent, child)
        if descendant_cache[(parent, child)]:
            for col in df_cleaned.columns[1:]:
                if not df_cleaned.loc[df_cleaned['Haplotype'] == child, col].empty:
                    cumulative_freq[col][parent] += df_cleaned.loc[df_cleaned['Haplotype'] == child, col].values[0]

# 创建存储累加频率的新DataFrame
cumulative_df = pd.DataFrame(cumulative_freq).reset_index()
cumulative_df.rename(columns={'index': 'Haplotype'}, inplace=True)

# 保存累加频率到新文件
cumulative_file_path = 'C:/Users/victo/Desktop/各级Haplotype频率总表累计.csv'
cumulative_df.to_csv(cumulative_file_path, index=False)
# 删除PROCE.csv
os.remove('./PROCE.csv')
print("一个不需要的文件已经被删除了;\n累加后的文件路径：", cumulative_file_path)

复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240531095812.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\数据科学与格式转换\python：一键生成y染色体各级单倍群累加表格.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：一键生成Y染色体各级单倍群累加表格.md</guid><pubDate>Fri, 21 Jun 2024 07:31:26 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240531095706.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240531095706.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[python：AMOVA便捷分组]]></title><description><![CDATA[ 
 <br><a data-href="分子方差分析（AMOVA ，Analysis of Molecular Variance)" href="术语\分子方差分析（amova-，analysis-of-molecular-variance).html" class="internal-link" target="_self" rel="noopener nofollow">分子方差分析（AMOVA ，Analysis of Molecular Variance)</a>使用Arlequin软件进行。<br>但是在进行分组时需要一个个点击，很麻烦。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271156871.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>为了解决这个问题，可以使用如下代码。<br><br>需要一个txt文件，如下所示：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271156946.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br># Re-importing the necessary library as the code execution state has been reset.
import pandas as pd

# 替换这个txt文件
file_path = 'C:/Users/a/Desktop/分组.txt'

# Read the file into a pandas DataFrame
group_data = pd.read_csv(file_path, sep="\t", header=None, names=["ID", "Category"])

# Group the IDs by category
grouped = group_data.groupby('Category')['ID'].apply(list).to_dict()

# Start writing the content for the .arp file
arp_content = "[[Structure]]\n\n"
arp_content += 'StructureName="New Edited Structure"\n'
arp_content += f'NbGroups={len(grouped)}\n\n'

# Loop through each category and add its IDs to the content
for category, IDs in grouped.items():
    arp_content += f'Group={{\n'
    for ID in IDs:
        arp_content += f'\t"{ID}"\n'
    arp_content += "}\n.......\n"

# 替换输出的文件
arp_file_path = 'C:/Users/a/Desktop/分组.arp'

# Write the content to the new .arp file
with open(arp_file_path, 'w', encoding='utf-8') as arp_file:
    arp_file.write(arp_content)

arp_file_path

复制<br>输出的arp文件，直接把里面的内容贴到之前的arp文件中。具体参见：<a data-href="DnaSP：AMOVA及Fst分析软件操作" href="软件\其它生信软件\a-j\dnasp：amova及fst分析软件操作.html" class="internal-link" target="_self" rel="noopener nofollow">DnaSP：AMOVA及Fst分析软件操作</a>。]]></description><link>软件\python\数据科学与格式转换\python：amova便捷分组.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：AMOVA便捷分组.md</guid><pubDate>Fri, 23 Aug 2024 08:26:29 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271156871.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271156871.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br><br>首先，利用 tracer 软件绘制一个<a data-href="贝叶斯天际线图（Bayesian Skyline Plot, BSP）" href="术语\贝叶斯天际线图（bayesian-skyline-plot,-bsp）.html" class="internal-link" target="_self" rel="noopener nofollow">贝叶斯天际线图（Bayesian Skyline Plot, BSP）</a> .<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409021536742.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>然后，导出原数据：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409021536046.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
点击图中的 Export Data Table.<br>检查导出的文件，是否存在异常，如果有，记得删去！<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409021538356.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>运行代码，在终端输入时间节点即可。<br>import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# 读取文件并保留整数
input_file_path = '输入文件'

# 读取文件
with open(input_file_path, 'r', encoding='utf-8') as file:
    lines = file.readlines()

# 提取标题和表头
title = lines[0].strip()
header = lines[1].strip().split('\t')

# 读取数据并保留整数
data_lines = lines[2:]

# 检查最后一行是否为非数字类型，如果是则删除
def is_numeric_list(line):
    try:
        [float(x) for x in line.strip().split('\t')]
        return True
    except ValueError:
        return False

while data_lines and not is_numeric_list(data_lines[-1]):
    data_lines.pop()

data = [list(map(lambda x: int(float(x)), line.strip().split('\t'))) for line in data_lines]

# 创建DataFrame
df = pd.DataFrame(data, columns=header)

# Ensuring all data are float64
df = df.astype(float)

# Set 'time' as the index
df.set_index('time', inplace=True)

# Rounding the data to remove all decimals
df_rounded = df.round()

# Asking user for time scale limits
time_lower_limit = int(input("请输入时间尺度的下限 (e.g., 0): "))
time_upper_limit = int(input("请输入时间尺度的上限 (e.g., 60000): "))

# Filtering the data based on the user input
data_filtered = df_rounded[(df_rounded.index &gt;= time_lower_limit) &amp; (df_rounded.index &lt;= time_upper_limit)]

# Converting columns to integer numpy arrays
time_values_int = data_filtered.index.to_numpy().astype(int)
upper_values_int = data_filtered['upper'].to_numpy().astype(int)
lower_values_int = data_filtered['lower'].to_numpy().astype(int)

# Determine the Y-axis range
y_min = 10**np.floor(np.log10(lower_values_int.min()))
y_max = 10**np.ceil(np.log10(upper_values_int.max()))

# 设置字体为Arial，并确保生成的图形中的文本是矢量可编辑的
plt.rcParams['font.family'] = 'Arial'
plt.rcParams['pdf.fonttype'] = 42
plt.rcParams['ps.fonttype'] = 42

# Plotting the optimized data with specified adjustments
fig, ax = plt.subplots(figsize=(10, 6))

# Plot each line with different colors and increased linewidth for mean and median
ax.plot(time_values_int, data_filtered['mean'].round().astype(int), label='Mean', color='#C36B5F', linewidth=1, linestyle='--')
ax.plot(time_values_int, data_filtered['median'].round().astype(int), label='Median', color='#72B6AB', linewidth=1)
#ax.plot(time_values_int, upper_values_int, label='Upper', color='white')
#ax.plot(time_values_int, lower_values_int, label='Lower', color='white')

# Fill the area between upper and lower using the specified color
ax.fill_between(time_values_int, upper_values_int, lower_values_int, color='#B9DEDD', alpha=0.3)

# Removing background grid
ax.grid(False)

# Adding title and labels
ax.set_title(title)
ax.set_xlabel('Time')
ax.set_ylabel('Values')
ax.set_yscale('log')
ax.set_ylim(y_min, y_max)

# Adjusting y-axis ticks to standard notation
ax.set_yticks([10**i for i in range(int(np.log10(y_min)), int(np.log10(y_max)) + 1)])
ax.set_yticklabels([f'{10**i:.0f}' for i in range(int(np.log10(y_min)), int(np.log10(y_max)) + 1)])

# Set Y-axis crossing X-axis at 0
ax.spines['left'].set_position(('data', 0))

# Adding legend
ax.legend()

# Display the plot
plt.show()

复制]]></description><link>软件\python\数据科学与格式转换\python：beast：重新绘制绘制bsp.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：BEAST：重新绘制绘制BSP.md</guid><pubDate>Mon, 02 Sep 2024 07:38:50 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409021536742.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409021536742.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br>这个脚本已经弃用！
更好的办法建议使用 TBtools 软件！
<br><br>一个 fasta 文件，一个 csv 文件。csv 文件第一列是 ID，第二列是单倍群。表包含标题。<br><br>import pandas as pd
from Bio import SeqIO

def add_haplogroup_to_fasta(fasta_file, csv_file, output_file):
    # 读取CSV文件到DataFrame
    haplogroups = pd.read_csv(csv_file)
    # 创建一个字典来映射Sample_ID到Haplogroup
    haplogroup_dict = dict(zip(haplogroups['Sample_ID'], haplogroups['Haplogroup']))
    
    # 读取fasta文件
    with open(fasta_file, 'r') as fasta:
        records = list(SeqIO.parse(fasta, 'fasta'))
    
    # 更新记录的ID
    updated_records = []
    for record in records:
        id = record.id
        # 查找单倍群，如果存在则更新ID
        haplogroup = haplogroup_dict.get(id)
        if haplogroup:
            record.id = id + '_' + haplogroup  # 修改此处来调整ID的格式
            record.description = id + '_' + haplogroup  # 通常也需要更新description
        updated_records.append(record)
    
    # 将更新后的fasta记录写入新文件
    with open(output_file, 'w') as output:
        SeqIO.write(updated_records, output, 'fasta')

# 使用示例
add_haplogroup_to_fasta('path_to_your_fasta_file.fasta', 'path_to_your_csv_file.csv', 'output_fasta_file.fasta')

复制]]></description><link>软件\python\数据科学与格式转换\python：fasta文件加个单倍群label.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：fasta文件加个单倍群label.md</guid><pubDate>Fri, 23 Aug 2024 08:23:23 GMT</pubDate></item><item><title><![CDATA[2024年6月12日更新记录]]></title><description><![CDATA[ 
 <br><br>有些时候我们希望 FASTA 序列的 ID 存在单倍群，但是另一些时候则不希望。这真是一个很糟糕的步骤。<br>
所以我重新修改了，这下直接从终端输入 YES 或者 NO 来进行。<br>输入文件：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240612212228.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>代码：<br>import os
from Bio import SeqIO

# Paths to the files
input_txt_path = r"C:/Users/victo/Desktop/新建 Text Document.txt"
input_fasta_path = r"C:/Users/victo/Desktop/10K_WMG_REFERENCE.ALN.fasta"
output_fasta_path = r"C:/Users/victo/Desktop/提取序列.fasta"

# Read the sample IDs and haplogroups from the input TXT file
sample_info = {}
with open(input_txt_path, 'r', encoding='utf-8') as txt_file:
    # Skip the header
    next(txt_file)
    for line in txt_file:
        parts = line.strip().split('\t')
        if len(parts) == 2:
            sample_id, haplogroup = parts
            sample_info[sample_id] = haplogroup

# Ask the user if they want to include haplogroup information
include_haplogroup = input("是否需要添加单倍群信息至ID？请输入YES或者NO: ").strip().upper() == 'YES'

# Read the sequences from the input FASTA file and write the required sequences to the output FASTA file
with open(output_fasta_path, 'w') as output_fasta:
    for record in SeqIO.parse(input_fasta_path, "fasta"):
        original_id = record.id
        if original_id in sample_info:
            if include_haplogroup:
                new_id = f"{original_id}_{sample_info[original_id]}"
                record.id = new_id
                record.description = new_id
            SeqIO.write(record, output_fasta, "fasta")

print(f"提取已经完成. 序列已经保存至：{output_fasta_path}")

复制<br><br>2024年4月5日更新：为了只提取我们需要的序列并转化为 nex 文件，我将这个功能加入到了代码中。<br><br>nex文件用来绘制Network图。<br>
这里提供 Python 代码可以很迅速利用分组文件和 fasta 文件转化成 nex。<br><br>
<br>fasta文件
<br>分类文件
<br>FASTA文件格式没有特殊要求：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402231407451.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>分类文件要求csv格式：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402231407511.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>注意
nex文件对于格式的要求很高。所以注意，上面csv文件中不能出现多余的空格、+-符号等特殊符号。
<br><br><br>以下用法适合文件完全符合上述要求的。<br>import pandas as pd

# 从没有标题的CSV文件中读取ID列表
csv_file_path = 'C:/Users/a/Desktop/Illumina芯片分析表.csv' # 修改路径
nex_file_path = 'C:/Users/a/Desktop/final.nex' # 请修改！Change this!
df_no_header = pd.read_csv(csv_file_path, header=None)
# 创建一个集合，包含所有的ID
id_set = set(df_no_header[0])

# 定义一个函数，使用更严格的逻辑从FASTA文件中提取序列
def read_and_extract_fasta_strict(fasta_path, ids):
    with open(fasta_path, "r") as fasta_file:
        lines = fasta_file.readlines()
    
    extract = False
    extracted_sequences = []
    current_sequence = []
    
    # 遍历每一行
    for line in lines:
        if line.startswith("&gt;"):
            line_id = line.split()[0][1:]  # 提取行中的ID
            if line_id in ids:
                extract = True
                if current_sequence:
                    extracted_sequences.append("".join(current_sequence))
                    current_sequence = []
                # 保持原始ID不变
                updated_id = f"&gt;{line_id}\n"
                current_sequence.append(updated_id)
            else:
                if extract:
                    extracted_sequences.append("".join(current_sequence))
                    current_sequence = []
                extract = False
        else:
            if extract:
                current_sequence.append(line)
                
    if current_sequence:
        extracted_sequences.append("".join(current_sequence))
    
    return extracted_sequences

# FASTA文件路径和新FASTA文件保存路径
origin_fasta_file_path = 'C:/Users/a/Desktop/Illumina_mtDNA_Filter_recode.fasta' # 指定你的原始fasta路径
extracted_sequence_fasta_file_path = 'C:/Users/a/Desktop/extracted_sequences.fasta' # 指定你的提取fasta路径

# 使用修正后的函数从FASTA文件中提取序列
extracted_sequences_strict = read_and_extract_fasta_strict(origin_fasta_file_path, id_set)

# 将提取的序列保存到新的FASTA文件
with open(extracted_sequence_fasta_file_path, "w") as output_fasta:
    for sequence in extracted_sequences_strict:
        output_fasta.write(sequence)

# 输出新FASTA文件的路径，表示任务完成
print(f"提取的序列已保存至: {extracted_sequence_fasta_file_path}")


##############################################
###########现在开始进行fasta序列转化############
##############################################

# 这个代码的作用是根据分组文件，生成.nex文件
# 注意，使用前请将代码中出现的路径（C:/Users/a/Desktop/）全部替换成你的路径（建议设置为桌面）

import pandas as pd

# 定义 CSV 文件路径和 FASTA 文件路径
fasta_file_path = extracted_sequence_fasta_file_path
new_fasta_file_path = 'C:/Users/a/Desktop/ID_haplogroup.fasta' # 输出带有单倍型的fasta文件

try:
    # 加载单倍群信息，没有标题行，自定义列名
    haplogroup_df = pd.read_csv(csv_file_path, header=None, names=['SampleID', 'Region', 'Haplogroup'])
    
    # 创建 SampleID 到 Haplogroup 的映射字典
    haplogroup_dict = dict(zip(haplogroup_df['SampleID'], haplogroup_df['Haplogroup']))
    
    # 同时打开原始 FASTA 文件和新 FASTA 文件进行读写
    with open(fasta_file_path, 'r') as original_fasta, open(new_fasta_file_path, 'w') as modified_fasta:
        for line in original_fasta:
            if line.startswith('&gt;'):  # 这是一个 ID 行
                # 提取样本 ID（移除 '&gt;' 和换行符）
                sample_id = line[1:].strip()
                # 如果字典中存在对应的单倍群，则追加；否则，标记为 'Unknown'
                haplogroup = haplogroup_dict.get(sample_id, 'Unknown')
                # 用下划线连接样本 ID 和单倍群
                modified_line = f"&gt;{sample_id}_{haplogroup}\n"
            else:
                modified_line = line  # 序列行保持不变
            modified_fasta.write(modified_line)
    print("FASTA 文件处理完成。")
except Exception as e:
    print(f"处理过程中发生错误：{e}")

# 如果需要，可以在这里添加代码以检查和验证新文件的内容
import pandas as pd

# 定义原 CSV 文件路径和新 CSV 文件路径
new_csv_file_path = 'C:/Users/a/Desktop/do_not_change_myname.csv'  # 请不要改变文件名称

# 读取 CSV 文件，无标题行，指定列名
haplogroup_df = pd.read_csv(csv_file_path, header=None, names=['SampleID', 'Region', 'Haplogroup'])

# 将第一列内容与第三列内容用"_"连接，并替换原本第一列内容
haplogroup_df['SampleID'] = haplogroup_df.apply(lambda x: f"{x['SampleID']}_{x['Haplogroup']}", axis=1)

# 删除第三列（Haplogroup）
haplogroup_df.drop(columns=['Haplogroup'], inplace=True)

# 将修改后的 DataFrame 保存为新文件，保留原文件不变
haplogroup_df.to_csv(new_csv_file_path, header=False, index=False)

print(f"新的分类汇总文件已保存至：{new_csv_file_path}")

print("分组汇总.csv 文件已更新。")


# ================================================================== #
# ================================================================== #
# ================================================================== #
# ================================================================== #
# ================================================================== #
# ================================================================== #
# 以下代码请勿更改文件名称，路径设置为刚才的路径（建议设置为桌面）

import pandas as pd
# 示例调用
fasta_file_path = new_fasta_file_path # 请勿修改！don't change this!
group_file_path = new_csv_file_path # 请勿修改！don't change this!

new_csv_path_final = './grouped_names_final.csv' # 请勿修改！don't change this!
def read_fasta_file(fasta_file_path):
    samples = {}
    with open(fasta_file_path, 'r') as fasta:
        for line in fasta:
            if line.startswith('&gt;'):
                current_sample = line.strip().lstrip('&gt;')
                samples[current_sample] = ''
            else:
                samples[current_sample] += line.strip()
    return samples

def create_nex_file(samples, nex_file_path):
    ntax = len(samples)
    nchar = len(next(iter(samples.values()))) if ntax &gt; 0 else 0
    nex_content = [
        "#NEXUS\n\n",
        "Begin Data;\n",
        f"\tDimensions ntax={ntax} NCHAR={nchar};\n",
        "\tFormat datatype=DNA missing=N GAP=-;\n",
        "\tMATRIX\n"
    ]
    for sample_id, sequence in samples.items():
        nex_content.append(f"\t{sample_id}\n{sequence}\n")
    nex_content.append(";\nEND;\n\n\n")
    with open(nex_file_path, 'w') as nex_file:
        nex_file.writelines(nex_content)

def process_group_file_to_csv(file_path, new_csv_path_final):
    data = pd.read_csv(file_path, sep=',', header=None, names=['Name', 'Group'], encoding='utf-8')
    unique_groups_sorted = sorted(data['Group'].unique())
    matrix_df = pd.DataFrame(0, index=data['Name'], columns=unique_groups_sorted)
    for index, row in data.iterrows():
        matrix_df.at[row['Name'], row['Group']] = 1
    matrix_df.reset_index(inplace=True)
    matrix_df.rename(columns={'index': ''}, inplace=True)
    matrix_df.to_csv(new_csv_path_final, index=False)

def append_traits_to_nex(input_csv, nex_file_path):
    df = pd.read_csv(input_csv)
    new_columns = [col.replace(',', ' ') for col in df.columns if col != 'Name']
    ntraits = len(new_columns)
    trait_labels = ' '.join(new_columns)
    nex_content = f"""Begin Traits;
Dimensions NTraits={ntraits};
Format labels=yes missing=? separator=Comma;
TraitLabels {trait_labels};
Matrix \n
"""
    for index, row in df.iterrows():
        row_data = ','.join([str(row[df.columns[1]])] + [str(row[col]) for col in df.columns[2:]])
        nex_content += f"{row['Name']} {row_data}\n"
    with open(nex_file_path, 'a') as file:
        file.write(nex_content)
        file.write("\t;\n\tend;\n")



samples = read_fasta_file(fasta_file_path)
create_nex_file(samples, nex_file_path)
process_group_file_to_csv(group_file_path, new_csv_path_final)
append_traits_to_nex(new_csv_path_final, nex_file_path)

# 输出文件路径以便下载
print(nex_file_path)

# 删除新分类汇总.csv
import os
os.remove(new_csv_path_final)
os.remove(group_file_path)
print("多余文件已删除。")


复制<br><br>如果你的fasta文件已经是自带单倍群信息的了，那就可以只用上述代码的第二部分。<br># ================================================================== #
# ================================================================== #
# ================================================================== #
# ================================================================== #
# ================================================================== #
# ================================================================== #
# 以下代码建议设置为桌面

import pandas as pd
# 示例调用
fasta_file_path = 'C:/Users/a/Desktop/ID_haplogroup.fasta' # 替换为自带单倍群的fasta文件，不能有特殊符号
group_file_path = 'C:/Users/a/Desktop/do_not_change_myname.csv'  # 替换为分组文件，第一列为ID_单倍群，第二列为分组条件，没有表头
nex_file_path = 'C:/Users/a/Desktop/final.nex'  # 设置为输出路径
new_csv_path_final = 'C:/Users/a/Desktop/grouped_names_final.csv'  
def read_fasta_file(fasta_file_path):
    samples = {}
    with open(fasta_file_path, 'r') as fasta:
        for line in fasta:
            if line.startswith('&gt;'):
                current_sample = line.strip().lstrip('&gt;')
                samples[current_sample] = ''
            else:
                samples[current_sample] += line.strip()
    return samples

def create_nex_file(samples, nex_file_path):
    ntax = len(samples)
    nchar = len(next(iter(samples.values()))) if ntax &gt; 0 else 0
    nex_content = [
        "#NEXUS\n\n",
        "Begin Data;\n",
        f"\tDimensions ntax={ntax} NCHAR={nchar};\n",
        "\tFormat datatype=DNA missing=N GAP=-;\n",
        "\tMATRIX\n"
    ]
    for sample_id, sequence in samples.items():
        nex_content.append(f"\t{sample_id}\n{sequence}\n")
    nex_content.append(";\nEND;\n\n\n")
    with open(nex_file_path, 'w') as nex_file:
        nex_file.writelines(nex_content)

def process_group_file_to_csv(file_path, new_csv_path_final):
    data = pd.read_csv(file_path, sep=',', header=None, names=['Name', 'Group'], encoding='utf-8')
    unique_groups_sorted = sorted(data['Group'].unique())
    matrix_df = pd.DataFrame(0, index=data['Name'], columns=unique_groups_sorted)
    for index, row in data.iterrows():
        matrix_df.at[row['Name'], row['Group']] = 1
    matrix_df.reset_index(inplace=True)
    matrix_df.rename(columns={'index': ''}, inplace=True)
    matrix_df.to_csv(new_csv_path_final, index=False)

def append_traits_to_nex(input_csv, nex_file_path):
    df = pd.read_csv(input_csv)
    new_columns = [col.replace(',', ' ') for col in df.columns if col != 'Name']
    ntraits = len(new_columns)
    trait_labels = ' '.join(new_columns)
    nex_content = f"""Begin Traits;
Dimensions NTraits={ntraits};
Format labels=yes missing=? separator=Comma;
TraitLabels {trait_labels};
Matrix \n
"""
    for index, row in df.iterrows():
        row_data = ','.join([str(row[df.columns[1]])] + [str(row[col]) for col in df.columns[2:]])
        nex_content += f"{row['Name']} {row_data}\n"
    with open(nex_file_path, 'a') as file:
        file.write(nex_content)
        file.write("\t;\n\tend;\n")



samples = read_fasta_file(fasta_file_path)
create_nex_file(samples, nex_file_path)
process_group_file_to_csv(group_file_path, new_csv_path_final)
append_traits_to_nex(new_csv_path_final, nex_file_path)

# 输出文件路径以便下载
print(nex_file_path)

# 删除新分类汇总.csv
import os
os.remove(new_csv_path_final)
os.remove(group_file_path)
print("多余文件已删除。")
复制]]></description><link>软件\python\数据科学与格式转换\python：fasta文件转nex（2024年6月12日更新）.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：FASTA文件转NEX（2024年6月12日更新）.md</guid><pubDate>Fri, 21 Jun 2024 07:31:28 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240612212228.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240612212228.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[问题]]></title><description><![CDATA[ 
 <br><br>在 线粒体DNA系统发育树 的官方版本中，存在突变位点等信息。我们只需要单倍群上下游关系，从而可以便捷地实现如下功能：<br>
<br><a data-href="python：计算下游单倍群数量" href="软件\python\数据科学与格式转换\python：计算下游单倍群数量.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="🖥" aria-label="🖥" data-icon="🖥" aria-hidden="true" style="transform: translateY(0px);"></span>python：计算下游单倍群数量</a><img class="emoji" draggable="false" alt="🖥" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f5a5.svg" height="18px" style="max-width: 100%;">
<br><a data-href="Python：查找mtDNA上游单倍型（2024年10月23日更新）" href="软件\python\数据科学与格式转换\python：查找mtdna上游单倍型（2024年10月23日更新）.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>Python：查找mtDNA上游单倍型（2024年10月23日更新）</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">
<br><a data-href="python：快速整理线粒体单倍群至目标上游单倍群（2024年10月23日更新）" href="软件\python\数据科学与格式转换\python：快速整理线粒体单倍群至目标上游单倍群（2024年10月23日更新）.html" class="internal-link" target="_self" rel="noopener nofollow">python：快速整理线粒体单倍群至目标上游单倍群（2024年10月23日更新）</a><br>
等等。<br>
但是这需要我们将复杂的信息转为简单的信息。
<br><br>以下内容可以在<a data-tooltip-position="top" aria-label="http://www.phylotree.org/builds/mtDNA_tree_Build_17.zip" rel="noopener nofollow" class="external-link" href="http://www.phylotree.org/builds/mtDNA_tree_Build_17.zip" target="_blank">点击这里</a> 获得。<br>
直接全选放入 Excel，然后再复制粘贴为 txt 即可。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408191728788.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br># 这个脚本的作用是将excel全部线粒体单倍群发育树转化成可以被直接使用的txt文件
# 定义文件路径
file_path = '新建 Text Document.txt'

# 读取文件并逐行处理
processed_lines = []
with open(file_path, 'r', encoding='utf-8') as file:
    for line in file:
        # 去掉行首的制表符，以识别第一个非空字符
        stripped_line = line.lstrip('\t')
        
        # 检查行是否包含任何非空字符
        if stripped_line:
            # 找到第一个非空字符的位置
            non_whitespace_index = line.find(stripped_line[0])
            # 分割去掉空格后的行并获取第一个单词，同时处理可能的空分割
            first_word = stripped_line.split()[0] if stripped_line.split() else ""
            first_word_end = non_whitespace_index + len(first_word)
            processed_line = line[:first_word_end].rstrip()
            processed_lines.append(processed_line)

# 定义输出文件的路径
output_file_path = 'processed_text.txt'

# 将处理后的行写入输出文件
with open(output_file_path, 'w', encoding='utf-8') as output_file:
    output_file.write('\n'.join(processed_lines))

# 输出文件路径
output_file_path
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202408191730158.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\数据科学与格式转换\python：phylotree多余信息删除.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：phylotree多余信息删除.md</guid><pubDate>Wed, 23 Oct 2024 08:24:57 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[文件准备]]></title><description><![CDATA[ 
 <br><br>准备好需要被命名的 VCF 文件和名字更改的 txt 文件，例如：<br>New_ID	Old_ID
A-01	Kazak_Altay278
A-02	Kazak_Altay280
A-03	Kazak_Altay285
A-04	Kazak_Altay297
复制<br>New_ID	Old_ID 是必须的。<br><br>import pandas as pd

# 文件路径
replacement_csv_path = r'新建 Text Document.TXT'
vcf_file_path = r'原始的.vcf'
output_vcf_file_path = r'更改的.vcf'

# 读取ID替换表
replacement_data = pd.read_csv(replacement_csv_path, sep="\t")
replacement_dict = dict(zip(replacement_data["Old_ID"], replacement_data["New_ID"]))

# 打开VCF文件并替换样本ID
with open(vcf_file_path, 'r', encoding='utf-8') as vcf_file:
    with open(output_vcf_file_path, 'w', encoding='utf-8') as output_vcf:
        for line in vcf_file:
            # 替换头部行中的样本ID
            if line.startswith("#CHROM"):
                headers = line.strip().split("\t")
                # 替换样本ID为新ID
                headers = [replacement_dict.get(header, header) for header in headers]
                output_vcf.write("\t".join(headers) + "\n")
            else:
                # 其他行保持原样
                output_vcf.write(line)

print("ID替换已完成，修改后的VCF文件已保存至:", output_vcf_file_path)

复制]]></description><link>软件\python\数据科学与格式转换\python：vcf文件重命名.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/Python：VCF文件重命名.md</guid><pubDate>Tue, 29 Oct 2024 12:30:05 GMT</pubDate></item><item><title><![CDATA[python：VCF文件转换成NEX]]></title><description><![CDATA[ 
 <br>
#将vcf转化为ped map（注意要排除亲缘关系样本，但民族_地区少的样本不排除，因为是依据单倍群来划分的)
plink --vcf Illumina2636_Y.vcf --recode compound-genotypes --double-id  --out Illumina2636_Y_vcf_recode
#ped map转换为bed bim fam
plink --file Illumina2636_Y_vcf_recode --make-bed --out Illumina2636_Y_vcf_recode

#连接单倍群结果和样本名称，并将二倍体的ped文件转换为单倍体fasta
paste -d' '  &lt;(tail --lines=+2  China1028_male_chrY_Filter.vcf_y_hg_ISOGG2019_hGrpr2top2) &lt;(cat Illumina2636_Y_vcf_recode.ped |cut -d' ' -f3-) |perl -npe "s/\t/_/"|cut -d' ' -f1,6-|perl -npe "s/^/&gt;/;s/ ([ATCG]){2}/ \1/g;s/ 00/ N/g"|perl -npe  "s/ /\t/;s/ //g;"|perl -npe "s/.*\t\?+$//"|grep -v "^$"|perl -npe "s/\t/\n/"&gt;Illumina2636_Y_vcf_recode.fasta

#将fasta文件转换为NEXUS文件(含有序列信息)
python /home/biosoftware/vcf2phylip/fasta_nexus_converter/fasta_to_nexus/Main.py Illumina2636_Y_vcf_recode.fasta
mv example.nex Illumina2636_Y_IDnoN.nexus
      
#手动生成indpopnew，按照需求进行分组（语系，地理等）
# China1028_male_chrY_Filter.vcf_y_hg_ISOGG2019_hGrpr2top2是单倍群结果文件
paste -d' '  &lt;(tail --lines=+2  China1028_male_chrY_Filter.vcf_y_hg_ISOGG2019_hGrpr2top2) &lt;(cat indpopnew |cut -d' ' -f1-) &gt; China1028_male_chrY_Filter.vcf_y_hg_ISOGG2019_hGrpr2top2.Traits
cat  China1028_male_chrY_Filter.vcf_y_hg_ISOGG2019_hGrpr2top2.Traits | awk 'BEGIN{FS=" ";OFS="\t";}{print $1"_"$2, $4;}' &gt;  China1028_male_chrY_Filter.vcf_y_hg_ISOGG2019_hGrpr2top2_ind_Haplo_popOld
sed 's/[\t ]\+/ /g' China1028_male_chrY_Filter.vcf_y_hg_ISOGG2019_hGrpr2top2_ind_Haplo_popOld &gt; China1028_male_chrY_Filter.vcf_y_hg_ISOGG2019_hGrpr2top2_ind_Haplo_popALL
rm China1028_male_chrY_Filter.vcf_y_hg_ISOGG2019_hGrpr2top2_ind_Haplo_popOld

#生成trait文件（含有每个样本属于哪个分组特征的信息）
cat China1028_male_chrY_Filter.vcf_y_hg_ISOGG2019_hGrpr2top2_ind_Haplo_popALL |perl -npe "s/^(.*? .*?_.*?)_.*/\1/" &gt; Illumina2636_Y_vcf_recode_ind_Haplo_pop_Leve1
cat Illumina2636_Y_vcf_recode_ind_Haplo_pop_Leve1|perl -npe "s/ +/\t/g;"|cut -f2|sort |uniq|perl -npe "s/\n/,/"|perl -npe "s/$/\n/;s/^/,/" &gt;tmp_pop.txt; cat &lt;(cat tmp_pop.txt |perl -npe "s/^,//;s/,$//") &lt;(cat Illumina2636_Y_vcf_recode_ind_Haplo_pop_Leve1|perl -npe "s/ +/\t/g"|cut -f1,2|while read sample pop;do cat tmp_pop.txt|perl -npe "s/,$pop,/,#,/"|perl -npe "s/[^#,\n]+/0/g;s/#/1/;s/^,/$sample\t/;s/,$//" ;done) &gt; Illumina2636_Y_vcf_recode_ind_Haplo_pop_Leve1.Traits
trait_num=`head -n 1 Illumina2636_Y_vcf_recode_ind_Haplo_pop_Leve1.Traits|perl -npe "s/,/\n/g"|wc -l `;trait_label=`head -n 1 Illumina2636_Y_vcf_recode_ind_Haplo_pop_Leve1.Traits|perl -npe "s/,/, /g"`;matrix_value=`cat Illumina2636_Y_vcf_recode_ind_Haplo_pop_Leve1.Traits|tail --lines=+2`;cat /home/biosoftware/ppgv1/popart/pop_Trait_template |perl -npe "s/trait_label/$trait_label/;s/matrix_value/$matrix_value/;s/trait_num/$trait_num/"  &gt; Illumina2636_Y_vcf_recode_ind_Haplo_pop_Leve1.Traits.Matrix

#将生成的序列相关文件和trait文件合并成一个用于Popart画network的输入文件.nexus
cat Illumina2636_Y_IDnoN.nexus Illumina2636_Y_vcf_recode_ind_Haplo_pop_Leve1.Traits.Matrix &gt; Illumina2636_Y_vcf_recode_ind_Haplo_pop_Leve1.Traits.Matrix.nexus

#现在把生成的.nexus文件导入Popart即可，可选择不同的算法进行network作图，形状有细微的差别
复制]]></description><link>软件\python\数据科学与格式转换\python：vcf文件转换成nex.html</link><guid isPermaLink="false">软件/Python/数据科学与格式转换/python：VCF文件转换成NEX.md</guid><pubDate>Fri, 21 Jun 2024 07:31:29 GMT</pubDate></item><item><title><![CDATA[八、Python函数]]></title><description><![CDATA[ 
 <br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181723366.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181723834.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>为了减少重复，我们自己定义函数:<br>def  calculate_sector(central_angle, radius):
 # 接下来是函数的代码
  sector_area = central_angle / 360 * 3.14 * radius * 2
  print(f"此扇形的面积是:{sector_area}")

# 调用函数
calculate_sector(30,10)
复制<br>但是这个程序，我们没有存储计算结果。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181731863.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>def  calculate_sector(central_angle, radius):
 # 接下来是函数的代码
  sector_area = central_angle / 360 * 3.14 * radius * 2
  print(f"此扇形的面积是:{sector_area}")
  return sector_area
# 调用函数
calculate_sector(30,10)
复制<br><br>def calculate_BMI(weight,height):
    BMI=weight/(height**2)
    if BMI &lt; 18.5:
        category = "Underweight"
    elif BMI &gt;= 18.5 and BMI &lt; 25:
        category = "Normal"
    elif BMI &gt;= 25 and BMI &lt; 30:
        category = "Overweight"
    else:
        category = "Obese"
    print(f"Your BMI is {category}")
    return BMI
result = calculate_BMI(70,1.7)
print(result)
复制]]></description><link>软件\python\学习笔记\八、python函数.html</link><guid isPermaLink="false">软件/Python/学习笔记/八、Python函数.md</guid><pubDate>Fri, 21 Jun 2024 07:31:30 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181723366.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181723366.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[二、Python注释]]></title><description><![CDATA[ 
 <br>写好注释，不然就会出现下列情况：<br>
<img alt="978be1096e79b9275e9362d482e4afb.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181656746.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>使用ctrl+/为一整行打上#。<br><img alt="f954e3b96bb402445e7316eaef69147.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181656103.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\二、python注释.html</link><guid isPermaLink="false">软件/Python/学习笔记/二、Python注释.md</guid><pubDate>Fri, 21 Jun 2024 07:31:30 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181656746.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181656746.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[拼接]]></title><description><![CDATA[ 
 <br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202233254.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202234412.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202234301.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>区别在于是否改变原来的数组。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202235602.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202235552.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202236553.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>数组与数组运算，数组与数字运算。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202236211.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202237816.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202238479.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202238737.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202238959.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>
import numpy as np

复制<br>
arr1 = np.array([1,3,2,4,9])

arr2 = np.ones(5)

arr3 = np.zeros(3)

复制<br>
arr4 = np.concatenate([arr1,arr2,arr3])

print(arr4)

复制<br>&nbsp; &nbsp; [1. 3. 2. 4. 9. 1. 1. 1. 1. 1. 0. 0. 0.]<br>
# 排序

复制<br>
arr1.sort()

print(arr1)

复制<br>&nbsp; &nbsp; [1 2 3 4 9]<br>
print(arr1[2])

print(arr1[-3])

复制<br>&nbsp; &nbsp; 3<br>&nbsp; &nbsp; 3<br>
print(arr1[1:5])

复制<br>&nbsp; &nbsp; [2 3 4 9]<br>
print(arr1 + arr2)

复制<br>&nbsp; &nbsp; [ 2. &nbsp;3. &nbsp;4. &nbsp;5. 10.]<br>
print(arr1*(-5))

复制<br>&nbsp; &nbsp; [ -5 -10 -15 -20 -45]<br>
print(arr1.max())

print(arr1.min())

print(arr1.sum())

print(arr1.mean())

复制<br>&nbsp; &nbsp; 9<br>&nbsp; &nbsp; 1<br>&nbsp; &nbsp; 19<br>&nbsp; &nbsp; 3.8<br>
arr1[(arr1&lt;1)|(arr1&gt;3)]

复制<br>&nbsp; &nbsp; array([4, 9])]]></description><link>软件\python\学习笔记\二十、-numpy探索.html</link><guid isPermaLink="false">软件/Python/学习笔记/二十、 Numpy探索.md</guid><pubDate>Fri, 21 Jun 2024 07:31:31 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202233254.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202233254.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[库安装]]></title><description><![CDATA[ 
 <br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271401126.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>import matplotlib.pylot as plt
import seaborn as sns
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271402696.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271403210.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>sns.histplot(s1)
plt.show()
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271404664.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271404837.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271404974.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271405252.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>sns.histplot(df1,x= "列名")
plt.show()
复制<br><br><br>plt.title("标题")
复制<br><br>plt.xlabel("x轴")
plt.ylabel("y轴")
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271408335.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>sns.scatterplot(df1,x= "total_bill", y = "tip")
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271409193.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271409703.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>注意，这个图表与条形图不太一样。只需要一个变量。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271411704.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>由于sns库里没有绘制饼图的，所以需要使用matplolib库。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271413211.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271429608.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>这是一个强大的绘图，可以一次性将所有的变量按照两两配对的关系绘制出来。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271433216.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271434024.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>autopct = "%.1%%<br>
<br>第一个%标识文字格式。
<br>.1代表保留1位小数。
<br>%%表示以%结尾并结束文字格式。
<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271416914.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
或者使用十六进制。<br><br>sns.set_palette("pastel")
sns.set_palette("crest")
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271417430.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271423887.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>巧用hue参数和size参数。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271424973.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271425206.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271425249.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
如果图例挡住了图表，那么就将其移到外面去。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271426191.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
这里的bbox_to_anchor中的（1，1）分别代表右，上。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271429156.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
指定粗细。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271430034.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>plt.subplots(1,3,figsize=(15,5))
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271432958.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\二十八、-python数据可视化.html</link><guid isPermaLink="false">软件/Python/学习笔记/二十八、 Python数据可视化.md</guid><pubDate>Fri, 21 Jun 2024 07:31:32 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271401126.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271401126.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[二十二、Pandas操作]]></title><description><![CDATA[ 
 <br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212043448.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>Series计算时会自动对索引。<br>描述性统计：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212044813.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212044675.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>有点像R语言中的summary()。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212044727.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>#!/usr/bin/env python

# coding: utf-8

  

# In[1]:

  
  

import pandas as pd

  
  

# In[6]:

  
  

s1 = pd.Series([92,67,70,88,76],index = ["xiaoming","xiaohong","xiaogang","xiaoliu","xiaoluo"])

s2 = pd.Series([95,70,80,60,90],index = ["xiaomin","xiaohon","xiaogan","xiaoli","xiaolu"])

  
  

# In[7]:

  
  

s1.add(s2,fill_value= 0 )

  
  

# In[8]:

  
  

s1.describe()

  
  

# In[9]:

  
  

s1 = s1+5

  
  

# In[14]:

  
  

def get_grade_from_score(score):

    if score &gt;=90:

        return "A"

    if score &gt;=80 and score &lt; 90:

        return "B"

    if score &gt;=70 and score &lt; 80:

        return "C"

    if score &gt;=60 and score &lt;70:

        return "D"

s1.apply(get_grade_from_score)

  
  

# In[ ]:
复制]]></description><link>软件\python\学习笔记\二十二、pandas操作.html</link><guid isPermaLink="false">软件/Python/学习笔记/二十二、Pandas操作.md</guid><pubDate>Fri, 21 Jun 2024 07:31:33 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212043448.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212043448.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[概念]]></title><description><![CDATA[ 
 <br><br>线性回归就是建立一个多元方程。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402281400776.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>假如要对多种因素预测房价，那么可以建立多元线性回归。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402281402255.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402281401965.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br># 安装库
pip install statsmodels
# 导入
import pandas as pd
import statsmodels.api as sm
# 转换分类变量
data = pd.get_dummies(data,columns = ["城市"],dtype = int, drop_first = True ) # 删除第一个分类变量，保证分类变量数只有N-1个，避免共线性问题
y = data["价格"]
x = data.["自变量"]

# 检查自变量的相关性
# 方法一
X["面积"].corr(X["卧室数"])
# 方法二
X.corr()
# 绘制热图查看
X.corr().abs()
sns.heatmap(X.corr().abs(),annot = True)
plt.plot()
# 传入截距参数
X = sm.add_constant(X)
# 建立方程
model = sm.OLS(y,X)
# 建立模型
result = sm.OLS(y,X).fit()
# 结果展示
resulit.summary()
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402281411131.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402281414355.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
如果P值过大，则去除该自变量：<br>X =X.drop(... ,  axis = 1)
result = sm.OLS(y,X).fit()
resulit.summary()
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402281415202.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
如果  则说明拟合效果越好。<br>可以在 SPSS 进行，<a data-href="四、线性回归分析" href="软件\spss\四、线性回归分析.html" class="internal-link" target="_self" rel="noopener nofollow">四、线性回归分析</a>。]]></description><link>软件\python\学习笔记\二十九、-python线性回归.html</link><guid isPermaLink="false">软件/Python/学习笔记/二十九、 Python线性回归.md</guid><pubDate>Fri, 21 Jun 2024 07:31:33 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402281400776.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402281400776.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[修改行名和列名]]></title><description><![CDATA[ 
 <br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251558907.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251558722.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>记得重新赋值。<br>具体操作可以参考： <a rel="noopener nofollow" class="external-link" href="https://pandas.pydata.org/docs/reference/" target="_blank">https://pandas.pydata.org/docs/reference/</a><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251603477.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251604869.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251604748.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251605205.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251605149.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251605425.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251608638.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>axis = 0 # 删除行
axis = 1 # 删除列
复制]]></description><link>软件\python\学习笔记\二十六、-清洗数据.html</link><guid isPermaLink="false">软件/Python/学习笔记/二十六、 清洗数据.md</guid><pubDate>Fri, 21 Jun 2024 07:31:33 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251558907.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251558907.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[要素]]></title><description><![CDATA[ 
 <br><br>
<br>
API端点

<br>
请求方法<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251612729.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
查询参数、请求体数据<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251613445.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">

<br>
相应格式

<br><br>import requests
import json
response = requests.get("https://www.v2ex.com/api/topics/hot.json")
parsed_result = json.loads(response.text)
复制]]></description><link>软件\python\学习笔记\二十七、-通过api获取数据.html</link><guid isPermaLink="false">软件/Python/学习笔记/二十七、 通过API获取数据.md</guid><pubDate>Fri, 21 Jun 2024 07:31:33 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251612729.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251612729.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[二十三、 Pandas的Dataframe]]></title><description><![CDATA[ 
 <br>Dataframe 是一个表格，类似于Series组成的字典。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212057223.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>创建Dataframe的方法有很多，例如将多个Series组合起来。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212100919.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212100071.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212101124.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212101405.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212102636.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212102338.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212102638.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212103041.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>除了提取特定的行和列，还可以提取某一个值。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212104722.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>永远记住
行在前，列在后。
<br>如果希望提取所有行和特定列，那么可以：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212106626.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>记住
每一行是一个样本，每一列是一个变量。
<br><br>通过.head看前几行的数据。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212124785.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>#!/usr/bin/env python
# coding: utf-8

# In[15]:


import pandas as pd


# In[17]:


name = pd.Series(["小陈","小李","小王","小张","小赵","小周"],index = ["001","002","003","004","005","006"])


# In[18]:


gender = pd.Series(["女","女","男","男","女","男"],index = ["006","005","004","003","002","001"])


# In[19]:


height = pd.Series(["172.5","168.0","178.2","181.3","161.7"],index = ["001","002","003","004","005",])


# In[22]:


students = pd.DataFrame({"姓名":name,"性别":gender,"身高":height})
students


# In[26]:


students.index


# In[27]:


students.columns


# In[28]:


students.T


# In[31]:


students["身高"]


# In[33]:


students[["身高","性别"]]


# In[35]:


students.loc["003"]


# In[36]:


students.loc["003":"005"]


# In[37]:


students.loc["005","身高"]


# In[38]:


students.loc[["003","005"],["姓名","身高"]]


# In[41]:


students.loc[["003","005"]]


# In[51]:


students["性别"]=="女"


# In[53]:


students.head(3)


# In[ ]:





复制]]></description><link>软件\python\学习笔记\二十三、-pandas的dataframe.html</link><guid isPermaLink="false">软件/Python/学习笔记/二十三、 Pandas的Dataframe.md</guid><pubDate>Fri, 21 Jun 2024 07:31:34 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212057223.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402212057223.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[获取数据的几种方法]]></title><description><![CDATA[ 
 <br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251511402.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>飞奖（百度旗下深度学习平台）数据集： <a rel="noopener nofollow" class="external-link" href="https://aistudio.baidu.com/aistudio/datasetoverview" target="_blank">https://aistudio.baidu.com/aistudio/datasetoverview</a><br>
天池（阿里云旗下开发者竞赛平台）： <a rel="noopener nofollow" class="external-link" href="https://tianchi.aliyun.com/dataset/" target="_blank">https://tianchi.aliyun.com/dataset/</a><br>
和鲸社区（数据科学开源社区）数据集： <a rel="noopener nofollow" class="external-link" href="https://www.heywhale.com/home/dataset" target="_blank">https://www.heywhale.com/home/dataset</a><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251512508.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
获取网页源代码，解析源代码。<br>
但是有一些红线，一定要遵循法律法规。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251513026.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
省去了爬虫解析源代码的步骤。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251514376.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>后缀决定电脑用什么程序去打开。更改文件后缀并不改变文件本身的格式。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251516552.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251517061.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>就是Python字典。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251517720.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>就是Python列表。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251518382.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251522622.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
使用pd.read.json函数来读取。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251528871.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
使用pd.read.csv.函数来读取。]]></description><link>软件\python\学习笔记\二十四、-获取数据.html</link><guid isPermaLink="false">软件/Python/学习笔记/二十四、 获取数据.md</guid><pubDate>Fri, 21 Jun 2024 07:31:35 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251511402.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251511402.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[结构]]></title><description><![CDATA[ 
 <br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251538761.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
整洁度的数据有助于代码分析数据。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251540154.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>丢失数据
<br>重复数据
<br>不一致数据
<br>无效或错误数据
<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251543573.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251544206.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
另外还可以通过连续调用.isnull().sum()方法来计算空缺值的数量。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251546477.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251547012.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>使用duplicated函数。<br>如何发现多个变量同时重复？<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251549929.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251549055.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251552736.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>这个难度很大。针对某些特别离谱的数据，可以发现。例如可以使用describe()方法。]]></description><link>软件\python\学习笔记\二十五、-评估数据.html</link><guid isPermaLink="false">软件/Python/学习笔记/二十五、 评估数据.md</guid><pubDate>Fri, 21 Jun 2024 07:31:35 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251538761.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402251538761.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Series]]></title><description><![CDATA[ 
 <br><br>与Numpy的数组很相似，但是不同之处在于Series可以自己指定索引值。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402211714113.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402211716686.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
布尔值的运算逻辑与numpy类似。<br>#!/usr/bin/env python
# coding: utf-8

# In[7]:


import pandas as pd


# In[10]:


s1 = pd.Series([-1.2,3.7,2.5,-8.2,6.3])
s1


# In[13]:


print(s1.index)
print(s1.values)


# In[14]:


s2 = pd.Series([1,2,3,4,5],index=[5,4,3,2,1])
s2


# In[17]:


s2.iloc[1]


# In[18]:


s2.loc[5:3]


# In[20]:


s3 = pd.Series({"小李":82,"小张":90})


# In[21]:


s3


# In[22]:


s3.loc["小李"]


# In[24]:


(s3&gt;80) &amp; (s3&lt;90)


# In[ ]:





复制]]></description><link>软件\python\学习笔记\二十一、pandas入门.html</link><guid isPermaLink="false">软件/Python/学习笔记/二十一、Pandas入门.md</guid><pubDate>Fri, 21 Jun 2024 07:31:35 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402211714113.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402211714113.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[九、Python模块]]></title><description><![CDATA[ 
 <br>你不可能每次都自己写代码，所以可以导入模块：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181741849.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
不建议使用第三种方法，因为会产生冲突：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181742015.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\九、python模块.html</link><guid isPermaLink="false">软件/Python/学习笔记/九、Python模块.md</guid><pubDate>Fri, 21 Jun 2024 07:31:35 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181741849.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181741849.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[什么是词云]]></title><description><![CDATA[ 
 <br><br>如图所示：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403291124705.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br>图像可以是 jpg，png 等。<br>
画面中只应该存在黑白 2 种颜色。<br>
例如：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403291127696.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
建议使用 jpg 格式。<br><br>建立一个 txt 文件，里面放入一些文字，一行一个文字。<br>Oxidative phosphorylation
ATP synthesis
mtDNA sequencing
Mitophagy
Mitochondrial biogenesis
Mitochondrial dysfunction
mtDNA repair
Heteroplasmy
Homoplasmy
Phylogenetics
Ancestry
Molecular clock
Evolutionary biology
复制<br><br># 导入必要的库
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
import random

# 自定义颜色函数，这里选择了暖色
def warm_color_func(word, font_size, position, orientation, random_state=None, **kwargs):
    colors = ["#FF5733", "#FF8D33", "#FFC300", "#FF5733", "#C70039"]
    return random.choice(colors)

# Arial字体的路径（这里是一个示例路径，根据你的系统情况进行修改）
font_path = 'C:/Windows/Fonts/arial.ttf'
# 读取文本文件
text = open("C:/Users/a/Desktop/words.txt").read()

# 加载蒙版图像（如果你使用特定形状的词云），图形应该只有黑色和白色。黑色代表蒙版（形状）
mask_image = np.array(Image.open("C:/Users/a/Desktop/未标题-1.jpg"))

# 创建词云对象
wordcloud = WordCloud(font_path=font_path,
                      background_color='white',
                      mask=mask_image,
                      color_func=warm_color_func,
                      width= 2000,height= 2000) # 大小自行调整

# 生成词云
wordcloud.generate(text)

# 使用matplotlib显示词云， 大小自行调整
plt.figure(figsize=(2000, 2000))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403291129691.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\利用python生成词云.html</link><guid isPermaLink="false">软件/Python/学习笔记/利用Python生成词云.md</guid><pubDate>Fri, 21 Jun 2024 07:31:35 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403291124705.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403291124705.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[六、Python while循环]]></title><description><![CDATA[ 
 <br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181706598.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181707199.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>当我们不知道循环什么时候结束的时候，while比for更合适。有时候可以互换：<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181708965.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181709328.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>对用户输入数据求出平均值：<br>print("hello , I am a programm")
user_input = input("请输入数字，并输入q终止程序")

total = 0
count = 0 

while user_input != "q" :
	num = float(user_input)
	total = total + num
	count = count + 1 
	user_input = input("请输入数字，并输入q终止程序")

if count == 0:
	result =0
else : result = total / count 
print("结果就是：" + str(result))
复制]]></description><link>软件\python\学习笔记\六、python-while循环.html</link><guid isPermaLink="false">软件/Python/学习笔记/六、Python while循环.md</guid><pubDate>Fri, 21 Jun 2024 07:31:36 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181706598.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181706598.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[七、Python 格式化字符串]]></title><description><![CDATA[ 
 <br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181719776.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181719163.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181720435.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181721377.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\七、python-格式化字符串.html</link><guid isPermaLink="false">软件/Python/学习笔记/七、Python 格式化字符串.md</guid><pubDate>Fri, 21 Jun 2024 07:31:36 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181719776.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181719776.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[多重if]]></title><description><![CDATA[ 
 <br>if是强大的语句，必须掌握。<br>
<img alt="772877b0050c8509d860cf7536ac36c.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181658040.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
写代码时，注意缩进。不同层级之间的错误缩进会导致报错。<br>
<img alt="0bac11a452e2b224d28f2030fe262aa.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181658157.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="c169ec927571c2e0a1129393d6815f9.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181659560.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="7e6b491de4b6eae220442e97c1a9b25.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181659184.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="1f17f34207a337fe8cb59573b233888.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181659854.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\三、python-if语句.html</link><guid isPermaLink="false">软件/Python/学习笔记/三、Python if语句.md</guid><pubDate>Fri, 21 Jun 2024 07:31:37 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181658040.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181658040.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[概念]]></title><description><![CDATA[ 
 <br><br>逻辑回归是用于求算二分类数据的，得到一个概率。概率位于  之间。<br> <img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011357736.png" referrerpolicy="no-referrer"><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011402417.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>import statsmodels.apias sm # 引入模块
pd.get_dummies(data,columns=["gender", "smoking"],dtype=int,drop_first=True) # drop是为了将完全相关的两个自变量删除一个，不然会导致算法无法收敛
logistics_data.corr().abs()&gt;0.8 # 检查已有变量之间的相关性
y = logitics_data['cancer']
X = logitics_data.drop('cancer',axis = 1)
X = sm.add_constant(X) # 手动添加截距
result = sm.Logit(y,X).fit() # 建立回归模型
result.summary() # 查看结果
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011407318.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>注意，这里的表示的是以为底的次方。$$<br>
e^{coef}<br>]]></description><link>软件\python\学习笔记\三十、-python逻辑回归.html</link><guid isPermaLink="false">软件/Python/学习笔记/三十、 Python逻辑回归.md</guid><pubDate>Fri, 21 Jun 2024 07:31:37 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011357736.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011357736.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[HTTP]]></title><description><![CDATA[ 
 <br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011417935.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011417197.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>大多数时候用get方法。一个完整的http请求分为如下：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011418183.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>请求行
<br>请求头
<br>请求体<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011419636.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011420134.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403021457131.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><br>import requests as rq
# 伪装成浏览器，如何做呢？
# 可以直接用浏览器打开该网页，然后点击右键→检查→Network→刷新网页→
# 点击任何一个Name,查看Headers，找到Usr-Agent，复制粘贴进去就可以啦！
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'
}
# 将Headers传入get方法中
response = rq.get('https://movie.douban.com/top250',headers=headers)
print(response.status_code)
print(response.text) # 现在得到了html格式的网页内容

# 所有以4开头的状态码都是从错误信息，418表示服务器不想理你

复制<br><br>输入pip install bs4。<br>
为了提取所有的价格和名称，我们需要查看原始网页：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403021522360.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403021531355.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>import requests as rq
from bs4 import BeautifulSoup
# 伪装成浏览器，如何做呢？
# 可以直接用浏览器打开该网页，然后点击右键→检查→Network→刷新网页→
# 点击任何一个Name,查看Headers，找到Usr-Agent，复制粘贴进去就可以啦！
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'
}
# 将Headers传入get方法中


# 所有以4开头的状态码都是从错误信息，418表示服务器不想理你
for start_num in range(0,250,25):
    response = rq.get(f'https://movie.douban.com/top250?start={start_num}',headers=headers)
    print(start_num)
    html = response.text
    soup = BeautifulSoup(html,"html.parser") # 解析html，检查
    all_titles = soup.find_all("span",attrs={"class":"title"}) # 查找所有span标签，class属性为title的标签
    for title in all_titles:
        title_string = title.string
        if "/" not in title_string: # 所有斜杠不存在时才打印
            print(title_string)
        # print(title) # 找出所有的标题包括html标签
        # print(title.string) # 找出所有的标题不包括html标签

# 但是这个页面只是第一页，为了拿到后面几页，怎么办？
# 打开浏览器的网页，看到页面的网址 start=0,25,50,75,100.....
        
复制]]></description><link>软件\python\学习笔记\三十一、-python爬虫.html</link><guid isPermaLink="false">软件/Python/学习笔记/三十一、 Python爬虫.md</guid><pubDate>Fri, 21 Jun 2024 07:31:37 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011417935.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403011417935.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[十、Python创建类]]></title><description><![CDATA[ 
 <br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181753210.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
注意，定义类别需要使用首字母大写来定义：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181753815.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>class CuteCat:
	def _init_(self,cat_name):
		self.name =cat.name
cat1 = CuteCat("Jojo)
print(cat1.name)
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181757823.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>class CuteCat:
	def _init_(self, cat_name, cat_age, cat_color):
	self.name = cat.name
	self.age = cat_age
	self.coler = cat_color
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181801522.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181802891.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br># 定义类Student
class Student:
# 从零开始，自身，名字，编号
    def __init__(self, name, student_id):

        self.name = name

        self.student_id = student_id

        self.grades = {"语文":0,"数学":0,"英语":0}

    def set_grade(self,course,grade):

        if course in self.grades:

            self.grades[course] = grade

        else:

            print("课程不存在")

    def print_grade(self):

        print(self.name)

        print(self.student_id)

        print(self.grades)

        for course in self.grades:

            print(course,self.grades[course])

  

chen = Student("小陈","100618")

chen.set_grade("语文",90)

chen.set_grade("数学",90)

chen.print_grade()

zeng = Student("小曾","100622")

print(chen.name)

zeng.set_grade("数学",90)

print(zeng.grades)
复制]]></description><link>软件\python\学习笔记\十、python创建类.html</link><guid isPermaLink="false">软件/Python/学习笔记/十、Python创建类.md</guid><pubDate>Fri, 21 Jun 2024 07:31:37 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181753210.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181753210.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[十八、 Jupyter使用]]></title><description><![CDATA[ 
 <br>略]]></description><link>软件\python\学习笔记\十八、-jupyter使用.html</link><guid isPermaLink="false">软件/Python/学习笔记/十八、 Jupyter使用.md</guid><pubDate>Fri, 21 Jun 2024 07:31:37 GMT</pubDate></item><item><title><![CDATA[十二、 Python文件操作]]></title><description><![CDATA[ 
 <br>使用open函数打开文件：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192211056.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192211240.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192212942.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>在文件比较大的情况下，不要直接用read，不然可能会爆内存。<br>
在这种情况下，可以使用：<br># 读第1-10 字节
print(f.read(10))
复制<br>或者使用<br>print(f.readline()) # 读一行
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192215666.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192215963.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>读完文件之后，需要close关闭文件。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192215610.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
如果经常忘记关闭文件，可以用这种方法读取文件：<br>with open(...) as f:
	print(f.read())
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192220783.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192220485.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\十二、-python文件操作.html</link><guid isPermaLink="false">软件/Python/学习笔记/十二、 Python文件操作.md</guid><pubDate>Fri, 21 Jun 2024 07:31:38 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192211056.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192211056.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[十九、 Numpy入门]]></title><description><![CDATA[ 
 <br>数组更适合用于分析，Numpy的矩阵默认只能使用一种type。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202222804.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202223706.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>在python中的range方法也有类似的，在numpy中是np.arange(5,10,2)。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202224501.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>#!/usr/bin/env python

# coding: utf-8

  

# In[1]:

  
  

import numpy as np

  
  

# In[5]:

  
  

arr1 = np.array([6,2,-7,2,8,-2,1])

arr1

  
  

# # 创建了一个数组

  

# In[6]:

  
  

arr2 = np.array([[1,3,5],[2,4,6]])

arr2

  
  

# # 创建了另一个数组

  

# In[7]:

  
  

print(arr1.ndim)

  
  

# In[8]:

  
  

print(arr2.ndim)

  
  

# In[9]:

  
  

print(arr1.shape)

  
  

# In[10]:

  
  

print(arr2.shape)

  
  

# In[14]:

  
  

arr_all_0 = np.zeros(3)

arr_all_0

  
  

# In[16]:

  
  

arr_all_1 = np.ones(3)

arr_all_1

  
  

# In[20]:

  
  

arr_range = np.arange(5,10,2)

arr_range

  
  

# In[ ]:
复制]]></description><link>软件\python\学习笔记\十九、-numpy入门.html</link><guid isPermaLink="false">软件/Python/学习笔记/十九、 Numpy入门.md</guid><pubDate>Fri, 21 Jun 2024 07:31:38 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202222804.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402202222804.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[十六、 Python高阶函数]]></title><description><![CDATA[ 
 <br>当我们想在一个程序里执行多种函数操作，可能需要多种函数。我们可以使用def进行定义，然后用函数来执行函数，类似于数学中的：<br><br>例如，我def了一个计算平方的函数，那么我就可以：<br>calculate_and_print(3,calculate_square)
复制<br>请注意，括号中的函数不要再加括号。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192250272.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>一次性函数。可以当成只用一次函数，减少代码行数，不需要起名字。只使用于比较简单的场景。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192252917.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\十六、-python高阶函数.html</link><guid isPermaLink="false">软件/Python/学习笔记/十六、 Python高阶函数.md</guid><pubDate>Fri, 21 Jun 2024 07:31:38 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192250272.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192250272.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[如何安装？]]></title><description><![CDATA[ 
 <br>为什么要用Jupyter？<br>
<br>能够分行执行代码，一次只运行一次代码。
<br>支持丰富的信息格式，有二级、三级标题等。

<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192256634.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">


<br>交互模式环境：想查看输出的时候，不要打印。有利于快速探索数据。
<br><br><br>
<br>windows: 命令提示符
<br>pip install notebook
<br>jupyter notebook
<br><br>安装ANACONDA导航<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192300937.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\十七、jupyter数据分析安装.html</link><guid isPermaLink="false">软件/Python/学习笔记/十七、Jupyter数据分析安装.md</guid><pubDate>Fri, 21 Jun 2024 07:31:38 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192256634.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192256634.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[十三、Python 文件操作]]></title><description><![CDATA[ 
 <br>当我们需要写文件时，需要传入模式"w"。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192223391.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
需要注意，这会清除原文件的内容。<br>如果不想清除原本的内容，需要附加，那么就不能够使用w，而需要"a"。<br>如果我们需要既要读，又要写，那么可以使用"r+"。<br><br>with open("C:/Users/a/Desktop/poem.txt","w",encoding="utf-8") as f:

    f.write("我欲乘风归去\n")

    f.write("又恐琼楼玉宇\n")

    f.write("高处不胜寒\n")

  

with open("C:/Users/a/Desktop/poem.txt","a",encoding="utf-8") as f:

    f.write("谁家TRS80\n")

    f.write("夜半来客\n")
复制]]></description><link>软件\python\学习笔记\十三、python-文件操作.html</link><guid isPermaLink="false">软件/Python/学习笔记/十三、Python 文件操作.md</guid><pubDate>Fri, 21 Jun 2024 07:31:38 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192223391.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192223391.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[十四、Python预判]]></title><description><![CDATA[ 
 <br>来一波预判！<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192235730.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
如果你不知道会发生什么错误，可以这样：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192236369.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192236058.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\十四、python预判.html</link><guid isPermaLink="false">软件/Python/学习笔记/十四、Python预判.md</guid><pubDate>Fri, 21 Jun 2024 07:31:39 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192235730.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192235730.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[十五、 Python测试]]></title><description><![CDATA[ 
 <br>为了提前发现代码，可以使用assert语句。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192239074.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
Python自带的语句可以测试布尔值是否True。<br>或者可以使用unittest模块：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192240142.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192241918.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\十五、-python测试.html</link><guid isPermaLink="false">软件/Python/学习笔记/十五、 Python测试.md</guid><pubDate>Fri, 21 Jun 2024 07:31:39 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192239074.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192239074.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[十一、 Python文件路径]]></title><description><![CDATA[ 
 <br>代码如何找到文件？<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192207239.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192207538.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>绝对路径
<br>相对路径
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192208004.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192208032.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192209244.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
很多编辑器都能够复制路径。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192209917.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\十一、-python文件路径.html</link><guid isPermaLink="false">软件/Python/学习笔记/十一、 Python文件路径.md</guid><pubDate>Fri, 21 Jun 2024 07:31:40 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192207239.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402192207239.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[列表]]></title><description><![CDATA[ 
 <br><br>shopping_list = ["电脑", "手机", "平板"]
# 增加元素
shopping_list.append("女朋友")
复制<br><img alt="c4611368932cfc3525c6f9237ebd3ae.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181701443.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="b50f710bf834a757f5d13ca5788008d.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181701032.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="9a5bc1f6249e931d53bad486ff1c7ac.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181704748.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="a0aaa3b4119b15432f33c027ebd2d5c.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181704252.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="50f9aae60078870a5b9c0a35acd42ab.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181704806.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="cca2d29a66bc43c09fdfcbd7c04f454.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181704305.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\四、python列表和字典.html</link><guid isPermaLink="false">软件/Python/学习笔记/四、Python列表和字典.md</guid><pubDate>Fri, 21 Jun 2024 07:31:40 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181701443.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181701443.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[五、Python for循环]]></title><description><![CDATA[ 
 <br>列表是Python中可以用来迭代的对象。函数格式如下所示：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181639312.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181646307.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
可以配合range一起使用：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181647432.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
可以用来打印偶数奇数等：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181649469.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>用来解决高斯小学题目：<br>total = 0

for i in range(1,101):

    total = total + i

    print(total)
复制]]></description><link>软件\python\学习笔记\五、python-for循环.html</link><guid isPermaLink="false">软件/Python/学习笔记/五、Python for循环.md</guid><pubDate>Fri, 21 Jun 2024 07:31:40 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181639312.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181639312.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[逻辑运算符]]></title><description><![CDATA[ 
 <br><img alt="40d5dda63729c1302d82bad33c1951e.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181654758.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="2f8561eec3b52957c9daa836b15cc89.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181654945.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="1180d92bfe24369fce8d055dc376ecc.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181654266.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="ba9f3d4584adb3cb80a8213f4176466.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181654340.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="5cbd2817f23e0a10d316cce6cacda46.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181655256.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="800d24884967c0e17a190fa7b862f6a.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181655512.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="cd36aaa9958c49d6038bfcc49496ead.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181655421.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="ec83b36affbdae3d8cfc67f504ba117.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181655927.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="a70b7f391b92b77baa37aee9b45ccec.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181700888.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="6da69c249f3c157be6294ed6bbf90cf.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181700252.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="55943abefc415555f2924f15abc6eac.jpg" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181655086.jpg" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\一、python数据类型.html</link><guid isPermaLink="false">软件/Python/学习笔记/一、Python数据类型.md</guid><pubDate>Fri, 21 Jun 2024 07:31:41 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181654758.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402181654758.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[前提]]></title><description><![CDATA[ 
 <br>警告！禁止商用，违者自负责任！<br><br>首先，你需要创建一个微信读书的账号，其次，你的微信读书的账号必须已经购买了你想要导出的书籍，否则会导出不完整！<br><br>地址： <a data-tooltip-position="top" aria-label="https://1drv.ms/u/s!AnGqDjyiZ5t_hotFKoYKLpC_DfgMLw?e=nabvhC" rel="noopener nofollow" class="external-link" href="https://1drv.ms/u/s!AnGqDjyiZ5t_hotFKoYKLpC_DfgMLw?e=nabvhC" target="_blank">weread-exporter-main.zip</a><br>
下载之后，解压，进入该文件夹，然后输入：<br>pip3 install -e .
复制<br><br>默认使用 谷歌chrome 浏览器，你可以下载安装之后进行配置：浏览器默认安装在：C:\Program Files\Google\Chrome\Application\。<br>安装完成之后，你需要修改代码如下的：weread-exporter-main\weread_exporter\webpage.py，进入这个文件，然后在 def _check_chrome(self): 的下一行添加如下代码: return "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"<br>于是，这段代码应该变成了：<br>    def _check_chrome(self):
        return "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
        path_list = os.environ["PATH"].split(";" if sys.platform == "win32" else ":")
        for chrome in ("chrome", "google-chrome"):
            if sys.platform == "win32":
                chrome += ".exe"
            for path in path_list:
                if os.path.isfile(os.path.join(path, chrome)):
                    return chrome
        if sys.platform == "darwin":
            chrome = "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
            if os.path.isfile(chrome):
                return chrome
        if sys.platform == "win32":
            command = "where chrome"
        else:
            command = "which chrome"
        raise utils.ChromeNotInstalledError(
            "Please make sure `chrome` is installed, and the install path is added to PATH environment. \nYou can test that with `%s` command."
            % command
        )
复制<br><br>python -m weread_exporter -b $book_id -o epub -o pdf --force-login
复制<br>-o参数用于指定要保存的文件格式，目前支持的格式有：epub、pdf、mobi，生成的文件在当前目录下的output目录中。<br>
epub 格式适合手机端访问，pdf 格式适合电脑端访问，mobi 格式适合kindle访问。<br>导出时间随书本的长度而增长，因为需要一页页渲染，没办法。]]></description><link>软件\python\学习笔记\python：导出微信读书中的书籍.html</link><guid isPermaLink="false">软件/Python/学习笔记/python：导出微信读书中的书籍.md</guid><pubDate>Fri, 27 Sep 2024 06:47:03 GMT</pubDate></item><item><title><![CDATA[什么是 Manim]]></title><description><![CDATA[ 
 <br><br>Manim 是一个开源的动画引擎，主要用于创建数学可视化和动画。它是由 Grant Sanderson 开发的，Grant Sanderson 是斯坦福大学的数学系学生，同时也是知名的数学和科学教育网站 3Blue1Brown 的创始人。Manim 最初是为了帮助 Grant 在其 YouTube 频道 3Blue1Brown 中创建数学教学视频中的动画效果而开发的。Manim 的核心编程语言是 Python，它利用 Python 的强大功能，结合其他 Python 库如 Numpy（用于数值计算）、Matplotlib（用于绘制图形）、PIL（用于处理图像）和 pycairo（用于矢量图形绘制）等，使得开发者可以轻松创建数学动画和可视化效果。<br><br>直接使用 pip 安装即可。<br>pip3 install manim
复制<br><br><br>Manim 中有三个类：<br>
<br>Scene：播放的场景。
<br>Mobject：物体。
<br>Animation：动画。
<br><br>有4个常用的方法：<br>
<br>add
<br>remove
<br>play
<br>wait
<br>self.add(物体)
self.remove(物体)
self.play(FadeIn(物体))
self.play(FadeOut(物体))
self.wait(1)
复制<br><br>self.play(FadeIn(物体))
self.play(FadeOut(物体))
self.play(ReplacementTransform(物体1,物体2),run_time=3)
复制<br><br>很多。<br><br>manim 你的文件.py -p
# -p表示渲染后直接打开
复制]]></description><link>软件\python\学习笔记\python：manim入门.html</link><guid isPermaLink="false">软件/Python/学习笔记/python：Manim入门.md</guid><pubDate>Sun, 06 Oct 2024 08:06:39 GMT</pubDate></item><item><title><![CDATA[PandasGUI]]></title><description><![CDATA[ 
 <br><br>Pandas 是处理和分析数据的利器，但对于编程和算法基础薄弱，注意力不易集中的朋友来说，纯代码的方式可能显得有些枯燥乏味。<br><a data-tooltip-position="top" aria-label="https://github.com/adamerose/PandasGUI" rel="noopener nofollow" class="external-link" href="https://github.com/adamerose/PandasGUI" target="_blank">原文链接</a><br>PandasGUI 是一个基于 Pandas 的图形用户界面工具，旨在通过可视化的方式简化数据分析流程。<br>它将数据的导入、清洗、探索和可视化等步骤变得直观易操作，即使是编程新手也能快速上手，深入数据的世界。<br>主要特点<br>
<br>交互式界面：PandasGUI 提供了一个直观的图形界面，让用户可以直接看到数据和操作的即时反馈。<br>

<br>数据探索：支持直接在界面上对数据进行筛选、排序和编辑，简化了数据预处理的复杂度。<br>

<br>可视化支持：内置多种数据可视化工具，一键生成图表，帮助用户直观理解数据。<br>

<br>代码生成：虽然是图形界面操作，但 PandasGUI 能自动生成对应的 Pandas 代码，便于学习和进一步定制化处理。<br>

<br>功能特性<br>
<br>查看 DataFrame 和 Series（支持多索引）<br>

<br>交互式绘图<br>

<br>筛选<br>

<br>统计摘要<br>

<br>数据编辑和复制/粘贴<br>

<br>通过拖放导入 CSV 文件<br>

<br>搜索工具栏
<br>pip install pandasgui
复制<br>from pandasgui import show  
import pandas as pd

# 加载数据集  
df = pd.read_csv('你的数据文件路径/data.csv')

# 使用 PandasGUI 展示数据集  
show(df)
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181002743.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>PyGWalker 是一个在 Jupyter Notebook 环境中运行的可视化分析工具，使用一行代码即可将数据集转化为一个可视化分析工具，生成一个可拖拽、可交互的图形界面，以类似 Tableau/PowerBI 的方式，通过拖拽字段来生成各种图表进行数据分析，从而大幅减少数据分析师在数据可视化上的时间成本，能够快速出图、快速分析。<br><a data-tooltip-position="top" aria-label="https://github.com/Kanaries/pygwalker" rel="noopener nofollow" class="external-link" href="https://github.com/Kanaries/pygwalker" target="_blank">Kanaries/pygwalker: PyGWalker: Turn your pandas dataframe into an interactive UI for visual analysis (github.com)</a><br>这里还有为 R 打造的GWalkR：<a data-tooltip-position="top" aria-label="https://github.com/Kanaries/GWalkR/blob/main/docs/README.zh.md" rel="noopener nofollow" class="external-link" href="https://github.com/Kanaries/GWalkR/blob/main/docs/README.zh.md" target="_blank">GWalkR/docs/README.zh.md at main · Kanaries/GWalkR (github.com)</a><br><br><a rel="noopener nofollow" class="external-link" href="https://www.kaggle.com/asmdef/pygwalker-test" target="_blank">https://www.kaggle.com/asmdef/pygwalker-test</a><br>
<a rel="noopener nofollow" class="external-link" href="https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing" target="_blank">https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing</a><br>
<a rel="noopener nofollow" class="external-link" href="https://graphic-walker.kanaries.net/" target="_blank">https://graphic-walker.kanaries.net/</a><br>pip install pygwalker
复制<br>在您的 Jupyter Notebook 中导入 pygwalker 和 pandas 来开始使用。<br>import pandas as pd
import pygwalker as pyg

df = pd.read_csv('./bike_sharing_dc.csv')
walker = pyg.walk(df)
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181006891.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\python\学习笔记\python交互式库.html</link><guid isPermaLink="false">软件/Python/学习笔记/Python交互式库.md</guid><pubDate>Fri, 21 Jun 2024 07:31:41 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181002743.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181002743.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[前言]]></title><description><![CDATA[ 
 <br>
<a data-tooltip-position="top" aria-label="https://mp.weixin.qq.com/s?__biz=MzI1MjQ2OTQ3Ng==&amp;mid=2247614398&amp;idx=1&amp;sn=68848b771fc627acc5ddf0e7ceb3cc13&amp;chksm=e9e03635de97bf238af998fd7e00fd24a62c6e92b89e9df4bdd72ccab4ffce5fb4c8bd33f014&amp;mpshare=1&amp;scene=1&amp;srcid=0408McLgGUaclsKBZRMR5g1z&amp;sharer_shareinfo=24d5bfcda3f93a51759a82e3234ff212&amp;sharer_shareinfo_first=24d5bfcda3f93a51759a82e3234ff212#rd" rel="noopener nofollow" class="external-link" href="https://mp.weixin.qq.com/s?__biz=MzI1MjQ2OTQ3Ng==&amp;mid=2247614398&amp;idx=1&amp;sn=68848b771fc627acc5ddf0e7ceb3cc13&amp;chksm=e9e03635de97bf238af998fd7e00fd24a62c6e92b89e9df4bdd72ccab4ffce5fb4c8bd33f014&amp;mpshare=1&amp;scene=1&amp;srcid=0408McLgGUaclsKBZRMR5g1z&amp;sharer_shareinfo=24d5bfcda3f93a51759a82e3234ff212&amp;sharer_shareinfo_first=24d5bfcda3f93a51759a82e3234ff212#rd" target="_blank">Scikit-Learn 的建模万能模板！ (qq.com)</a>
<br><br>你只需要两步就能构建起自己的机器学习模型：<br>
<br>明确你需要解决的问题是什么类型，以及知道解决该类型问题所对应的算法。
<br>从skicit-learn中调用相应的算法构建模型即可。是的！在机器学习领域，如果你只是抱着体验机器学习的心态，实现起来就是这么简单。<br>
<img alt="ml_map.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404221610810.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><br>常见的问题类型只有三种：分类、回归、聚类。<br>比如，如果你需要通过输入数据得到一个类别变量，那就是分类问题。分成两类就是二分类问题，分成两类以上就是多分类问题。常见的有：<br>
<br>判别一个邮件是否是垃圾邮件、根据图片分辩图片里的是猫还是狗等等。
<br>如果你需要通过输入数据得到一个具体的连续数值，那就是回归问题。比如：预测某个区域的房价等。常用的分类和回归算法算法有：SVM (支持向量机) 、xgboost、, KNN、LR算法、SGD (随机梯度下降算法)、Bayes (贝叶斯估计)以及随机森林等。这些算法大多都既可以解分类问题，又可以解回归问题。
<br>如果你的数据集并没有对应的属性标签，你要做的，是发掘这组样本在空间的分布, 比如分析哪些样本靠的更近，哪些样本之间离得很远, 这就是属于聚类问题。常用的聚类算法有k-means算法。
<br><br>在介绍万能模板之前，为了能够更深刻地理解这三个模板，我们加载一个Iris（鸢尾花）数据集来作为应用万能模板的小例子，Iris数据集在前边的文章中已经提到过多次了，这里不再赘述。它是一个典型的多分类问题。加载步骤如下：<br><br>因为原始的数据集中包含很多空值，而且类别特征用英文名表示各个花的名字，也需要我们转换成数字。<br>在 scikit-learn 下的 datasets 子包里，也自带了一个 Iris 数据集，这个数据集和原始数据集的区别就是 scikit-learn 已经帮我们提前处理好了空值等问题，可以直接输入模型用来训练。所以为了方便起见，我们直接使用 scikit-learn 的数据集。加载方法如下：<br>from sklearn.datasets import load_iris
data = load_iris()
x = data.data
y = data.target
复制<br>x 值如下，可以看到 scikit-learn 把数据集经过去除空值处理放在了 array 里，所以 x 是一个（150,4）的数组，保存了150个数据的4个特征：<br>array([[5.1, 3.5, 1.4, 0.2], [4.9, 3. , 1.4, 0.2], [4.7, 3.2, 1.3, 0.2], [4.6, 3.1, 1.5, 0.2], [5. , 3.6, 1.4, 0.2], [5.4, 3.9, 1.7, 0.4], [4.6, 3.4, 1.4, 0.3], [5. , 3.4, 1.5, 0.2], [4.4, 2.9, 1.4, 0.2], [4.9, 3.1, 1.5, 0.1], [5.4, 3.7, 1.5, 0.2], [4.8, 3.4, 1.6, 0.2], [4.8, 3. , 1.4, 0.1], [4.3, 3. , 1.1, 0.1], …………
复制<br>y 值如下，共有150行，其中0、1、2分别代表三类花：<br>array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
复制<br>为了方便查看数据，我们可以将数据集转换为 DataFrame 来进行查看：<br>from sklearn.datasets import load_iris
import pandas as pd

# 加载数据集
iris = load_iris()

# 将数据集转换为DataFrame以便更容易查看
iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)

# 查看数据的前五行
print(iris_df.head())

# 查看目标变量（标签）
print("Target:", iris.target)

# 查看数据集描述
print(iris.DESCR)

复制<br><br>数据集拆分是为了验证模型在训练集和测试集是否过拟合，使用 train_test_split 的目的是保证从数据集中均匀拆分出测试集。这里，简单把10%的数据集拿出来用作测试集。<br># 拆分数据集
from sklearn.model_selection import train_test_split  
train_x,test_x,train_y,test_y = \
train_test_split(x,y,test_size=0.1,random_state=0)
复制<br><br>from sklearn.算法位置 import 算法名字
from sklearn.metrics import accuracy_score # 用精确度评估模型

# 生成一个模型对象
模型名 = 算法名字(模型参数选填)

# 训练
模型名.fit(train_x,train_y)

# 在训练集评估模型
pred1 = 模型名.predict(train_x)
accuracy1 = accuracy_score(train_y,pred1)
print("在训练集的精确度为:{}".format(accuracy1))

# 在测试集评估模型
pred2 = 模型名.predict(text_x)
accuracy2 = accuracy_score(text_y,pred2)
print("在训练集的精确度为:{}".format(accuracy2))
复制<br>不同的算法只是改变了名字，以及模型的参数不同而已。<br>
有了这个万能模板，接下来就是简单的复制粘贴改名字了：<br>
而且在 scikit-learn 中，每个包的位置都是有规律的。<br><br><br>通过查阅资料，我们知道svm算法在scikit-learn.svm.SVC下，所以：<br>
<br>算法位置填入：svm
<br>算法名填入：SVC()
<br>模型名自己起，这里我们就叫svm_model
<br># svm分类器

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

svm_model = SVC()

svm_model.fit(train_x,train_y)

pred1 = svm_model.predict(train_x)
accuracy1 = accuracy_score(train_y,pred1)
print('在训练集上的精确度: %.4f'%accuracy1)

pred2 = svm_model.predict(test_x)
accuracy2 = accuracy_score(test_y,pred2)
print('在测试集上的精确度: %.4f'%accuracy2)
复制<br><br>同理，找到LR算法在sklearn.linear_model.LogisticRegression下，所以：<br>
<br>算法位置填入：linear_model
<br>算法名填入：LogisticRegression
<br>模型名叫做：lr_model。<br>
程序如下：
<br># LogisticRegression分类器

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score #评分函数用精确度评估

lr_model = LogisticRegression()

lr_model.fit(train_x,train_y)

pred1 = lr_model.predict(train_x)
accuracy1 = accuracy_score(train_y,pred1)
print('在训练集上的精确度: %.4f'%accuracy1)

pred2 = lr_model.predict(test_x)
accuracy2 = accuracy_score(test_y,pred2)
print('在测试集上的精确度: %.4f'%accuracy2)
复制<br><br>随机森林算法在 sklearn.ensemble.RandomForestClassifier 下，好了，现在你应该可以自己写了。<br><br><br>在1.0版的模板中，当你多次运行同一个程序就会发现：每次运行得到的精确度并不相同，而是在一定范围内浮动，这是因为数据输入模型之前会进行选择，每次训练时数据输入模型的顺序都不一样。所以即使是同一个程序，模型最后的表现也会有好有坏。<br>更糟糕的是，有些情况下，在训练集上，通过调整参数设置使模型的性能达到了最佳状态，但在测试集上却可能出现过拟合的情况。这个时候，我们在训练集上得到的评分不能有效反映出模型的泛化性能。<br>为了解决上述两个问题，还应该在训练集上划分出验证集(validation set)并结合交叉验证来解决。首先，在训练集中划分出不参与训练的验证集，只是在模型训练完成以后对模型进行评估，接着再在测试集上进行最后的评估。<br>但这样大大减少了可用于模型学习的样本数量，所以还需要采用交叉验证的方式多训练几次。比如说最常用的 k-折交叉验证如下图所示，它主要是将训练集划分为 k 个较小的集合。然后将 k-1份训练子集作为训练集训练模型，将剩余的 1 份训练集子集作为验证集用于模型验证。这样需要训练 k 次，最后在训练集上的评估得分取所有训练结果评估得分的平均值。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404231404268.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
这样一方面可以让训练集的所有数据都参与训练，另一方面也通过多次计算得到了一个比较有代表性的得分。唯一的缺点就是计算代价很高，增加了k倍的计算量。<br>
原理就是这样，但理想很丰满，现实很骨干。在自己实现的时候却有一个很大的难题摆在面前：怎么能够把训练集均匀地划分为K份？<br>这个问题不用思考太多，既然别忘了，我们现在是站在巨人的肩膀上，scikit-learn 已经将优秀的数学家所想到的均匀拆分方法和程序员的智慧融合在了cross_val_score()&nbsp;这个函数里了，只需要调用该函数即可，不需要自己想什么拆分算法，也不用写 for 循环进行循环训练。<br>from sklearn.算法位置 import 算法名字
from sklearn.metrics import accuracy_score # 用精确度评估模型

# 生成一个模型对象
模型名 = 算法名字(模型参数选填)

# 训练
模型名.fit(train_x,train_y)

scores1=cross_val_score(模型名,train_x,train_y,cv=n,scoring='accuracy')
# 输出精确度的平均值
print("在训练集的精确度为:{}".format(scores1.mean()))

scores2=cross_val_score(模型名,train_x,train_y,cv=n,scoring='accuracy')
# 输出精确度的平均值
print("在训练集的精确度为:{}".format(scores2.mean()))

# 输出精确度的平均值  
# print("训练集上的精确度: %0.2f " % scores1.mean())

# 输出精确度的平均值和置信度区间  
print("训练集上的平均精确度: %0.2f (+/- %0.2f)" % (scores2.mean(), scores2.std() * 2))
复制<br><br><br>### svm分类器

from sklearn.model_selection import cross_val_score
from sklearn.svm import SVC

svm_model = SVC()
svm_model.fit(train_x,train_y)

scores1 = cross_val_score(svm_model,train_x,train_y,cv=5, scoring='accuracy')
# 输出精确度的平均值和置信度区间
print("训练集上的精确度: %0.2f (+/- %0.2f)" % (scores1.mean(), scores1.std() * 2))

scores2 = cross_val_score(svm_model,test_x,test_y,cv=5, scoring='accuracy')
# 输出精确度的平均值和置信度区间
print("测试集上的平均精确度: %0.2f (+/- %0.2f)" % (scores2.mean(), scores2.std() * 2))


print(scores1)
print(scores2)
复制<br><br># LogisticRegression分类器

from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression


lr_model = LogisticRegression()
lr_model.fit(train_x,train_y)

scores1 = cross_val_score(lr_model,train_x,train_y,cv=5, scoring='accuracy')
# 输出精确度的平均值和置信度区间
print("训练集上的精确度: %0.2f (+/- %0.2f)" % (scores1.mean(), scores1.std() * 2))

scores2 = cross_val_score(lr_model,test_x,test_y,cv=5, scoring='accuracy')
# 输出精确度的平均值和置信度区间
print("测试集上的平均精确度: %0.2f (+/- %0.2f)" % (scores2.mean(), scores2.std() * 2))

print(scores1)
print(scores2)
复制<br><br>以上都是通过算法的默认参数来训练模型的，不同的数据集适用的参数难免会不一样，自己设计算法是设计不来的，只能调调参这样子，调参，是广大算法工程师最后的尊严。再说，若是做算法不调参，岂不是辱没了算法工程师在江湖上大名鼎鼎的“炼丹工程师”的名声？<br>scikit-learn对于不同的算法也提供了不同的参数可以自己调节。如果细说起来，又能写好几篇文章，本文目的是构建一个万能算法框架构建模板，所以，这里只介绍一下一个通用的自动化调参方法，至于更细节的每个算法对应参数的含义以及手动调参方法，会在以后的文章中结合实例具体慢慢介绍。<br>首先要明确的是，scikit-learn 提供了算法().get_params()方法来查看每个算法可以调整的参数，比如说，我们想查看 SVM 分类器算法可以调整的参数，可以：<br>SVC().get_params()
复制<br>接着，就可以引出我们的 V3.0版万能模板了。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404231410415.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
程序就会按照顺序测试这几个参数的组合效果，根本不需要自己辛辛苦苦实现。写到这里，感谢各为大佬编写了scikit-learn这么方便的机器学习包。忽然就想到了一句话：哪有什么岁月静好，只是因为有人替你负重前行。<br>看到这里，可能有人会有疑惑：为什么要采用列表、字典、列表三层嵌套的方式呢？params直接是字典的形式不行吗？答案是：行，但是不好。<br>让我们先算一个小的数学题：假如我们要调节n个参数，每个参数有4个备选值。那么程序就会训练&nbsp;&nbsp;。当n为10的时候，&nbsp;，这是一个对于计算机来说庞大的计算量。而当我们将这10个参数拆分成5组，每次只调节两个参数，其他参数采用默认值，那么计算量就是&nbsp;&nbsp;，计算量会大大减少。列表的作用这是如此，保证了每次只调节列表中的一个字典中的参数。<br>
运行之后，best_model就是我们得到的最优模型，可以利用这个模型进行预测。<br>
当然，best_model 还有好多好用的属性：<br>
<br>bestmodel.cv_results：可以查看不同参数情况下的评价结果。<br>

<br>bestmodel.param&nbsp;:得到该模型的最优参数<br>

<br>bestmodel.best_score:&nbsp;得到该模型的最后评分结果
<br><br><br>###1、svm分类器
from sklearn.model_selection import cross_val_score,GridSearchCV
from sklearn.svm import SVC

svm_model = SVC()

params = [
        {'kernel': ['linear'], 'C': [1, 10, 100, 100]},
        {'kernel': ['poly'], 'C': [1], 'degree': [2, 3]},
        {'kernel': ['rbf'], 'C': [1, 10, 100, 100], 'gamma':[1, 0.1, 0.01, 0.001]}
        ]


best_model = GridSearchCV(svm_model, param_grid=params,cv = 5,scoring = 'accuracy')
best_model.fit(train_x,train_y)

# 查看最优秀
best_model.best_score_

# 查看最优参数
best_model.best_params_

# 查看最优模型的所有参数
best_model.best_estimator_

# 查看每个参数的交叉验证结果
best_model.cv_results_
复制]]></description><link>软件\python\学习笔记\scikit-learn-的建模万能模板！.html</link><guid isPermaLink="false">软件/Python/学习笔记/Scikit-Learn 的建模万能模板！.md</guid><pubDate>Fri, 21 Jun 2024 07:31:42 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404221610810.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404221610810.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br><br>将<a data-href="R：Fst绘制频率热图矩阵" href="软件\r语言语法\r：fst绘制频率热图矩阵.html" class="internal-link" target="_self" rel="noopener nofollow">R：Fst绘制频率热图矩阵</a>整理成矩形。<br>
这一步不知道怎么完成的可以看<a data-href="DnaSP：AMOVA及Fst分析软件操作" href="软件\其它生信软件\a-j\dnasp：amova及fst分析软件操作.html" class="internal-link" target="_self" rel="noopener nofollow">DnaSP：AMOVA及Fst分析软件操作</a>、<a data-href="python：将FASTA转换成Arp" href="软件\python\数据科学与格式转换\python：将fasta转换成arp.html" class="internal-link" target="_self" rel="noopener nofollow">python：将FASTA转换成Arp</a>.<br><br>然后运行下列代码<br>library(ggplot2)
library(ggrepel)
library(reshape2)
library(plyr)
library(zoo)
library(grid)
library(gridExtra)
library(reshape2)
library("ggsci")
library("ggplot2")
library("gridExtra")

#######E:/1Projects/5Mogolian/3f3/1outgroupf3/400pops
setwd("C:/Users/HGL/Desktop/Wangjie/") # 这里替换成Fst矩阵
mydata&lt;-read.table("C:/Users/HGL/Desktop/Wangjie/37POPSRst_Fst.csv",header=TRUE,sep=",", row.names = 1)
library(ggplot2)
mds=cmdscale(mydata,k=4,eig=T)
write.csv(mds$points,file="mdsFst_SNP_genotypes_Global.csv") # 这里替换为输出文件
复制<br><br>你得到了一个表格，类似下列。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402271925512.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
将V1,V2,V3,V4当做PC1,PC2,PC3,PC4来绘制散点图即可。<br>
例如，为了探究前两个成分，则将V1作为X轴，V2作为Y轴。
<br># 这个代码我不知道有什么用，反正不是我写的
mydata&lt;-read.table("C:/Users/HGL/Desktop/Wangjie/MDS.csv",header=TRUE,sep=",")
p1 &lt;- ggplot(mydata, aes(x = PC1, y = PC2,fame = TRUE))
p1  + geom_point(size = 3, aes(shape = Group, color = Group)) + 
  theme_bw() + 
  scale_shape_manual(values = c(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,0,1,2,15,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,0,1,17,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23))+
  scale_colour_manual(values=c("#3B4992FF", "#EE0000FF", "#008B45FF", "#631879FF", "#008280FF", "#BB0021FF","#5F559BFF","#A20056FF", "#4DBBD5FF", "#00A087FF", "#3C5488FF", "#F39B7FFF", "#8491B4FF", "#91D1C2FF", "#DC0000FF", "#7E6148FF", "#5050FFFF","#CE3D32FF","#749B58FF","#F0E685FF","#466983FF","#BA6338FF","#5DB1DDFF","#802268FF","#6BD76BFF", "#D595A7FF","#924822FF","#837B8DFF","#C75127FF","#D58F5CFF","#7A65A5FF","#E4AF69FF","#3B1B53FF","#CDDEB7FF","#612A79FF","#AE1F63FF","#E7C76FFF","#5A655EFF","#A9A9A9FF","#CC9900FF","#99CC00FF","#33CC00FF","#00CC33FF","#00CC99FF","#0099CCFF","#0A47FFFF","#4775FFFF","#FFC20AFF","#FFD147FF","#990033FF","#991A00FF","#996600FF","#809900FF","#339900FF","#00991AFF","#009966FF","#008099FF","#003399FF","#1A0099FF","#660099FF","#990080FF","#D60047FF","#FF1463FF","#00D68FFF","#14FFB1FF","#E64B35FF"))+
  geom_hline(yintercept=0,linetype="dashed", size=0.4,colour="black") + 
  geom_vline(xintercept=0,linetype="dashed", size=0.4,colour="black")+
  theme(legend.position = "left",legend.key.size = unit(0.1, "cm"),legend.key.width = unit(0.05, "cm"),legend.background = element_rect(fill="white",  size=0.5, linetype="solid", colour ="black"))+
  geom_text_repel(data = mydata, aes(x = PC1, y = PC2, label = Text, color = Group,size = 5))








#######E:/1Projects/5Mogolian/3f3/1outgroupf3/400pops

setwd("E:/1Projects/21CQMiaoShe/2f3/")

mydata&lt;-read.table("E:/1Projects/21CQMiaoShe/2f3/mds_f3.csv",header=TRUE,sep=",", row.names = 1)

library(ggplot2)

mds=cmdscale(mydata,k=4,eig=T)

write.csv(mds$points,file="1_Outgroup_f3_mds_f3_MDS.csv")





















#######E:/1Projects/5Mogolian/3f3/1outgroupf3/400pops

setwd("E:/1Projects/21CQMiaoShe/2f3/")

mydata&lt;-read.table("E:/1Projects/21CQMiaoShe/2f3/mds_f3.csv",header=TRUE,sep=",", row.names = 1)

library(ggplot2)

mds=cmdscale(mydata,k=4,eig=T)

write.csv(mds$points,file="1_divided_Outgroup_f3EastAsian112popsAsainMDS.csv")










#######E:/1Projects/5Mogolian/3f3/1outgroupf3/400pops

setwd("E:/1Projects/5Mogolian/3f3/1outgroupf3/400pops/")

mydata&lt;-read.table("E:/1Projects/5Mogolian/3f3/1outgroupf3/400pops/1_divided_Outgroup_f3_list_X1_X2_Yoruba400pop.csv",header=TRUE,sep=",", row.names = 1)

library(ggplot2)

mds=cmdscale(mydata,k=4,eig=T)

write.csv(mds$points,file="358nonAfricans1_f3MDS.csv")











#######E:/1Projects/5Mogolian/4fst/2_400pops/FstMatrix

setwd("E:/1Projects/5Mogolian/4fst/2_400pops/")

mydata&lt;-read.table("E:/1Projects/5Mogolian/4fst/2_400pops/FstMatrix1.csv",header=TRUE,sep=",", row.names = 1)

library(ggplot2)

mds=cmdscale(mydata,k=4,eig=T)

write.csv(mds$points,file="mds_168pops_fst.csv")










#######C:/Users/HGL/Desktop/3AncientDNA_Xinancheng/2Modern/2f3

setwd("C:/Users/HGL/Desktop/3AncientDNA_Xinancheng/2Modern/2f3/MDS")

mydata&lt;-read.table("E:/1Projects/4Shaanxi_Han/7Rawdata/FstHeatmap.csv",header=TRUE,sep=",", row.names = 1)

library(ggplot2)

mds=cmdscale(mydata,k=4,eig=T)

write.csv(mds$points,file="mds_152pops_1_divided_f31234.csv")




#C:/Users/HGL/Desktop/3AncientDNA_Xinancheng/2Modern/1fst/2Fstheatmap_MDS/FstMatrix133.csv

mydata&lt;-read.table("C:/Users/HGL/Desktop/3AncientDNA_Xinancheng/2Modern/1fst/2Fstheatmap_MDS/FstMatrix133.csv",header=TRUE,sep=",", row.names = 1)

library(ggplot2)

mds=cmdscale(mydata,k=3,eig=T)











###########C:/Users/HGL/Desktop/3AncientDNA_Xinancheng/2Modern/2f3/Outgroup_f3_list_X1_X2_Yoruba_1_f3.csv

#####C:/Users/HGL/Desktop/3AncientDNA_Xinancheng/2Modern/1fst/2Fstheatmap_MDS/FstMatrix308.csv
mydata&lt;-read.table("C:/Users/HGL/Desktop/3AncientDNA_Xinancheng/2Modern/1fst/2Fstheatmap_MDS/FstMatrix308.csv",header=TRUE,sep=",", row.names = 1)
library(ggplot2)
mds=cmdscale(mydata,k=3,eig=T)








####C:/Users/HGL\Desktop/1PrecisionIDAncestry/4Kidd_55AISNP/2Cavallli_Scorza/Cavalli_Sforza166pops.csv

mydata&lt;-read.table("C:/Users/HGL/Desktop/1PrecisionIDAncestry/5Seldins list of 128 AISNPs/2Cavalli_Sforza/Cavalli_Sforza_44pops.csv",header=TRUE,sep=",", row.names = 1)
library(ggplot2)
mds=cmdscale(mydata,k=3,eig=T)




write.table(mds,file="MDSdata_treeresults", sep = ",", col.names = NA,qmethod = "double")

mydata&lt;-read.table("C:/Users/Guanglin He/Desktop/Hainan_HlaiHan/3HanHlaiPanasia/2Outgroupf3/MDS1.F3.csv",header=TRUE,sep=",",row.names="pop")
library(ggplot2)
mds=cmdscale(mydata,k=3,eig=T)


#f3 in HGDP and HapMap3

mydata&lt;-read.table("C:/Users/Guanglin He/Desktop/Hainan_HlaiHan/5Hgdphapmap32048/Outgroupf3/1_f3.csv",header=TRUE,sep=",",row.names="pop")
library(ggplot2)
mds=cmdscale(mydata,k=3,eig=T)
mydata&lt;-read.table("C:/Users/Guanglin He/Desktop/Hainan_HlaiHan/5Hgdphapmap32048/Outgroupf3/1.f3.csv",header=TRUE,sep=",",row.names="pop")
library(ggplot2)
mds=cmdscale(mydata,k=3,eig=T)





mydata&lt;-read.table("C:/Users/Guanglin He/Desktop/Guizhou-Sui/2population_comparison/heatmap.csv",header=TRUE,sep=",",row.names="pop")
library(ggplot2)
mds=cmdscale(mydata,k=3,eig=T)


write.table(mds,file="MDSdata_treeresults", sep = ",", col.names = NA,qmethod = "double")


复制]]></description><link>软件\r语言语法\r：根据fst算mds.html</link><guid isPermaLink="false">软件/R语言语法/R：根据Fst算MDS.md</guid><pubDate>Sun, 29 Sep 2024 09:00:37 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据结构]]></title><description><![CDATA[ 
 <br><br>向量(vector)是用于存储数值型、字符型、逻辑型数据的一维数组。标量可以看作是只含有一个元素的向量。函数 c)可用来创建向量，例如:<br>Code
x1&lt;- c(2，4，1，-2，5)<br>
x2&lt;-c("one"，"two"，"three")<br>
x3 &lt;- C(TRUE，FALSE，TRUE， FALSE
<br>BMI的计算
weight &lt;-c(68，72，57，90，65，81)<br>
height &lt;- c(1.75，1.80，1.65，1.90，1.72，1.87)<br>
bmi &lt;- weight/height^2<br>
bmi
<br><br><br>一般来说，变量有数值型、名义型和有序型之分。名义型变量是没有顺序关系的分类变量，例如人的性别、血型、民族等。而有序型变量是有层级和顺序关系的分类变量如患者的病情(较差、好转、很好)。名义型变量和有序型变量在R中称为因子(factor)因子在R中非常重要，它决定了数据的展示和分析方式。数据存储时因子经常以整数向量形式存储。<br>资料分类
计数资料：数值型<br>
计量资料：名义型、有序型
<br>性别
sex &lt;- c(1，2，1，1，2，1，2)<br>
sex,f &lt;- factor(sex，levels = c(1，2)，labels =c("Male"，Female"))<br>
sex.f
<br>上面的命令先定义了一个变量 sex 表示性别，假设其取值1表示男性2表示女性。接着用函数factor()将变量sex 转换成了因子并存为对象sexf其中参数levels 表示原变量的分类标签值，参数 labels 表示因子取值的标签。注意，这两个参数在赋值时需要一一对应R会将它们相关联。因子型变量与一般的字符型变量的区别就是它有一个水平(level)属性。<br>要表示有序因子，需要在函数factor()里指定参数ordered=TRUE。例如:<br>有序因子
status&lt;-c(1，2，2，3，1，2，2)<br>
status.f &lt;- factor(status，<br>
levels=c(1，2，3),<br>
labels=c("Poor""Improved""Excellent")<br>
ordered=TRUE)<br>
status.f
]]></description><link>软件\r语言语法\r：基本数据集.html</link><guid isPermaLink="false">软件/R语言语法/R：基本数据集.md</guid><pubDate>Fri, 21 Jun 2024 07:31:42 GMT</pubDate></item><item><title><![CDATA[R：基本运算符]]></title><description><![CDATA[ 
 <br><img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312011210536.png" referrerpolicy="no-referrer"><br>
<img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312011210537.png" referrerpolicy="no-referrer"><br>
当输人正确的命令时，R 将执行相应的计算。如果左括号的数目多于右括号的数目时按下了 Enter 键，则新的一行将会显示“+”号，提示等待这个命令的完成。当左右括号数相等后，R就会执行计算并显示结果。<br>如何赋值：在R中有2种赋值的方法：<br>
<br>使用&lt;-；推荐；&lt;或者&gt;均可以，方向代表赋值给谁。

<br>例如，3-&gt;a、2&lt;-x。


<br>使用=
<br><img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312011210539.png" referrerpolicy="no-referrer"><br>注意
=代表赋值，但是==代表检查逻辑性；<img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312011210540.png" referrerpolicy="no-referrer">
<br><img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312011210541.png" referrerpolicy="no-referrer">]]></description><link>软件\r语言语法\r：基本运算符.html</link><guid isPermaLink="false">软件/R语言语法/R：基本运算符.md</guid><pubDate>Fri, 21 Jun 2024 07:31:42 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312011210536.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312011210536.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[概念]]></title><description><![CDATA[ 
 <br><br><a data-href="主成分判别分析 (DAPC)" href="主成分判别分析 (DAPC)" class="internal-link" target="_self" rel="noopener nofollow">主成分判别分析 (DAPC)</a> 旨在研究生物群体的遗传结构。这种多变量方法包括两个步骤。首先，遗传数据被转换（居中，可能缩放）并提交给主成分分析（PCA）。<br><br><br>文件要求是序列对齐的版本。对齐可以使用 <a data-href="MAFFT：使用教程" href="软件\其它生信软件\k-s\mafft：使用教程.html" class="internal-link" target="_self" rel="noopener nofollow">MAFFT：使用教程</a>。<br>
获得大概如下：<br>&gt;1053180816471W_B4a5
GATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCT-CCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCCCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGAC---
复制<br><br>注意用制表符分隔，同时表包含标题，第一列是 ID（必须与 FASTA 文件中完全对应）<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407171158370.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br># 安装和加载所需的包，如果包未安装则进行安装
required_packages &lt;- c("adegenet", "ggplot2", "RColorBrewer")
new_packages &lt;- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)

library(adegenet)  # 加载 adegenet 包，用于遗传数据分析
library(ggplot2)   # 加载 ggplot2 包，用于数据可视化
library(RColorBrewer)  # 加载 RColorBrewer 包，用于补充颜色

# 定义文件路径
dfpath &lt;- "C:/Users/victo/Desktop/UPDATED_MSA_unique.fasta"
group_info_path &lt;- "C:/Users/victo/Desktop/新建 Text Document.txt" # 注意大小写，请一定保证这个数据第第一列是"ID"，第二列是"Group"

# 从 TXT 文件中读取分组信息
group_info &lt;- read.table(group_info_path, header = TRUE, sep = "\t")

# 检查 group_info 的列名，确保存在 'ID' 列
if (!"ID" %in% colnames(group_info)) {
  stop("The 'group_info' data frame must contain a column named 'ID'.")
}

# 读取 fasta 文件并转换为 genlight 对象
flu &lt;- fasta2genlight(dfpath, chunkSize = 100, parallel = FALSE)

# 绘制 SNP 位置图
snpposi.plot(position(flu), genome.size = 16594, codon = FALSE) + theme_bw()
snpposi.plot(position(flu), genome.size = 16594, codon = TRUE) + theme_bw()

# PCA 分析
df.pca &lt;- glPca(flu, nf = 3) #这一步耗费很多时间

df.pca.scores &lt;- as.data.frame(df.pca$scores)
df.pca.scores$ID &lt;- rownames(df.pca.scores)

# 计算每个主成分的标准差和方差解释率
sdev &lt;- apply(df.pca.scores[, -ncol(df.pca.scores)], 2, sd)
variance_explained &lt;- sdev^2 / sum(sdev^2) * 100

# 将分组信息与 PCA 结果合并
df.pca.scores &lt;- merge(df.pca.scores, group_info, by = "ID")
df.pca.scores
# 创建一个形状向量，为每个组别分配不同的形状
unique_groups &lt;- unique(df.pca.scores$Group)
shapes &lt;- seq(1, length(unique_groups))

# 指定颜色
custom_colors &lt;- c('#EA1F1F', '#E88421', '#E5C923', '#a5ce4c', '#35ca32', '#41fcb1', 
                   '#449657', '#176555', '#369BA8', '#2B7EBC', '#3626D1', '#A128CE', 
                   '#999999')

# 如果指定颜色不够，用 RColorBrewer 中的色盘补充
if (length(unique_groups) &gt; length(custom_colors)) {
  additional_colors &lt;- brewer.pal(length(unique_groups) - length(custom_colors), "Set3")
  custom_colors &lt;- c(custom_colors, additional_colors)
}

# 定义绘图函数
plot_pca &lt;- function(data, show_id = FALSE) {
  p &lt;- ggplot(data, aes(x = PC1, y = PC2, color = Group, shape = Group)) +  
    geom_point(size = 2) +  
    theme_bw() +  
    stat_ellipse(aes(fill = Group, color = Group), geom = "polygon", alpha = 0.2, level = 0.95) +  
    scale_shape_manual(values = shapes) +  
    scale_color_manual(values = custom_colors) +  
    scale_fill_manual(values = custom_colors)
  if (show_id) {
    p &lt;- p + geom_text(aes(label = ID), vjust = -0.5, size = 3, show.legend = FALSE)
  }
  return(p)
}

# 绘制 PCA 结果，带 ID 和不带 ID
plot_pca(df.pca.scores, show_id = TRUE)
plot_pca(df.pca.scores, show_id = FALSE)

复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202407171159465.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\r语言语法\r：利用dapc进行mtdna降维.html</link><guid isPermaLink="false">软件/R语言语法/R：利用DAPC进行mtDNA降维.md</guid><pubDate>Sun, 08 Sep 2024 13:16:04 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f601.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f601.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br><br>首先，你需要一个 树文件，例如 .nwk。<br>((OTU_47:0.101892516,OTU_46:0.205918075)0.999:0.12637554249999997,((OTU_7:0.079452354,(OTU_9:0.03389913,OTU_35:0.011411273)0.857:0.016187755)0.936:0.055036757,(((OTU_10:0.178702248,(OTU_27:0.105807393,(OTU_21:0.021742283,OTU_23:0.036247052)1.000:0.119621254)0.934:0.046734483)0.847:0.024928304,(OTU_359:0.115728596,((OTU_6:0.017083581,OTU_13:0.043230986)0.991:0.04686027,(OTU_5:0.048441113,OTU_17:0.040966445)0.874:0.016500727)0.998:0.076649272)0.884:0.025403911)0.896:0.031188452,((((OTU_4:0.016277276,OTU_1049:0.018764271)1.000:0.10486842,(OTU_61:0.033971226,OTU_66:0.014225781)0.949:0.029591816)0.938:0.030200498,(OTU_50:0.039428411,((OTU_14:0.027067745,OTU_24:0.006239384)0.713:0.003838445,(OTU_28:0.035593371,(OTU_12:0.019817974,OTU_1263:0.010126282)1.000:0.051942928)0.889:0.016154455)1.000:0.114060029)0.353:0.019135966)0.931:0.027767722,((OTU_26:0.011320021,(OTU_2:0.013893208,OTU_509:0.013184741)0.420:0.004818858)0.869:0.012841976,(((OTU_20:0.014868571,OTU_16:0.015213271)0.912:0.014485178,(OTU_19:0.042730937,OTU_31:0.03306436)0.071:0.011603998)0.445:0.011922646,(OTU_107:0.057678909,(OTU_8:5e-09,(OTU_3:0.01725298,((OTU_18:0.014018692,(OTU_11:0.009416427,OTU_756:0.019954543)0.815:0.007464513)0.616:0.003595574,(OTU_41:0.01321098,OTU_601:0.020022049)0.096:0.008198644)0.883:0.015142165)0.979:0.01496564)0.999:0.044655374)0.971:0.028869096)0.864:0.008905959)0.995:0.05488604)0.835:0.02976759)0.883:0.039831577):0.013815376500000032)root;
复制<br>原数据：<br>ID  NS  OS  Phylum  Class  Genus  Dissimilarity
OTU_4  7.635971271  4.770148464   Proteobacteria   Gammaproteobacteria   Pseudomonas  5.128352562
OTU_3  3.470455042  0.322522661   Proteobacteria   Betaproteobacteria   Variovorax  2.842534081
OTU_11  1.629405372  1.568607796   Proteobacteria   Betaproteobacteria   Alicycliphilus  1.563969309
OTU_9  1.882164078  0.799191737   Proteobacteria   Alphaproteobacteria   Rhizobium  1.458080931
OTU_26  0.297432905  1.251457384   Proteobacteria   Betaproteobacteria   Candidatus_Accumulibacter  0.99979998
OTU_20  0.213755428  1.003571157   Proteobacteria   Betaproteobacteria   Dechloromonas  0.806473806
OTU_31  0.243519198  0.74243736   Proteobacteria   Betaproteobacteria   Zoogloea  0.577408001
OTU_5  0.687363441  2.879332984   Actinobacteria   Actinobacteria   Sinomonas  2.326370564
OTU_21  0.128554203  2.884393027   Firmicutes   Bacilli   Bacillus  2.370021097
OTU_2  0.63593789  2.693549848   Proteobacteria   Betaproteobacteria   Candidatus_Accumulibacter  2.152672757
OTU_6  0.359578156  2.332422107   Actinobacteria   Actinobacteria   Rhodococcus  1.895257238
OTU_7  2.352963337  0.139433436   Proteobacteria   Alphaproteobacteria   Brevundimonas  1.932097306
OTU_23  1.89887647  0.04409441   Firmicutes   Bacilli   Bacillus  1.56172981
OTU_756  0  1.791122404   Proteobacteria   Betaproteobacteria  Unassigned  1.473091986
OTU_1049  0.929126346  1.506002396   Proteobacteria   Gammaproteobacteria   Pseudomonas  1.31072499
OTU_19  0.496918471  1.449424765   Proteobacteria   Betaproteobacteria   Thauera  1.119821414
OTU_107  1.472052603  0   Proteobacteria   Betaproteobacteria   Ralstonia  1.210784869
OTU_12  0.155895638  1.453109046   Proteobacteria   Gammaproteobacteria   Candidatus_Competibacter  1.188276062
OTU_10  0.266397228  1.34180309   Nitrospirae   Nitrospira   Nitrospira  1.081665383
OTU_35  1.320256516  0.031171574   Proteobacteria   Alphaproteobacteria   Ochrobactrum  1.085817664
OTU_16  0.379313613  1.180708996   Proteobacteria   Betaproteobacteria   Ferribacterium  0.919619487
OTU_8  1.220387302  0.132279503   Proteobacteria   Betaproteobacteria  Unassigned  0.997797575
OTU_50  0.748306533  0.96756762   Proteobacteria   Gammaproteobacteria   Dyella  0.93284511
OTU_14  0.192202973  1.171201989   Proteobacteria   Gammaproteobacteria   Candidatus_Competibacter  0.950210503
OTU_509  0.226988694  1.019429383   Proteobacteria   Betaproteobacteria   Candidatus_Accumulibacter  0.817373843
OTU_13  0.054004324  0.98844231   Actinobacteria   Actinobacteria   Mycobacterium  0.811726555
OTU_17  0.292485697  0.861252634   Actinobacteria   Actinobacteria   Microbacterium  0.681542368
OTU_41  0.220470821  0.850461698   Proteobacteria   Betaproteobacteria   Variovorax  0.680220552
OTU_28  0.139433378  0.843575268   Proteobacteria   Gammaproteobacteria   Candidatus_Competibacter  0.684251416
OTU_61  0.847025482  0.108006481   Proteobacteria   Gammaproteobacteria   Stenotrophomonas  0.696634768
OTU_24  0.116658549  0.800407229   Proteobacteria   Gammaproteobacteria   Candidatus_Competibacter  0.65130638
OTU_27  0  0.806457252   Proteobacteria  Others   Bdellovibrio  0.663249576
OTU_1263  0.069715852  0.70551017   Proteobacteria   Gammaproteobacteria   Candidatus_Competibacter  0.577408001
OTU_47  0.053999843  0.706198803   Bacteroidetes  Others  Unassigned  0.579137289
OTU_18  0.57997066  0.273598459   Proteobacteria   Betaproteobacteria   Ottowia  0.440454311
OTU_46  0  0.639748609   Bacteroidetes  Others  Unassigned  0.526212885
OTU_66  0.585808487  0   Proteobacteria   Gammaproteobacteria   Thermomonas  0.481767579
OTU_601  0.530049982  0.108001931   Proteobacteria   Betaproteobacteria  Unassigned  0.434741302
OTU_359  0.41715247  0   Firmicutes  Others   Eubacterium_rectale_group  0.343074336
复制<br><br>如上述，数据文件中，列名很重要。接下来我们都需要时刻注意。<br>
注意分类数据和数值数据的区别。<br><br># 加载必要的R包
library(dplyr)  # 加载dplyr包，用于数据处理和管道操作
library(itol.toolkit)  # 加载itol.toolkit包，用于制作和管理iTOL树图的数据单元
library(data.table)  # 加载data.table包，提供高效的数据读取和操作功能

# 设置工作目录
setwd("C:/Users/victo/Desktop")  # 将当前R会话的工作目录设置为指定路径

# 读取和处理数据
tree_1 &lt;- "abunt-tree.nwk"  # 指定新克文件的路径，这个文件包含树的信息
hub_1 &lt;- create_hub(tree_1)  # 创建一个以此树为中心的hub，用于添加不同的数据单元
data_file_1 &lt;- "abunt-metadata.txt"  # 指定元数据文件的路径
data_1 &lt;- data.table::fread(data_file_1)  # 使用data.table的fread函数读取元数据文件

#############################功能1################################################
# 为树的节点添加标签，按属分类
unit_1 &lt;- create_unit(data = data_1 %&gt;% select(ID, Genus),  # 从data_1中选取ID和Genus列
                      key = "itol_3al_1_labels",  # 为这个单元设置一个键名
                      type = "LABELS",  # 设置数据单元的类型为标签
                      tree = tree_1)  # 指定这个单元关联的树文件
write_unit(unit_1, paste0(getwd(), "/itol_3al_1_labels_Genus.txt"))  # 将单元写入文件

#############################功能2################################################
# 为树的分支添加颜色，按门分类
unit_2 &lt;- create_unit(data = data_1 %&gt;% select(ID, Phylum),
                      key = "itol_3al_2_range",
                      type = "TREE_COLORS",  # 设置类型为树颜色
                      subtype = "range",  # 子类型为范围，表示颜色将根据指定的范围变化
                      tree = tree_1)
write_unit(unit_2, paste0(getwd(), "/itol_3al_2_range_Phylum.txt"))

#############################功能3################################################
# 为树添加颜色条带，按綱分类
set.seed(123)  # 设置随机数种子，确保颜色选择的可重复性
unit_3 &lt;- create_unit(data = data_1 %&gt;% select(ID, Class),
                      key = "itol_3al_3_strip",
                      type = "DATASET_COLORSTRIP",  # 设置类型为颜色条带
                      color = "wesanderson",  # 使用Wes Anderson调色板
                      tree = tree_1)
unit_3@common_themes$basic_theme$margin &lt;- 50  # 设置条带的边缘空白
write_unit(unit_3, paste0(getwd(), "/itol_3al_3_strip_Class.txt"))

#############################功能4################################################
# 添加柱状图，表示某个数值特征
unit_4 &lt;- create_unit(data = data_1 %&gt;% select(ID, NS),
                      key = "itol_3al_4_simplebar",
                      type = "DATASET_SIMPLEBAR",  # 类型为简单柱状图
                      tree = tree_1)
unit_4@specific_themes$basic_plot$size_max &lt;- 100  # 设置柱状图的最大宽度
write_unit(unit_4, paste0(getwd(), "/itol_3al_4_simplebar.txt"))

#############################功能5################################################
# 添加多数据柱状图，同时表示多个数值特征
unit_5 &lt;- create_unit(data = data_1 %&gt;% select(ID, NS, OS),
                      key = "itol_3al_5_multibar",
                      type = "DATASET_MULTIBAR",  # 类型为多数据柱状图
                      tree = tree_1)
unit_5@specific_themes$basic_plot$size_max &lt;- 100  # 设置柱状图的最大宽度
write_unit(unit_5, paste0(getwd(), "/itol_3al_5_multibar.txt"))

#############################功能6################################################
# 添加梯度色柱状图，用于展示数据的变化
unit_6 &lt;- create_unit(data = data_1 %&gt;% select(ID, Dissimilarity),
                      key = "itol_3al_6_gradient",
                      type = "DATASET_GRADIENT",  # 类型为渐变数据集
                      tree = tree_1)
unit_6@specific_themes$heatmap$color$min &lt;- "#0000ff"  # 设置渐变的最小颜色
unit_6@specific_themes$heatmap$color$max &lt;- "#ff0000"  # 设置渐变的最大颜色
write_unit(unit_6, paste0(getwd(), "/itol_3al_6_gradient.txt"))

#############################功能7################################################
# 绘制热图，用于展示多个变量的组合数据
unit_7 &lt;- create_unit(data = data_1 %&gt;% select(ID, NS, OS),
                      key = "itol_7_heatmap",
                      type = "DATASET_HEATMAP",  # 类型为热图
                      tree = tree_1)
write_unit(unit_7, paste0(getwd(), "/itol_7_heatmap.txt"))

#############################功能8################################################
# 生成每个唯一Class的随机颜色
class_unique &lt;- unique(data_1$Class)  # 提取所有唯一的Class值
set.seed(123)  # 设置随机种子以保证颜色可以复现
colors &lt;- sample(colors(), length(class_unique), replace = FALSE)  # 为每个Class随机分配颜色
class_colors &lt;- setNames(colors, class_unique)  # 创建一个以Class为名称、颜色为值的向量
data_1$Color &lt;- class_colors[data_1$Class]  # 将颜色值分配给相应的Class
unit_colors &lt;- create_unit(data = select(data_1, ID, Color),
                           key = "itol_random_class_colors",
                           type = "TREE_COLORS",
                           subtype = "branch",  # 指定subtype为branch，可以改为range或clade
                           tree = tree_1)  # 请替换为您的树文件名称
write_unit(unit_colors, paste0(getwd(), "/itol_random_class_colors.txt"))

#############################功能9################################################
# 形状：1 矩形，2 圆形，3星形，4右边尖的三角形，5左边尖的三角形，6勾
unit_9 &lt;- create_unit(data = data_1 %&gt;%  select(ID, Symbol),
                      key = "Sample_Symbols", 
                      type = "DATASET_SYMBOL",
                      position = 1,
                      size = 2,
                      subtype = "Symbol",
                      tree = tree_1,
                      fill = 1)
write_unit(unit_9,paste0(getwd(),"/itol_Symbol.txt"))
复制]]></description><link>软件\r语言语法\r：利用r进行itol注释文件生成.html</link><guid isPermaLink="false">软件/R语言语法/R：利用R进行iTol注释文件生成.md</guid><pubDate>Fri, 13 Sep 2024 07:27:00 GMT</pubDate></item><item><title><![CDATA[双色配]]></title><description><![CDATA[ 
 <br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311400965.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311401147.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311401605.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312021522975.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>三色折线图  配色：
#EA8379 #7DAEE0 #B395BD
三色柱状图配色：
#299D8F&nbsp;#E9C46A #D87659
三色柱状图配色：&nbsp;
#EF76TA&nbsp;#456990&nbsp;#48C0AA
复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312021524407.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>四色柱状图配色：
#55B7E6&nbsp;#193E8F&nbsp;#E53528&nbsp;#F09739
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311401949.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311401314.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311402132.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311402237.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312021524546.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>六色分面组图配色：

#427AB2&nbsp;#F09148&nbsp;#FF9896&nbsp;

#DBDB8D&nbsp;#C59D94&nbsp;#AFC7E8
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312021525601.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>六色密度图配色：

#EEA599 #FAC795 #FFE9BE&nbsp;

#E3EDE0&nbsp;#ABD3E1 #92B4C8
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311402609.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311402989.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312021525771.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>多色机制图配色：

#43978F&nbsp;#9EC4BE&nbsp;#ABD0F1&nbsp;

#DCE9F4&nbsp;#E56F5E&nbsp;#F19685&nbsp;

#F6C957&nbsp;#FFB77F&nbsp;#FBE8D5 
复制]]></description><link>软件\r语言语法\r：配色图.html</link><guid isPermaLink="false">软件/R语言语法/R：配色图.md</guid><pubDate>Fri, 21 Jun 2024 07:31:44 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311400965.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403311400965.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[COLLAPSE&nbsp;包]]></title><description><![CDATA[ 
 <br><br><br><br>COLLAPSE&nbsp;template are used to collapse branches.&nbsp;COLLAPSE 模板用于折叠分支。<br>Typically, The user merges branches A and B by folding them at their most recent common ancestor (MRCA). However, it is normally hard for users to declare the MRCA node directly. The node name is usually generated automatically by software rather than specified by the user when building the phylogenetic tree. Some programs do not even generate the node name.  <br>通常，用户通过在最近的共同祖先 (MRCA) 处折叠分支 A 和 B 来合并它们。然而，用户通常很难直接声明MRCA节点。节点名称通常由软件自动生成，而不是由用户在构建系统发育树时指定。有些程序甚至不生成节点名称。<br>This section has taken these complicated cases into account, and provide the corresponding solution, so that users can easily prepare the input data.  <br>本节考虑了这些复杂的情况，并提供了相应的解决方案，以便用户可以轻松准备输入数据。<br><br>This basic grammar for range id is written as:&nbsp;branch_A|branch_B.<br>
范围 id 的基本语法写为：branch_A|branch_B。<br>This section provides an example of how to collapse branches using&nbsp;<a data-tooltip-position="top" aria-label="https://github.com/TongZhou2017/itol.toolkit/tree/master/inst/extdata/dataset1" rel="noopener nofollow" class="external-link" href="https://github.com/TongZhou2017/itol.toolkit/tree/master/inst/extdata/dataset1" target="_blank">dataset 1</a>&nbsp;(refer to the&nbsp;<a data-tooltip-position="top" aria-label="https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html" rel="noopener nofollow" class="external-link" href="https://tongzhou2017.github.io/itol.toolkit/articles/Datasets.html" target="_blank">Dataset</a>&nbsp;for detail information) document for detailed information). Users can download the data locally from the provided link above. The files are read using a relative path in this document, so please adjust the path based on actual situation.  <br>本节提供了如何使用数据集 1 折叠分支的示例（详细信息请参阅数据集文档）。用户可以从上面提供的链接本地下载数据。本文档采用相对路径读取文件，请根据实际情况调整路径。<br>The first step is to load the&nbsp;newick&nbsp;format tree file&nbsp;tree_of_itol_templates.tree&nbsp;and its corresponding metadata&nbsp;template_groups.  <br>第一步是加载newick格式树文件tree_of_itol_templates.tree及其对应的元数据template_groups。<br>library(itol.toolkit)
tree &lt;- system.file("extdata",
                    "tree_of_itol_templates.tree",
                    package = "itol.toolkit")
data("template_groups")
复制<br>Suppose that the user wants to collapse&nbsp;DATASET_SIMPLEBAR&nbsp;and&nbsp;DATASET_MULTIBAR&nbsp;into one branch;&nbsp;DATASET_TEXT&nbsp;and&nbsp;LABELS&nbsp;into another branch;DATASET_ALIGNMENT,&nbsp;DATASET_CONNECTIONS,&nbsp;DATASET_IMAGE&nbsp;and&nbsp;POPUP_INFO&nbsp;which belong to advanced visualization into one branch:<br>
假设用户想要将 DATASET_SIMPLEBAR 和 DATASET_MULTIBAR 折叠成一个分支； DATASET_TEXT 和 LABELS 放到另一个分支；DATASET_ALIGNMENT、DATASET_CONNECTIONS、DATASET_IMAGE 和 POPUP_INFO 属于高级可视化到一个分支：<br>range_ids &lt;- c("DATASET_SIMPLEBAR|DATASET_MULTIBAR",
               "DATASET_TEXT|LABELS",
               "DATASET_CONNECTIONS|POPUP_INFO")
unit_1 &lt;- create_unit(data = range_ids, 
                      key = "E001_collapse_1", 
                      type = "COLLAPSE", 
                      tree = tree)
write_unit(unit_1,
           paste0(getwd(),"/E001_collapse_1.txt"))
复制<br><img src="https://tongzhou2017.github.io/itol.toolkit/articles/images/COLLAPSE_1.png" referrerpolicy="no-referrer"><br>While the first two sets of folded branches are relatively simple to define because no other branches exist between them, the third set of folded branches is slightly complex, requiring the user to select the two branches with the longest spacing among the four to accurately describe the extent to be folded. Writing the code as&nbsp;DATASET_ALIGNMENT | POPUP_INFO&nbsp;may result in the omission of the&nbsp;DATASET_CONNECTIONS&nbsp;branch, because the branch does not belong to MCRA of&nbsp;DATASET_ALIGNMENT&nbsp;and&nbsp;POPUP_INFO.  <br>虽然前两组折叠分支定义相对简单，因为它们之间不存在其他分支，但第三组折叠分支稍微复杂，需要用户选择四个分支中间距最长的两个分支来准确描述折叠的程度。将代码编写为 DATASET_ALIGNMENT | POPUP_INFO 可能会导致省略 DATASET_CONNECTIONS 分支，因为该分支不属于 DATASET_ALIGNMENT 和 POPUP_INFO 的 MCRA。<br>Because the process of defining branches is very cumbersome and requires manual judgment, this function is not used frequently in the 23 templates in iTOL v6.  <br>由于定义分支的过程非常繁琐，并且需要手动判断，因此该功能在iTOL v6的23个模板中使用频率并不高。<br><br>Although we used a tip label in the above example, using node names directly is more convenient if it is available. Thus, the&nbsp;itol.toolkit&nbsp;also enable you to define the collapsed branch using the node name directly .<br>
尽管我们在上面的示例中使用了提示标签，但如果可以的话，直接使用节点名称会更方便。因此，itol.toolkit 还允许您直接使用节点名称定义折叠分支。<br>The tree provided by&nbsp;itol.toolkit&nbsp;<a data-tooltip-position="top" aria-label="https://github.com/TongZhou2017/itol.toolkit/blob/master/inst/extdata/dataset1/itol_templates.tree" rel="noopener nofollow" class="external-link" href="https://github.com/TongZhou2017/itol.toolkit/blob/master/inst/extdata/dataset1/itol_templates.tree" target="_blank">dataset 1</a>&nbsp;including the node labels:<br>
itol.toolkit 数据集 1 提供的树包括节点标签：<br>ape::read.tree(tree)
# Phylogenetic tree with 23 tips and 22 internal nodes.
#
# Tip labels:
#   SPACING, COLLAPSE, PRUNE, TREE_COLORS, DATASET_STYLE, DATASET_CONNECTIONS, ...
# Node labels:
#   I1, I2, tree_sturcture, I4, theme_style, I6, ...
# 
# Rooted; includes branch lengths.
复制<br>Therefore, you could specify the group you want to merge directly.<br>
因此，您可以直接指定要合并的组。<br>group_names &lt;- unique(c("tree_sturcture", "theme_style", "text", "basic_plot"))
unit_2 &lt;- create_unit(data = group_names, 
                      key = "E002_collapse_2", 
                      type = "COLLAPSE", 
                      tree = tree)
write_unit(unit_2,
           paste0(getwd(),"/E002_collapse_2.txt"))
复制<br><img src="https://tongzhou2017.github.io/itol.toolkit/articles/images/COLLAPSE_2.png" referrerpolicy="no-referrer"><br>If you have questions about how to upload results files from iTOL toolkit for interactive visualization on iTOL, please refer to the&nbsp;<a data-tooltip-position="top" aria-label="https://tongzhou2017.github.io/itol.toolkit/articles/Operation.html" rel="noopener nofollow" class="external-link" href="https://tongzhou2017.github.io/itol.toolkit/articles/Operation.html" target="_blank">Operation</a>&nbsp;document for step-by-step guidance.<br>
如果您对如何从 iTOL 工具包上传结果文件以在 iTOL 上进行交互式可视化有疑问，请参阅操作文档以获取分步指导。<br><br>
<br>IOCAS,&nbsp;<a data-tooltip-position="top" aria-label="mailto:weiyLiu@outlook.com" rel="noopener nofollow" class="external-link" href="mailto:weiyLiu@outlook.com" target="_blank">weiyLiu@outlook.com</a><a data-tooltip-position="top" aria-label="https://tongzhou2017.github.io/itol.toolkit/articles/COLLAPSE.html#fnref1" rel="noopener nofollow" class="external-link" href="https://tongzhou2017.github.io/itol.toolkit/articles/COLLAPSE.html#fnref1" target="_blank"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">&nbsp;IOCAS, <a data-tooltip-position="top" aria-label="mailto:weiyLiu@outlook.com" rel="noopener nofollow" class="external-link" href="mailto:weiyLiu@outlook.com" target="_blank">weiyLiu@outlook.com</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">︎
<br>CACMS,&nbsp;<a data-tooltip-position="top" aria-label="mailto:njbxhzy@hotmail.com" rel="noopener nofollow" class="external-link" href="mailto:njbxhzy@hotmail.com" target="_blank">njbxhzy@hotmail.com</a><a data-tooltip-position="top" aria-label="https://tongzhou2017.github.io/itol.toolkit/articles/COLLAPSE.html#fnref2" rel="noopener nofollow" class="external-link" href="https://tongzhou2017.github.io/itol.toolkit/articles/COLLAPSE.html#fnref2" target="_blank"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">&nbsp;CACMS，<a data-tooltip-position="top" aria-label="mailto:njbxhzy@hotmail.com" rel="noopener nofollow" class="external-link" href="mailto:njbxhzy@hotmail.com" target="_blank">njbxhzy@hotmail.com</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">︎
<br>IOCAS,&nbsp;<a data-tooltip-position="top" aria-label="mailto:tongzhou2017@gmail.com" rel="noopener nofollow" class="external-link" href="mailto:tongzhou2017@gmail.com" target="_blank">tongzhou2017@gmail.com</a><a data-tooltip-position="top" aria-label="https://tongzhou2017.github.io/itol.toolkit/articles/COLLAPSE.html#fnref3" rel="noopener nofollow" class="external-link" href="https://tongzhou2017.github.io/itol.toolkit/articles/COLLAPSE.html#fnref3" target="_blank"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">&nbsp;IOCAS, <a data-tooltip-position="top" aria-label="mailto:tongzhou2017@gmail.com" rel="noopener nofollow" class="external-link" href="mailto:tongzhou2017@gmail.com" target="_blank">tongzhou2017@gmail.com</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">︎
<br><br><a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV1kc411R73e/?spm_id_from=333.999.0.0&amp;vd_source=1ee3ed0a9cabee330429fe4af1d78acd" rel="noopener nofollow" class="external-link" href="https://www.bilibili.com/video/BV1kc411R73e/?spm_id_from=333.999.0.0&amp;vd_source=1ee3ed0a9cabee330429fe4af1d78acd" target="_blank">点我</a>，这个视频长度较长。]]></description><link>软件\r语言语法\r：谱系树修饰.html</link><guid isPermaLink="false">软件/R语言语法/R：谱系树修饰.md</guid><pubDate>Fri, 21 Jun 2024 07:31:47 GMT</pubDate><enclosure url="https://tongzhou2017.github.io/itol.toolkit/articles/images/COLLAPSE_1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://tongzhou2017.github.io/itol.toolkit/articles/images/COLLAPSE_1.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240516204424.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
第一列为地区（例如省份、城市等），第三列是第四列单倍群在该地区的频率，计算公式应该是：<br><br><br>library(ggplot2)  # 加载ggplot2库，用于数据可视化
library(ggpubr)  # 加载ggpubr库，用于增强的ggplot2图表
# library(ggExtra)  # 注释掉ggExtra库的加载，因为不再使用边际图

# 加载数据
data &lt;- read.csv("C:/Users/victo/Desktop/相关分析.csv", header = TRUE, row.names = 1)

# 检查数据是否包含NULL值或其他异常情况
if (any(is.null(data)) || any(is.na(data))) {
  stop("数据中包含NULL或NA值，请检查数据文件。")
}

# 获取index列的第二行的值
index_second_row &lt;- data$index[2]

# 自定义形状和颜色
custom_shapes &lt;- c(17)  # 设置点的形状为三角形
custom_colors &lt;- c("#81B3A9")  # 设置点的颜色
ci_color &lt;- "#C1DDDB"  # 置信区间的颜色

# 定义一个函数，用于创建图表
create_plot &lt;- function(group_data, x_var, y_var, x_label, y_label) {
  # 创建基础散点图，添加线性拟合线和相关系数
  p &lt;- ggplot(group_data, aes(x = .data[[x_var]], y = .data[[y_var]], colour = index, shape = index)) +
    geom_point() +  # 添加散点
    geom_smooth(method = "lm", se = TRUE, fill = ci_color, color = ci_color) +  # 添加线性拟合线，显示95%置信区间，置信区间颜色为ci_color
    scale_shape_manual(values = custom_shapes) +  # 应用自定义点形状
    scale_colour_manual(values = custom_colors) +  # 应用自定义点颜色
    theme_bw() +  # 使用白色背景主题
    theme(legend.position = "none",  # 隐藏图例
          aspect.ratio = 1) +  # 设置图表为正方形
    stat_cor(color= '#113A34',method = 'pearson', aes(x = .data[[x_var]], y = .data[[y_var]])) +  # 计算并显示Pearson相关系数
    xlab(paste(x_label, index_second_row, sep = " - ")) + ylab(y_label)  # 设置坐标轴标签
  
  return(p)
}

# 对每个组应用图表，针对Lat变量
plots_lat &lt;- lapply(unique(data$index), function(group) {
  group_data &lt;- subset(data, index == group)  # 按组过滤数据
  create_plot(group_data, "Fre", "Lat", "Fre", "Lat")  # 创建并返回图表
})

# 对每个组应用图表，针对Long变量
plots_long &lt;- lapply(unique(data$index), function(group) {
  group_data &lt;- subset(data, index == group)  # 按组过滤数据
  create_plot(group_data, "Fre", "Long", "Fre", "Long")  # 创建并返回图表
})

# 在网格布局中显示所有图表
final_plot &lt;- ggarrange(plotlist = c(plots_lat, plots_long), ncol = 2, nrow = ceiling((length(plots_lat) + length(plots_long)) / 2))  # 使用2列布局，行数根据图表总数动态计算
print(final_plot)


复制<br><img alt="ef473d5e47bbb1b69fb39fc541ab79e.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/ef473d5e47bbb1b69fb39fc541ab79e.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\r语言语法\r：特定某个单倍群与经纬度相关性回归.html</link><guid isPermaLink="false">软件/R语言语法/R：特定某个单倍群与经纬度相关性回归.md</guid><pubDate>Fri, 23 Aug 2024 08:38:44 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[R：相关性热图]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://mp.weixin.qq.com/s?__biz=MzkxNjMzOTYxOA==&amp;mid=2247484017&amp;idx=1&amp;sn=c6a5a0bbc2c55f97961f0d228e2f8403&amp;chksm=c1502cbcf627a5aab9e66b93a388d03a6fc8cb3fb3068c419d01564c25171b57cab9d6ae0f0c&amp;mpshare=1&amp;scene=1&amp;srcid=1215i3JoMOQl7qk6yAGAwEMi&amp;sharer_shareinfo=b49ef7f466d4818bdc46a684296d85fc&amp;sharer_shareinfo_first=b49ef7f466d4818bdc46a684296d85fc#rd" rel="noopener nofollow" class="external-link" href="https://mp.weixin.qq.com/s?__biz=MzkxNjMzOTYxOA==&amp;mid=2247484017&amp;idx=1&amp;sn=c6a5a0bbc2c55f97961f0d228e2f8403&amp;chksm=c1502cbcf627a5aab9e66b93a388d03a6fc8cb3fb3068c419d01564c25171b57cab9d6ae0f0c&amp;mpshare=1&amp;scene=1&amp;srcid=1215i3JoMOQl7qk6yAGAwEMi&amp;sharer_shareinfo=b49ef7f466d4818bdc46a684296d85fc&amp;sharer_shareinfo_first=b49ef7f466d4818bdc46a684296d85fc#rd" target="_blank">原文链接</a><br>相关性是指两个或多个变量之间的关系程度。在统计学中，常用相关系数来衡量变量之间的相关性，其中最常见的是皮尔逊相关系数。相关性系数的取值范围在-1到1之间，-1表示完全的负相关，1表示完全的正相关，0表示没有线性相关性。<br>相关性图是一种可视化手段，用于展示变量之间的相关关系。这种图形通常以矩阵的形式呈现，其中每个单元格表示两个变量之间的相关系数。图形的颜色和形状可以表示相关性的强弱，从而直观地帮助我们理解数据中的关联模式。<br>相关性详见：<a data-tooltip-position="top" aria-label="https://mp.weixin.qq.com/s?__biz=MzkxNjMzOTYxOA==&amp;mid=2247483846&amp;idx=1&amp;sn=1e2c402b0863e3b59961aeae43ad535f&amp;chksm=c1502f0bf627a61d8d9b11ef5eee57d3f56c220d040f6302cf89aae615ac42b7577c6d8e2300&amp;scene=21#wechat_redirect" rel="noopener nofollow" class="external-link" href="https://mp.weixin.qq.com/s?__biz=MzkxNjMzOTYxOA==&amp;mid=2247483846&amp;idx=1&amp;sn=1e2c402b0863e3b59961aeae43ad535f&amp;chksm=c1502f0bf627a61d8d9b11ef5eee57d3f56c220d040f6302cf89aae615ac42b7577c6d8e2300&amp;scene=21#wechat_redirect" target="_blank">链接</a>。<br><br>R 包 corrplot 提供了很好的相关矩阵的可视化方法，不仅在图形布局、颜色、图例、文本标签等方面提供了丰富的绘图选项,还提供&nbsp;p 值和<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>来确定相关性的统计显着性。corrplot方法有大约 50 个参数，最常用的参数有method、type、order、diag等。<br># 安装R包
复制<br>使用自带的mtcars数据集<br>
# ?mtcars
# A data frame with 32 observations on 11 (numeric) variables.
# &gt; mtcars
# mpg cyl  disp  hp drat    wt  qsec vs am gear carb
# Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
# Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
# Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
# Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
复制<br>计算相关性矩阵<br>cordata = cor(mtcars)
复制<br>使用默认参数绘图<br>corrplot(cordata, ) # method = 'circle'
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312260838225.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>使用method、order、type、diag 参数调整图形！<br># 从左到右 第一排 color-&gt;shade-&gt;square
corrplot(cordata, method = 'color', order = 'alphabet')
corrplot(cordata, method = 'shade', order = 'AOE', 
         diag = FALSE)
corrplot(cordata, method = 'square', order = 'FPC', 
         type = 'lower', diag = FALSE)
# 从左到右 第二排
corrplot(cordata, method = 'ellipse', order = 'AOE', 
         type = 'upper')
corrplot.mixed(cordata, order = 'AOE')
corrplot.mixed(cordata, lower = 'shade', upper = 'pie', 
               order = 'hclust')
复制<br><br># 安装
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/ggcorrplot")

library(ggcorrplot)

p1 &lt;- ggcorrplot(cordata, method = "circle")
p2 &lt;- ggcorrplot(cordata, hc.order = TRUE, outline.col = "white")
p3 &lt;- ggcorrplot(cordata, hc.order = TRUE, type = "upper",
           outline.col = "white")
p4 &lt;- ggcorrplot(cordata, hc.order = TRUE, type = "lower",
           lab = TRUE)
复制<br><br># install remotes package if necessary
install.packages("remotes")
# install corrmorant from the github repository
remotes::install_github("r-link/corrmorant")

# correlation plot of the drosera data using style = 'light'
corrmorant(drosera, style = "light")
# the "dark" style has a dark background in the diagonal facets
corrmorant(drosera, style = "dark")
# in the "blue_red" style, colors and correlation labels are colored by the strength of
# correlation
corrmorant(drosera, style = "blue_red")
复制<br>library(tidyverse)
select(mtcars, mpg, disp:qsec) %&gt;% 
  ggcorrm(rescale = "by_sd") +
  utri_heatmap(alpha = 0.5) +
  lotri_heatcircle(alpha = 0.5, col = 1) +
  utri_corrtext() +
  dia_names(y_pos = 0.15, size = 3) +
  dia_density(lower = 0.3, fill = "lightgrey", color = 1) +
  scale_fill_corr()
复制<br><br>install.packages('pheatmap')

# 模拟数据
library(pheatmap)
# Data 
set.seed(8)
m &lt;- matrix(rnorm(200), 10, 10)
colnames(m) &lt;- paste("Col", 1:10)
rownames(m) &lt;- paste("Row", 1:10)

# 绘制 Heat map， 并按照列归一化
pheatmap(m, scale = "column")

# 参数调整
# display_numbers
pheatmap(m,
         display_numbers = TRUE,
         number_color = "black", 
         fontsize_number = 8)
# kmeans聚类
pheatmap(m, kmeans_k = 3, cellheight = 50)
# border_color
pheatmap(m, border_color = "black")
# Color palette
pheatmap(m, color = hcl.colors(50, "BluYl"))
复制<br><br>
install.packages("devtools")
devtools::install_github("hannet91/ggcor")

library(ggplot2)
library(ggcor)
library(vegan)
library(dplyr)
data("varechem")
data("varespec")

fortify_mantel(varespec, varechem, 
                           spec.select = list(1:10, 5:14, 7:22, 9:32)) %&gt;% 
  mutate(r = cut(r, breaks = c(-Inf, 0.25, 0.5, Inf), 
                 labels = c("&lt;0.25", "0.25-0.5", "&gt;=0.5"),
                 right = FALSE),
         p.value = cut(p.value, breaks = c(-Inf, 0.001, 0.01, 0.05, Inf),
                       labels = c("&lt;0.001", "0.001-0.01", "0.01-0.05", "&gt;=0.05"),
                       right = FALSE))

quickcor(varechem, type = "upper") + geom_square() + 
  add_link(mantel02, mapping = aes(colour = p.value, size = r),
           diag.label = TRUE) +
  scale_size_manual(values = c(0.5, 1.5, 3)) +
  add_diag_label() + remove_axis("x")
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312260842218.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br><br># 安装PerformanceAnalytics
install.packages("PerformanceAnalytics")
# 绘制散点矩阵
chart.Correlation(mtcars[,1:8], histogram=TRUE)
复制<br><br># 安装
install.packages('GGally')

library(GGally)
library(ggplot2)
# 自带的iris数据集
ggpairs(iris, columns=1:5, aes(color=Species)) + 
  ggtitle("Iris (GGally_ggpairs) ")+
  theme_bw()
复制<br><br>panel.hist &lt;- function(x, ...)
{
  usr &lt;- par("usr"); on.exit(par(usr))
  par(usr = c(usr[1:2], 0, 1.5) )
  h &lt;- hist(x, plot = FALSE)
  breaks &lt;- h$breaks; nB &lt;- length(breaks)
  y &lt;- h$counts; y &lt;- y/max(y)
  rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)}

pairs(iris[1:5], main = "Iris(pairs)", pch = 21,
      panel = panel.smooth,
      diag.panel = panel.hist,
      bg = c("#1b9e77", "#d95f02", "#7570b3")[unclass(iris$Species)]
复制<br><br>
# 安装
install.packages("psych")
library(psych)
# 绘图
pairs.panels(iris,
             smooth = TRUE,      # If TRUE, draws loess smooths
             scale = FALSE,      # If TRUE, scales the correlation text font
             density = TRUE,     # If TRUE, adds density plots and histograms
             ellipses = TRUE,    # If TRUE, draws ellipses
             method = "pearson", # Correlation method (also "spearman" or "kendall")
             pch = 21,           # pch symbol
             lm = FALSE,         # If TRUE, plots linear fit rather than the LOESS (smoothed) fit
             cor = TRUE,         # If TRUE, reports correlations
             jiggle = FALSE,     # If TRUE, data points are jittered
             factor = 2,         # Jittering factor
             hist.col = 4,       # Histograms color
             stars = TRUE,       # If TRUE, adds significance level with stars
             ci = TRUE)          # If TRUE, adds confidence intervals
复制]]></description><link>软件\r语言语法\r：相关性热图.html</link><guid isPermaLink="false">软件/R语言语法/R：相关性热图.md</guid><pubDate>Fri, 21 Jun 2024 07:31:48 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312260838225.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312260838225.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240520094458.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
热图的可操作性很高，因此可以把很多内容放进去。<br>
图中包括了几个重要的部分：<br>
<br>每个采样地点的经纬度。
<br>每个群体在 PCA 图形上的位置关系，即 PC1,PC2。
<br>群体与群体之间的 Fst 矩阵关系。
<br>单倍群在特定群体中的频率。
<br>关于第四点，计算方法应该是：<br><br><br><br># 加载必要的库
library(PerformanceAnalytics)
library(Hmisc)
library(corrplot)
library(GGally)
library(Rmisc) 
library(ggcorrplot)
library(RColorBrewer)
library(grDevices)

# 读取数据
dd = read.csv("C:/Users/victo/Desktop/eth_pop相关性矩阵.csv", header=T, row.names=1)

# 计算相关系数
cor(dd)

# 转换为矩阵
dd = as.matrix(dd)

# 计算完整观测相关系数
re = cor(dd, use="complete.obs")

# 计算p值
p = round(cor_pmat(dd, method="pearson"), 10)

# 设定PDF的尺寸
pdf("C:/Users/victo/Desktop/output_fixed.pdf", width=20, height=14)  # 设置PDF宽度和高度

# 调整绘图边距
par(mar=c(1, 1, 1, 1))  # 设置绘图边距，确保内容不会被截掉

# 指定颜色渐变
color_palette &lt;- colorRampPalette(c("#20364F","#31646C","#4E9280","#96B89B",
                                    "#DCDFD2","#ECD9CF","#D49C87","#B86265",
                                    "#8B345E","#50184E"))(100)

# 绘制上三角区域的相关系数矩阵
corrplot(re, p.mat=p,
         order="original", # 保持原有的排序顺序
         type="upper", # 将部分放在上边
         tl.col="black", # 标签颜色
         tl.cex=0.8, # 标签大小
         tl.pos="tp",
         insig="label_sig",
         sig.level=c(.001, .01, .05),
         pch.cex=0.8,  # 调整不显著关系的符号大小
         col=color_palette)  # 使用指定的颜色

# 在上一步绘制的基础上，继续绘制下三角区域
corrplot(re, add=TRUE,
         type="lower",
         mar=c(0, 0, 0, 0),  # 设置边距，确保内容不会被截掉
         method="number", # 用数字表示
         order="original", # 保持原有排序
         diag=FALSE,
         tl.col="black",
         tl.cex=0.8,
         tl.pos="n",
         cl.pos="n",
         number.digits=2,
         number.cex=0.6,  # 调整数字大小
         number.font=1,  # 指定字体
         col=color_palette,
         addCoef.col=NA)  # 不设置addCoef.col

# 自定义绘制数字背景
for(i in 1:nrow(re)) {
  for(j in 1:i) {
    value_color &lt;- color_palette[round((re[i, j] + 1) / 2 * 99) + 1]
    rect(xleft=j-0.5, ybottom=nrow(re)-i+0.5, xright=j+0.5, ytop=nrow(re)-i+1.5,
         col=value_color, border=NA)
    
    # 计算背景颜色的亮度
    bg_col &lt;- col2rgb(value_color) / 255
    brightness &lt;- sqrt(0.299 * bg_col[1]^2 + 0.587 * bg_col[2]^2 + 0.114 * bg_col[3]^2)
    
    # 根据亮度选择字体颜色
    text_color &lt;- ifelse(brightness &gt; 0.5, "black", "white")
    
    text(j, nrow(re)-i+1, round(re[i, j], 2), col=text_color, cex=0.6)
  }
}

# 关闭PDF设备
dev.off()
复制<br>如何描述绘制的图形？请参考下列：<br>变量相关矩阵的可视化表示：本图展示了变量间的皮尔逊相关系数矩阵。矩阵中每个单元格代表两个变量间的相关性。

上三角部分使用颜色渐变和符号标记来表示相关系数及其显著性，而下三角部分则以背景色和数值展示相关系数。上三角区域：使用颜色填充和符号标记展示相关系数的大小及其显著性。
相关系数通过颜色渐变进行视觉呈现，颜色从深蓝到深红，表示相关性从负到正的变化。显著性水平以符号标记表示，显著性水平的阈值设定为0.001、0.01和0.05。在不显著的相关性上，符号标记如 * 用于显示。

下三角区域：数值和背景色一起表示相关系数。背景色通过颜色渐变填充，颜色范围与上三角一致，视觉上强调了相关系数的大小和方向。相关系数以数值形式显示在矩形的中心，数值保留两位小数。
使用了 R 语言的 corrplot 包进行绘图。

复制<br><br>下面的代码改变了除了经纬度、PC1、PC2之外的排序方式。<br># 加载必要的库
library(PerformanceAnalytics)
library(Hmisc)
library(corrplot)
library(GGally)
library(Rmisc)
library(ggcorrplot)
library(RColorBrewer)
library(grDevices)

# 读取数据
dd = read.csv("C:/Users/victo/Desktop/新建 Text Document.txt", sep = "\t", header=T, row.names=1)

# 提取PC1, PC2, Latitude, Longtitude列
fixed_cols = c("PC1", "PC2", "Latitude", "Longitude")
fixed_data = dd[, fixed_cols]

# 将列名分为群组和单倍型组
group_cols = colnames(dd)[grepl("_", colnames(dd))]
haplotype_cols = colnames(dd)[!grepl("_", colnames(dd)) &amp; !colnames(dd) %in% fixed_cols]

# 提取群组和单倍型数据
group_data = dd[, group_cols]
haplotype_data = dd[, haplotype_cols]

# 计算群组和单倍型的相关系数矩阵
re_group = cor(group_data, use="complete.obs")
zero_variance_cols = sapply(haplotype_data, function(col) sd(col, na.rm = TRUE) == 0)
# 打印常数列名称
if (any(zero_variance_cols)) {
  cat("具有零标准差的列：", names(haplotype_data)[zero_variance_cols], "\n")
}
# 从数据中移除这些列
haplotype_data_filtered = haplotype_data[, !zero_variance_cols]
# 计算群组和单倍型的相关系数矩阵
re_group = cor(group_data, use="complete.obs")
re_haplotype = cor(haplotype_data_filtered, use="complete.obs")

# 层次聚类等操作
hc_group = hclust(as.dist(1 - re_group))
hc_haplotype = hclust(as.dist(1 - re_haplotype))

# 重新排序列名
group_order = group_cols[hc_group$order]
haplotype_order = haplotype_cols[hc_haplotype$order]

# 重新排列数据框
dd_reordered = dd[, c(fixed_cols, group_order, haplotype_order)]

# 计算完整观测相关系数
re = cor(dd_reordered, use="complete.obs")

# 计算p值
p = round(cor_pmat(dd_reordered, method="pearson"), 10)

# 设定PDF的尺寸
# pdf("C:/Users/victo/Desktop/output_fixed.pdf", width=20, height=14)  # 设置PDF宽度和高度

# 调整绘图边距
par(mar=c(1, 1, 1, 1))  # 设置绘图边距，确保内容不会被截掉

# 指定颜色渐变
color_palette &lt;- colorRampPalette(c("#20364F","#31646C","#4E9280","#96B89B",
                                    "#DCDFD2","#ECD9CF","#D49C87","#B86265",
                                    "#8B345E","#50184E"))(100)

# 绘制上三角区域的相关系数矩阵
corrplot(re, p.mat=p,
         order="original", # 保持原有的排序顺序
         type="upper", # 将部分放在上边
         tl.col="black", # 标签颜色
         tl.cex=0.8, # 标签大小
         tl.pos="tp",
         insig="label_sig",
         sig.level=c(.001, .01, .05),
         pch.cex=0.8,  # 调整不显著关系的符号大小
         col=color_palette, # 使用指定的颜色
         #outline=TRUE, # 添加边框
         #addgrid.col="#BDF7F6"
         )  # 设置边框颜色

# 在上一步绘制的基础上，继续绘制下三角区域
corrplot(re, add=TRUE,
         type="lower",
         mar=c(0, 0, 0, 0),  # 设置边距，确保内容不会被截掉
         method="number", # 用数字表示
         order="original", # 保持原有排序
         diag=FALSE,
         tl.col="black",
         tl.cex=0.8,
         tl.pos="n",
         cl.pos="n",
         number.digits=2,
         number.cex=0.6,  # 调整数字大小
         number.font=1,  # 指定字体
         col=color_palette,
         addCoef.col=NA, # 不设置addCoef.col
         #outline=TRUE, # 添加边框
         #addgrid.col="#BDF7F6"
         )  # 设置边框颜色

# 自定义绘制数字背景
for(i in 1:nrow(re)) {
  for(j in 1:i) {
    value_color &lt;- color_palette[round((re[i, j] + 1) / 2 * 99) + 1]
    rect(xleft=j-0.5, ybottom=nrow(re)-i+0.5, xright=j+0.5, ytop=nrow(re)-i+1.5,
         col=value_color, border=NA)
    
    # 计算背景颜色的亮度
    bg_col &lt;- col2rgb(value_color) / 255
    brightness &lt;- sqrt(0.299 * bg_col[1]^2 + 0.587 * bg_col[2]^2 + 0.114 * bg_col[3]^2)
    
    # 根据亮度选择字体颜色
    text_color &lt;- ifelse(brightness &gt; 0.5, "black", "white")
    
    text(j, nrow(re)-i+1, round(re[i, j], 2), col=text_color, cex=0.6)
  }
}

# 关闭PDF设备
# dev.off()

复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/20240520100109.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>以下代码可以绘制将固定的名称作为行，所有列作为列，并且使用相关系数矩阵的一部分显示相关性。<br># 加载必要的库
library(PerformanceAnalytics)
library(Hmisc)
library(corrplot)
library(RColorBrewer)
library(grDevices)

# 读取数据
dd = read.csv("新建 Text Document.txt", sep = "\t", header=T, row.names=1)

# 提取PC1, PC2, Latitude, Longtitude列
fixed_cols = c("Afanasievo", "Mongolia_N_North", "Haojiatai_LBIA", "Lubrak","Taiwan_Hanben","Hmong")
fixed_data = dd[, fixed_cols]

# 计算相关系数矩阵
re = cor(dd, use="complete.obs")

# 计算p值矩阵
p = cor_pmat(dd, method="pearson")

# 提取固定行和所有列的相关系数矩阵
re_fixed = re[fixed_cols, ]
p_fixed = p[fixed_cols, ]

# 设置显著性符号
stars &lt;- ifelse(p_fixed &lt; 0.001, "***", ifelse(p_fixed &lt; 0.01, "**", ifelse(p_fixed &lt; 0.05, "*", "")))

# 绘制相关性矩阵，并且只绘制固定的行和所有列
corrplot(re_fixed, method="color",
         type="full", # 绘制整个矩阵
         order="original", # 保持原有顺序
         tl.col="black", # 标签颜色
         tl.cex=0.8, # 标签大小
         col=colorRampPalette(c("#20364F","#31646C","#4E9280","#96B89B",
                                "#DCDFD2","#ECD9CF","#D49C87","#B86265",
                                "#8B345E","#50184E"))(100),
         p.mat = p_fixed, # 提供 p 值矩阵
         insig = "label_sig", # 用显著性符号显示
         sig.level = c(0.001, 0.01, 0.05),
         pch = "*", # 使用 '*' 符号表示显著性
         pch.cex=0.5, # 显著性符号的大小
         pch.col = "#DCDFD2",
         #addCoef.col="black", # 添加相关系数值
         #number.cex = 0.7, # 相关系数数值大小
         #number.font = 2,   # 字体加粗
         cl.ratio = 1,
         cl.pos = "b") # 设置颜色条在右边

复制<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202409131752222.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\r语言语法\r：相关性热图绘制.html</link><guid isPermaLink="false">软件/R语言语法/R：相关性热图绘制.md</guid><pubDate>Fri, 13 Sep 2024 09:52:22 GMT</pubDate><enclosure url="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" length="0" type="image/svg+xml"/><content:encoded>&lt;figure&gt;&lt;img src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[散点图]]></title><description><![CDATA[ 
 <br>原文链接：<a data-tooltip-position="top" aria-label="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU0OTQ0MzU5Mw==&amp;action=getalbum&amp;album_id=3102753971792019458&amp;scene=173&amp;subscene=&amp;sessionid=svr_f8337a77aef&amp;enterid=1703506757&amp;from_msgid=2247483713&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" rel="noopener nofollow" class="external-link" href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU0OTQ0MzU5Mw==&amp;action=getalbum&amp;album_id=3102753971792019458&amp;scene=173&amp;subscene=&amp;sessionid=svr_f8337a77aef&amp;enterid=1703506757&amp;from_msgid=2247483713&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" target="_blank">R语言高级可视化100图 (qq.com)</a><br><br>散点图是最常用的图形。每当你想了解两个变量之间关系的本质时，首选总是散点图。在ggplot2中使用 geom_point() 可以绘制散点图。此外，geom_smooth 默认绘制平滑线（基于 loess），可以通过设置 method='lm' 调整为绘制最佳拟合线。<br>library('tidyverse')

pal = c('#025259', '#007172', '#f4e2de', '#f29325', '#d94f04')

ggplot(data = midwest %&gt;% filter(poptotal&lt;=200000),
       aes(x=area, y=poptotal)) +
  geom_point(aes(fill=state), shape=21, color="black") +
  geom_smooth(se=FALSE, color=pal[1]) +
  scale_fill_manual(values = pal) +
  scale_y_continuous(breaks = seq(50000, 200000, 50000)) +
  labs(title = 'ScatterPlot',
       subtitle = 'Area vs Poptotal',
       caption = 'source: midwest') +
  theme_minimal() +
  theme(plot.title =  element_text(color = "grey20", size = 20, face = 'bold', hjust = 0),
        plot.subtitle =  element_text(color = "grey20", size = 14, hjust = 0),
        plot.caption  =  element_text(color = "grey20", size = 12, face = 'italic', hjust = 1),
        plot.background = element_rect(fill = 'white', color='white'),
        axis.text = element_text(color = "grey20", size = 12),  
        axis.title = element_text(color = "grey20", size = 16, face = 'bold'))
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312252025172.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br><br>散点图可以让您比较两个连续变量之间的关系，而气泡图则可以很好地帮助您了解基本组内的关系：一个分类变量（通过改变颜色）和另一个连续变量（通过改变点的大小）。如果您有四维数据，其中两个是数值变量（X 和 Y），另一个是分类变量（颜色）和另一个数值变量（大小），那么气泡图就比较适合。<br>我们在之前的散点图中展现了美国不同县的面积（X轴）与总人口（Y轴）之间的关系，并且用县所属的州来映射颜色。我们在此基础之上，使用各个县中亚洲人的数量来映射点的大小，就可以得到气泡图了。<br>
library('tidyverse')

pal = c('#025259', '#007172', '#f4e2de', '#f29325', '#d94f04')

ggplot(data = midwest %&gt;% filter(poptotal&lt;=200000),
       aes(x=area, y=poptotal)) +
  geom_point(aes(fill=state, size=popasian), 
             shape=21, alpha=0.85) +
  scale_fill_manual(values = pal) +
  scale_y_continuous(breaks = seq(50000, 200000, 50000),
                     expand = c(0, 0),
                     limits = c(0, 210000)) +
  scale_size(range = c(1, 12)) +
  labs(title = 'Bubble Plot',
       subtitle = 'Area vs Poptotal',
       caption = 'source: midwest') +
  theme_minimal() +
  theme(plot.title =  element_text(color = "grey20", size = 20, face = 'bold', hjust = 0),
        plot.subtitle =  element_text(color = "grey20", size = 14, hjust = 0),
        plot.caption  =  element_text(color = "grey20", size = 12, face = 'italic', hjust = 1),
        plot.background = element_rect(fill = 'white', color='white'),
        axis.text = element_text(color = "grey20", size = 12),  
        axis.title = element_text(color = "grey20", size = 16, face = 'bold'))
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312252026916.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br><br>ggplot(data=midwest %&gt;% filter(poptotal&lt;=200000),
       aes(x=area, y=poptotal)) +
  geom_point(aes(fill=state, size=popasian),
             alpha=0.8,
             shape=21,
             color="black") +
  geom_polygon(data=midwest %&gt;%
                 filter(poptotal&lt;=200000 &amp; state=="OH") %&gt;%
                 slice(chull(.$area, .$poptotal)),
               color="grey30",
               fill="gold",
               alpha=0.1) +
  scale_size(range = c(1, 12)) +
  scale_fill_manual(values = pal) +
  labs(subtitle="Area Vs Population", 
       y="Population", 
       x="Area", 
       title="Scatterplot + Encircle", 
       caption="Source: midwest") +
  theme_minimal(base_size = 18) +
  theme(plot.title =  element_text(color = "grey20", size = 20, face = 'bold', hjust = 0),
        plot.subtitle =  element_text(color = "grey20", size = 14, hjust = 0),
        plot.caption  =  element_text(color = "grey20", size = 12, face = 'italic', hjust = 1),
        plot.background = element_rect(fill = 'white', color='white'),
        axis.text = element_text(color = "grey20", size = 12),  
        axis.title = element_text(color = "grey20", size = 16, face = 'bold'))
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312252027272.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br><br>
mpg %&gt;% 
  filter(cyl %in% c(4, 8)) %&gt;% 
  mutate(cyl = as.factor(cyl)) %&gt;% 
  ggplot(mapping = aes(x=displ, y=hwy, fill=cyl, color=cyl)) +
  geom_point(color='black', shape=21, size=3) +
  geom_smooth(method = 'lm',
              fullrange=TRUE,
              alpha=0.3) +
  scale_x_continuous(limits = c(0.5, 7.5), expand = c(0, 0)) +
  scale_y_continuous(limits = c(0, 50), expand = c(0, 0)) +
  scale_fill_manual(values = c('#025259', '#f29325'), guide = guide_legend(ncol=1))+
  scale_color_manual(values = c('#025259', '#f29325')) +
  labs(subtitle="Cyl Vs Displ", 
       y="Cyl", 
       x="Displ", 
       title="Scatterplot with Fitted Lines", 
       caption="Source: mpg") +
  theme_minimal(base_size = 18) +
  theme(plot.title =  element_text(color = "grey20", size = 20, face = 'bold', hjust = 0),
        plot.subtitle =  element_text(color = "grey20", size = 14, hjust = 0),
        plot.caption  =  element_text(color = "grey20", size = 12, face = 'italic', hjust = 1),
        plot.background = element_rect(fill = 'white', color='white'),
        axis.text = element_text(color = "grey20", size = 12),  
        axis.title = element_text(color = "grey20", size = 16, face = 'bold'))
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312252027053.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br><br>mpg %&gt;% 
  ggplot(aes(x=cyl, y=hwy, fill=as.factor(cyl))) +
  geom_point(shape=21,  size=3.5, color='black') +
  scale_fill_manual(name ='CYL', values = pal) +
  labs(title = 'Scatterplot with overlapping points',
       subtitle = 'mpg: cyl vs highway mileage',
       caption = 'source:mpg',
       x= 'Cyl',
       y= 'Hwy') +
  theme_minimal(base_size = 18) +
  theme(plot.title =  element_text(color = "grey20", size = 20, face = 'bold', hjust = 0),
        plot.subtitle =  element_text(color = "grey20", size = 14, hjust = 0),
        plot.caption  =  element_text(color = "grey20", size = 12, face = 'italic', hjust = 1),
        plot.background = element_rect(fill = 'white', color='white'),
        axis.text = element_text(color = "grey20", size = 12),  
        axis.title = element_text(color = "grey20", size = 16, face = 'bold'))
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312252028248.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
值得注意的是，数据存在重叠的问题， 很多散点被隐藏了。由于cty和hvy两个变量都是整数，所以数据重叠的现象更加严重。对于这类数据集的散点图，展示过程中应该格外小心。那么应该如何解决一个问题呢？我们可以使用jitter_geom()对数据增加抖动，通过设置wigth，使得重叠的点在原始位置随机抖动。<br>mpg %&gt;% 
  ggplot(aes(x=cyl, y=hwy)) +
  geom_jitter(aes(fill=as.factor(cyl)), shape=21, color='black', width = 0.35, size=3.5) +
  scale_fill_manual(name='CYL', values = pal) +
  labs(title = 'Jittered Plot Points',
       subtitle = 'map: city vs highway mileage',
       caption = 'source:mpg',
       x= 'City',
       y= 'Highway')  +
  theme_minimal(base_size = 18) +
  theme(plot.title =  element_text(color = "grey20", size = 20, face = 'bold', hjust = 0),
        plot.subtitle =  element_text(color = "grey20", size = 14, hjust = 0),
        plot.caption  =  element_text(color = "grey20", size = 12, face = 'italic', hjust = 1),
        plot.background = element_rect(fill = 'white', color='white'),
        axis.text = element_text(color = "grey20", size = 12),  
        axis.title = element_text(color = "grey20", size = 16, face = 'bold'))
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312252029038.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">]]></description><link>软件\r语言语法\r：相关性图.html</link><guid isPermaLink="false">软件/R语言语法/R：相关性图.md</guid><pubDate>Fri, 21 Jun 2024 07:31:49 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312252025172.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312252025172.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[介绍]]></title><description><![CDATA[ 
 <br><br>小提琴图结合了箱线图和密度图的特点，可以提供关于数据分布的丰富信息。<br>
<br>形状：小提琴图通常由一对镜像的「小提琴」形状组成，它们代表了数据的分布情况。
<br>宽度：小提琴的宽度表示在该位置上的数据密度，即数据点的数量。
<br>高度：小提琴图的高度没有特定意义，通常用于美观和区分。
<br>中间线：小提琴图中间的线通常表示中位数，有时也会表示均值。
<br>端点：小提琴的端点表示数据的最大值和最小值。<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312171414557.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">
<br><br>
<br>与箱线图的比较：小提琴图能够同时显示数据的分布形状和密度，而箱线图只能提供分位数信息。小提琴图可以发现数据的双峰分布，而箱线图无法捕捉这种情况。
<br>与直方图的比较：小提琴图在可视化数据分布的同时，避免了直方图的分箱误差。小提琴图可以清晰地展示数据的峰值和形状，而直方图可能会模糊这些信息。
<br>与散点图的比较：小提琴图适用于大量数据，可以更好地展示密度分布，而散点图可能会因为数据点的重叠而失去一部分信息。散点图通常用于显示个体数据点的分布，而小提琴图更适合于总体分布的描述。
<br>与密度图的比较：小提琴图可以同时显示多个分组的分布情况，而密度图通常适用于单一分布的情况。
<br>library(ggplot2)<br>
ggplot(warpbreaks, aes(x = tension, y = breaks)) +<br>
geom_violin()<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312171414558.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
ggplot(warpbreaks, aes(x = tension, y = breaks)) +<br>
geom_violin(trim = FALSE)<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312171414559.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
ggplot(warpbreaks, aes(x = tension, y = breaks)) +<br>
geom_violin(trim = FALSE)+<br>
geom_boxplot(width = 0.07)<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312171414560.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
ggplot(warpbreaks, aes(x = tension, y = breaks, fill = tension)) +<br>
geom_violin(trim = FALSE,bw = 5) +<br>
geom_boxplot(width = 0.07)<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312171414561.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
ggplot(warpbreaks, aes(x = tension, y = breaks, fill = wool)) +<br>
geom_violin(trim = FALSE) +<br>
geom_boxplot(width = 0.07, position = position_dodge(width = 0.9))<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312171414562.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
library(ggplot2)<br>
library(ggpubr)<br>
ggplot(warpbreaks, aes(x = tension, y = breaks, fill = wool)) +<br>
geom_violin(trim = FALSE) +<br>
geom_boxplot(width = 0.07, position = position_dodge(width = 0.9))+<br>
stat_compare_means(aes(label = ..p.signif..),method = "wilcox.test",hide.ns = F)<br>
<img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312171414563.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
ggplot(warpbreaks, aes(x = tension, y = breaks, fill = tension)) +<br>
geom_violin(trim = FALSE,bw = 5) +<br>
geom_boxplot(width = 0.07) +<br>
guides(fill = guide_legend(title = "Title"))+<br>
scale_fill_hue(labels = c("G1", "G2", "G3"))<br><img alt="" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312171414564.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;">]]></description><link>软件\r语言语法\r：小提琴图.html</link><guid isPermaLink="false">软件/R语言语法/R：小提琴图.md</guid><pubDate>Fri, 21 Jun 2024 07:31:49 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312171414557.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312171414557.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[实战]]></title><description><![CDATA[ 
 <br>tg<br>
<a data-href="种群配对Fst值（Population pairwise Fst values）" href="术语\种群配对fst值（population-pairwise-fst-values）.html" class="internal-link" target="_self" rel="noopener nofollow">种群配对Fst值（Population pairwise Fst values）</a>是一种衡量种群间遗传差异的指标。它基于遗传变异的分布，通过比较种群内和种群间的遗传差异来度量种群结构。Fst 值的范围从0到1，表示种群间遗传差异的程度。值接近0表示种群之间的遗传差异较小，可能存在较高的基因流和遗传交流。而值接近1表示种群之间的遗传差异较大，可能存在较低的基因流和遗传交流。<br><br><br>需要准备2个文件：<br>
<br>Fst计算结果矩阵。
<br>Group分组信息。
<br>格式如下所示：<br>
<br>
<br><br>
<br>
<br><br>我在下面贴了很多个代码，你只需要用到其中一个就行了。<br>
第一个我设置了输入输出文件路径，其余的请自己设置。<br># 在开始之前请确保你已经安装了下列package
# 载入需要的package
library(ape)
library(igraph)
library(ggplot2)
library(pheatmap)
library(reshape2)
library(ggsci)
library(gridExtra)

# 设置工作路径，你需要把Fst文件和分组文件放到工作路径
setwd("C:/Users/a/Desktop")

# 清除内存
rm(list=ls())

# 读取数据
mydata&lt;-read.table("fst.csv",header=TRUE,sep=",", row.names = 1)
group &lt;-read.table("group.csv",header=TRUE,sep=",", row.names = 1)

# 创建绘图PDF
pdf("FstMatrix1.pdf", width=11, height=8.5)

# 绘制图像
pheatmap(mydata, 
         cluster_cols=TRUE, 
         cluster_rows=TRUE, 
         angle_col = c("45"),
         fontsize = 8,
         fontsize_row =8,
         fontsize_col =6,
         annotation_col = group, 
         annotation_row = group,
         cellwidth =8, 
         cellheight = 8, 
         cutree_cols=4, # 这个数字决定最终的矩形被分成几个部分
         cutree_rows=4, # 这个数字决定最终的矩形被分成几个部分
         main = "FstMatrix",
         color = colorRampPalette(c("#00A087FF","#3C5488FF","#F39B7FFF"))(10000),
         display_numbers = matrix(ifelse(abs(mydata)&gt; 50, "++", ifelse(abs(mydata)&gt;=40,"+"," ")), nrow(mydata)))
# 结束绘图
dev.off()

# 换个样式
pheatmap(mydata, 
         cluster_cols=TRUE, 
         cluster_rows=TRUE, 
         angle_col = c("45"),
         fontsize = 8,
         fontsize_row =8,
         fontsize_col =6,
         annotation_col = group, 
         annotation_row = group,
         cellwidth =8, 
         cellheight = 8, 
         cutree_cols=4,
         cutree_rows=4, 
         main = "FstMatrix",
         color = colorRampPalette(c("#F8F8FF","#91D1C2FF","#3C5488FF"))(10000),
         display_numbers = matrix(ifelse(abs(mydata)&gt; 50, "++", ifelse(abs(mydata)&gt;=40,"+"," ")), nrow(mydata)))

# 换个样式
pheatmap(mydata,
         cluster_cols=TRUE,
         cluster_rows=TRUE,
         angle_col = c("45"),
         fontsize = 8,
         fontsize_row =8,
         fontsize_col =6,
         annotation_col = group,
         annotation_row = group,
         cellwidth =8,
         cellheight = 8,
         cutree_cols=4,
         cutree_rows=4,
         main = "FstMatrix",
         color = colorRampPalette(c("#20364F","#31646C","#4E9280","#96B89B","#DCDFD2","#ECD9CF","#D49C87","#B86265","#8B345E","#50184E"))(10000),
         display_numbers = matrix(ifelse(abs(mydata)&gt; 50, "++", ifelse(abs(mydata)&gt;=40,"+"," ")), nrow(mydata)))

# 换个样式
pheatmap(mydata,
         cluster_cols=TRUE,
         cluster_rows=TRUE,
         angle_col = c("45"),
         fontsize = 8,
         fontsize_row =8,
         fontsize_col =6,
         annotation_col = group,
         annotation_row = group,
         cellwidth =8,
         cellheight = 8,
         cutree_cols=4,
         cutree_rows=4,
         main = "FstMatrix",
         color = colorRampPalette(c("#023047","#126883","#279EBC","#90C9E6","#FC9E7F","#F75B41","#D52120"))(10000),
         display_numbers = matrix(ifelse(abs(mydata)&gt; 50, "++", ifelse(abs(mydata)&gt;=40,"+"," ")), nrow(mydata)))


复制]]></description><link>软件\r语言语法\r：fst绘制频率热图矩阵.html</link><guid isPermaLink="false">软件/R语言语法/R：Fst绘制频率热图矩阵.md</guid><pubDate>Sun, 06 Oct 2024 03:31:34 GMT</pubDate></item><item><title><![CDATA[基础箱线图的绘制]]></title><description><![CDATA[ 
 <br><br>箱型图（Box Plot），也称为盒须图，是一种用于显示一组数据分布情况的图表。它主要展示数据的中位数、四分位数、极值等统计量。以下是解读箱型图的主要步骤：<br>
<br>
中位数（Median）：箱型图中间的线表示数据的中位数，即将数据集分成两半的数值。

<br>
四分位数（Quartiles）：

<br>第一四分位数（Q1）：箱子的底部线，表示所有数据中排在25%位置的数值。
<br>第三四分位数（Q3）：箱子的顶部线，表示所有数据中排在75%位置的数值。
<br>这个箱子（即Q1到Q3的范围）包含了中间50%的数据。


<br>
四分位距（Interquartile Range, IQR）：Q3与Q1的差值，表示数据的“散布”程度。

<br>
异常值（Outliers）：箱型图中可能会有一些单独的点，这些通常表示异常值。它们是距离箱子较远的数据点，表明这些值异常高或低。

<br>
“胡须”（Whiskers）：

<br>这些是从箱子外伸出的线，通常表示数据的范围。
<br>胡须的长度通常是1.5倍IQR（四分位距），超出这个范围的点被视为异常值。


<br>
最大值和最小值：

<br>最大值通常是胡须的上端（不包括异常值）。
<br>最小值通常是胡须的下端（不包括异常值）。


<br>
数据（随机编写，无实际意义）

<br># 数据(随机编写，无实际意义)  
df&lt;-data.frame(   sample=paste0("S",1:20),   
group1=rep(c("A","B","C","D"),each=5),   
group2=rep(c("group1","group2"),times=2),   
group3=rep(c("CG","EG"),each=10),   
value=sample(20:100,20,replace=FALSE)   )   
df$sample&lt;-factor(df$sample,levels=df$sample)
复制<br>或者也可以用Excel 导入数据。实例数据：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072231258.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>基础箱线图的绘制：ggplot2中用于绘制箱线图的函数为geom_boxplot()
<br>library(ggplot2)
ggplot(df,aes(group1,value))+
geom_boxplot()
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072241074.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>颜色修改：包括填充色、边框颜色等
<br>ggplot(df, aes(group1,value))+
geom_boxplot(fill="orange")
#填充不同颜色
ggplot(df,aes(group1,value))+
geom_boxplot(aes(fill=group1))
#修改边框颜色为统一颜色
ggplot(df,aes(group1,value))+
geom_boxplot(color="orange",linewidth=0.8,fill=NA)
#修改边框颜色为不同颜色
ggplot(df,aes(group1,value))+
geom_boxplot(aes(color=group1),linewidth=0.8,fill=NA)
#同时修改填充色与边框色
ggplot(df,aes(group1,value))+
geom_boxplot(aes(fill=group1),color="blue",linewidth=0.8)
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072242479.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072242561.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072242899.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072242192.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072242832.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>异常值处理
<br>#细节设置
ggplot(df,aes(group1,value))+
geom_boxplot(aes(fill=group1),
outlier.color="blue",#异常点边框颜色
outlier.fill="red",#异常点填充颜色
outlier.shape=21,#异常形状
outlier.size=2.5,##异常点大小
outlier.stroke=0.5,##异常点边框线条粗细
outlier.alpha=0.7)#异常点透明度
#去除
ggplot(df,aes(group1,value))+
geom_boxplot(aes(fill=group1),
outlier.color=NA)#异常点去除
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072242678.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072242811.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>箱线图添加散点（下列两种方式都可以实现）：
<br>#geom_point()
ggplot(df,aes(group1,value))+
geom_boxplot(aes(fill=group1))+
geom_point(color="black",size=2.5,position="jitter")
复制<br>#geom_jitter()
ggplot(df,aes(group1,value))+
geom_boxplot(aes(fill=group1))+
geom_jitter(color="black",size=2.5,width=0.2,alpha=0.9)
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072242341.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>添加最大最小值线横线：
<br>ggplot(df,aes(group1,value))+
stat_boxplot(geom="errorbar",width=0.1,size=0.8)+
geom_boxplot(aes(fill=group1),outlier.color=NA)
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072242353.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>添加均值点:
<br>ggplot(df,aes(group1,value))+
stat_boxplot(geom="errorbar",width=0.1,size=0.8)+
geom_boxplot(fill="white",outlier.color=NA)+
stat_summary(fun=mean,geom="point",size=3,color="blue")
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072242370.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>修改误差棒线条类型:
<br>ggplot(df,aes(group1,value))+
stat_boxplot(aes(color=group1),geom="errorbar",width=0.1,size=0.8,linetype=2)+
geom_boxplot(aes(fill=group1),outlier.color=NA,color=NA)+
stat_summary(fun=median,geom="point",size=3,shape=21,color="black",fill="white")
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072242902.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>有缺口箱线图：
<br>ggplot(df,aes(group3,value))+   stat_boxplot(geom="errorbar",width=0.1,size=0.8)+   geom_boxplot(aes(fill=group3),outlier.color=NA,   notch=T) 
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072243831.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>分组箱线图：
<br>ggplot(df,aes(group1,value))+   geom_boxplot(aes(fill=group3))+   scale_fill_manual(values=c("#037ef3","#f85a40"))  
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072243704.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>水平箱线图：
<br>ggplot(df,aes(group1,value))+   geom_boxplot(aes(fill=group1))+   scale_fill_manual(values=c("#037ef3","#f85a40","#00c16e","#7552cc"))+#自定义颜色   coord_flip() 
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072243347.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>并列箱线图：
<br>ggplot(df,aes(group3,value))+   geom_boxplot(aes(fill=group2),position=position_dodge(width=0.9))+   scale_fill_manual(values=c("#037ef3","#f85a40"))#自定义颜色
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072243075.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>分面箱线图：
<br>ggplot(df,aes(group1,value))+   geom_boxplot(aes(fill=group1))+   scale_fill_manual(values=c("#037ef3","#f85a40","#00c16e","#7552cc"))+#自定义颜色   facet_grid(~group2)
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072243112.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>分组分面箱线图：
<br>ggplot(df,aes(group1,value))+   geom_boxplot(aes(fill=group3))+   scale_fill_manual(values=c("#037ef3","#f85a40","#00c16e","#7552cc"))+#自定义颜色   facet_grid(~group2) 
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072243061.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>显著性比较：
<br>library(ggsignif)#SignificanceBracketsfor'ggplot2'   ggplot(df,aes(group1,value))+   geom_boxplot(aes(fill=group1))+   geom_signif(comparisons=list(c("A","C"),   c("C","D")),   map_signif_level=F,##是否使用*显示显著性   tip_length=c(0,0,0,0),   y_position=c(100,110),   size=0.8,textsize=6,   test="t.test")+   scale_y_continuous(limits=c(20,130))   
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072243661.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>字母标记：  
<br>library(dplyr)
# AGrammarofDataManipulation
library(agricolae)
# 实现多重比较的R包
# 数据的方差检验
variance&lt;-aov(value~group1,data=df)
MC&lt;-LSD.test(variance,"group1",p.adj="none")
GB&lt;-group_by(df,group1)
error&lt;-summarise(GB,sd(value,na.rm=T))
# 整理数据
error2&lt;-merge(error,MC$group,by.x="group1",by.y="row.names",all=F)
# 绘图
ggplot(df,aes(group1,value))+
geom_boxplot(aes(fill=group1))+
geom_text(data=error2,aes(group1,value+30,label=groups,color=group1),size=5)
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072243355.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>半箱线图：  
<br>library(gghalves)   ggplot(df,aes(group1,value))+   geom_half_boxplot(aes(fill=group1),outlier.color=NA,side="r")   
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072243518.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>半箱线图与散点图组合：
<br>library(gghalves)   ggplot(df,aes(group1,value))+   geom_half_boxplot(aes(fill=group1),outlier.color=NA,side="r")+   geom_half_point(aes(color=group1),side='l',size=2.5)  
复制<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072243276.png" referrerpolicy="no-referrer" style="width: 550px; max-width: 100%;"><br>
<br>箱线图与半小提琴和散点组合图：
<br>ggplot(df,aes(group3,value))+   geom_half_violin(aes(fill=group3),position=position_nudge(x=0.26),side="r",width=0.5,color=NA)+   geom_boxplot(aes(fill=group3),width=0.1,size=1.2,outlier.color=NA,position=position_nudge(x=0.2))+   geom_jitter(aes(fill=group3),shape=21,size=3,width=0.12,alpha=0.5)
复制<br><img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072243278.png" referrerpolicy="no-referrer">]]></description><link>软件\r语言语法\r：ggplot2个性化绘制散点图.html</link><guid isPermaLink="false">软件/R语言语法/R：ggplot2个性化绘制散点图.md</guid><pubDate>Fri, 21 Jun 2024 07:31:49 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072231258.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202312072231258.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[介绍]]></title><description><![CDATA[ 
 <br><br>ggplot2的几个要素：<br>
Plot(图)= data(数据集)+ Aesthetics(美学映射)+ Geometry(几何对象)
<br>
<br>data: 数据集，主要是data frame
<br>Aesthetics: 美学映射，比如将变量映射给x,y坐标轴，或者映射给颜色、大小、形状等图形属性
<br>Geometry: 几何对象，比如条形图、直方图、散点图、箱线图、小提琴图等
<br>其它参数：<br>
<br>标尺(scale)：在对图形属性进行映射之后，使用标尺可以控制这些属性的显示方式，比如坐标刻度、颜色属性等
<br>坐标系统 (coordinate)：数据如何被映射到图中，提供作图所需的坐标轴和网格线，如coord_polar:极坐标、coord_map:地理投影、coord_flip:坐标翻转
<br>统计变换(statistic)：对数据进行汇总，如箱线图：stat_boxplot、线图：stat_abline、直方图：stat_bin
<br>刻面(facet)：用来描述数据如何被拆分为子集，以及对不同子集是如何绘制的
<br>图层(layer)：直接使用+号即可实现叠加图层
<br>主题(theme)：设置与数据无关的图形参数实现对图形的精细控制，比如设置字体、颜色、背景色、网格线等
<br>用“+”连接不同的图层：<br>
<br>ggplot():初始化图形并且指定数据来源(mtcars)和绘图用的变量(wt和mpg)
<br>geom_point():几何函数，绘制散点图
<br>labs():添加注释，包括轴标签和标题
<br>theme(): 主题设置，与数据无关的美化图形的设计，都可以用主题来设置。
<br>举例说明：<br>library(ggplot2)
ggplot(data=mtcars,aes(x=wt,y=mpg)) +
   geom_point(pch=17,color="blue",size=2) +
   geom_smooth(method="lm",color="red",linetype=2) +
   labs(title="Automobile Data", x="Weight", y="Miles Per Gallon") +
   theme(plot.title = element_text(hjust = 0.5))
复制<br>geom_point():几何函数，绘制散点图。pch=17设置点的性状为三角形，color=“blue”设置颜色为蓝色,size=2设置点的大小加倍<br>
geom_smooth():添加一条“平滑”曲线。采用线性拟合(method=“lm”)，拟合曲线为红色(color=“red”)的虚线(linetype=2) 。默认绘制95%的<a data-href="置信区间" href="术语\置信区间.html" class="internal-link" target="_self" rel="noopener nofollow">置信区间</a>(深灰色暗带) 。<br><br><br><br><br>图形的呈现多种多样，可以自己多加尝试。]]></description><link>软件\r语言语法\r：ggplot2简介.html</link><guid isPermaLink="false">软件/R语言语法/R：ggplot2简介.md</guid><pubDate>Fri, 21 Jun 2024 07:31:49 GMT</pubDate></item><item><title><![CDATA[R：GWalkR——一行代码将数据集转化为交互式可视化分析工具]]></title><description><![CDATA[ 
 <br>一行代码，开启您在R中的数据探索之旅！<br><a data-tooltip-position="top" aria-label="https://github.com/Kanaries/GWalkR" rel="noopener nofollow" class="external-link" href="https://github.com/Kanaries/GWalkR" target="_blank">GWalkR</a>&nbsp;是 R 中的交互式探索性数据分析（EDA）工具。它整合了 htmlwidgets 和&nbsp;<a data-tooltip-position="top" aria-label="https://github.com/Kanaries/graphic-walker" rel="noopener nofollow" class="external-link" href="https://github.com/Kanaries/graphic-walker" target="_blank">Graphic Walker</a>。通过将您的数据框转换为 Tableau 风格的用户界面进行可视化探索，它可以简化您的 R 数据分析和数据可视化工作流程。<br><br><br>install.packages("GWalkR")
复制<br><br>如果您已在R中安装了devtools，您可以在脚本中运行以下R代码来下载。<br>devtools::install_url("https://kanaries-app.s3.ap-northeast-1.amazonaws.com/oss/gwalkr/GWalkR_latest.tar.gz")
复制<br><br>或者，从<a data-tooltip-position="top" aria-label="https://kanaries-app.s3.ap-northeast-1.amazonaws.com/oss/gwalkr/GWalkR_latest.tar.gz" rel="noopener nofollow" class="external-link" href="https://kanaries-app.s3.ap-northeast-1.amazonaws.com/oss/gwalkr/GWalkR_latest.tar.gz" target="_blank">这个链接</a>中下载包 GWalkR_latest.tar.gz。 打开 R Studio，点击 "Packages" 窗口中的 "Install"，然后在 "Install from" 中选择 "Package Archive File (.tgz; .tar.gz)"。然后，选择您的文件系统中的下载好的包，最后点击"Install"。<br><br>library(GWalkR)
data(iris)
gwalkr(iris)
复制<br><img alt="image" src="https://private-user-images.githubusercontent.com/33870780/252876378-718d8ff6-4ad5-492d-9afb-c4ed67573f51.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTA5OTExNTgsIm5iZiI6MTcxMDk5MDg1OCwicGF0aCI6Ii8zMzg3MDc4MC8yNTI4NzYzNzgtNzE4ZDhmZjYtNGFkNS00OTJkLTlhZmItYzRlZDY3NTczZjUxLmdpZj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjElMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzIxVDAzMTQxOFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTEzZTMzOWQ1OGU4MWJjNWVmNTI3NDZjOGVhMTBkYmY1ODBjNjI3ZjkzMTQ5Y2YyY2E3YTUwNGRmMjE5ZmY0NmYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.2rYnZN1-MUNSEmPGfvHaxuKN_usywBti1FWfabZf0ws" referrerpolicy="no-referrer">]]></description><link>软件\r语言语法\r：gwalkr——一行代码将数据集转化为交互式可视化分析工具.html</link><guid isPermaLink="false">软件/R语言语法/R：GWalkR——一行代码将数据集转化为交互式可视化分析工具.md</guid><pubDate>Fri, 21 Jun 2024 07:31:50 GMT</pubDate><enclosure url="https://private-user-images.githubusercontent.com/33870780/252876378-718d8ff6-4ad5-492d-9afb-c4ed67573f51.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTA5OTExNTgsIm5iZiI6MTcxMDk5MDg1OCwicGF0aCI6Ii8zMzg3MDc4MC8yNTI4NzYzNzgtNzE4ZDhmZjYtNGFkNS00OTJkLTlhZmItYzRlZDY3NTczZjUxLmdpZj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjElMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzIxVDAzMTQxOFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTEzZTMzOWQ1OGU4MWJjNWVmNTI3NDZjOGVhMTBkYmY1ODBjNjI3ZjkzMTQ5Y2YyY2E3YTUwNGRmMjE5ZmY0NmYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.2rYnZN1-MUNSEmPGfvHaxuKN_usywBti1FWfabZf0ws" length="0" type="false"/><content:encoded>&lt;figure&gt;&lt;img src="https://private-user-images.githubusercontent.com/33870780/252876378-718d8ff6-4ad5-492d-9afb-c4ed67573f51.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTA5OTExNTgsIm5iZiI6MTcxMDk5MDg1OCwicGF0aCI6Ii8zMzg3MDc4MC8yNTI4NzYzNzgtNzE4ZDhmZjYtNGFkNS00OTJkLTlhZmItYzRlZDY3NTczZjUxLmdpZj9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMjElMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzIxVDAzMTQxOFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTEzZTMzOWQ1OGU4MWJjNWVmNTI3NDZjOGVhMTBkYmY1ODBjNjI3ZjkzMTQ5Y2YyY2E3YTUwNGRmMjE5ZmY0NmYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.2rYnZN1-MUNSEmPGfvHaxuKN_usywBti1FWfabZf0ws"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[数据准备]]></title><description><![CDATA[ 
 <br><br>
<br>单倍群在特定的地区的频率。
<br>,F,F3,F3a,F3a1,F3a1a,F3a1a1,F3a1a1a,F3a1a1b,F3a1a1b1,F3a1a1b1a,F3a1a1b2,F3a1a1b3,F3a1a2,F3a1a2a,F3a1a2b,F3a1a2b1,F3a1a2b1b,F3a1a2b1c,F3a2,F3a2a,F3a2a1,F3a2a3,F3c,F3c1,F3c2,F3c2a
Anhui,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Beijing,0.00030172,0.00030172,0.000201147,0.000201147,0.000100573,0,0,0,0,0,0,0,0.000100573,0,0.000100573,0,0,0,0,0,0,0,0,0,0,0
Chongqing,0.001104728,0.001104728,0.001104728,0.001104728,0.000220946,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Fujian,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Gansu,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Guangdong,0.001227137,0.001227137,5.84E-05,5.84E-05,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.001110267,0.00011687,5.84E-05,5.84E-05
Guangxi,0.001223242,0.001223242,0.00030581,0.00030581,0.00030581,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000917431,0,0,0
Guizhou,0.004180214,0.004180214,0.004180214,0.004180214,0.003715745,0.001857873,0,0.001857873,0,0,0.000464468,0.001393405,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Hainan,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Hebei,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Heilongjiang,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Henan,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Hubei,0.000346661,0.000346661,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000346661,0,0,0
Hunan,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Inner_Mongolia,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Jiangsu,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Jiangxi,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Jilin,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Liaoning,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Ningxia,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Qinghai,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Shaanxi,0.000163425,0.000163425,0.000163425,0.000163425,0.000163425,0,0,0,0,0,0,0,0.000163425,0.000163425,0,0,0,0,0,0,0,0,0,0,0,0
Shandong,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Shanghai,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Shanxi,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Sichuan,0.000605373,0.000605373,0.000605373,0.000529701,0.00045403,0,0,0,0,0,0,0,0,0,0,0,0,0,7.57E-05,7.57E-05,0,7.57E-05,0,0,0,0
Taiwan,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Tianjin,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Tibet,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Xinjiang,0.001020408,0.001020408,0.001020408,0.001020408,0.001020408,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
Yunnan,0.029693783,0.029693783,0.029693783,0.028765852,0.024435509,0.002165172,0.00030931,0.001855861,0.00030931,0.00030931,0.001546551,0,0.002165172,0,0.002165172,0.001237241,0.00030931,0.00061862,0.00061862,0.00030931,0.00030931,0,0,0,0,0
Zhejiang,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

复制<br>
<br>不同地区的经纬度以及这些地区的不同的遗传组成成分的比例。
<br>,Longitude,Latitude,Lubrak,Shenxian,DevilsCave_N,Japan_Jomon,Russia_Afanasievo,Russia_Shamanka_EBA,Hmong,Mongolia_N_North,Erdaojingzi_LN,Taiwan_Hanben
Anhui,117.28,31.86,0.02,0.215,0.027,0.003,0.003,0.005,0.018,0.009,0.672,0.029
Beijing,116.41,39.92,0.03,0.21,0.035,0.004,0.007,0.006,0.022,0.01,0.655,0.022
Chongqing,106.45,29.57,0.021,0.283,0.012,0.003,0.002,0.002,0.04,0.004,0.593,0.039
Fujian,118.34,26.09,0.043,0.299,0.006,0.005,0,0.002,0.034,0.007,0.561,0.044
Gansu,103.73,36.07,0.065,0.164,0.047,0.003,0.021,0.009,0.012,0.016,0.648,0.014
Guangdong,113.25,23.19,0.001,0.427,0.008,0.003,0,0.001,0.037,0,0.451,0.072
Guangxi,108.34,22.83,0.007,0.563,0.004,0.002,0,0.001,0.065,0.003,0.298,0.057
Guizhou,106.76,26.57,0.031,0.304,0.006,0.004,0.001,0.003,0.1,0.007,0.515,0.028
Hainan,110.23,20.06,0.01,0.398,0.01,0.004,0.002,0.002,0.034,0.003,0.471,0.066
Hebei,115.48,38.03,0.034,0.146,0.053,0.004,0.013,0.009,0.011,0.011,0.705,0.014
Heilongjiang,127.63,47.75,0.024,0.159,0.051,0.006,0.006,0.007,0.013,0.013,0.707,0.013
Henan,113.65,34.78,0.027,0.181,0.032,0.002,0.01,0.002,0.019,0.011,0.689,0.027
Hubei,114.32,30.57,0.013,0.265,0.017,0.003,0.001,0.004,0.023,0.005,0.631,0.038
Hunan,113.12,28.26,0.014,0.334,0.01,0.003,0,0.002,0.065,0.004,0.526,0.042
Inner_Mongolia,111.67,41.81,0.03,0.102,0.233,0.006,0.026,0.026,0.008,0.025,0.534,0.01
Jiangsu,119.78,32.05,0.013,0.228,0.021,0.003,0.001,0.002,0.014,0.004,0.678,0.035
Jiangxi,115.94,28.67,0.004,0.287,0.014,0.003,0,0.003,0.025,0.004,0.61,0.048
Jilin,125.35,43.88,0.031,0.156,0.055,0.005,0.005,0.008,0.011,0.015,0.696,0.02
Liaoning,123.38,41.8,0.033,0.164,0.054,0.005,0.007,0.005,0.014,0.01,0.689,0.018
Ningxia,106.23,38.52,0.057,0.163,0.051,0.004,0.037,0.011,0.012,0.014,0.637,0.016
Qinghai,101.78646,36.62716,0.156,0.115,0.058,0.004,0.046,0.013,0.016,0.022,0.56,0.01
Shaanxi,108.96,34.26,0.039,0.169,0.048,0.002,0.016,0.007,0.012,0.014,0.674,0.018
Shandong,117,36.67,0.029,0.153,0.046,0.005,0.003,0.005,0.011,0.01,0.721,0.018
Shanghai,121.55,31.23,0.011,0.24,0.014,0.003,0.001,0.003,0.016,0.005,0.67,0.038
Shanxi,112.53,37.86,0.035,0.158,0.045,0.002,0.013,0.01,0.012,0.009,0.699,0.018
Sichuan,104.12,30.67,0.221,0.154,0.01,0.003,0.001,0.007,0.034,0.026,0.531,0.015
Taiwan,121.57463,25.04094,0.003,0.276,0.008,0.002,0.001,0.001,0.011,0.001,0.307,0.39
Tianjin,117.2,39.13,0.027,0.158,0.051,0.004,0.009,0.006,0.016,0.013,0.703,0.013
Tibet,79.54848,42.71073,0.442,0.029,0.016,0.004,0.01,0.011,0.009,0.032,0.442,0.005
Xinjiang,87.63,43.85,0.043,0.166,0.079,0.006,0.083,0.015,0.019,0.015,0.558,0.017
Yunnan,102.73,25.05,0.095,0.244,0.02,0.004,0.004,0.005,0.032,0.016,0.558,0.022
Zhejiang,120.2,30.28,0,0.245,0.021,0.003,0.001,0,0.018,0,0.678,0.035

复制<br><br># 清空工作空间
rm(list = ls())

# 加载所需的库
library(httpgd)
library(linkET)
library(ggplot2)
library(dplyr)
library(cols4all)

# 读取数据
auto_data &lt;- read.csv("C:/Users/victo/Desktop/auto.csv", row.names = 1, header = TRUE, sep = ",", check.names = FALSE)
haplo_data &lt;- read.csv("C:/Users/victo/Desktop/haplo.csv", row.names = 1, header = TRUE, sep = ",", check.names = FALSE)

# 计算auto数据的相关性矩阵
cor_auto &lt;- correlate(haplo_data, method = "pearson")
corr_auto &lt;- as_md_tbl(cor_auto)
write.csv(corr_auto, file = "C:/Users/victo/Desktop/pearson_correlate(env&amp;env).csv", row.names = TRUE)

# 计算auto数据和haplo数据之间的相关性矩阵
cor_auto_haplo &lt;- correlate(auto_data, haplo_data, method = "pearson")
corr_auto_haplo &lt;- as_md_tbl(cor_auto_haplo)
write.csv(corr_auto_haplo, file = "C:/Users/victo/Desktop/pearson_result(bio&amp;env).csv", row.names = TRUE)

# 数据准备
r_p_data_plot &lt;- corr_auto_haplo %&gt;% 
  mutate(
    r_sign = cut(r, breaks = c(-Inf, 0, Inf), labels = c("Negative", "Positive")),  # 根据相关系数的正负分组
    p_sign = cut(p, breaks = c(0, 0.05, Inf), labels = c("P&lt;0.05", "P&gt;=0.05"), include.lowest = TRUE, right = FALSE),  # 根据p值分组
    r_abs = cut(abs(r), breaks = c(0, 0.25, 0.5, 1), labels = c("&lt;0.25", "0.25-0.5", "0.5-1"), include.lowest = TRUE, right = FALSE)  # 根据相关系数的绝对值分组
  )

# 绘制上半部分为圆形相关性图
p4 &lt;- qcorrplot(cor_auto,
                grid_col = "#fbfbfb",  # 网格颜色
                grid_size = 0.1,  # 网格大小
                type = "upper",  # 显示矩阵的上半部分
                diag = FALSE) +  # 不显示对角线
  geom_shaping(marker = marker("circle"), color = "#fbfbfb", size = 0.05) +  # 设置圆形轮廓颜色和大小
  scale_fill_gradientn(colours = c("#00668c", "#71c4ef",
                                   "#96B89B",
                                   "#B86265", "#8B345E"), limits = c(-1, 1))  # 设置颜色梯度

# 添加显著性连线
p5 &lt;- p4 +
  geom_mark(size = 3,  # 标记大小
            only_mark = TRUE,  # 仅显示标记
            sig_level = c(0.10,0.05,0.01),  # 显著性水平
            sig_thres = 0.05,  # 显著性阈值
            colour = '#fbfbfb')  # 连线颜色

# 添加连线和标签
p6 &lt;- p5 +
  geom_couple(data = r_p_data_plot,
              aes(colour = r_sign,  # 根据相关性符号设置颜色
                  size = r_abs,  # 根据相关性绝对值设置大小
                  linetype = p_sign),  # 根据p值设置线型
              nudge_x = 0.15,  # 调整标签位置
              curvature = 0.1,  # 设置曲率
              label.fontface = 1,  # 标签字体样式
              label.family = "arial",  # 标签字体
              label.size = 2.5)  # 标签大小

# 最终美化
p7 &lt;- p6 +
  scale_size_manual(values = c("&lt;0.25" = 0.05, "0.25-0.5" = 0.15, "0.5-1" = 0.5)) +  # 手动设置大小比例
  scale_colour_manual(values = c("Negative" = "#4E9280", "Positive" = "#B86265")) +  # 手动设置颜色
  scale_linetype_manual(values = c("P&lt;0.05" = "solid", "P&gt;=0.05" = "dotted")) +   # 手动设置线型
  guides(
    fill = guide_colorbar(title = "Pearson's r", barwidth = 0.8, barheight = 5, order = 1),  # 设置颜色条指南
    linetype = guide_legend(title = NULL, override.aes = list(size = 4, linewidth = 0.5, order = 3)),  # 设置线型指南
    colour = guide_legend(title = NULL, override.aes = list(size = 4, linewidth = 0.5, order = 4)),  # 设置颜色指南
    size = guide_legend(title = "|Pearson's r|", override.aes = list(colour = "black", size = 4), order = 2)  # 设置大小指南
  ) +
  theme(
    axis.text = element_text(color = "black", size = 4, family = "arial", face = "plain"),  # 设置坐标轴文本
    axis.text.x.top = element_text(color = "black", size = 4, family = "arial", face = "plain", angle = 45, hjust = 0, vjust = 0),  # 设置上方坐标轴文本
    legend.key = element_blank(),  # 移除图例键
    legend.key.size = unit(0.1, "cm"),  # 设置图例键大小
    legend.spacing.y = unit(0.2, "cm"),  # 设置图例间距
    legend.key.spacing.y = unit(0.2, "cm"),  # 设置图例键间距
    legend.text = element_text(color = "black", size = 4, family = "arial", face = "plain"),  # 设置图例文本
    legend.title = element_text(color = "black", size = 4, family = "arial", face = "plain", margin = margin(b = 12))  # 设置图例标题
  )

print(p7)

复制]]></description><link>软件\r语言语法\r：linket相关性分析.html</link><guid isPermaLink="false">软件/R语言语法/R：linkET相关性分析.md</guid><pubDate>Fri, 21 Jun 2024 07:31:07 GMT</pubDate></item><item><title><![CDATA[什么是 treestats 包？]]></title><description><![CDATA[ 
 <br><br>这是一个可以用于评价系统发育树的 各项统计指标 的 R 包，包括树的稳健性、分支长度等。<br><br>需要输入一个树文件，推荐使用 nwk 格式。<br>
这里我给一个示例数据： <a data-tooltip-position="top" aria-label="https://1drv.ms/t/s!AnGqDjyiZ5t_hfwXJk7juw80aD-f7A?e=luRurh" rel="noopener nofollow" class="external-link" href="https://1drv.ms/t/s!AnGqDjyiZ5t_hfwXJk7juw80aD-f7A?e=luRurh" target="_blank">生命之树.txt</a><br><br># 安装并加载必要的包（如果没有安装）
if (!require("treestats")) install.packages("treestats")
if (!require("RSpectra")) install.packages("RSpectra")
if (!require("ape")) install.packages("ape")
if (!require("treestats")) install.packages("treestats")
# 加载包
library(treestats)
library(ape)
library(RSpectra)
library(treestats)
# 读取树文件
phylo_tree &lt;- read.tree("生命之树.txt")

# 打印树的概述
print(phylo_tree)

# 计算所有统计量并打印结果
results &lt;- calc_all_stats(phylo_tree)
print(results)


# 假设你只对某些物种或支系感兴趣，可以列出不需要的叶节点
tips_to_remove &lt;- c("Tip1", "Tip2", "Tip3")  # 替换为你想删除的叶节点名称
# 使用 drop.tip 函数来剪枝
sub_tree &lt;- drop.tip(phylo_tree, tips_to_remove)
# 打印子树概述
print(sub_tree)
# 计算子树的统计量
sub_tree_results &lt;- calc_all_stats(sub_tree)
print(sub_tree_results)


# 假设你知道感兴趣支系的共同祖先节点ID
ancestor_node &lt;- 50  # 这是假设的节点编号，替换为你感兴趣的支系节点ID
# 使用 extract.clade 提取从该节点开始的子树
sub_tree &lt;- extract.clade(phylo_tree, ancestor_node)
# 打印子树概述
print(sub_tree)
# 计算子树的统计量
sub_tree_results &lt;- calc_all_stats(sub_tree)
print(sub_tree_results)

复制<br><br>我们发现终端出现了这些：<br>&gt; print(results)
         area_per_pair     average_leaf_depth             avg_ladder
          1.669176e+01           1.030366e+01           2.315789e+00
        avg_vert_depth                     b1                     b2
          9.333333e+00           9.792910e+01           5.825504e+00
                  beta                   blum               cherries
         -5.383826e-01           2.351575e+02           6.000000e+01
               colless           colless_corr           colless_quad
          1.018000e+03           5.669730e-02           3.672600e+04
             crown_age               diameter        double_cherries
          2.656710e+00           3.400000e+01           4.000000e+00
      eigen_centrality      eigen_centralityW             ew_colless
          2.748954e-01           6.751077e-01           5.317563e-01
            four_prong                  gamma                 i_stat
          1.600000e+01                     NA           6.028266e-01
             il_number        imbalance_steps                  j_one
          7.100000e+01           1.700000e+02           7.354110e-01
                j_stat     laplace_spectrum_a     laplace_spectrum_e
          1.181485e-02           1.251379e+00           7.321651e+00 
    laplace_spectrum_g     laplace_spectrum_p                max_adj
o             pitchforks
          2.656710e+00           1.304070e+00           3.500000e+01
                   psv                 rogers         root_imbalance
          1.128318e+00           1.240000e+02           7.853403e-01
              rquartet                 sackin                 stairs
          4.679263e+07           1.968000e+03           6.526316e-01
               stairs2         symmetry_nodes               tot_coph
          5.909060e-01           1.250000e+02           3.552400e+04
     tot_internal_path               tot_path            tree_height
          1.588000e+03           3.556000e+03           2.656710e+00
              treeness      var_branch_length  var_branch_length_ext
          4.607367e-01           2.495831e-02           2.542879e-02
 var_branch_length_int              var_depth                    vpd
          2.445976e-02           1.399151e+01           1.985848e+00
                wiener
          1.471838e+05
复制<br><br>
<br>area_per_pair：两个叶子节点之间的边数总和。衡量树的拓扑复杂度。
<br>average_leaf_depth：平均叶子深度，指树中从根到叶子节点的平均路径长度。用于衡量树的平衡性。
<br>avg_ladder：平均阶梯数，表示在树中存在的“阶梯”状结构的平均长度。较高的值表示树的形态更不平衡。
<br>avg_vert_depth：平均顶点深度，表示从叶子节点到树根的平均路径长度。
<br>b1：B1 平衡指标，衡量树的平衡性，较高的值表示树不平衡。
<br>b2：B2 平衡指标，基于信息熵来衡量树的平衡性，数值越高树越平衡。
<br>beta：Aldous’ beta 统计量，用于拟合节点的子代分裂情况，负值表示树的形态更不平衡。
<br>blum：Blum 指数，衡量树的不平衡性，较高的值表示树更加不平衡。
<br>cherries：樱桃对数，指树中相连的叶子节点对数。
<br>colless：Colless 指数，衡量树的不平衡性，数值越高表示树越不平衡。
<br>colless_corr：修正的 Colless 指数，进行树大小修正后的 Colless 指数。
<br>colless_quad：Colless 指数的平方版本，提供更大的差异。
<br>crown_age：树的冠年龄，表示树的最早分支到现在的时间长度。
<br>diameter：树的直径，树中最长路径的长度。
<br>double_cherries：双樱桃对，指一对樱桃节点同时连接到同一个节点。
<br>eigen_centrality：特征向量中心性，衡量节点在整个树中的影响力。
<br>eigen_centralityW：加权特征向量中心性，使用加权分支长度计算。
<br>ew_colless：平衡的 Colless 指数，考虑到不同节点的大小。
<br>four_prong：四分叉节点的数量，表示树中有四个叶子节点连接到同一个父节点的数量。
<br>gamma：Gamma 统计量，用于衡量内部节点相对于树根的位置（NA表示无法计算）。
<br>i_stat：I 统计量，衡量节点连接子代的大小不平衡性。
<br>il_number：IL 数量，树中只有一个子叶节点的内部节点数。
<br>imbalance_steps：不平衡步数，指将树变为完全不平衡树所需的步骤数。
<br>j_one：J^1 指数，基于 Shannon 信息熵计算的树平衡性指数。
<br>j_stat：J 统计量，用于衡量树的分化程度。
<br>laplace_spectrum_a：拉普拉斯光谱的不对称性，衡量树的形状不对称性。
<br>laplace_spectrum_e：拉普拉斯光谱的最大特征值。
<br>laplace_spectrum_g：拉普拉斯光谱的特征间隙，表示特征值之间的差异。
<br>laplace_spectrum_p：拉普拉斯光谱的峰值高度。
<br>max_adj：最大邻接矩阵特征值。
<br>max_betweenness：最大中介中心性，衡量节点在最短路径中的重要性。
<br>max_closeness：最大接近中心性，表示节点与其他节点的距离接近程度。
<br>max_closenessW：加权接近中心性，考虑分支长度。
<br>max_del_width：最大宽度差，衡量树的不平衡性。
<br>max_depth：最大深度，树中从根到叶子节点的最长路径。
<br>max_ladder：最长的阶梯状结构。
<br>max_laplace：最大拉普拉斯矩阵特征值。
<br>max_width：树的最大宽度，表示在特定深度的最大节点数。
<br>mean_branch_length：平均分支长度，表示树中分支的平均长度。
<br>mean_branch_length_ext：平均外部分支长度，指连接叶子节点的分支的平均长度。
<br>mean_branch_length_int：平均内部分支长度，指树内部节点之间的分支长度。
<br>min_adj：最小邻接矩阵特征值。
<br>min_laplace：最小拉普拉斯矩阵特征值。
<br>mntd：最近种系距离，指每个叶子节点到最近的叶子节点的距离。
<br>mpd：平均成对距离，所有叶子节点之间的平均距离。
<br>mw_over_md：最大宽度与最大深度的比值。
<br>nltt_base：标准化谱系通过时间的统计量。
<br>number_of_lineages：谱系数量，表示树中的谱系数量。
<br>phylogenetic_div：系统发育多样性，基于树的分支长度来衡量物种多样性。
<br>pigot_rho：Pigot的Rho统计量，表示树在不同时间段内的分化速率变化。
<br>pitchforks：三分支叉，表示树中有三个叶子节点连接到同一个父节点的数量。
<br>psv：系统发育物种变异性，用于衡量物种间的系统发育相关性。
<br>rogers：Rogers不平衡指数，基于内部节点的平衡性。
<br>root_imbalance：树根节点的不平衡性。
<br>rquartet：随机四分支统计量，表示树中随机四个节点之间的拓扑结构。
<br>sackin：Sackin指数，衡量树的不平衡性。
<br>stairs：阶梯结构的数量，衡量树中的阶梯状模式。
<br>stairs2：另一种阶梯统计量。
<br>symmetry_nodes：对称节点数，衡量树中对称节点的数量。
<br>tot_coph：总共系距离，表示树中所有叶子节点之间的成对距离总和。
<br>tot_internal_path：内部路径长度总和。
<br>tot_path：路径总长度，表示树中所有路径的总长度。
<br>tree_height：树的高度，表示从根到叶子的最大距离。
<br>treeness：树的树状结构指数，表示树的分化程度。
<br>var_branch_length：分支长度的方差。
<br>var_branch_length_ext：外部分支长度的方差。
<br>var_branch_length_int：内部分支长度的方差。
<br>var_depth：树的深度方差。
<br>vpd：成对距离的方差。
<br>wiener：Wiener指数，衡量树的传递性，即所有节点之间距离的总和。
<br><br>人类 Y染色体 或 线粒体DNA（mtDNA）构建的系统发育树时，有几个特定的统计量和指标可以帮助我们更好地理解这些树的拓扑结构、进化过程以及遗传多样性。这些统计量能反映树的平衡性、分化速率以及不同族群的遗传结构。以下是特别需要关注的几个指标及其意义：<br><br>
<br>意义：这些指数衡量系统发育树的不平衡性，即不同分支在树上的分化程度是否一致。Y染色体和线粒体DNA由于单亲遗传，往往呈现明显的不平衡现象。高Sackin或Colless值表示某些谱系可能经历了快速扩张或特定事件（如人口迅速扩张等）。
<br>重要性：对于研究人类遗传谱系中的 瓶颈效应、快速扩张事件 或 祖先遗传谱系的集中性，这些指数非常重要。
<br><br>
<br>意义：表示树的最早分支到现在的时间长度。在Y染色体和线粒体DNA的研究中，冠年龄能告诉我们最早的共同祖先出现的时间。
<br>重要性：帮助确定 最近的共同祖先（MRCA） 的时间，尤其是在推测人类起源、迁徙路线以及不同族群的分化时间时具有重要作用。
<br><br>
<br>意义：树高度反映从根部（即共同祖先）到最远叶子节点的距离。对于mtDNA或Y染色体，这个值往往和谱系的 时间深度 相关。
<br>重要性：树的高度可以用于估计不同族群的遗传分化的时间深度，帮助了解 古老谱系与近代谱系的分化。
<br><br>
<br>意义：分支长度代表在树中的遗传差异。平均分支长度反映了不同谱系之间的平均遗传差异，而方差则显示遗传差异的波动性。
<br>重要性：可以用于评估 遗传多样性 和 谱系内的突变速率。特别是在研究mtDNA或Y染色体时，分支长度可以揭示 不同族群的多样性和分化速率。
<br><br>
<br>意义：每个叶子节点（即样本）的最近邻叶子节点的平均距离。它反映了谱系之间的紧密程度。
<br>重要性：在Y染色体或线粒体DNA的研究中，MNTD可以揭示 不同族群的亲缘关系，帮助识别哪些谱系在遗传上最接近。
<br><br>
<br>意义：基于系统发育树的总分支长度来衡量遗传多样性。较高的PD意味着较高的谱系多样性。
<br>重要性：PD对研究 人口历史事件（如迁徙或隔离） 的影响特别有用，因为它可以反映 群体间的遗传差异 和 多样性丧失。
<br><br>
<br>意义：衡量树在不同时间段内的分化速率变化。正值表示分化速率在后期增加，负值表示早期有更高的分化速率。
<br>重要性：适用于研究 谱系扩展模式，例如某些时期的快速人口扩展或迁徙事件。在人类Y染色体或线粒体DNA的研究中，rho值可以帮助我们理解特定人群的 历史人口动态。
<br><br>
<br>意义：这些指标衡量系统发育树中有多个叶子节点从同一个祖先节点派生的情况，反映了分支的不均匀性。
<br>重要性：Y染色体和线粒体DNA由于单亲遗传和特定族群的快速扩张，常出现多分支节点。这些指标可以帮助识别 特定时期的大规模扩张事件，如 “Y染色体亚当” 或 线粒体夏娃 相关的族群扩展。
<br><br>
<br>意义：衡量内部节点在树中的位置，相对于根的位置。正值表示大多数分支发生在树的晚期，负值表示更多分支发生在树的早期。
<br>重要性：在人类谱系的研究中，Gamma值可以帮助理解 谱系分化模式 和 不同时间点的多样性变化，例如某些族群是否经历了早期或晚期的快速分化。
]]></description><link>软件\r语言语法\r：treestats：简易使用.html</link><guid isPermaLink="false">软件/R语言语法/R：treestats：简易使用.md</guid><pubDate>Thu, 12 Sep 2024 01:58:07 GMT</pubDate></item><item><title><![CDATA[八、单因素方差分析及多重比较]]></title><description><![CDATA[ 
 <br>独立样本 T 检验：比较两组均值的差异。<br>单因素方差分析：比较三组或三组以上均值的差异。<br>只要是比较均值差异的统计方法，都要求数据服从正态分布。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181352867.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
首先依然是检查是否符合正态分布。<br>如果服从，则进行下一步：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181354933.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181354223.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181355744.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181355456.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
可以看到 。证明多组之间的平均值存在差异。<br>那么，如果我想知道两两比较，知道它们是否存在差异，就应该进行事后多重比较。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181358011.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181358301.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181358278.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
由上图可知，ANOVA 结果显示：两两比较之间依然存在显著性差异，平均值和标准差叶贝算出来了。<br>为什么要进行校正？
我们进行 4 组之间比较需要 6 次，那么 6 次如果都定在 0.05，那么每一次结论正确的结论是 95%，6 次都准确的概率=(95%)^6. 最终就只有 73%的准确性，为了保证 6 次的准确率依然达到 95%，就需要校正。<br>
校正的步骤其实就是保证 N 次之后依然达到 95%，那么每次就需要（0.05/6）=0.0083333, 按照这个概率进行每一次的运算就可以了。<br>
也可以把每一个的 P 值×6，如果任意一个＞0.05，则终止运算，缺乏统计学差异。
]]></description><link>软件\spss\八、单因素方差分析及多重比较.html</link><guid isPermaLink="false">软件/SPSS/八、单因素方差分析及多重比较.md</guid><pubDate>Fri, 21 Jun 2024 07:31:50 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181352867.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403181352867.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[变量分类]]></title><description><![CDATA[ 
 <br><br><img alt="IMG_2758(20240214-000510).JPG" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402140950596.JPG" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="IMG_2757(20240214-000510).JPG" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402140950743.JPG" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
在SPSS中，变量被分为两大类，三小类，分别是：<br>
<br>计数资料

<br>有序
<br>无序


<br>计量资料
<br>注意，SPSS无法对字符进行运算，例如男，好，差等。因此，需要首先对其进行赋值，例如，将男赋值为1，女赋值为0。<br>赋值可以通过如下修改：<br>
<img alt="50effcbc509c3f8d570dd595f50b923f.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402141005178.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
赋值完成之后，可以点击如下进行切换视图：<br>
<img alt="IMG_2754(20240213-161901).JPG" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402141006142.JPG" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>在SPSS中，可以像Excel一样进行复杂的运算，可以点击计算变量按钮：<br>
<img alt="IMG_2753(20240213-161901).JPG" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402140952428.JPG" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="IMG_2752(20240214-000510).JPG" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402141006474.JPG" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\spss\二、认识变量.html</link><guid isPermaLink="false">软件/SPSS/二、认识变量.md</guid><pubDate>Fri, 21 Jun 2024 07:31:51 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402140950596.JPG" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402140950596.JPG"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[案例]]></title><description><![CDATA[ 
 <br>刚才讲到的 T 检验和单因素方差检验都是参数类检验。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201327358.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
如果变量不服从正态分布，那么就需要使用非参数检验。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201353819.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
如果要比较病例组和对照组之间的血红蛋白含量是否有差异，首先进行正态分布检验。结果显示，两组（或者任一一组）的糖化血红蛋白含量都不服从。所以我们需要进行非参数检验。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201356598.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
注意：<br>
如果我们有 2 个组别，使用 2 个独立样本；<br>
如果我们有 2 个组别以上，使用 K 个独立样本。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201357112.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201358916.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>我们可以看到显著性水平&lt;0.05，因此具有差异。<br>
那么，究竟哪个高，哪个低？看看中位数。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201359654.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201359592.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201400207.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
我们可以看到两者中位数的差异，病例组的要高一些。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201402237.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
这里的  没特殊含义，其存在是为了计算 。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201403207.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>如果我们要比较两组的疼痛等级的差异，也要选择非参数检验。因为疼痛等级是等级变量。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201405430.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>需要注意，等级变量也有中位数和四分位数，所以仍需要计算：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201407099.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201408213.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>如果我们要比较一批人在治疗前后的疼痛状况有没有差异，那么就可以进行配对样本的秩和检验。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201410378.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201411473.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201411234.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
我们可以看到显著性&lt;0.05，因此下一步就是计算治疗前后的中位数。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201411178.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\spss\九、非参数检验（秩和检验）.html</link><guid isPermaLink="false">软件/SPSS/九、非参数检验（秩和检验）.md</guid><pubDate>Fri, 21 Jun 2024 07:31:52 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201327358.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403201327358.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[概念]]></title><description><![CDATA[ 
 <br><br>独立样本 T 检验：比较两组的均值的差异。更进一步，只有连续且服从正态分布的变量才有均值（因为连续但非正态分布的变量对应的统描述统计量是中位数和四分位数）。<br>举例：A 班 50 名学生的成绩平均分与 B 班 55 名学生的成绩平均分有店无显著差异。<br>既然都有了平均分了，为什么要进行检验？
为了检验两个班级的差异是否具有统计学差异。
<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151537301.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
我想研究病例组和对照组的年龄是否有统计学差异。那么第一步就是检验年龄是否服从正态分布？<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151538164.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151538657.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151538286.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151539887.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151540372.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
独立样本 T 检验首先检查假定方差大小。<br>如果  ，那么说明假定方差相等成立；那么以第一行为最终结果；<br>
如果  ，那么说明假定方差不相等成立；那么以第二行为最终结果。<br>有图可知，该例应该以第一行为最终结果：显著性&gt;0.05，说明病例组年龄平均值和对照组年龄平均值不具有统计学差异。<br>如果进行可视化，可以如此进行（在 Graph pad 绘制）：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151553510.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\spss\六、独立样本t检验.html</link><guid isPermaLink="false">软件/SPSS/六、独立样本T检验.md</guid><pubDate>Fri, 21 Jun 2024 07:31:52 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151537301.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151537301.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[概念]]></title><description><![CDATA[ 
 <br><br>配对样本 T 检验：比较同一批样本前后两个均值的差异；或者，比较同一批样本两个状态下的均值的差异配对样本 T 检验，也要求两列变量均服从正态分布。<br>举例：<br>
<br>同一批人减肥前后的差异；
<br>同一批样本疫情前后的销量。
<br>配对 T 永远只涉及同一批人。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151558897.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
我想知道同一批人四月考试成绩与六月考试成绩之间的差异。<br>首先对其进行<a data-href="三、正态分布" href="软件\spss\三、正态分布.html" class="internal-link" target="_self" rel="noopener nofollow">三、正态分布</a>；<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151601757.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151601181.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
因为配对 T 是对同一批人进行的，因此 2 种状态下的数据应当具备很强的相关性，如果没有，那么就说明数据问题。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151604454.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
假如，算出来的相关性显著性&gt;0.05，那么就不能使用配对样本，而必须使用<a data-href="六、独立样本T检验" href="软件\spss\六、独立样本t检验.html" class="internal-link" target="_self" rel="noopener nofollow">六、独立样本T检验</a>。但是很少遇到这种情况。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151607656.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>结果显著性&gt;0.05，那么再看平均值，发现 <br>
证明某毕业班的学生的六月的平均成绩相对四月的平均成绩出现了显著提升，成绩均值提升了 6.21 分。<br>利用 graph pad 进行可视化如下图：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151619907.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\spss\七、配对样本t检验.html</link><guid isPermaLink="false">软件/SPSS/七、配对样本T检验.md</guid><pubDate>Fri, 21 Jun 2024 07:31:52 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151558897.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403151558897.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[检验方法]]></title><description><![CDATA[ 
 <br><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403041333770.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403041333361.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403041335922.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403041335204.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403041337730.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403041338612.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
注意，如果显著性（P值）＞0.05则服从正态分布；反之不符合正态分布。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403041338123.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403041338612.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
注意，如果显著性（P值）＞0.05则服从正态分布；反之不符合正态分布。]]></description><link>软件\spss\三、正态分布.html</link><guid isPermaLink="false">软件/SPSS/三、正态分布.md</guid><pubDate>Fri, 21 Jun 2024 07:31:54 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403041333770.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403041333770.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[举例]]></title><description><![CDATA[ 
 <br>线性回归: 因变量为连续型变量，自变量类型不限。<br>
二元 Logistic 回归: 因变量为二分类变量，自变量类型不限。<br>
除此之外，还有泊松回归，负二项回归等……<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403221400207.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
我们希望查看年龄、BMI 和 HDL 对代谢综合征（有、无）的影响。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403221403887.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403221403874.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403221403395.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403221404436.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>显著性：就是 ，一般认为  认为显著。
<br>B 值：这里的  就是系数，正数代表正相关，负数代表负相关。
<br>Exp（B）：也称为 ，<a data-href="风险比（Odds Ratio, OR）" href="术语\风险比（odds-ratio,-or）.html" class="internal-link" target="_self" rel="noopener nofollow">风险比（Odds Ratio, OR）</a>。如图，表示，年龄每增加 1 岁，患病风险为原来的 1.096 倍。
<br>为什么这里 HDL 的 Exp（B）为 0.000？因为人的生理范围内 HDL 是不可能变化超过 1 的，所以为了使得该结果更准确，我们可以采取：将 HDL 原始数值乘 1000.<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403221412190.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
这样就可以更准确查看 HDL 与代谢征的影响。<br><br>我们可以通过森林图进行可视化：<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403221414348.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">]]></description><link>软件\spss\十、-二元-logistic回归分析.html</link><guid isPermaLink="false">软件/SPSS/十、 二元 Logistic回归分析.md</guid><pubDate>Fri, 21 Jun 2024 07:31:54 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403221400207.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403221400207.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[四、线性回归分析]]></title><description><![CDATA[ 
 <br>SPSS 线性回归分析：<br>
<br>因变量只能有 1 个，且必须是连续数值型变量。
<br>自变量可以有多个，既可以是连续型变量，也可以是分类型变量。如果自变量中有分类变量，此时要进行虚拟线性回归。
<br>举例，要研究  之间的因果关系。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403121352304.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403121353908.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403121354990.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
注意，如果属于 ，还要勾选德宾沃森。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403121354513.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403121356826.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
从上表的结果可以看到，R 2=0.568，意味着模型拟合程度为 56.8%，即拟合状况较好，表示，价格满意度，环境满意度，服务满意度可以比较好的解释消费者的再次购买意愿。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403121358587.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>上表的方差分析结果显示，P&lt;0.05，意味着回归模型的存在有显著意义。即，价格满意度，环境满意度，服务满意度这三个自变量中至少有一个自变量可以显著影响因变量。<br>注意，是至少有一个，而不是全都有因果关系。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403121406792.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>服务满意度可以显著影响再次购买意愿，P=0.026&lt;0.05，更进步，回归系数为0.127&gt;0，意味着服务满意度可以显著正向影响再次购买意愿，二者之间具体的定量关系是：服务满意度提升 1 分，再次购买意愿则随之提升 0.127 分。
<br>环境满意度不能显著影响再次购买意愿，P=0.153&gt;0.053。
<br>价格满意度可以显著影响再次购买意愿，P&lt;0.05，更进一步，回归系数为 0.120，意味着服务满意度可以显著正向影响再次购买意愿，二者之间具体的定量关系是：服务满意度提升 1 分，再次购买意愿则随之提升 0.127 分。
<br>需要注意，三个变量之间不能存在共线性关系，也就是说自变量之间不能存在重叠。如何考察是否存在这个问题？查看 。<br>
<br>三个自变量的 VIF 值均小于 5，意味着三个自变量之间不存在多重共线性，即回归模型的运算结果稳定可靠。
<br>回归模型的残差基本服从正态分布，即回归模型的运算结果稳定可靠。
<br>打个比方，只要残差随机散乱分布，那么就说明运算结果稳定可靠。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403121413915.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>可以用 python 实现操作，具体<a data-href="二十九、 Python线性回归" href="软件\python\学习笔记\二十九、-python线性回归.html" class="internal-link" target="_self" rel="noopener nofollow">二十九、 Python线性回归</a>。]]></description><link>软件\spss\四、线性回归分析.html</link><guid isPermaLink="false">软件/SPSS/四、线性回归分析.md</guid><pubDate>Fri, 21 Jun 2024 07:31:55 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403121352304.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403121352304.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[案例]]></title><description><![CDATA[ 
 <br>
<br>考察构成比的差异。
<br>适用于分类变量的统计学方法。
<br>被检验的分类变量一定是无序变量。
<br>分组变量无所谓。
<br>例如 A 班男女构成和 B 班男女构成之间的差异。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403141352757.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br>案例：考察三个年龄组（分组变量）的感染（分组变量）率是否存在显著差异？<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403141355458.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403141356252.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403141356097.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403141358590.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>经卡方检验，P=0.009&lt;0.05，意味着三个年龄组的感染率存在显著差异，60-69 感染率最低，70-79 感染率居中，80~感染率最高。<br>注意：这样检验说明三组之间存在差异，不能说明两两比较存在差异，如果需要比较，那么就应该删掉其中一组。]]></description><link>软件\spss\五、卡方检验.html</link><guid isPermaLink="false">软件/SPSS/五、卡方检验.md</guid><pubDate>Fri, 21 Jun 2024 07:31:55 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403141352757.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202403141352757.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[一、认识SPSS]]></title><description><![CDATA[ 
 <br>PSS（Statistical Package for the Social Sciences）是一款强大的统计分析软件，最初由斯坦福大学的一群社会科学家在1968年开发，后来由IBM收购。它主要用于社会科学领域的统计数据分析，但现在已经扩展到各个领域，包括健康科学、市场研究、数据挖掘、政府、教育等。<br>SPSS软件提供了一系列的统计功能，包括描述性统计分析、复杂的样本分析、线性模型分析、回归分析等。它支持各种数据格式，可以轻松地导入和导出数据，进行数据清洗、转换和分析。SPSS具有直观的图形用户界面（GUI），使得即使是没有编程背景的用户也能够使用它进行复杂的统计分析。此外，SPSS也支持编程和自动化，通过SPSS Syntax或Python插件，用户可以编写脚本来自动化重复性的分析任务。SPSS的主要特点包括：<br>
<br>用户友好的界面：提供了丰富的菜单和对话框，用户可以通过点击而不是编写代码来完成大部分的统计分析任务。
<br>强大的数据处理能力：支持大量的数据格式，提供数据转换、排序、筛选等处理功能。
<br>丰富的统计分析功能：涵盖从基本的描述性统计到复杂的多变量分析等广泛的统计方法。
<br>可扩展性：通过SPSS Syntax和Python或R的集成，用户可以扩展其功能，实现更复杂的数据分析。
<br>输出和报告：生成的统计输出和图形可以直接用于报告，支持多种格式的输出，包括HTML、PDF、Word等。
<br>SPSS是一个适合各种水平用户的统计软件，从初学者到高级用户都能从中受益。尽管SPSS是商业软件，需要购买许可证才能使用，但它的功能强大、操作简便，是进行统计分析的重要工具之一。<br><img alt="IMG_2753(20240213-161901).JPG" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402140952428.JPG" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
上图显示了软件的工具栏，常用的工具栏是：<br>
<br>编辑→首选项
<br>数据
<br>转换
<br>分析
<br>图形<br>
其他功能基本用不上。
]]></description><link>软件\spss\一、认识spss.html</link><guid isPermaLink="false">软件/SPSS/一、认识SPSS.md</guid><pubDate>Fri, 21 Jun 2024 07:31:55 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402140952428.JPG" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202402140952428.JPG"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[一、步骤]]></title><description><![CDATA[ 
 <br>
<br>原文链接：<a data-tooltip-position="top" aria-label="https://zhuanlan.zhihu.com/p/613163023?utm_medium=social&amp;utm_oi=1318097956147269632&amp;utm_psn=1735664651126435840&amp;utm_source=wechat_session" rel="noopener nofollow" class="external-link" href="https://zhuanlan.zhihu.com/p/613163023?utm_medium=social&amp;utm_oi=1318097956147269632&amp;utm_psn=1735664651126435840&amp;utm_source=wechat_session" target="_blank">SPSS主成分分析——操作步骤及结果解读——超详细版 - 知乎 (zhihu.com)</a>
<br>参考资料<a data-footref="1" href="about:blank#fn-1-3d0ee807868908f1" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a>
<br><br>
<br>分析<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401301411384.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401301411379.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401301412659.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401301412502.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>抽取——点击“提取”——勾选“主成分”（此时不能更改其他方法，否则就不叫主成分分析了）——勾选“碎石图”（用于从图视角度判定提取几个主成分较为合适）——“基于特征值“这里特征值大于1是系统默认的，如果当抽取的因子只有一个或者不符合预期时，可以在序号5这里输入你想要的因子个数——点击继续（不过一般主成分分子是基于特征值大于1 实现的，只有因子分析时才进行此操作）。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401301413526.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>“得分”——勾选“保存为变量”（计算因子得分的，勾选后因子得分会保存在数据当）——勾选“显示因子得分系数矩阵”——点击“继续”<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401301413984.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>“选项”——勾选“禁止显示小系数（勾选后，禁止显示小系数设置成0.5，是为了方便分析成分矩阵和旋转成分矩阵，观察因子归属）——点击“继续”——最后点击“确定”（序号4）得出结果。<br>
<br>得分<br>
主成分得分计算：利用SPSS“转换——计算变量”输入文中对应公式即可计算得到。<br>
综合得分计算：利用SPSS“转换——计算变量”输入文中对应公式即可计算得到。<br>
T分数转换：同样利用SPSS“转换——计算变量”，计算新的排名K1=60+10×K，让spss软件利用K产生一组0-100分的数据，然后对其划分区间分析即可。这里60位新数据的均值，10位标准差的近似值。
<br><br><br><br>对于主成分分析而言，变量间相关性越高，越适合主成分提取，此处大致看看就可，不是主要判定结果。<br><br><br>由表格2可以看出KMO=0.897，巴特利特球形度检验P=0.000&lt;0.05，因此本列适合进行进行主成分分析。<br>此处判断标准是KMO&gt;0.5,P&lt;0.05,则适合做主成分分析。<br><br><br>如果每个变量包含信息为1的话，此处进行主成分的提取，每个变量到底有多少啊信息能够被提取出来，提取的越多，说明信息浓缩的越好，由表可知每个公因子的提取均大于0.5。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401301419324.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
使用最大方差法，成分1的特征值为4.77，成分2的特征值为1.72，这两个的方差贡献率为64.93%，总的来看，原有指标的信息丢失较少，主成分分析效果比较理想，具有研究意义。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401301420425.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
由碎石图可以看出，越高的点，其势能越大，对于研究而言就越重要，第一个因子的特征值最高，对解释原有的题项的贡献最大，第三个以后的特征值都较小，对解释原有的题项的贡献小，可以忽略，因此提取三个因子是比较适合。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401301421605.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
第一成分有组成认知1、认知2、认知3、认知4和认知5，且位于第一个因子，有较高的载荷，将其解释为认知。<br>第二成分由情感1、情感2、情感3、情感4和情感五组成，第二个因子主要解释这几个题项，解释为情感。<br><br><br><br><br><br>因为主成分分析是对数据进行标准化后分析，出现部分负值，不美观，考虑将其进行T分数转化。<br><br>T分数转化后，得到的综合得分位于0-100之间，将其划分为四个等级优秀、良好、及格和不及格。对应的分数为：优秀：大于等于80分；良好：大于等于70分小于80分；及格：大于等于60分小于70分；不及格：为小于60分。<br><br><br><br>
<br>
<br>武松，SPSS实战与统计思维，清华大学出版社<a href="about:blank#fnref-1-3d0ee807868908f1" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>软件\spss\spss主成分分析.html</link><guid isPermaLink="false">软件/SPSS/SPSS主成分分析.md</guid><pubDate>Fri, 21 Jun 2024 07:31:56 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401301411384.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202401301411384.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[O 单倍群进入东亚]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV1ma411o7nB/?spm_id_from=333.788&amp;vd_source=4410d713724fce7981d19f087cc50ee6" rel="noopener nofollow" class="external-link" href="https://www.bilibili.com/video/BV1ma411o7nB/?spm_id_from=333.788&amp;vd_source=4410d713724fce7981d19f087cc50ee6" target="_blank">【史前中国】一万年前的危机！全球气候剧变 与 农业革命的爆发_哔哩哔哩_bilibili</a><br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061655914.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
M122：<a data-href="汉藏语系" href="术语\汉藏语系.html" class="internal-link" target="_self" rel="noopener nofollow">汉藏语系</a> <a data-href="苗瑶语（Hmong–Mien languages）" href="术语\苗瑶语（hmong–mien-languages）.html" class="internal-link" target="_self" rel="noopener nofollow">苗瑶语（Hmong–Mien languages）</a>、奠基者。也被认为是<a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>的标志。<br>
继续分化出 M324，进入 <a data-href="末次盛冰期 (Last Glacial Maximum,LGM)" href="术语\末次盛冰期-(last-glacial-maximum,lgm).html" class="internal-link" target="_self" rel="noopener nofollow">末次盛冰期 (Last Glacial Maximum,LGM)</a>。之后继续分化：<br>
M7: <a data-href="大溪文化" href="术语\大溪文化.html" class="internal-link" target="_self" rel="noopener nofollow">大溪文化</a><br>
M117 : <a data-href="仰韶文化" href="术语\仰韶文化.html" class="internal-link" target="_self" rel="noopener nofollow">仰韶文化</a><br>
00261: <a data-href="大汶口文化" href="术语\大汶口文化.html" class="internal-link" target="_self" rel="noopener nofollow">大汶口文化</a>。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061700411.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>M119：是<a data-href="壮侗语（Kra–Dai languages）" href="术语\壮侗语（kra–dai-languages）.html" class="internal-link" target="_self" rel="noopener nofollow">壮侗语（Kra–Dai languages）</a>，傣，高山等先民。形成<a data-href="百越族群" href="术语\百越族群.html" class="internal-link" target="_self" rel="noopener nofollow">百越族群</a>。是<a data-href="良渚文化" href="术语\良渚文化.html" class="internal-link" target="_self" rel="noopener nofollow">良渚文化</a>奠基者。<br>M268（曹操）：目前主要分布在华南、<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>等地。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061705498.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<br>最早的农业是西亚，<a data-href="大麦" href="大麦" class="internal-link" target="_self" rel="noopener nofollow">大麦</a>和<a data-href="小麦" href="小麦" class="internal-link" target="_self" rel="noopener nofollow">小麦</a>。
<br>中国的<a data-href="百越族群" href="术语\百越族群.html" class="internal-link" target="_self" rel="noopener nofollow">百越族群</a>是最早驯化<a data-href="稻（Oryza sativa L.）" href="术语\稻（oryza-sativa-l.）.html" class="internal-link" target="_self" rel="noopener nofollow">稻（Oryza sativa L.）</a>。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061707918.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;">
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061710310.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>有学者认为，文字、城市、冶金是形成文明的要素。<br>
但是，现在更多学者认为：<br>
<br>生产发展，人口增加，出现城市
<br>社会分工，阶层分化，出现阶级
<br>出现王权和国家。
<br><br>彭头山文化被认为是苗族文化的起源。之后出现了<br>
<br>皂市下层文化
<br>城背溪文化
<br>新文化（可能是仰韶文化和苗族共同形成的新群体）
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061738502.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
统称为<a data-href="大溪文化" href="术语\大溪文化.html" class="internal-link" target="_self" rel="noopener nofollow">大溪文化</a>。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061739967.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
应该就是三苗的起源。汉东部落向西扩张，与峡江部落发生冲突。最终，大溪文化被<a data-href="屈家岭文化" href="术语\屈家岭文化.html" class="internal-link" target="_self" rel="noopener nofollow">屈家岭文化</a>替代。实现了苗族文化的一统。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061743643.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061744490.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>后来尧舜禹相继对苗蛮进行了反击。遇到了4.2千年降温事件，当时还出现日食，应该是在公元前2072年4月29日。可能东夷参与了南征的战争。禹征三苗正式结束。<br>苗族的 Y 染色体 M7在如今的中国人非常罕见，但是在<a data-href="苗瑶语（Hmong–Mien languages）" href="术语\苗瑶语（hmong–mien-languages）.html" class="internal-link" target="_self" rel="noopener nofollow">苗瑶语（Hmong–Mien languages）</a>有分布。]]></description><link>书籍\青格历史.html</link><guid isPermaLink="false">书籍/青格历史.md</guid><pubDate>Tue, 20 Aug 2024 12:44:13 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061655914.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202404061655914.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[公式]]></title><description><![CDATA[ 
 <br><br><br><a data-href="遗传力（heritability）" href="术语\遗传力（heritability）.html" class="internal-link" target="_self" rel="noopener nofollow">遗传力（heritability）</a>：在总表型方差中，遗传方差（VG）所占的比例。一个表型的方差（VP）是遗传方差（VG）和环境方差（VE）之和。<br><br>这个公式较为理性地阐述了遗传与环境的关系。<br><br><br>连续平均值计算：<br><br>离散平均值计算：<br><br>其中fi为频率。<br><br><br>由于统计原因，自由度为数量减去一。即：<br><br><br>]]></description><link>书籍\群体演化.html</link><guid isPermaLink="false">书籍/群体演化.md</guid><pubDate>Mon, 26 Aug 2024 00:53:36 GMT</pubDate></item><item><title><![CDATA[第一节]]></title><description><![CDATA[ 
 <br><br>这是我整理的思维导图啦！欢迎大家指正或提出建议。<br><img src="https://pic4.zhimg.com/80/v2-6e718018632d259603f553f05a31cf13_720w.webp" referrerpolicy="no-referrer"><br><img src="https://pic1.zhimg.com/80/v2-09a5c41f559229bb85a75b04ad980564_720w.webp" referrerpolicy="no-referrer"><br><img src="https://pic3.zhimg.com/80/v2-41c04d64e3fe76b3e0e8bcfd05b4a3d6_720w.webp" referrerpolicy="no-referrer"><br><img src="https://pic1.zhimg.com/80/v2-d579b10affc698f0c8e7fff31170054c_720w.webp" referrerpolicy="no-referrer"><br><br>这是我整理的思维导图，欢迎大家指正或提出建议！<br><img src="https://pic1.zhimg.com/80/v2-5e55b8f4618a57115f28f4c4a1489b0c_720w.webp" referrerpolicy="no-referrer"><br><img src="https://pic3.zhimg.com/80/v2-b79c453818b050d267f29fdfe4bfd312_720w.webp" referrerpolicy="no-referrer"><br><img src="https://pic3.zhimg.com/80/v2-2f4c924c2c7ecb89dcea5e29e8ece2a2_720w.webp" referrerpolicy="no-referrer"><br><br>这是我整理的思维导图，欢迎大家指正或提出建议！<br><img src="https://pic3.zhimg.com/80/v2-131f18f646a6606ad1866508733f5bb6_720w.webp" referrerpolicy="no-referrer"><br><img src="https://pic2.zhimg.com/80/v2-f3235946de70705373acc964fe94f841_720w.webp" referrerpolicy="no-referrer"><br><img src="https://pic1.zhimg.com/80/v2-949a40251d03622632c1f0e5ed8da64c_720w.webp" referrerpolicy="no-referrer"><br><br>这是我整理的思维导图，欢迎大家指正或提出建议！<br><img src="https://pic2.zhimg.com/80/v2-34e1b490d4aa345f1eb4df222a4688b5_1440w.webp" referrerpolicy="no-referrer"><br><img src="https://pic3.zhimg.com/80/v2-9e742a07911a67a613f806e703b9f56a_1440w.webp" referrerpolicy="no-referrer"><br><img src="https://pic1.zhimg.com/80/v2-c58e8946f29a6d93c5b8ab8a76b3c758_1440w.webp" referrerpolicy="no-referrer"><br><img src="https://pic1.zhimg.com/80/v2-0e839cb83dc7c7a818757e320345cc38_1440w.webp" referrerpolicy="no-referrer"><br><img src="https://pic1.zhimg.com/80/v2-6374dcca043dd66563a60ee4568e7bd8_1440w.webp" referrerpolicy="no-referrer"><br><br>这是我整理的思维导图，欢迎大家指正或提出建议！<br><img src="https://pic1.zhimg.com/80/v2-adb268b74560afff2f862ce5bec3de84_1440w.webp" referrerpolicy="no-referrer"><br><img src="https://pic1.zhimg.com/80/v2-f417d807bb31736daea1adfc267caa40_1440w.webp" referrerpolicy="no-referrer"><br><img src="https://pic3.zhimg.com/80/v2-fd5f4d593e418d0944942c9d0e58dd2a_1440w.webp" referrerpolicy="no-referrer"><br><img src="https://pic3.zhimg.com/80/v2-1f2b75757eecf6cd7ec327a1559a5016_1440w.webp" referrerpolicy="no-referrer"><br><img src="https://pic1.zhimg.com/80/v2-3979373a69f28a418feabd3e83bf58ec_1440w.webp" referrerpolicy="no-referrer"><br><br>这是我整理的思维导图，欢迎大家指正或提出建议！<br><img src="https://pic2.zhimg.com/80/v2-895984d3bc39d73d49906195f9bfdeb5_1440w.webp" referrerpolicy="no-referrer"><br><img src="https://pic4.zhimg.com/80/v2-b6af0a2661d6aed6acf66465c5835a3b_1440w.webp" referrerpolicy="no-referrer"><br><img src="https://pic2.zhimg.com/80/v2-cf343ac793583f8eb34d4b0e76bd9f51_1440w.webp" referrerpolicy="no-referrer"><br><img src="https://pic4.zhimg.com/80/v2-d726a4fa372d6a6515b3027b6e57130f_1440w.webp" referrerpolicy="no-referrer"><br><img src="https://pic1.zhimg.com/80/v2-928ec582855b6568f633741360fee2d8_1440w.webp" referrerpolicy="no-referrer">]]></description><link>书籍\群体遗传学.html</link><guid isPermaLink="false">书籍/群体遗传学.md</guid><pubDate>Thu, 20 Jun 2024 12:44:21 GMT</pubDate><enclosure url="https://pic4.zhimg.com/80/v2-6e718018632d259603f553f05a31cf13_720w.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://pic4.zhimg.com/80/v2-6e718018632d259603f553f05a31cf13_720w.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[线粒体单倍群]]></title><description><![CDATA[<a class="tag" href="?query=tag:单倍群" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#单倍群</a> <a class="tag" href="?query=tag:单倍群" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#单倍群</a> <a class="tag" href="?query=tag:单倍群" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#单倍群</a> <a class="tag" href="?query=tag:单倍群" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#单倍群</a> <a class="tag" href="?query=tag:单倍群" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#单倍群</a> <a class="tag" href="?query=tag:单倍群" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#单倍群</a> <a class="tag" href="?query=tag:单倍群" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#单倍群</a> 
 <br><br><a href=".?query=tag:单倍群" class="tag" target="_blank" rel="noopener nofollow">#单倍群</a> 非洲：L=L1，L2，L3<br>
近东：J，N（N 包括在 A，B，F，H，I，J，K，P，R，S，T，U，V，W，X）欧洲：J，K，H，V，T，U，X<br>
亚洲：A，B，C，D，E，F，G，M（M 包括在 C，D，E，G，Q，Z）<br>
美洲：A，B，C，D 和少量的 X<br>
现在，L0频率最高的群体是非洲中部的俾格米人（Pygmies）和非洲南部的科伊桑人（Khoisan，常称桑人）​。<br><a href=".?query=tag:单倍群" class="tag" target="_blank" rel="noopener nofollow">#单倍群</a> M 单倍群离开了非洲，可能通过红海——亚丁湾（Gulf of Aden）一带渡过狭窄的海峡，从东非海岸来到阿拉伯半岛。这是一场长距离大迁徙的开始，M 沿着中东——欧亚大陆南部——澳大利亚，最后到达波利尼西亚。M 是出现在约6万年前的第一批走出非洲的人类。<br><a href=".?query=tag:单倍群" class="tag" target="_blank" rel="noopener nofollow">#单倍群</a> C 起源于里海和贝加尔湖之间的中亚大平原，属于西伯利亚血统，占西伯利亚地区的20%。由于年代久远，在欧亚大陆北部频率较高，被认为是最早定居在这一带的第一批人类。<br><a href=".?query=tag:单倍群" class="tag" target="_blank" rel="noopener nofollow">#单倍群</a> 5万年前，从 M 分支的另一批人群 D 单倍群进入中亚干草原——亚洲东部，他们的第一批成员继续向东，最终进入北美洲和南美洲。与 C 单倍群一样，D 单倍群也居住在里海和贝加尔湖之间的中亚大平原，属于欧亚大陆东部血统，D 的后裔向四周扩散并迅速南下，现在是亚洲东部的重要血统，约占20%。D 的频率向西的方向逐步减少，在亚洲中部为15%——20%。<br><a href=".?query=tag:单倍群" class="tag" target="_blank" rel="noopener nofollow">#单倍群</a> 约3万年前，Z 单倍群（L1/LO→L2→L3→M→Z）的第一个成员北上进入西伯利亚，开始向亚洲东部的旅程。Z 属于西伯利亚血统，居住在里海和贝加尔湖之间，现在约占这一地区的3%。Z 单倍群向四周扩散并南下进入亚洲的北部和中部，现在约占亚洲东部的2%。但是，Z 向其他方向的迁移似乎都失败了。当 C 和 D 的后裔进入美洲时，Z 的后裔没有前往美洲。由于 C-D-Z 的居住区域相同，也许 Z 也进入了美洲，但是这支血统在美洲绝嗣了。<br><a data-footref="1" href="about:blank#fn-1-3d0ee807868908f1" class="footnote-link" target="_self" rel="noopener nofollow">[1]</a><img alt="线粒体单倍群地图" src="https://upload.wikimedia.org/wikipedia/commons/a/a4/Migration_route_of_Human_mtDNA_haplogroups.png" referrerpolicy="no-referrer"><br><a href=".?query=tag:单倍群" class="tag" target="_blank" rel="noopener nofollow">#单倍群</a> M 来自第一波走出非洲的大迁移，N 来自第二波走出非洲的大迁移。M 的路线是通过红海，N 的路线是沿着尼罗河，通过西奈半岛走出非洲，因为沿着尼罗河谷地迁移可以找到足够的食物与饮水。这些 L3的后裔最终构成了 N 单倍群。N 被认为是欧亚大陆西部的单倍群，因为在中东和欧洲的几乎所有线粒体血统中都发现了 N。<br><a href=".?query=tag:单倍群" class="tag" target="_blank" rel="noopener nofollow">#单倍群</a> A单倍群的第一个成员越过西伯利亚，最终来到北美洲和南美洲。A 可能起源于中亚高原，然后扩散到亚洲东部几个地区。在美洲土著中第一次发现 A，使得遗传学家开始用这个突变研究史前人类的迁移。除了极少的例外，A 是爱斯基摩人的唯一血统，A 也是西伯利亚——阿拉斯加——加拿大的美洲土著的血统，可靠的起源时间约为1.1万年前。<br>B 单倍群（L1/LO→L2→L3→N→B）的第一个成员进入亚洲东部，最终来到北美洲和南美洲，以及波利尼西亚的大部分地区。这个 B 单倍群可能起源于里海和贝加尔湖之间的中亚高原，成为亚洲东部的创始血统之一，B、F、M 构成了现在亚洲东部所有线粒体血统的大约四分之三。B 单倍群向四周扩散并迅速南下进入亚洲东部，现在约占东南亚的17%，约占中国全部基因池的20%，并且广泛分布在太平洋沿岸，从越南到日本，少量存在于西伯利亚土著（约3%）​。由于历史久远，频率较高，B 被广泛承认是欧亚大陆最早的人群之一，也是南北美洲的5个线粒体血统之一。B4，从东南亚向波利尼西亚扩张。B4积累了在欧亚大陆的突变，最近不到5，000年内扩散到波利尼西亚，其中的一些中间血统出现在越南——马来西亚——婆罗洲，支持 B4起源于东南亚的可能性。<br><br><br>
<br>
<br>崎谷満『DNA・考古・言語の学際研究が示す新・日本列島史 日本人集団・日本語の成立史』<a href="about:blank#fnref-1-3d0ee807868908f1" class="footnote-backref footnote-link" target="_self" rel="noopener nofollow"><span></span>︎</a><img class="emoji" draggable="false" alt="↩" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/21a9.svg" height="18px" style="max-width: 100%;">
]]></description><link>书籍\人类六万年：基因中的人类历史.html</link><guid isPermaLink="false">书籍/人类六万年：基因中的人类历史.md</guid><pubDate>Wed, 02 Oct 2024 13:19:09 GMT</pubDate><enclosure url="https://upload.wikimedia.org/wikipedia/commons/a/a4/Migration_route_of_Human_mtDNA_haplogroups.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://upload.wikimedia.org/wikipedia/commons/a/a4/Migration_route_of_Human_mtDNA_haplogroups.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[当语言遇上基因：东亚的人类起源与族群演化]]></title><description><![CDATA[ 
 <br><br><br>我们已经很明确地告诉大家，现在全世界的人类都属于智人（Homo sapiens）物种的现代人（Homo sapiens sapiens）亚种。这一亚种大约20万年前起源于非洲东部，在6万多年前绕过红海走出非洲，渐渐散布到世界各地。由于旧石器时代的地理隔离，为适应不同的气候环境，演化出了8个地理种。在冰川期结束以后，地理隔离渐渐打破，人群再次迁徙，使得地理种的分布渐渐交错。其中4个地理种在东亚有分布，按到来顺序依次为：远东沿海环境的澳大利亚人种、东南亚雨林与青藏高原的尼格利陀人种、东亚季风平原的蒙古利亚人种、西亚和中亚草原的高加索人种。这4个地理种在东亚渐渐融合起来，又在新石器时代以来的文明演化过程中形成了多个语系群体。东亚有汉藏、侗傣、苗瑶、南亚、南岛、阿尔泰和印欧等7个语系的200多种语言。这使得东亚成为世界上研究人类进化、遗传多样性和基因与文化相互作用的最重要区域之一[1]。<br><br>在过去数年中，分子人类学的研究者们使用常染色体和X染色体、父系Y染色体、母系线粒体等遗传标记体系来解析东亚人群的遗传多样性。常染色体和X染色体遗传自父母双方，会被重组所打乱，而Y染色体上主干的非重组区呈严格父系遗传，并且理论上Y染色体的“有效群体大小”至多为常染色体的四分之一。不过实际上，由于人类社会长期的男性生育权不平等，使得这个数值接近于四百分之一，所以Y染色体对漂变非常敏感，容易形成群体特异性多态标记，在群体之间差异最大，从而包含更多的关于群体历史的信息。Y染色体的这些特点使其成为研究人类进化和迁徙最强有力的工具之一[2,3]。<br>Y染色体进入人们的视野，始于其在追溯现代人起源上的应用。自20世纪90年代以来，人类学界争论最激烈的话题，就是东亚地区现代人的起源问题。由于东亚出土了大量的古人类化石，一些人类学家认为，东亚地区的人类是本土连续进化的，从而支持全球现代人的多地区起源。直到现在，还有部分学者和大量民众认为，中国早期的各种古人类化石都是现代中国人的祖先留下的。特别是一些变异非常丰富的早期智人的化石，经常会表现出与现代人非常相似的特征。但是，外形相似并不等于亲缘关系相近，亲缘关系是必须通过DNA比对来确定的。就像现代社会的亲子鉴定原则，不可能通过长相分析亲子关系，必须经DNA分析以后才能真正确定。中国人是不是与世界其他人群不一样，其他人群都是非洲早期智人进化成的现代人，而中国人来自东亚的直立人？这必须经DNA鉴定才能判断。因此，我们有必要简单回顾一下东亚人群起源的DNA研究历史。<br>其实1978年“线粒体夏娃学说”发表的时候，世界线粒体谱系树中就包含了中国样本，很明确位于非洲起源的进化树上。不仅母系的“夏娃”如此，父系的“亚当”也是同样的。1999年，宿兵等人[4]采用Y染色体非重组区的19个SNP来研究东亚人群，得出结论为，东亚地区现代人起源于非洲，并由南方进入东亚，而后向北方迁。但是，有没有可能在中国保存了少量东亚直立人的后裔，只是采样太少而被遗漏了？于是，复旦大学的团队扩大了采样范围，2000年，柯越海等人[5]对东亚地区12 127份男性随机样本的Y染色体进行SNP分型研究。这些样本包括所有的语系、大部分民族，甚至极其偏远的隔离群体，从东南亚的热带雨林一直到北极冰天雪地中的楚科奇村落。如果这样大规模的采样调查都没有发现东亚直立人后裔，那么被遗漏的概率就只有六百亿分之一了，也就是基本不可能存在了。非洲起源的最典型标记是Y染色体突变M168，这个标记被认为是约6.4万年前现代人走出非洲时所产生的突变，其原始型仅出现在非洲的撒哈拉以南人群中，除非洲以外的人群都是突变型。柯越海等人的研究虽然没有直接检测M168这个突变，但他们检测了M89、M130和YAP这三个M168下游的突变，有这三个突变之一的个体，必然有M168突变。结果显示，这一万多份样品无一例外都带有M89、M130和YAP三种突变之一，也就是说都是M168突变型。M89突变在东亚形成的Y染色体类型（单倍群）主要是O型和N型，还有一些旁支类型。M130形成的单倍群是C型，YAP形成的是D型。尽管现在来看，东亚现代人或许与一些古人种有少许基因交流[6-8]，但从父系角度看，现存的东亚人群都是现代人走出非洲的后裔，这是支持现代人非洲单一起源的强有力的遗传学证据。<br>解决现代人从哪里来这个问题之后，接下来就要回答早期现代人是如何迁徙来到东亚的。<br>人群的迁徙和分布与气候的变迁有着密切的关系，为便于从不同角度探索和认识人群演变规律，这里介绍一些近10万年来的气象学材料。在距今约11万～1万年，也就是考古学上的旧石器时代到中石器时代，地球处于末次冰期[9]，那段时间，海平面远低于现在，现在的许多岛屿与大陆相连，成为人类迁徙的重要通道。始于距今2.65万年终于距今2万～1.9万年间的末次冰盛期，是末次冰期中气候最寒冷、冰川规模最大的时期，亚洲的绝大部分、北欧和北美都被冰雪覆盖，人类的生存空间也随冰川蔓延而逐渐缩小。大约1.5万年前，气温开始转暖，冰川开始退却，到1.2万年前气候基本回升到现代的水平，现代人才迎来了人口扩张的黄金时期[10-11]。<br><br>从地理上看，东亚与欧亚大陆其他部分隔着高耸的喜马拉雅山脉和青藏高原，早期人类的大规模迁徙不太可能选择横穿青藏高原，更可能通过高原的南北两侧，较容易地进入东亚。所以，人类进入东亚只能有两个入口：南方的横断山区，北方的阿尔泰山区。不同的人种不一定选择同样的道路。现阶段比较一致的看法是，东亚的四个人种中，东亚的高加索人种类型来自西北[10,12]，澳大利亚人和尼格利陀人来自东南[4,10]。最具争议的还是蒙古利亚人来自哪里。早期的人类学家提出三种可能的模式：（1）蒙古利亚人由北向南迁徙，与东南亚和中国南方的尼格利陀和澳大利亚人种混合；（2）蒙古利亚人来自南方；（3）北方人群来自北方，南方人群来自南方，自一万多年前的晚更新世以来，蒙古利亚人在南北方共同进化[13]。要解决这一争议，Y染色体是关键、有力的工具。<br>Y染色体可以分为20种主干单倍群，编号从A到T（P非常罕见，偶见于古代遗骸中），其中M89之下的O-M175和N-M231、M130定义的C-M130、YAP下的D-M174是东亚四个主要单倍群，约占东亚全部男性的93%（图4.1）。其他单倍群，例如M89下的G-M201、H-M69、I-M170、J-P209、L-M20、Q-M242、R-M207和T-M70，以及YAP下的E-SRY4064，仅占东亚男性的7%[12]。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211547630.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图4.1　Y染色体主干单倍群C、D、N和O在欧亚地区的地理分布。颜色越深，表示在人群中所占比例越大。
<br>O-M175是东亚最大的单倍群，约75%的中国人以及超过50%的日本人都可归到这一类型下，因此有理由认为它代表着蒙古利亚人，是蒙古利亚地理种演化过程中漂变形成的单倍群。O-M175分出三个主要的下游单倍群O1a-M119、O2-M268以及O3-M122，这三个单倍群约占东亚男性的60%[14,15]。国际Y染色体命名委员会规定，单倍群的一级编号是固定的，次级编号需要随着谱系树结构的细化而调整，因为发现O1和O2有共同的特有突变而关系更近，所以新的系统中把它们定义为O1a和O1b，把O3改为O2。但是因为长期以来都用O1、O2、O3来分析讨论东亚族群演化历史，所以本书中就沿用原有名称以方便阅读。O1a-M119在中国东南沿海、侗傣族群、台湾原住民、南岛语人群中集中分布[16]。O2-M268在汉族中约占5%以上[14], O2a1-M95是O2下的主要支系，在华南、南方少数民族、中南半岛及印度门哒人群中分布较多[16,17]。O2b-M176是O2下的另一支系，主要集中于朝鲜半岛、朝鲜族和日本弥生系人群，越南人和汉族中也有极少量分布[18,19]。O3-M122是中国最常见的单倍群，遍及整个东亚和东南亚，占汉族50%～60%。O3a1c-002611、O3a2c1-M134和O3a2c1a-M117是O3下的三个主要支系，各占到汉族的12%～17%。O3a2c1a-M117在藏缅族群中也有较多分布。O3下的另一支系O3a2b-M7在苗瑶人群和孟高棉人群中高频出现，但在汉族中不足5%[14,15]。所以，通过观察Y染色体O单倍群各个亚型的分布，可以发现，Y染色体与语系人群明显相关，而且各个语系从Y染色体多样性角度体现出不同的亲疏关系。<br>宿兵等[4]在亚洲大范围群体样本中对包括M119、M95和M122在内的19个Y染色体SNP位点以及3个STR位点进行了检测。在随后的主成分分析中，北方人群紧密聚在一起，且被包含在南方人群的聚类簇之内，南方人群比北方人群多样性高。他们认为，北方人群来自旧石器时代定居南方的南方人群。他们还使用STR位点的一步突变模式和0.18%突变率估算O3-M122这一单倍群的时间为6.0万～1.8万年前，这一时间可能反映的是最初定居东亚的瓶颈时期。2005年，石宏等[15]对东亚多个群体的2000多个O3样本进行了更系统的研究，也发现南方群体中O3-M122的多样性高于北方，支持O3-M122的南方起源。他们进一步使用均方差（ASD）方法和STR的进化突变率（每位点每25年0.000 69）[20,21]估算O3支系北迁的时间为3.0万～2.5万年前。2011年，蔡晓云等[22]对东南亚的孟高棉族群、苗瑶族群中的O3a2b-M7和O3a2c1a-M117进行了系统研究，揭示其在约1.9万年前末次盛冰期经由东南亚进入东亚的单向瓶颈扩散[22]。O3下的另一主要支系O3a1c-002611的STR位点多样性也与其他兄弟支系一样，有着大体上自南向北递减的趋势[23]。总体来看，绝大多数证据都支持Y染色体单倍群O3-M122经由南方路线进入东亚并逐渐向北扩散的观点（图4.2）。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211547200.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图4.2　各类Y染色体单倍群在东亚的迁徙。虚线表示另外可能的迁徙路线。
<br><br>东亚的特征单倍群O-M175的产生时间，由足够多的STR的位点估算下来，很可能不超过3万年，因此单倍群O人群很可能根本不是东亚最早的定居者。单倍群C-M130人群却极可能是最早到达东亚的人群。单倍群C从阿拉伯半岛南部、巴基斯坦、印度、斯里兰卡、东南亚、东亚、大洋洲到美洲都有分布，尤其在远东和大洋洲高频分布，但在撒哈拉以南的非洲没有被发现（图4.1）。C下游的分支，例如C1-M8、C2-M38、C3-M217、C4-M347、C5-M356和C6-P55，都有着区域特异性分布[24]。C3-M217是分布最广的支系，在蒙古和西伯利亚群体中最高频出现。单倍群C1仅在日本人和琉球人中出现，但频率很低，不足5%。单倍群C2出现在从印度尼西亚东部到波利尼西亚的太平洋岛屿人群，尤其是在波利尼西亚的一些群体中，且由于连续的奠基者效应和遗传漂变而成为上述地方的特征单倍群[19,25]。C4几乎仅局限在大洋洲的澳大利亚原住民中。C5在印度及其周边的巴基斯坦和尼泊尔等地低频出现[26,27]。C6则仅出现在新几内亚高地上[28]。单倍群C的分布模式说明了这个单倍群很可能是在亚洲大陆起源，且那时还没到达东南亚。<br>为更清楚地说明单倍群C的源流，钟华等[24]对取自东亚和东南亚140多个群体的465个单倍群C的样本，检测了C内部的12个SNP和8个STR位点。他们发现，C3的STR多样性最高出现在东南亚，且呈自南向北、自东向西递减的趋势，ASD方法估算时间落在距今4.2万～3.2万年间，这表明旧石器时代C3是沿海岸线逐渐向北扩张的（图4.2）。单倍群C很可能在6万年前就已到达东南亚和澳大利亚，比其向北扩散的时间要早得多，这也就是说，单倍群C在蒙古利亚人（单倍群O）到来之前就已在东亚生活了数万年。经过如此长的时间，单倍群C的人群或已与蒙古利亚人有着不同的体质特征。因为现在单倍群C的人群多有着澳大利亚人的体质特征，例如澳大利亚原住民、巴布亚人和一些达罗毗荼人的体质特征，所以我们认为，单倍群C是由具澳大利亚人体质特征的人带来的，他们达到远东的时间要早于其他现代人。北京周口店出土的一万年前的人骨就有着澳大利亚人的体质特点，或也支持澳大利亚人是东亚最早定居者的观点。<br><br>最具神秘色彩的是Y染色体单倍群D的迁徙历史，迄今为止我们仍对此知之甚少。单倍群D是从非洲的DE-M1（YAP插入）单倍群衍生出来的，很可能与矮黑体质的尼格利陀人相关联。单倍群E是D的兄弟支系，E随着大黑人西迁非洲，D则可能由小黑人东迁带到东亚。<br>单倍群D-M174在安达曼尼格利陀人、北部藏缅群体和日本的阿伊努人中高频分布，在其他东亚、东南亚和中亚群体中也有低频分布（图5.1）[17,19,29,30]。D下分D1-M15、D2-M55和D3-P99三个主要支系，还有许多未明确定位的小支系。D1在藏族、羌语支和彝语支人群中广泛分布，在东亚其他群体中也有低频分布[31,32]。D2仅分布于日本，占日本40%以上，是上古绳文人的主要成分。D3在青藏高原东部（康区）、白马人及纳西族等群体中高频分布[31]。D  多在安达曼群岛被发现[30]，且已被隔离了至少2万年。其他一些被包含在D  中的小支系也多分布于西藏周边藏缅语人群、东南亚人群，阿尔泰人中也有少量来源不明的D 。这些D  的内部谱系需要详细调查分析。单倍群D高频人群的肤色大多较深，包括安达曼人、一些藏缅人和孟高棉人等。阿伊努人肤色变白可能是为了吸收更多紫外线以适应高纬度地区生存。<br>对于单倍群D的起源，钱德拉塞卡（A. Chandrasekar）等认为CT-M168在南亚分出了YAP插入和D-M174突变，因为他们在印度东北一些族群中发现有YAP插入，而在安达曼群岛上检测到了M174突变[33]。这样来看，同样带有YAP插入的E单倍群也很可能是亚洲起源，但没有证据进一步支持。如果单倍群D诞生于非洲，那非常有趣的是它是如何随着总单倍群C和F的群体来到东亚的？<br>另一不可思议的是单倍群D是如何由东亚的西南角一路到日本的。它可能通过东亚大陆北上，也可能经由巽他大陆，但穿过东亚大陆似乎更近。石宏等人推论单倍群D北上扩张到中国西部的时间约在6万年前（ASD方法），要早于东亚其他主要支系的迁徙。随后，这一先头部队可能通过北向路线经由朝鲜半岛到达日本列岛，或者通过南向路线经由台湾岛和琉球群岛所形成的大陆桥到达日本列岛，这一过程中他们可能与澳大利亚人相遇过。后来，单倍群O的北上以及新石器时代汉族扩张，单倍群D的主体人群可能就被挤出了中国东部[31]。但是无论是遗传学上还是考古学上，都没有任何证据表明D2或尼格利陀人曾到过中国大陆东部。相反，从马来半岛到波利尼西亚的巽他大陆至今仍有大量的尼格利陀人。尼格利陀人或许在旧石器晚期占据了整个巽他大陆。那么，这些人群可能直接从菲律宾群岛到台湾岛和琉球群岛。唯一难以解释的是在菲律宾群岛的尼格利陀人中从未发现过D的存在，他们的父系或许已在约1.8万年前（BATWING方法）被来自巴布亚岛的C2和K的扩张所取代[34]，当然也可能被非常晚近时期来自东亚大陆的单倍群O所替换[35]。因为相关数据不足，东亚的黑人遗存——单倍群D的源流还远未揭开。<br><br>单倍群O的兄弟支系是单倍群N-M231，单倍群N在欧亚大陆北部，尤其是包括芬兰、乌戈尔、萨摩耶德和尤卡吉尔等分支的乌拉尔语人群，以及阿尔泰语人群和因纽特人中高频分布，它还低频出现在东亚内陆（图4.1）[29,36]。对于单倍群N的详细分析显示，N在东欧的高频分布是缘于很晚近的迁徙，这次迁徙从1.4万～1.2万年前（ASD方法）开始，由内亚/南西伯利亚出发，走一条逆时针的北部路线[36]。N的下游分支N1a-M128低频分布于中国北部一些群体，例如满族、锡伯族、鄂温克族和朝鲜族，以及中亚的一些突厥语族群中。另一分支N1b-P43在北部的萨摩耶德人中广泛分布，也在一些乌拉尔人群和阿尔泰人群中呈低频或中频分布，N1b在1.8万～1.6万年前诞生于西伯利亚[37,38]。频率最高的下游单倍群N1c-Tat，可能在1.4万年前起源于中国西部地区，然后在西伯利亚经历多次瓶颈效应，最后扩散到东欧和北欧[36]。这些研究把单倍群N的起源追溯到中国西南或东南亚。实际上，我们的研究数据显示，N的大量最原始类群存在于汉族群体中，东南亚和北欧的类型分别是从汉族的类型中衍生出来的。单倍群N的人群艰苦跋涉由东亚穿越大陆一直到北欧，谱写了壮丽的迁徙史诗。<br>基因上汉族与乌拉尔语系人群有这么紧密的联系，说明了两个族群历史上一定有亲密接触。目前分析东亚民族起源时期的各个考古遗址中Y染色体分布情况，发现N的扩张源头应该在辽宁西部。辽西在近3万年前就成为细石器文化的一个源头。大约8200年前开始出现精细的玉器，进入最早的新石器时代文化——兴隆洼文化。大约7200年前进入了赵宝沟文化，飞鹿纹等文化特征呈现出非常浓郁的乌拉尔民族特色。大约6400年前，赵宝沟文化被红山文化取代，汉文化的基本要素（龙凤、冠冕、岐黄）都出现在红山文化中。这一系列考古文化中发现的人类遗骸，经过基因检测发现，大多数Y染色体类型是N。说明这里最有可能是乌拉尔族群的发源地。而从红山文化开始，高等级墓地中的人骨检出的都是O3类型，是汉族的主体类型。这说明红山的上层阶级来自华北的磁山文化人群，进入辽西与赵宝沟人群混合以后，开始孕育形成最初的汉族。所以汉族中有乌拉尔族群特色的N单倍群，汉语中也有大量乌拉尔语系同源的词汇。汉语一直被认为是一种混合语，虽然历史上汉语曾经吸收了苗瑶语、侗傣语、阿尔泰语甚至印欧外来语的大量词汇，但是混合语所指的并非这些晚期的混入词汇。汉语与藏缅语分开，其起源上可能就是原始汉藏语与原始乌拉尔语的混合。研究乌拉尔语的学者高晶一发现，汉语中的很多词汇都是双套的，有俗言和雅言两种说法，俗言来自乌拉尔语，雅言来自汉藏语。例如“爷娘”来自乌拉尔语，“父母”来自汉藏语，“家”来自乌拉尔语，“宫”来自汉藏语。这是一个非常重大的发现，很出乎意料。因为乌拉尔语系地理分布上与汉语太远，以往的语言学家研究汉语混合起源时从未想过，直到现在很多语言学家还不敢相信。但是，远古人类迁徙的距离本就是很惊人的，不然人类也不可能从非洲到达南美。2019年，复旦人类学系的张梦翰在《自然》上发表了汉藏语系语言谱系树构建的文章，认为汉语和藏缅语有两次分化，分别大约是距今6000多年和5300年。6000多年前，正是红山文化形成的年代。而5300年前，是红山文化南下、中原的仰韶文化西迁的年代。<br>单倍群N的迁徙史为东亚人群南方起源提供了又一项强有力的证据。然而仍有一些研究在质疑南方起源。卡拉费特（T. M. Karafet）等对来自东亚和中亚地区的25个群体的1300多份样本进行Y染色体分型研究，他们发现各单倍群间的两两差异在东亚南部是非常小的，且东亚南北群体之间并未发现遗传分化[29]。薛雅丽等[39]使用贝叶斯全似然法，分析取自中国、蒙古、韩国和日本的27个群体近1000份样本的Y染色体45个SNP和16个STR位点，发现东亚北方群体的Y染色体的STR多样性要高于南方，北方群体的扩散要早于南方群体[39]。但随后石宏指出，卡拉费特所观察到的北方群体的高多样性应是由近期的人群混合造成的，薛雅丽等的分析结果也存在这一问题，即蒙古族、维吾尔族和满族的基因多样性高，应是他们与西方人群及汉族大规模混合的结果。历史上汉族的南迁，使得中国南方的人群被替换，也降低了中国南方的多样性[40]。另外，薛雅丽等所选取的南方群体代表性不够，长期地理隔离所造成的群体内部的瓶颈效应或对基因多样性的估算有较大影响[31]。<br>后续的争论就集中在如何辨析中亚和欧亚西部人群对东亚的基因贡献。钟华等[13]对117个群体的近4000份样本的Y染色体进行高分辨率的分型判断，以试图阐明这一问题。在钟华等的研究中，单倍群O-M175、C-M130、D-M174和N-M231仍显出了南方路线基因贡献较大。然而，与中亚和欧亚西部相关的单倍群，例如单倍群R-M207和Q-M242，多在东亚西北地区出现，且它们的频率自西向东有递减的趋势。另外，单倍群R-M207和Q-M242的Y染色体STR多样性也提示了北方路线存在的可能性，即可能存在1.8万年前人群由中亚到北亚进行迁徙，以及沿丝绸之路的人群3000年前开始的频繁流动和混合。<br><br>进入东亚的数支现代人约5万年前以来在各地散布开来，在冰期过着原始的狩猎采集生活。约1.2万年前冰期结束，温带动植物开始繁盛，人类食物来源增加，人口大幅增长。增长的人口积累了技术与文化，各地很快发明了农业。一万多年前，中国南方沅江流域、钱塘江流域的人们驯化了水稻，北方桑干河流域的人们驯化了小米。农业给人们带来相对稳定的食物来源，分散的人群向农业核心聚合，在各个区域形成了人群、语言、文化的稳定共同体。所以，早期的民族、语系与考古区系是对应的。<br>汉藏语系起源于桑干河流域的磁山文化及上游大同境内的前体人群，之后南北分化为仰韶文化与红山文化。苗瑶语系起源于湖广地区的高庙文化。南亚语系可能起源于四川盆地。南岛语系起源于江浙早期的马家浜文化。侗傣语系起源于江浙稍晚的良渚文化。芬兰-乌拉尔语系起源于辽西的赵宝沟文化。由于气候变动，人群迁徙，族群之间发生了竞争，造成了融合与外迁。早期外迁的南岛、南亚、古亚、芬乌等族群的文化渐行渐远。而长期在中国内地的汉藏、苗瑶、侗傣、匈羯等族群语言发生大量交融，从周代至汉代，演化出了声调，变成了无需时态语态的分析语<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211549521.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图4.3　第十棵进化树——东亚族群演化。图中数字表示距今万年数。
<br><br>东亚语言间的演化关系，虽然比非洲和西亚要复杂一点，但是比美洲和大洋洲的情况要简单得多，而且东亚的语言学调查和研究做得非常细致。不过，东亚语系划分问题，至今国内外争议颇多，这可能是因为在具体语系划分时没有执行相对统一的标准。两个语言类群分化超过多久可以算作不同语系，这应该有一个相对统一的标准。目前较为一致的看法是：两个语言类群分化超过8000年，其间的相似性就难以判别了，如果超过一万年，可能就完全看不出关系了。8000年这个标准年代，应该是一个很有意义的年代，因为这是新石器时代和农业全面开始的年代。以此为语系划分的标准，也就是说语系是新石器时代人群文化区系集中的结果。那么，不同的语系势必追溯到不同的新石器时代文化区系。反过来说，如果没有独特的新石器文化，语系就没有时空来源。所以语系必定有着承载它的人类群体以及造就它的新石器文化区系。遗传学的人群区分和年代计算、考古学的区系文化比较，在语言学的语系演化的研究中应该起到重要的作用。<br>从遗传学的分析结果，特别是Y染色体精细分型数据来看，东亚的各个语言类群的人群之间的分化年代已经比较清楚了。汉语族和藏缅语族的分化年代大约是5000～6000年，也就是在8000年之内，所以支持汉藏语系的概念。汉语族与乌拉尔语系分化略超过8000年，毫无疑问是不同的语系，即便还有些许同源词。汉藏与苗瑶之间的分化超过1.2万年，就支持把汉藏语系与苗瑶语系分开。而侗傣与前二者的分化年代超过了1.5万年，更加支持其独立的语系地位。后期的语言接触造成的语言相似性应该是被排除在语系划分所考虑的因素之外的。所以历史时期汉藏南迁造成的苗瑶、侗傣与汉藏之间语言的诸多相似性，不能用以支持三者的合并。侗傣与南岛的人群之间仅有大约6000年的分化，其语言间的同源词也比较清晰，按此标准可以作为一个语系，不过两者在类型学上差异过大，是分是合可以进一步讨论。<br>考古文化区系与语系起源的对应关系，也可通过遗传学的古DNA分析来确认。对良渚文化区系的人骨进行DNA检测，检出高频的Y染色体O1单倍群，与侗傣和南岛语的族群高度一致。从5900年前的崧泽文化开始，长江下游的人群开始受到中华文明的影响，这体现在八角星纹等符号的传播上，侗傣族群和南岛族群的祖先可能就此开始分化。南岛族群的祖先或许就是分布于闽粤台的大坌坑文化人群。长江中游的大溪文化区系中检测出了高频的Y染色体O3-M7单倍群，这又与现代的苗瑶族群高度一致。黄河中下游地区有两个文化区系：西边的仰韶和东边的大汶口-龙山。这两个区系的边界在不断地往西推，从最早的河南-山东边界，渐渐到达陕西-河南，最后到达甘肃青海-陕西。仰韶文化退到了藏缅族群的分布区，龙山文化彻底占据中原，融合部分仰韶文化的因素。这可能体现了汉语族和藏缅语族先民早期的冲突和互动。龙山文化是一种大融合的文化，可能是成熟的汉语族先民的文化。从4600年前开始，龙山文化人群在西进的过程中，人口上吸纳了仰韶的居民，文化上与之同化。而拒绝同化的部分仰韶先民只能向西退到甘青地区，成为藏缅语族的人群。造成的效应是，现代的藏缅语族人群和汉族，在语言的多样性上是西高东低，在遗传的多样性上是东高西低。这种相反的结构，只能用前述的过程解释。龙山文化的遗骸检测出高频的Y染色体O3-M122（F11）和O3-M134，与现代汉族的遗传结构吻合。<br>单一学科的研究，必然是片面的。语系起源的问题，也是语系使用者起源的问题，区域文化凝聚和发展的问题，需要语言学、遗传学、考古学共同发力，多角度解析，才能最终看清其全貌。<br><br>对于东亚现存的民族，可以很容易地研究他们的语言和遗传，分析他们的起源和归属。对于古代族群，也可以结合历史学、考古学，从语言学及遗传学的角度进行探索。有些古代族群的记录比较详细，所以容易研究，例如，吐蕃是藏族的祖先，东胡、鲜卑、契丹都属于阿尔泰语族群，与蒙古族关系密切。而对有些族群的研究，困难较大，例如，古代东胡的死敌、汉族曾经最大的威胁匈奴到底是一个什么民族，是谁的祖先，在学术界就争议不休。2019年，在蒙古召开了世界匈奴后裔大会，与会者表示，阿尔泰语系、乌拉尔语系甚至印欧语系的很多民族都有人自称是匈奴后裔。这到底有没有根据？<br><br>匈奴是一个曾在我国北方生活的游牧民族，其统一政权大约兴起于公元前3世纪（战国时期），衰落于公元1世纪（东汉初）。由于匈奴自战国时期至东汉初与中原时有往来，我国古代史料中保留了部分关于匈奴的史料[41]。荤粥、猃狁等名称很可能是匈奴一词的不同音译。根据史料记载，匈奴民族的起源、变迁、灭亡等过程从史前一直持续到南北朝。<br>匈奴的原始祖先很可能是来自漠北的某支北亚蒙古利亚人种的居民，迄今为止发现的是，石板墓文化与匈奴主体民族有着最为接近的血缘关系[41]。在蒙古草原，目前所知规模最大、时代最早的匈奴墓是在呼尼河谷发现的[41]。呼尼河（Khunui-göl）（或译为呼奴伊河），即为“匈奴河”，疑即《汉书·西域传》提到的“匈河水”。呼尼河畔是早期匈奴统治集团的中心所在，这里最有可能是匈奴人的原始故乡[42]。阴山南北农牧交错地带是“匈奴原始人群”向“匈奴民族”过渡的重要转折点[42]。匈奴王朝的发祥地在内蒙古河套及大青山一带，匈奴第一个单于头曼单于的驻牧中心及以他为首的匈奴部落联盟的政治统治中心在五原郡稒阳县（今内蒙古包头市东）[41]。至头曼单于之子冒顿单于时期，匈奴灭东胡，征西嗕，西击月氏，南并楼烦、白羊河南王，北服浑庾、丁令、坚昆、薪犁，西北平定楼兰、乌孙、呼揭，南西伯利亚至阿尔泰山的乌兰固木、塔加尔、巴泽雷克地区均在这一时期为匈奴征服，最后形成了冒顿单于时期的匈奴疆域[41,42]。这是匈奴最强盛的时期，其势力东至辽河，西及葱岭，北抵贝加尔湖，南达长城[42]。<br>之后，匈奴与中原时战时和。西汉武帝时期，匈奴因战败远撤王廷，迁至漠北[41]。时至东汉，匈奴因内乱分化为南北匈奴两部分，南匈奴内附于汉，北匈奴则自公元91年后，向西逃遁，开始西迁[43]。<br>北单于逃亡后，漠北出现了混乱局面[42]：北单于弟左谷蠡王於除鞬退至蒲类海（巴里坤湖），归附汉朝；北单于远走乌孙，后至康居（今中亚哈萨克斯坦东南部）；残留漠北的群体后来加入鲜卑，鲜卑中的宇文部，就由加入鲜卑的匈奴部落中的宇文部落演变而来；还有一部分始终留在漠北西北角，至公元4世纪末5世纪初，力量还相当强大，直至柔然兴起才被吞并。<br>北单于一支远走乌孙、康居，灭阿兰聊国（奄蔡），后不见于我国史料记载。目前发现的匈奴遗存从西汉时期开始，自东向西，沿巴里坤—吐鲁番—和静—哈萨克斯坦分布，越往西，年代越晚，因此可以将这条路线推测为匈奴人西迁的路线[41]。之后西方史料中出现一支匈人，在阿提拉时代（约公元5世纪中叶）于多瑙河东平原（今匈牙利境内）建立王廷，称为匈人王国，但尚未确定匈人与匈奴的关系。<br>在汉代内迁后的南匈奴，在魏晋南北朝时期建立了多个政权。公元304～329年，南匈奴与屠各胡在山西和陕西建立了汉（前赵）政权。公元401～460年，临松卢水胡在今甘肃河西走廊建立北凉政权。还有一支铁弗匈奴，是北匈奴残部与拓跋鲜卑的混合，匈奴父鲜卑母。五胡十六国时期，铁弗改称赫连氏，在统万城（今陕西榆林市西）建立了大夏政权（407～431年）。<br><br>从语言学方面分析，根据文献资料，《史记》《汉书》中有西汉时期大约190个可能的匈奴语词，《后汉书》中有57个，《晋书》中有31个。通过以上材料，各家学者都提出了各自不同的看法。早期人们认为，匈奴语同斯拉夫语或芬兰-乌戈尔语接近[44]。目前在西方占统治地位的观点是，匈奴语可能与阿尔泰语系突厥语有关。还有学者认为，匈奴语与其他阿尔泰语、伊朗语或者叶尼塞语有关[45,46]。也有学者从匈奴的考古学与人种学角度探索匈奴语言的属性，认为外贝加尔的匈奴主体在语言上更加接近蒙古语，而中亚的匈奴语虽以蒙古语为主，但是夹杂着突厥语的混合语言[47]。白鸟库吉从语源学和音韵学研究出发，考察了17个文献记录中的匈奴词汇，并与阿尔泰语系比较，发现其中存于蒙古语者二，突厥语者二，通古斯语者三，突厥语和蒙古语共通者一，蒙古语和通古斯语共通者四，蒙古语、突厥语和通古斯语共通者五[48]。方壮猷考释了21个匈奴名号，与今土耳其语近似的有11个，与今通古斯语近似的有12个，与今蒙古语相似的有20个[49]。<br>通过将匈奴语的音韵特点、语词与其他邻近语言进行比较，可以得出以下结论[50]：<br>
<br>
匈奴语中声母r和l以及复辅音声母出现的证据，证明匈奴语最不可能是阿尔泰语。

<br>
匈奴语与任何一种已知的突厥语或蒙古语都不像。虽然某些匈奴名词（以及表“天”“酸奶”“马乳酒”意义的词）能在后来的蒙古语、突厥语或这两种语言中找到痕迹，但这是因为，继匈奴人之后，蒙古人和突厥人主宰中亚草原东部，从而继承了匈奴文化和政治组织形式的一些要素，相应的名称也就继承下来了。

<br>
一些意思已知或可推测的词语，可以同叶尼塞语中在意义上接近甚至相同的词语密切对应，如“儿子”“乳”“石”，它们不大可能是叶尼塞语中的借词。

<br>
叶尼塞语系的人群可能是匈奴的后裔，是匈奴帝国解体后迁到西伯利亚的，匈奴人一部先迁入北阿富汗和西土耳其斯坦，后又进入叶尼塞河流域[51]。

<br>综上所述，匈奴语与叶尼塞语之间关系似乎更密切。<br><br>在遗传学上，种族之间有着明显的差异性遗传标记，而民族之间也可以用一些遗传标记进行辨认区别。目前用于民族和种族分析的最佳遗传标记是Y染色体分型。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211551455.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
表4.1　匈奴遗骸的古DNA分析
<br>从目前的4项研究中看，匈奴人的Y染色体出现了4个类群Q、C、N、R, Q型是自始至终出现最多的类型，其他类型只是偶发。在现代人群中，R广泛分布于中亚、东欧乃至南欧的各个民族中。N集中分布于乌拉尔语系人群中，在北亚和东亚各民族中也有零星发现。C集中分布在蒙古和通古斯民族中。Q是美洲印第安人的主流类型，在北亚也零星出现，但是邻近的叶尼塞语系凯特人的Q比例占到94%[52]。可以推断，北亚地区各语系的人群中，只有叶尼塞语系人群是以Q为主流的，与匈奴数据一致。<br><br>如前文所述，匈奴人与叶尼塞语系人群在语言学及遗传学上都有一定联系。考古发掘也支持类似观点，在南西伯利亚叶尼塞河流域的考古发掘中，发现了3处公元前2世纪至公元1世纪的遗存（表4.2）[53,54]：<br><br>
表4.2　公元前2世纪至公元1世纪的遗存
<br>可以推测，叶尼塞语系人群很有可能是匈奴人向北迁徙的后代。但具体来自哪一支匈奴人，还需要深入研究。两个存在Q型的匈奴墓葬在对应时间的文献中，都没有发现匈奴人向叶尼塞河流域迁徙的记录。有较大可能的是迁往巴里坤湖的一支，他们属于Q型，并且地理位置与叶尼塞河流域比较接近，但需要确定样本年代后才能有较为可靠的结论。遗留漠北的一支匈奴人，在地理位置上也与叶尼塞河流域较为接近，并且最后不知所终，他们也有可能是凯特人的起源，但目前没有遗传学上的证据。迁往乌孙一支的精壮部分都向康居迁徙，后继续向西灭阿兰聊，留在乌孙的皆是羸弱人员，要继续向叶尼塞河流域迁徙的可能性较小，并且也没有遗传学的证据。因此要获得确切的结论，还有待更多的遗传学证据及考古遗址的佐证。无论如何，把蒙古语或突厥语的族群当作匈奴的后裔，是完全没有根据的。<br>匈牙利的国名与匈奴接近，与历史上的匈人有关，但学术界从不认为匈牙利人与匈奴有关。现代匈牙利语属于乌拉尔语系，匈牙利人中也很难找到匈奴的Q型Y染色体。但是，最近的古匈牙利人DNA研究让问题峰回路转[55,56]：关键的古匈牙利人的Y染色体居然是匈奴典型的Q型的。相信随着新发现不断出现，终有一天能解开匈奴后裔之谜。<br><br>Y染色体在解析东亚现代人源流史中起到了重要作用。尽管许多问题仍有待探索，但史前迁徙过程的基本框架已经明晰了。占东亚男性90%以上的C、D、N和O这四个单倍群很可能起源于东南亚，随澳大利亚人、尼格利陀人和蒙古利亚人这三种不同体质特征的现代人经历了三次大的迁徙浪潮。欧亚中西部特征Y染色体单倍群E、G、H、I、J、L、Q、R和T在中国西北的分布模式反映出来自西方的近期基因交流和可能的北部路线的影响，这些单倍群自西向东递减的趋势也可以被清晰地观察到。<br>然而，现阶段东亚的Y染色体研究遇到了两个瓶颈。一是东亚特异单倍群O-M175的解析度太低。虽然，单倍群O人口众多，但O下的位点却比R和E都少。例如，002611、M134和M117这三个位点代表了东亚近2.6亿人，但没有更下游的位点可以用来更精细地解析这些群体的遗传结构。另一个瓶颈是支系和群体分化时间的估算。现在绝大部分的时间估算用的是Y染色体的STR位点，尽管这在理论上说得通，但对于以STR估算时间哪种方式最恰当还一直有争议。尤其值得提出的是，这里有两种经常用到的Y染色体STR突变率，即进化突变率[20,21]和家系突变率[57]，如何选用这两种突变率争议很大，因为两者估算出的时间甚至可相差3倍。而且STR位点的相似性及多变性也使得时间估算的准确度大打折扣。因此，上文提到一些时间点也仅仅是作为某些单倍群或人群分化的粗略参考。<br>随着DNA二代测序技术的不断发展，全测序大样本量和深度测序家系的Y染色体成为可能。例如，千人基因组计划在其低覆盖项目中，已经以1.83的平均深度测序了77个男性的Y染色体，以15.23的深度测序了两个连续三代的男性家系[58]。更进一步的深度测序将既可以细化Y染色体谱系树，又可以为进化研究提供较精确的生物钟校准。<br><br>
<br>
Cavalli-Sforza L L. The Chinese human genome diversity project[J]. Proceedings of the National Academy of Sciences of the United States of America,1998,95（20）:11501-11503.

<br>
Jobling M A, Tyler-Smith C. Father and sons: the Y chromosome and human evolution. Trends Genet,1995,11（11）:449-456.

<br>
Underhill P A, Shen P, Lin A A, et al. Y chromosome sequence variation and the history of human populations[J]. Nature Genetics,2000,26（3）:358-361.

<br>
Su B, Xiao J, Underhill P. Y-chromosome evidence for a northward migration of modern human into Eastern Asia during the last ice age. American Journal of Human Genetics,1999,65（6）:1718-1724.

<br>
Ke Y, Su B, Song X. rican origin of modern humans in East Asia: a tale of 12 000 Y chromosomes[J]. Science,2001,292（5519）:1151-1153.

<br>
Green R E, Krause J, Briggs A W, et al. A draft sequence of the Neandertal genome[J]. Science,2010,328（5979）:710-722.

<br>
Reich D, Green R E, Kircher M, et al. Genetic history of an archaic hominin group from Denisova Cave in Siberia[J]. Nature,2010,468（7327）:1053-1060.

<br>
Wang C C, Farina S E, Li H, et al. Neanderthal DNA and modern human origins [J]. Quaternary International,2013:126-129.

<br>
Shi Y F, Cui Z J, Li J J. Quaternary Glacier in Eastern China and the Climate Fluctuation[M]. Beijing: Science Press,1989.

<br>
Jobling M A, Hurles M, Tyler-Smith C. Human Evolutionary Genetics:Origins, Peoples and Disease[M]. New York: Garland Science,2004.

<br>
Clark P U, Dyke A S, Shakun J D, et al. The Last Glacial Maximum[J]. Science,2009,325（2941）:710-714.

<br>
Zhong H, Shi H, Qi X B, et al. Extended Y Chromosome investigation suggests postglacial migrations of modern humans into East Asia via the Northern Route[J]. Molecular Biology and Evolution,2011,28（1）:717-727.

<br>
Piazza A. Towards a genetic history of China[J]. Nature, 1998, 395（6703）:636-637,639.

<br>
Yan S, Wang C C, Li H, et al. An updated tree of Y-chromosome Haplogroup O and revised phylogenetic positions of mutations P164 and PK4[J]. European Journal of Human Genetics,19（9）:1013-1015.

<br>
Shi H, Dong Y, Wen B, et al. Y-Chromosome evidence of southern origin of the East Asian: specific haplogroup O3-M122[J]. American Journal of Human Genetics, 2005,77（3）:408-419.

<br>
Kayser M, Choi Y, Van Oven M, et al. The impact of the Austronesian expansion: evidence from mtDNA and Y-chromosome diversity in the Admiralty Islands of Melanesia[J]. Molecular Biology and Evolution,2008,25（7）:1362-1374.

<br>
Su B, Jin L, Underhill P A, et al. Polynesian origins: insights from the Y chromosome[J]. Proceedings of the National Academy of Sciences of the United States of America,2000,97（15）:8225-8228.

<br>
Ding Q L, Wang C C, Farina S E, et al. Mapping human genetic diversity on the Japanese Archipelago[J]. Advances in Anthropology,2011,01（2）:19-25.

<br>
Hammer M F, Karafet T M, Park H, et al. Dual origins of the Japanese: common ground for hunter-gatherer and farmer Y chromosomes[J]. Journal of Human Genetics, 2006,51（1）:47-58.

<br>
Zhivotovsky L A. Estimating divergence time with theuse of microsatellite genetic distances: impacts of populationgrowth and gene flow[J]. Molecular Biology and Evolution,2001,18（5）:700-709.

<br>
Zhivotovsky L A, Underhill P A, Cinnioglu C, et al. The effective mutationrate at˘Y chromosome short tandem repeats, with applicationto human population-divergence time[J]. American Journal of Human Genetics,2004,74:50-61.

<br>
Cai X, Qin Z, Wen B, et al. Human migration through bottlenecks from Southeast Asia into East Asia during Last Glacial Maximum revealed by Y Chromosomes[J]. PLOS ONE,2011,6（8）: e24282.

<br>
Wang C C, Yan S, Qin Z D, et al. Late Neolithic expansion of ancient Chinese revealed by Y chromosome haplogroup O3a1c-002611[J]. Journal of Systematics and Evolution,2013,51（3）:280-286.

<br>
Zhong H, Shi H, Qi X B, et al. Global distribution of Y-chromosome haplogroup C reveals the prehistoric migration routes of African exodus and early settlement in East Asia[J]. Journal of Human Genetics,2010,55（7）:428-435.

<br>
Kayser M, Brauer S, Cordaux R, et al. Melanesian and Asian origins of Polynesians: mtDNA and Y chromosome gradients across the Pacific[J]. Molecular Biology and Evolution,2006,23（11）:2234-2244.

<br>
Sengupta S, Zhivotovsky L A, King R, et al. Polarity and temporality of high-resolution Y-chromosome distributions in India identify both indigenous and exogenous expansions and reveal minor genetic influence of Central Asian pastoralists[J]. American Journal of Human Genetics,2006,78（2）:202-221.

<br>
Gayden T, Cadenas A M, Regueiro M, et al. The Himalayas as a directional barrier to gene flow[J]. American Journal of Human Genetics,2007,80（5）:884-894.

<br>
Karafet T M, Mendez F L, Meilerman M B, et al. New binary polymorphisms reshape and increase resolution of the human Y chromosomal haplogroup tree[J]. Genome Research,2008,18（5）:830-838.

<br>
Karafet T M, Xu L, Du R, et al. Paternal population history of East Asia: sources, patterns, and microevolutionary processes[J]. American Journal of Human Genetics, 2001,69（3）:615-628.

<br>
Thangaraj K, Singh L, Reddy A G, et al. Genetic affinities of the Andaman Islanders, a vanishing human population[J]. Current Biology,2003,13（2）:86-93.

<br>
Shi H, Zhong H, Peng Y, et al. Y chromosome evidence of earliest modern human settlement in East Asia and multiple origins of Tibetan and Japanese populations [J]. BMC Biology,2008,6（1）:45.

<br>
Wen B, Xie X, Gao S, et al. Analyses of genetic structure of Tibeto-Burman populations reveals sex-biased admixture in southern Tibeto-Burmans[J]. American Journal of Human Genetics,2004,74（5）:856-865.

<br>
Chandrasekar A, Saheb S Y, Gangopadyaya P, et al. YAP insertion signature in South Asia[J]. Annals of Human Biology,2007,34（5）:582-586.

<br>
Delfin F C, Salvador J M, Calacal G C, et al. The Y-chromosome landscape of the Philippines: extensive heterogeneity and varying genetic affinities of Negrito and non-Negrito groups[J]. European Journal of Human Genetics,2011,19（2）:224-230.

<br>
Scholes C, Siddle K, Ducourneau A, et al. Genetic diversity and evidence for population admixture in Batak Negritos from Palawan[J]. American Journal of Physical Anthropology,2011,146（1）:62-72.

<br>
Rootsi S, Zhivotovsky L A, Baldovic M, et al. A counter-clockwise northern route of the Y-chromosome haplogroup N from Southeast Asia towards Europe[J]. European Journal of Human Genetics,2007,15（2）:204-211.

<br>
Derenko M V, Malyarchuk B A, Denisova G A, et al. Y-chromosome haplogroup N dispersals from south Siberia to Europe[J]. Journal of Human Genetics,2007,52（9）:763-770.

<br>
Mirabal S, Regueiro M, Cadenas A M, et al. Y-Chromosome distribution within the geo-linguistic landscape of northwestern Russia[J]. European Journal of Human Genetics,2009,17（10）:1260-1273.

<br>
Xue Y, Zerjal T, Bao W, et al. Male Demography in East Asia: a North-South contrast in human population expansion times[J]. Genetics,2006,172（4）:2431-2439.

<br>
Wen B, Li H, Lu D, et al. Genetic evidence supports demic diffusion of Han culture[J]. Nature,2004,431（7006）:302-305.

<br>
马利清．原匈奴、匈奴历史与文化的考古学探索[M]．呼和浩特：内蒙古大学出版社，2005.

<br>
林幹．匈奴史[M]．呼和浩特：内蒙古人民出版社，2007.

<br>
泽田动．匈奴：古代游牧国家的兴亡[M]．王庆宪，丛晓明，译．呼和浩特：内蒙古人民出版社，2010:174-175,190.

<br>
陈立柱．三十年间国内匈奴族源研究评议[J]．学术界，2001, （9）:53-71.

<br>
Bailey H W（1985）Indo-Scythian Studies: Being Khotanese Texts, Ⅶ[M]. Cambridge: Cambridge University Press,1985:25-41.

<br>
Vovin A. Did the Xiong-nu speak a Yeniseian language[J]? Central Asiatic Journal,2000,44（1）:87-104.

<br>
李法军．匈奴的语言属性：来自考古学与人种学的线索[J]．青海民族研究，2007, （4）:20-25.

<br>
白鸟库吉．匈奴民族考[M]．何健民，译//林幹．匈奴史论文选．北京：中华书局，1983:184-216.

<br>
方壮猷．匈奴语言考[J]．国学季刊，1930,2（4）:693-740.

<br>
蒲立本．上古汉语的辅音系统·附录·匈奴语[M]．北京：中华书局，1999:163-167.

<br>
王士元．汉语的祖先[M]．李葆嘉，主译．北京：中华书局，2005:508-509.

<br>
Zhao Y B, Li H J, Cai D W, et al. Ancient DNA from nomads in 2500-year-old archeological sites of Pengyang, China[J]. Journal of Human Genetics, 2010, 55（4）:215-218.

<br>
艾尔迪 M．摩尼教、景教和禽鸟服人与叶尼塞河谷岩画中匈人铜釜的关系[J]．欧亚研究，1996, （68）:45-95.

<br>
艾尔迪M．从北方蛮人（公元前8世纪）和匈奴墓葬看古代匈牙利人的丧葬习俗[M]．贾衣肯，译．西北民族研究，2002,34:29-47.

<br>
Neparáczki E, Maróti Z, Kalmár T, et al. Mitogenomic data indicate admixture components of Central-Inner Asian and Srubnaya origin in the conquering Hungarians [J]. PLoS ONE,2018,13（10）: e0205920.

<br>
Neparáczki E, Maróti Z, Kalmár T, et al. Y-chromosome haplogroups from Hun, Avar and conquering Hungarian period nomadic people of the Carpathian Basin[J]. Scientific Reports,2019,9:16569.

<br>
Gusmão L, Sánchez-Diz P, Calafell F, et al. Mutation rates at Y chromosome specific microsatellites[J]. Human Mutation,2005,26（6）:520-528.

<br>
Altshuler D, Durbin R, Abecasis G R, et al. A map of human genome variation from population-scale sequencing[J]. Nature,2010,467（7319）:1061-1073.

]]></description><link>书籍\人类起源与迁徙之谜（第四章）.html</link><guid isPermaLink="false">书籍/人类起源与迁徙之谜（第四章）.md</guid><pubDate>Mon, 21 Oct 2024 08:08:21 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211547630.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211547630.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[三皇五帝：用基因拨开早期历史的迷雾]]></title><description><![CDATA[ 
 <br><br>DNA 可以研究人类的起源，可以分析族群的演化，那都是数千年甚至数百万年尺度的历史。实际上有文字记载之前的历史叫作自然史、史前史，不是严格意义上的历史。但是，如将 DNA 工具的精度提升到足够高的程度，比如提升到百年级的精度，就可以分析更近的历史时期的群体关系或家族历史。把两个时空相距遥远的群体或者个体，用 DNA 的纽带连接在一起，就可以揭秘一段尘封的历史。所以今天研究历史，必须用学科融合的手段。从遗传学、历史学、社会文化的角度去发现证据。历史人类学就是通过基因考古获得实证，以验证文本的方式讲述历史故事。研究历史，有的时候关键是家族史、血缘史。我们能通过染色体谱系树揭示人类起源过程，能从基因看人类走出非洲的足迹，并进而探究农业起源与民族的聚合形成过程，以及中华民族融合统一的历史。<br><br>我们一直说“实践是检验真理的唯一标准”，但是在某些学术领域，有人依然不从实践出发，用理论否定实践，用权威观点否定证据。判断观点正确与否，看的是证据，在客观证据面前，主观的观点又有什么用？只要与证据不符合的，就不应相信，不管是谁讲的。大师讲的就是真理吗？不一定。“吾爱吾师，吾更爱真理。”在证据和权威之间选择什么，这在文科和理科之间往往存在思维差异。这些差异，实际上是由学科本身的方法论造成的，而我们现在提倡的学科交叉融合的理念，就是要通过思维互补解决这种方法论上存在的根本性缺陷。复旦大学提倡通识教育，文科的学生要多学点理科的东西，理科的学生要多学点文科的东西。这样，文理科学生都会视野更加宽广，积淀更加深厚。这就是复旦大学通识教育的目标：有一颗理科的机芯，但是有文科的情怀；达到博学，方能笃志，能切问，方能近思。<br>我们今天研究历史，不是单纯从文本资料中去复原历史，而是用学科交叉的手段，从各种各样的材料中去寻找证据。这些证据至少来自三个领域。复旦大学文科资深教授姚大力先生提出，研究历史学要有三个窗口（即三个领域）：遗传学的从基因角度研究的窗口；考古学的从化石、文物角度研究的窗口；从社会学、语言文化的角度研究的窗口。历史是复杂的，有多个维度的问题需要解决。<br>要解决两个个体之间有什么关系、群体之间有什么关系，可以通过基因来分析。父子之间是不是亲子关系，做一下基因检测就知道了。如果去查他们的族谱，或者是用社会学的方法，在村子里发问卷，问多少人同意他们是父子，那就是笑话了。也不可能根据孩子长得像不像父亲来判断是不是亲生父子，这种做法也是笑话。亲子鉴定，肯定是要以基因检测的结果作为证据。<br>研究历史要落到问题的实处，解决时空的问题。遗传关系的问题是时间问题，两个人之间距离多少年、多少代。此外还有空间问题，即这个家族从哪里迁到哪里，在哪里落过脚，迁徙过程中走过哪些路径。这是要通过考古学解决的。但是知道了这些，还没解决所有问题，我们还要问一问为什么。这些家庭、这些族群为什么迁徙？这个为什么的问题有的时候就很复杂了，只从基因角度研究不能解决。基因研究只是告诉你，不同群体间有没有关系。全世界的人，当然也包括中国人，都是从非洲走出来的，这从基因就能看清楚了。但要知道从非洲什么地方走出来的，就只能看化石了。考古结果发现现代人走出非洲后，在西班牙没有留下化石痕迹，只有以色列有。所以现代人最可能是通过埃及—以色列一线走出来的。<br>早期过狩猎-采集生活的现代人为什么走出非洲？非洲到处有兽群，角马、斑马等大兽群在东非草原上奔跑着，而在亚洲打猎，要跑很远才能碰到野兽。在非洲狩猎一般不会被饿死！那人为什么要往非洲之外走呢？这里就有很多社会心理学的、宗教的，或者是早期自然环境变迁的影响，要将这些学科综合在一起研究才能解决人类历史的问题。特别是人类社会有了文化以后，宗教变得尤为重要。我们发现，有些迁徙事件难以理解，比如乌拉尔语系的人群的迁徙。现在芬兰人、爱沙尼亚人都是乌拉尔人，还有很多分布于欧亚大陆北冰洋沿岸以及乌拉尔山区的民族，从瑞典的拉普人到乌拉尔东部的萨摩耶人，还有西伯利亚东北角的尤卡吉尔人，都是乌拉尔人。他们的基因和汉族的基因非常接近，Y 染色体类型是汉族部分类型中分化出来的一个小分支。从历史语言学角度研究发现，乌拉尔语系，例如芬兰语，很多字词的韵母和汉语的对应关系非常明确[1,2]。汉语里读“分”的，在芬兰语里叫“pala”，汉语读“鲲”的，他们读“kala”，存在成系列的对应关系。他们为什么从中国跑到环境严酷的北冰洋沿岸？我们研究发现，极可能是宗教原因。北欧神话体系非常完备，他们的主神是住在北极的天神奥丁。天神必须住在众星环绕的地方，那就是北极，所以他们一路向北到了那里。信仰天神是大多数民族早期的自然信仰，但是北欧的天神体系与中国上古体系相似度特别高。不过经过几千年的历史变迁，天神信仰在中国已经几乎完全改变了，而乌拉尔人群的这一信仰变化没这么大，所以类似中国早期的这些神灵节日他们还在过。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211555873.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.1　驼鹿在中国上古神话体系和中亚草原信仰体系中都具有重要地位。
<br><br>历史问题非常有趣，但是历史越久越模糊，研究的难度越大。为了提高研究的精度，必须不断发展研究方法。而我们的研究方法叫历史人类学。2016年12月，《科学》专门做了一个关于我的长篇报道，报道了我的研究成果、研究经历，还把我的大照片贴在《科学》上面。因为编辑认为我们的研究开创了新的领域，解决了以前不能解决的问题。这个新的学科领域就叫作历史人类学。历史人类学有新的研究范式，跟传统的历史学、人类学都不一样。<br>传统的历史学是从文本出发的。历史学系的老师对文本文献很熟，往往能发现不同文献里讲述同一个历史事件是不一样的。到底哪个文本的讲法是对的，如何分辨？历史学的办法，就是通过分析事件的历史逻辑来判断哪个可信度大。但是这种逻辑的可靠性并非绝对，有时是有出错风险的，因为有些人做事情就是不合逻辑的，而且历史有太多巧合，所以传统历史学的研究很多是依赖于权威学者主观判断的水准。一个年轻人刚入行，看了几本零星的书，他依据的材料少，判断力就差些。一些老学者看过许多别人没有看过的资料，他依据的材料丰富，总结的规律可靠，判断能力就强，或者说他的思维水平就高。这就是为什么文科生要信老师，要信任学术界的权威。但是即使是权威，他对事件判断的准确度又能够达到百分之多少呢？传统的历史学研究精度很难量化。真的量化的话，我觉得不一定达到80%。但是对于理科研究来说，95%的准确度也可能不够，因为还有5%可能是不对的！对数据分析而言，显著性要求是95%以上，但这还不一定满足所有研究的需求，有些研究要求99%，甚至99.999%的可靠性，因为其中的出错风险是不能容忍的，例如法医学的一些研究就属于这类情况。所以自然科学的研究在精度上占有优势。<br>但是传统的自然科学，例如人类学研究，在范式上也有问题。特别是这些研究在语境上太生硬了，描述的语言经常是一段密码，大众听不懂。比如说，你的基因型是 O3α型，这种型上面的 M117位点有突变，然后怎么怎么变异，说明你来自数千年前的某个考古文化。作为一名没有专业背景的读者，听得懂吗？所以说这种描述脱离了常用语境，虽然试图讲历史，但是没有真正讲明白，没有解决历史学的问题。传统的人类学创造了一堆生硬的新名词，比如说把人分成东亚人种、南亚人种、北亚人种，然后这个北亚人种是数万年前开始混合形成的，多少万年前后有竞争。这些东西一般人听着很陌生，北亚人种是什么，怎么从民族分辨谁是北亚人种？不知道！这些都不是历史传统的语境。<br>考古学也是一样。一般把考古学划为文科，但实际上考古学更像是工科。工科最典型的建筑学是造房子，造房子往上造，而考古学是往下挖，还要求挖得规规矩矩，技术要求很严格，每个地层都要分得很清楚，还要画图纸，这完全是工科的事情。至于挖出来东西是什么，解决什么历史问题，这不是工科要解决的问题。所以有些考古学家非常反对用考古材料研究历史，认为做好工科事情就行了，文科的问题交给文科去解决。其实考古学的传统，特别是史前考古，也遇到了跟人类学一样的问题，就是没有在传统语境中研究问题。一个考古文化挖出来以后，很难分析这个考古文化跟其他考古文化有什么关系，也很少考虑这是不是一个大类型中的小类型。研究者往往就根据发现地的村子的名字，或者小镇的地名，给这个文化命名。比如仰韶文化，是在河南仰韶村发现的。这个文化经历了几千年，影响了中原很大范围，还涉及周边地区，甚至到了甘肃最西北的地方。那些地方都曾经发现有与仰韶文化类似的文化类型。那么长的一个时期，那么大的一个地理范围，仰韶文化人群应该是一个很大的族群，他们生活的时期甚至可能是一个朝代。他们是什么族群，他们到底是哪个朝代的，他们的首领是谁，这些问题考古学都没有回答，而是简单地用一个小村子的名字命名，来称其为仰韶文化，回避了所有历史问题。这个新命名的名词脱离了传统的轨迹，没有解决问题反而制造了问题。这种回避大传统的考古学的命名表达，还使得考古学的博物馆展览的展品介绍实质上是与观众认知隔离的。观众在博物馆看到了“马家窑文化彩陶双耳罐”，双耳罐，没有质的信息传递，谁看不出它是两个耳朵啊？彩陶也很清楚，它是用彩色颜料画的，黑一条，红一条，都知道那是彩陶。这个标签提供的唯一信息就是马家窑文化，而那是不够的，因为非考古专业人员不懂马家窑文化是什么。但是，假如我告诉观众，马家窑文化是轩辕黄帝把炎帝的领袖地位取代了以后，炎帝部族逃到西边甘肃形成的炎帝族群的文化，那观众就很容易明白了。这样的描述才是历史语境下的历史表述，而不是在考古专业内的磋磨，当然这需要更多交叉学科的掺入。所以说，我们的考古学的方法，一开始就存在某些先天缺陷。分区、断代、命名的非科学化，把历史信息碎片化了，而碎片化的信息往往是无用的，反而给科学规律发现带来障碍。<br>佛教有“所知障”的说法，但并不是说知识越多越不好。知识多，还需要串起来，博学之后还要切问还要近思，还要把知识全部穿成一条线。我们追求的是道，是规律，不是求零碎的知识。所以《道德经》提倡“为学日益，为道日损”。学问要不断积累增益，才可能归纳出“道”来。而“道”就是“要放弃多余”，要简化，再简化。“大道至简”，科学的规律一定是最精简的，人类进化的规律也一定是符合生物进化的大规律的，而不是特立独行的特殊规律。<br>历史人类学与人类学不同，前者是从文本出发的，以传统的历史记忆为研究材料，讲述的可能还是大家听过的历史故事。通过基因、考古等科学获得的实证，可以把历史上发生过的事研究得相对客观、正确。<br>历史人类学研究历史，最关键的就是实证，而取得实证的关键就是基因。我们要把很多考古问题、历史问题转化为遗传学问题，用基因去解决。曾经有人认为，用基因研究出来的东西也不可靠，例如一些基因分析研究发现这个群体和那个群体近，另一些研究却发现这个群体和另外一个群体近，遗传学研究自己都矛盾。其实这是因为基因太复杂了，并不是随便研究什么基因都能用于解决历史学问题的。<br>人类基因组有23对染色体，还有一个线粒体，总共有约30亿碱基对。这个庞大的基因组有80%跟老鼠是一样的，有98%跟猩猩是一样的。人类基因组里面并不是所有的 DNA 片段都有明确功能，不同片段的重要程度因为功能差异而不同。有的 DNA 片段完全不能变，比如，决定你长两个眼睛一个鼻子的片段跟老鼠的是一样的，如果拿这种片段去研究人与人之间的关系，那就一点解析度都没有。有的片段可以变化，在人与人之间有差异，但是它决定了你是不是抗冻，这类 DNA 片段或基因更多是因适应不同的地理环境而变化，拿来研究人与人之间的关系、研究历史也没有用。在广东人群中，这个基因都是一样的不抗冻类型，和属于哪个民族没有关系；在北方长城以北，人群中这个基因又是完全一样的抗冻类型。这个基因变体的分布是对应于纬度、温度的，完全是适应气候的，能解析的是地理信息，不是历史信息。这类基因非常多，如果用这类基因作一个分析，就会发现，中国人是有南北差异的，且以长江为分界线。人类遗传学的一些早期论文确实结论都是这样。中国人分南北人群，长江以南是南方人群，以北是北方人群，这是一个重要的发现，但是对于历史研究意义并不大。那么研究历史，要选择什么类型的基因片段呢？答案就是，这些基因片段不能受环境的影响，而是直接跟族群迁徙的历史完全对应起来，这样才能解决历史问题。实际上，基因组中大部分没有具体功能的 DNA 片段正符合我们历史研究的要求，因为它们没有具体功能，所以不受环境选择的影响，其中的变异完全被保留，忠实记录了历史分化的程度。另外，历史研究还需要这些片段以很长的区段整段地传下来，稳定地积累一系列的突变，这样才能形成足够长的“段落”，足以通过比较“文本”区分各种个体、家族和群体差异。<br>人类的历史，有的时候关键是家族史。历史的走向往往取决于一个关键人物，或者一个核心家族的兴衰。往往皇家的兴衰就是一个国家的兴衰。拿什么基因片段来研究家族的历史呢？这可就要根据基因片段的遗传模式来决定了。第二章提到，基因组里不同染色体的传递模式是不一样的。大部分染色体是常染色体，常染色体是双系遗传的，每个人的每种常染色体都有一对，一条来自父亲，一条来自母亲。常染色体传给下一代的时候会进行重组。传到最后，常染色体就成为一个极其复杂的历史组合，汇聚了所有祖先的信息。如果研究常染色体，每往上追溯一代，常染色体的贡献祖先就增加一倍。父母一辈两个人，祖父母一辈四个人，曾祖父母一辈就是八个人……如此无限地散发开来。到了一定的历史时期，所有的人都是你的祖先，因为你的常染色体是由很多他们传下来的片段拼起来的。当然这种散发是有一定限度的，并不是线性的单调发散。但是如果所有古代人都是我们的祖先，哪怕是大量古代人是我们的祖先，我们追寻祖先还有什么意义呢？一个不需要回答的问题是没有意义的。研究历史，追溯祖先，不找到我们真正的关键祖先，不回答我们关心的真实问题，就是没有意义的研究，只是发现了一个好玩的现象。我们要找的祖先，并非遗传给我们基因片段的所有古人，而是特定的传给我们家族、语言、文化、信仰的祖先。<br>中国的家族传承是按父系关系组建的，于是就有一条染色体的遗传与家族的传承基本保持一致，那就是父系遗传的 Y 染色体，只有男性才有，所以它肯定来自父亲，而父亲的 Y 染色体肯定来自爷爷。家族不变，Y 染色体就绝对丢不了。而且，前文说过，Y 染色体主干区段基本不与 X 染色体发生重组，其上发生的突变都会流传下来（图2.5）。<br>家族中的 Y 染色体失传的可能性也存在，例如有些人是过继的，或者是被收养的，或者是其他各种特殊情况造成失传的，但是在中国社会中这样的情况比例比较低，所以 Y 染色体是用来研究家族史乃至研究各种族群历史的最重要的材料。有人问，女性的 DNA 就不能用来研究历史吗，母系的历史不要研究吗？母系遗传当然也可以研究。母系遗传的 DNA 片段就是线粒体 DNA，我们可以通过线粒体追溯母系历史，研究母亲的母亲的母亲从哪里来。但是研究历史用不着这些信息。你外婆的外婆姓什么，你知道吗？你感兴趣吗？大部分人都不会问这个问题，因为人类历史基本上是父系社会的传承，出于社会学原因，我们没有必要过多关注母系遗传历史。当然，母系遗传的信息也是非常有用的，在世界范围内的各大区域差异上是有进化学意义的，只是在地区内的民族群体之间没有显著差异。研究发现，民族之间，女性基因交流很普遍，男性基因交流就很少。因为大部分的民族都是父系社会的，母系社会只是偶发现象。人类历史上也是这样，母系社会阶段只是一个假说，到目前为止没有证据可以证明人类社会的发展存在一个普遍性的母系社会阶段。在考古上也从来没有发现过普遍的母系社会。所以通过父系遗传的 Y 染色体，我们就可以追溯到我们家族的祖先，追溯到家族中跟我们同姓的上几代祖先。同姓的两个家族到底是不是来自同一个祖先，不同姓的家族是不是真的没有关系，这些人们常常会遇到的问题，现在可以用 Y 染色体来判断了。<br><br>历史人类学解决的第一个历史问题，就是曹操的身世。我们用曹操家族的基因研究来做个例子，说明基于遗传学的历史研究是怎样开展的。曹操是1800年前三国时候的人物，他的身世似乎很难追踪。曹操的爷爷是个太监，那曹操父亲是从哪里来的？当然，曹操的父亲肯定是养子。曹操的政敌对这个养子的故事就做过各式各样的发挥。袁绍跟曹操小时候要好得很，但是真打起来的时候，却对曹操说，你这家伙，你爸是乞丐携养的，我是四世三公，你有什么资格跟我争夺天下？东吴那边更有高招，专门搜集曹操的花边新闻，编成合集，取名《曹瞒传》，就说，曹操啊，你爸是夏侯家过继来的，所以你们家和这个夏侯家是兄弟关系，现在你的女儿嫁给夏侯家的儿子，夏侯家的女儿嫁给你家儿子……这个故事很火爆，所以流传很广，还被编进了《三国演义》。大众的心理是很追奇的，民众喜欢猎奇，所以曹操怎么辩驳都没用，老百姓不爱听，所以我们从来没看到过史书里有曹操的辟谣。<br>但是《三国志》就没记载曹操父亲是从夏侯家过继来的。曹操家大业大，曹操的爷爷曹腾做了中常侍，就是一人之下万人之上的官员，像他这样的家业怎么可能传给一个外人呢，这不合理。而且对于贵族阶级来说，从外姓过继，这是丢人的事情。其实曹操的爷爷有兄弟四个，他一个人做太监，三个兄弟都做了大官，怎么可能没孩子，用得着从外姓过继吗？但这只是历史逻辑的推理，事实究竟如何？为了弄清真相，我们可以把这个亲子鉴定的历史问题转换成遗传学问题。把曹操的爷爷的基因，与曹操父亲的基因作对比，曹操父亲的 Y 染色体基因应该与曹操后代的基因是一样的。<br>所以首先要找曹操的后代，然后跟曹操的爷爷作一个基因对比，如果两边对上，就可以证明曹操的父亲本来就是老曹家的。2010年，我们把全国的曹姓做了筛选，找到70多个曹姓家族进行 Y 染色体的检测，结果发现全国的曹姓各种各样的 Y 染色体都有，没有一致性。这是一个好现象，因为曹姓本来就是多起源的，应该不一样才对。只有普通曹姓 Y 染色体不一样而曹操的后代 Y 染色体都一样，才能把曹操后代从众多曹姓家族中挑出来。从全国的70多个曹姓中，我们找到有家谱有文献记载的9家曹操的后代，分析结果表明，这9家人的 Y 染色体有8家是一样的，都是 O2-F1462型。这个类型是很罕见的，在人群中1%都不到，如此一致基本不可能是巧合。这说明他们8家真的源于一家[3]。<br>我们又去曹操的爷爷这一辈的墓葬里找来骨头，来鉴定其中的 Y 染色体。曹操的父亲和祖父等长辈都葬在他们的老家谯郡，也就是今天的安徽亳州。听说我们来研究曹操家族，亳州考古所的研究人员都很高兴，但说到骨头，却都犯难了。原来曹操家族墓葬是20世纪70年代挖掘的，那时对保护古迹不够重视，而且挖出来的时候人骨基本都烂了。考古队员说：“当时我们挖墓的时候，看到墓葬形制很漂亮，就保护了起来。很多出土文物搬到博物馆保存着。墓葬的封土就倾倒在边上了，墓葬中残余的骨头也跟封土扔在一起，骨头渣子，都没保存。”但是有位谢书璧老先生，当时是带队挖掘的，回想起当年挖曹操爷爷的弟弟的墓时，看到墓主的两颗牙，亮晶晶的特别好，就留了下来，心想以后科学发达了说不定还能分析出些特别的信息。那两颗牙就用信封装着，放在库房的考古材料里。他翻了半天，发现了30多年前放的这个信封。倒出来一看，两颗牙还是亮晶晶的。我们拿到实验室，在牙齿上钻一个小洞，把骨粉掏出来，做骨粉里的基因测试，发现其中的 Y 染色体果然是 O2-F1462这个类型，跟曹操的后代一模一样[4,5]。<br>我们也做了夏侯家的 Y 染色体，完全不是这个类型，而是 O1类型，不是 O2类型，两者相差很远。这说明，曹操后代跟曹操爷爷辈是一样的，曹操的父亲不是外面捡来的，还是老曹家人。就这样，历史问题的悬案通过自然科学遗传学的手段解决了，这是历史人类学的第一个案例。<br>所以，Y 染色体谱系可以研究历史问题。历史上的两个人，只要找到他们在 Y 染色体谱系树上的位置，就能分析出很多信息。全世界的任何男人都可以在 Y 染色体谱系树上找到位置，所以全世界家族的演化历史都可以分析清楚。很多家族的历史组合成了民族的历史，很多民族的历史组合成了大洲的历史，各个大洲的历史又整合成了全人类的历史。<br><br>中华民族这个大群体，由56个民族组成。每个民族又由许许多多家族构成，在遗传谱系分析中会发现有些家族是跨越民族的。基因的分析会让中华民族多元一体的构架更加清晰。我们要研究中华民族的历史，必须从东亚的各个民族类群的源流分析。<br>民族这个概念比较复杂，是从政治角度，根据国家政策落实的需要，基于共同语言文化特征的心理认同，以及各种复杂社会经济关系来划分的。遗传学研究民族群体的时候，传统上简化为根据语言学分类来区分族群，实际上研究的是一个个语言类群的使用群体，而不是社会意义上的民族。语言学和生物学一样是有体系的，生物学上分界、门、纲、目、科、属、种，语言学上有语系、语族、语支、语种。语系，就相当于生物分类中的“目”的概念，生物学中同一个“目”内的生物有明显的亲缘关系，比如灵长目中的各物种，所以明显有亲缘关系的语言是同一个语系的，彼此间有大量同源词。比如汉藏语系，汉语和藏语的同源词特别多，这两个语言是同源，关系很明确。语族则更进一步，相当于“科”的概念，同一语族内的语种明显是很相似的。比如日耳曼语族，里面的英语、德语、荷兰语、瑞典语，相互之间非常接近。语支相当于“属”的概念，亲缘关系更近。比如羌语支的，内部的语言都是基本可以相互通话的。再往下，语种就是相当于“物种”了。<br>早期的蒙古利亚人种到达东亚以后渐渐分化，形成了9个语系，从南到北分别是：南岛语系、南亚语系、侗傣语系、苗瑶语系、汉藏语系、满蒙语系（阿尔泰语系）、匈羯语系（叶尼塞语系）、乌拉尔语系、古亚语系。匈羯与满蒙是完全不同的族群，很多北方民族说自己祖先是匈奴，可能并不是事实。中国境内已经没有讲匈羯语系语言的民族了。从基因上，可能就已经决定了一个民族讲话有没有声调。根据语言学分析，匈奴讲的语言是有声调的语言。我们分析了匈奴墓葬中的遗骨的基因，分析了和语言相关的基因，都是有声调的突变类型。而现代的满蒙族群的同样基因都没有声调突变，所以满蒙语系都是没有声调的。匈奴人和蒙古人，在其他基因上差距更大，可能个别血统有交流，但是主体上没有传承性。千万不要以为住在一个地方的，就是必然有传承关系的，族群的迁徙是非常频繁的。在蒙古草原上，民族换了很多批，蒙古人是很晚的时候才从黑龙江流域扩张到草原上来，成为主体的。<br>更有意思的是，东亚的语系从词汇相似性上分析，是两两成对的。侗傣语系和南岛语系的词汇很接近，南亚语系和苗瑶语系很接近，汉藏语系和乌拉尔语系很接近，匈羯语系和古亚语系很接近。每一对语系都是其中一个有声调，另一个没声调。这个现象非常奇怪。声调分为调值声调和调形声调两种。调值声调就是根据声音的高低来区分的声调，调形声调就是根据声音的升降形态来区分的声调。全世界范围内，只有东亚地区才有调形声调，带调形声调的语系有汉藏、苗瑶、侗傣、匈羯四个。我们发现，东亚的声调很晚才出现，大概从西周开始才渐渐开始产生声调，而产生声调可能都是受中华文明圈的影响，这种影响源于基因交流[6]。四个有声调的语系的使用者都是在中华文明圈内长期紧密接触、频繁交流的族群。匈奴人就在汉族的北边，交流很多。苗瑶就在汉族的南边，长期住在长江中游。侗傣起源于江浙一带，也长期与汉族互动。而对应的另外四个语系的族群跑到中华文明圈外面去了，所以较少受到中华文明的早期影响，没有搭上声调发生这班车。<br>语系对基因结构的影响很大。上述提到的四对语系的现象，在 Y 染色体分布上也同样能看到。每个族群中有不同的家族组成结构，有不同的 Y 染色体类型，并以独特的比例组合起来。一个族群中有各种男人，当然会有各种 Y 染色体。而不同族群的 Y 染色体的组成配比是不一样的。所以比较不同族群中各种 Y 染色体所占比例，可以计算出族群之间的遗传距离。同一个语族的人群，Y 染色体类型基本一致。比如图5.2中，汉族和藏缅族群的 Y 染色体比例特别接近，每种类型的比例基本一样。所以汉族和藏缅族群是最接近的。所以汉藏语系的分类在基因上也是支持的。满族和蒙古族也是很接近的，几乎一样，这和语言也是对应的。苗瑶和汉藏稍微远一点，南亚和苗瑶比较接近。侗傣和南岛距离汉藏更远。所以族群之间的关系通过这个比对，通过计算分析可以画出一棵树来（图5.3）。中华民族所有族群都是从一个根上出来的，都是同根的，大约都是4万年前从云南进入中国，渐渐分散开来。3万年前分散成苗瑶、侗傣的祖先人群，侗傣又分出南岛，苗瑶祖先2万年前又分出汉藏的祖先人群，汉藏后来又分成汉和藏缅两部分。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211556197.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.2　东亚各族群间 Y 染色体差异。
<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211556031.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.3　中华民族同根。箭头中文字表示各族群祖先进入这片土地的距今大致年数。
<br><br>民族是这样通过分化形成的吗？不是的！分化只是早期狩猎采集人群迁徙扩散的过程，那个时候哪有民族？民族是有了文化以后聚集起来而形成的，因为需要大量的聚集人口来承载民族文化。<br>早期人群散布到中国各地，交流很少，基因差异越来越大。各地的人群分化了几万年，散布在丛林中，形成不了民族，孕育不出文明。文明是后来才产生的，其产生的过程有内在自然规律，需要适宜的环境、足够的经济基础。文明什么时候产生的？很晚。约1.2万年前，冰川期结束以后，一切才有可能。冰川期是不可能有文明的，冰天雪地，食物匮乏，能活下来就不错了，没法养育足够的人口，所以史前文明是不存在的。从1.8万年前开始，冰川渐渐消退，到1.2万年前，气温上升到接近现在的水平，全世界进入温暖美好环境，春天终于来了。对这个春天，从7.4万年前的多峇巨灾开始，生命已经等了几万年。那时候起，动植物繁茂起来，花儿盛开，各种兽群开始繁衍、壮大，我们人类有足够的东西吃了。有了充足的食物，人口就开始增长。所以1.1万年前，全球温带的女性人口开始膨胀。为什么增长的只是女性呢？男性到哪里去了？女性在家里操持家务、采摘果实，相对安全，就活下来了。男性要去打猎，经常会遇到凶猛的野兽或者各种危险的情况，很容易受伤或者死亡，所以男性成员损失很大，人口增长不了。20世纪90年代，我经常去各种偏远地区调查少数民族，也调查过一些狩猎的民族，比如独龙族。直到十几年前，他们还经常狩猎，因此男性成员经常会有损失，村子里男女人口比例特别不均衡。<br>智商在人群中也是正态分布的，大部分人是平凡的，少数人智商比较高，少数人智商偏低。当人口少的时候，智商特别高或者特别低的人就很难出现了，所以群体发明创造会少，社会发展会慢。人口多了，聪明人才会多，创造发明也才多。农业就是各地的聪明人发明的。一万年前，世界若干地区，特别是人口最多的东亚和西亚，陆陆续续出现了农业。农业生产了更多粮食，能养活更多的人，人更多了就有更多的发明，新石器就出现了。吃饱了才有时间磨制新石器，才能把生产工具磨得精细一点。工具更好，农业可以更快发展，粮食多了，人就越来越多。那些拥有农业的族群壮大起来以后，周边族群向他们学习，向他们靠拢，想了解这个族群怎么这么厉害，粮食哪里来的？向农业族群学习，就先要听懂他们的语言，语言就传播开来了。还有文化的传播。打个比方，农业族群的人告诉那些求学者，你要种这个庄稼，有窍门的，先要用人头祭天[7-10]，祷告要有一套咒语，这谷子要用血水泡了再播种，有一整套祭天、祭谷神的流程。于是，文化传播开来了，宗教传播开来了。当时的人，还不知道什么叫科技，什么叫宗教，都混在一起。所以，当世界观、价值观、人生观，整个三观体系在每个圈子内部的人群中都逐渐变成一样的，民族就形成了，他们信同样的宗教，用同样的思想观念，有同样的神话体系，讲同样的语言，语系也就聚合在一起。这就是民族的聚合。<br>前所未有的大量人群聚合在一起，就需要有管理，不然社会就乱了，于是出现了社会规范和规范的裁判者——领导人。领导人的私人财富积累起来以后要传承。到了大约7000年前，四大古文明萌发了。人类文明起源的过程就是一个“人法地，地法天”的过程。气候变暖是第一步“天”的变化，而后物产变丰富是第二步“地”的变化，最后社会发展是第三步“人”的变化。这是一种自然规律，也是社会规律。文明的产生不是神话里说的那样，一个天生神力的人拍拍脑袋就创造出来的。四大古文明的形成，不管是古巴比伦、古埃及还是古印度、古中国，都必须经历这个过程。关于四大古文明的说法目前争议颇多，古巴比伦、古埃及、古印度的文明其实都是密切关联，甚至可能同源的。陈中原教授一直在研究埃及的史前气候变迁，他发现尼罗河流域的生态非常脆弱，文明发展经常中断，然后有人从西亚新月地区移民过来，建立新的社群。所以，古埃及的文明有可能来自古巴比伦。从完全独立起源的文明来看，四大文明应该是东亚文明、地中海文明、美洲文明、内非文明。有人认为，中国只有3000多年的文明史，只能从商代算起。这是中国的史前考古学与历史学严重脱离造成的误解，至少5000多年前中国就已经有了良渚古城这样的宏伟的城市[11,13]，怎么会没有文明？西方学者提出用青铜器作为一个文明的标志，是有问题的[13]。文明形态多种多样，而具体的某种发明有偶然性。按照西方发明的标准去衡量中国，并不客观，逻辑上有问题。<br><br>中国是一个农业大国，中华文明的起源与农业关系密切。<br>不同地方有不同的作物区划，不同的语系实际上发生于不同的作物区，语系的起源跟作物的起源和农业区的起源有关。现在世界各地的语系分布非常不规则（图5.4），交错在一起，很多分布区也不是农业区。但是究其源头，大部分语系是起源于农业区的。有的语系人群只是后期因为气候或政治原因搬迁了。比如苗瑶语系的苗族、瑶族、畲族，散布在南方各地的山区。其中苗族主要分布在贵州地区。贵州在中国地形的第二级阶梯和第三级阶梯之间，受到地壳变动的大量挤压，山地陡峭，种庄稼有点困难，不可能是农业发源地，所以苗族不可能起源于这里。有人说汉族起源于甘肃、青海一带，那也是不可能的。汉族不可能起源于不适合农业的高原地区。人口庞大的古老民族更可能起源于农业发达的大河中下游和三角洲地区。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211557459.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.4　世界主要语系分布示意图。
<br>中国主要有两个农业发源地（图5.5）。中国早期驯化的农作物的种类很多，主要的是大米、小米，其他黄米、大豆、菱角之类的，在各个考古文化区系中被驯化。大米和小米是中国上古的主粮，麦子不是。麦子起源于西亚，大约4100年前才来到中国。北方的小米起源于磁山文化，在桑干河流域，就是丁玲写的《太阳照在桑干河上》的那个桑干河，它从山西大同流到河北涿鹿，从河北流到北京，被称为永定河。我们经常讲，黄河是中华民族的母亲河，那么桑干河就是中华民族的“祖母河”。目前发现的最早的驯化小米，也叫作粟，是在北京郊区永定河边距今一万多年的东胡林遗址，更早可能追溯到山西下川文化[14]。最早的小米就是在桑干河流域驯化的。有粮才有人，有人才有文化。中华民族主体的源头在这里。南方的大米可能是更早驯化的作物，大米养活的人多，而且南方气候好，天气变暖后作物恢复得快。所以，大米（也就是水稻），应该驯化得更早。目前最早的驯化大米发现于湖南南部湘江源头的道县玉蟾岩遗址，距今接近1.5万年，不过证据需要更多分析[15]。明确的大米驯化是在沅江边上，洞庭湖西岸，1.2万年前就开始了，到了七八千年前那里已经有成片的水稻田。洞庭湖周边，古代叫作云梦大泽，一大片的湿地，环境好得不得了，特别适宜种水稻。所以中华文化的主流源头就是这两个：北方的小米和南方的大米。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211557237.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.5　中国两个农业起源点——两个文明源头。
<br>因此中国早期形成了两个文明圈，大米文明圈和小米文明圈。在不同的农业区就形成了不同的文化体系。种大米的区系包括：高庙文化区，从彭头山文化到高庙文化、大溪文化，再到屈家岭、石家河；长江下游的良渚文化区，从河姆渡到马家浜、崧泽、良渚、马桥，这一层层文化更替发展下来；还有北方山东的大汶口文化区，从后李、北辛到大汶口、龙山、岳石，不过大汶口文化之前当地基本不种植水稻。所以南部和东部这三块农业核心区域是种大米的。北方两块区域，仰韶文化区和红山文化区，是种小米的。黄河中游和西辽河流域是种小米的。文化接触往往造成冲撞，大米文明和小米文明，这两个区域和人群文化上必然形成差异，继而冲突对峙。最后战争和妥协使他们融合在一起，形成了中华文明[16]。中华文明是大米和小米融合在一起的，就像一阴一阳融合成了一个完美的太极图。<br><br><br>我们说中国的文明7000年前就起源了，但有学者并不承认。西方有学者提出，古文明的标准之一是看一个地区有没有开始使用青铜器。可青铜器是西亚发明的一种配比精密的合金，一个西亚发明的东西传到哪里，哪里就算有文明，这合理吗？美洲的玛雅文明中没有青铜器，古代旧大陆的文明都没有传到新大陆去，那新大陆就没有文明了吗？当然不是。我们为什么不能拿中国发明的东西，看它传到哪里就说哪里开始有文明？比如说丝绸，丝绸传到哪里，哪里才是有文明，那西方文明就太晚了，1000年都不到。这同样不对。所以，不能拿某个地方发明的一个东西作为标准。我们认为，文明还是要有一种更加普适性的标准。<br>2014年我在联合国大厦做了一次演讲，提出古文明需要一个新的评判体系，并拟定了一个新的文明标准，得到世界各国很多学者专家的认可。我认为，文明的本质是社会规范，遵守特定的完备的社会规范，就是文明。而社会规范可以分出数个元素，例如统治、法律、历法、记录。规范需要有维护者，一个文明形态必须有统治。如果没人管，社会就乱套了，大家想干什么就干什么，那是野蛮，不是文明了。要有法律来规定行为范围，制定等级制度、礼仪制度，法律不一定成文，也可能是习惯法。还要有历法，让人们知道什么时候应该做什么了。“山中无甲子，寒尽不知年”，那就是原始蛮荒。有了历法，能够记日子，这才是文明，所以历法是特别重要的。历法可以通过古代星象图、天文观测遗址等材料去考证，特别是早期的天文台、观象台。从仰韶文化的西水坡大墓中来看[17]，中国至少6000多年前就有星象观测和历法。还要有记录，能够把这些文明的具体规范内容记录下来，流传下去，而记录也不一定非要是严格的文字。<br>如何判断古文明中有“统治”呢？早期的统治就是看有没有领导人——“帝王”，民主的统治是后来的事情。与很多动物群体一样，帝王有最大的生育权，占据最多的社会资源，他生的孩子就多，他的基因谱系扩张就快。通过 Y 染色体作遗传学分析，可以找出早期迅速扩张的谱系，来确定到底有没有帝王，什么时候出现，也可以分析他大概在哪里，尝试把陵墓找出来。早期全国人口不多，但是如果有帝王，他的孩子多，谱系就扩张得特别快，在人群中很容易占比很高。只要把我们现代人的 Y 染色体谱系树画出来，在谱系树上往根部追溯查找，就可以看到那些可能出现的扩张点。<br>把中国男人的 Y 染色体，根据序列差异程度画成一棵进化树（或称谱系树，图5.6）。结果发现，大部分的 Y 染色体谱系都是直线的，没有分叉，说明这一传承的脉络每一代都有一个男孩，才能把 Y 染色体传到现在，这并不容易。如果有一个老爷爷生两个儿子，两个儿子都有 Y 染色体并一直传到现在，这个老爷爷就是树上的一个分叉。在这棵树上面基本找不到三分叉，即使将全国40万个样本放在一起，信息存储量巨大，三分叉也很难找到。但有意思的是，在这棵树上我们看到有三个节点，它们有很多的分叉（图5.6中用三个矩形红块覆盖）。这里是随机抽样的几个样本，证明节点上这三个人生了很多男孩。实际上这三个人可能每人都生了上百个孩子，于是在这几个节点上就散开来了，现在中国的男人里面，他们的后代接近一半。不管什么民族，都有这三个人的后代，即大约一半的人都是这些人的后代[18]。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211558286.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.6　简化的中国人群父系 Y 染色体谱系树。
<br>根据后代的序列差异，即每两个人之间的差异程度，能计算出这人生活的年代。图5.6中标示位点 F11的这个人生活在距今6800年前后，标示位点 F46的人生活在约6500年前，标示位点 M117的人生活在约5400年前。夏朝是4000多年前开始的，而此处都6800年了，完全超出我们的历史认知范畴。但是，传说中，夏商周之前不是有三皇五帝吗？以前大家都说这只是神话传说，但有什么证据证明这些是假的呢？自古传下来的这个说法，是我们传统的语境，传统的历史文本，但是长期以来没有证据证明它是真的，也没有证据证明它是假的。现在，我们需要寻找证据去证明它是真的，或是假的。当前，至少从遗传的证据来看，这个说法并非毫无来由——我们发现中国上古有三个统治者，年代很早。<br><br>上文提到的这些年代，在考古学中有证据吗？从考古遗址里看到，6800年前并没有那么原始，中国最早的城市，就是那时候出现的。我刚才讲到种水稻的湖南常德彭头山，在它附近1000米的地方，出现了中国第一个城市。这个城，规模很大，相当于复旦校园这么大。护城河5米宽，城墙5米高，为什么要造5米高的城墙？守护帝王的三宫六院嘛。城里有皇宫，有祭坛，有王陵。最早的王陵中有一男一女，男的胸前戴着两个像太极图一样的玛瑙璜。这座6800年前的城，现在是湖南常德的一处景区，帝王骨架展示在博物馆里。这种文化叫高庙文化，7800多年前从沅江上游高庙坪上开始产生。高庙文化出土了很多画着八角星的祭祀盘。最近有人发现了水族的水书《连山》，其中的八卦就是八角星的图案。这会不会与伏羲演八卦的传说有关？高庙文化的这一批人群，每年夏秋，春潮退了以后，他们就到下游种水稻；冬春时，他们就到沅江上游。到了晚期，他们不迁了，就在水里筑起高台，建造城堡，定居下来。水涨上来时他们在城里居住，水退下去时他们就到城旁边的地里种水稻。高庙文化是中华文明最早发源的文化，它对中华文化的影响很大[19]。<br>从考古文化发展看，高庙文化沿着长江下去，大约6500年前扩展到山东。山东大汶口文化的陶器纹饰图案与高庙文化一脉相承。前面讲到的 Y 染色体基因 F11在这两个考古文化中占据主流，现代人群中 F11在湖南是最多的，其次是山东，山东闯关东那一批人，又把这基因带到东北去。所以基因分布和历史分布、考古分布是吻合的。我们现在看起来，高庙文化的发展与苗族基因起源、苗文化发展、传播过程是一致的（图5.7）。我们在贵州台江等地详细调查了苗族的基因，苗族有大量 F11类型，苗装上刺绣的凤凰造型与高庙文化的凤凰图案几乎一样，苗族织锦的八角星纹样也与高庙文化八角星徽章几乎一样。F11类型在汉族里面占了五分之一，在苗族里占了一半。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211559287.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.7　湖南常德城头山古城遗址（上左）、统治者墓葬（上右），以及高庙文化图案与苗族刺绣对照（下）。
<br><br>1988年，河南濮阳造水库，挖出一个大墓，发现它的历史很悠久，赶紧叫考古队员来清理。距今6400多年的仰韶文化就此被发现[17]。清理完了，当地想继续造水库。现在濮阳人都说，这个遗址没有保留下来是千古遗憾，着急造水库干吗，缺水你们忍一忍。这么大的遗址，要是留到现在，比秦始皇兵马俑还要壮观，参观的人会有多少？遗址中最核心的部分，已借到国家博物馆作为常设展览。这个墓葬有上千平方米，墓主人在中间，头朝南，脚朝北，旁边用贝壳排了各种造型（图5.8）。东边排了一条青龙，西边排了一头白虎。南边排了七只动物，第一个是一头驼鹿（即犴，井宿），北极地区、黑龙江北部、大兴安岭都有驼鹿；第二个，在驼鹿背上，是一只山羊（鬼宿）；再往上是一头獐（柳宿）、一匹马（星宿）、一头鹿（张宿）、一条蛇（翼宿）；再一个弯弯曲曲像蚯蚓一样的东西（轸宿）。这七只动物就是南方朱雀七宿。这个排布造型是什么概念？就是所谓“二十八星宿”的漫天星图。东方是青龙七宿，西方是白虎七宿，南方是朱雀七宿，北方是玄武七宿北斗星。众星环绕墓主，他是谁？他可能是图5.6中标示位点为 F46的第二个人物，他留下来的后代，在中国人中占了14%。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211559550.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.8　河南濮阳西水坡墓主周围的二十八星宿（上）以及仰韶文化图案（中）与藏缅族群（下）对照。
<br>仰韶文化在中原，很多人说，中原肯定是汉族的老家，仰韶文化肯定是汉文化的祖先。但是且慢，我们要分辨一下仰韶文化的特征。仰韶文化里，出现最多的是太阳纹、水波纹、鱼纹，还有双鱼捧螺、圆圈舞。汉族里面没有把鱼抬到这么高的地位的，鱼不是汉族的象征。谁喜欢鱼，中国那么多民族里谁对鱼最尊重？是羌族、藏族。藏族人是不吃鱼的，鱼是寄存祖先灵魂的地方，鱼是祖宗灵魂变出来的东西，不能吃。藏族人的“吉祥八宝”中就有双鱼图和宝螺图。只有极个别藏族群体受汉族影响，有打鱼的，但那是很少的现象。仰韶文化西迁以后，羌族、彝族、藏族的文化开始发源。他们喜好跳圆圈舞，但是汉族不会跳这些民族的舞蹈，汉族喜欢唱戏。他们的文化，对汉文化有影响，但不是汉文化的主流。这是氐羌文化，羌人是牧羊人，传说中羌人转向农业的一支姓姜。那个时候不用姓，但是姜姓后人对祖先没姓不理解，心想既然我姓姜，那我的爷爷也姓姜啊，不能说自己的爷爷没有姓。所以传说中，第一位炎帝叫姜石年，末代炎帝叫姜参卢。羊是4100年前从西亚传进来的，之前中国根本就没有驯化的羊。<br><br>那么汉族的文化源头在哪儿？图5.6中标示基因位点为 M117的第三个人5400年前生活在辽宁、内蒙古、河北三省区边界地区，曾经的热河省，就是燕山的一脉往北延伸的地方，《山海经》里记载的北次三经。一个现在叫牛河梁的山岗上，5300多年前开始建造金字塔形陵墓，这个中国“金字塔”比埃及金字塔早600年[20,21]。中间金字塔里埋的是这一族群最早的帝王，后面的金字塔里可能埋着他的儿子，再后面山岗的五分之一可能埋着他的孙子。一圈16个人，16座金字塔，16代人，都埋在这个圈里面，排布成天上轩辕星座的形状。北边就是青丘，2018年我去赤峰市敖汉旗探访城子山遗址，那里就是传说中的青丘，在山顶上有200多个五六千年前的祭坛遗迹。山腰间突出一块巨石，惟妙惟肖，是一个狐狸的头（图5.9）。青丘东边就是朝阳谷，有一个半拉山。2015年发现在半拉山东面还有一个比它早二三十年的墓[22]。在中间这位墓主胸前摆了四套仪仗。一面玉璧，代表神权；一顶玉瑁，看过《周礼》的都知道“君礼臣以瑁，臣礼君以圭”，所以玉瑁代表皇权，早期的玉瑁真做得像帽子一样，套在发髻上的形状像马蹄；第三个是熊头玉权杖，代表有熊氏的宗主权；第四个是玉钺，代表军权。神权、皇权、宗主权、军事权，四套权力在他的手上。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211601811.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.9　赤峰敖汉旗城子山遗址天然形成的狐狸头巨石。这里是传说中的青丘。
<br>这个文化就是红山文化，习惯大量用玉器，爱玉是汉族的传统。而且玉器被雕刻成各种龙凤造型，龙凤又是汉族的标记。然后还有玉熊龙，以及各种小玉人。这些小玉人很有意思。它们把手放在胸前，胸部塌进去，小腹部胀起来，丹田胀气、吸气，这是在练气呢。还有的玉人盘腿而坐，造型各异，都在运气。为什么古人玩这个，还重要到雕成小玉人流传下来？因为《黄帝内经》传下来养生的道理，就是讲练气的。道家的这个学说叫黄老之术。黄老道，黄帝开创，老子总结。道家信仰，也是汉族的核心思想。当然，这件事需要更多研究，很可能是真的。金字塔旁还出土了一个神庙，挖出一个女神，胸部丰满，脸相神奇——当时的审美观念跟现在不太一样。有人看了说，那时崇拜女性，是母系社会。但墓葬挖开一看，全是男的，领袖全是男的，不是母系社会。传说中轩辕黄帝拜九天玄女为师，虽然传说是汉代才记录下来的，但上古的民间传说里可能是一直就有的，这个事也很值得探究。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211601046.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.10　辽宁建平牛河梁遗址中央大墓主人遗迹（上），红山文化与汉族对照（下）。
<br><br>中国早期的三皇五帝的历史，能说它没有吗？这些踪迹都在。黄帝、炎帝，轩辕、神农，很可能是后人给他们起的名字。有些人当时有另外的名字，然后后人就用这些名字称呼他们，并尊敬他们，神化他们。三皇是三个大时代，延续几百年，五帝是五个小朝代。所以早期的历史，真的从基因、从考古、从实证的角度，好像看起来没有那么可疑。我们后来再精细地查看遗传谱系时发现，没那么简单，除了这三大祖先以外还有三小，三小以外还有六个更小的。东亚新石器时代有十二个扩张的共同祖先，包括在韩国和日本有两个，在中国境内有十个，比传说中的三皇五帝还多[23]。他们之间的关系，我们现在还没研究清楚，但是迷雾正在渐渐散开的过程中。我们至少发现，颛顼、夏禹跟黄帝对不上，有些历史人物的关系跟《史记》里面记载的有差异。《史记·黄帝本纪》里说，五帝都是黄帝的后代，黄帝是五帝的第一个，从位列三皇变成五帝之一了，而把五帝里面原来第一位的少昊去掉了，为什么呢，因为少昊把黄帝给推翻了，所以他肯定不是黄帝的后代。司马迁希望讲求万世一系，只能有一个祖宗，不能有三个祖宗，更不能有十二个祖宗。只有一个祖宗才叫大一统。这是司马迁的态度。但是我们发现，有些史书里不是这么记录的，《竹书》里就不是这么记载的，以前历史就没有这个说法，到了《史记》才改，司马迁有他的政治目的。以前没证明的东西我们要重新证明，不要去迷信。现在，我们有更多证据去思考“疑古时代”的那些问题。<br><br>有一些学者认为，夏朝不存在，夏朝是古人假造的。但是中华文明探源工程把夏朝之前的尧和舜的陶寺遗址挖出来了[24]，尧舜和商朝之间的夏肯定是存在的，只不过夏在哪里，什么文化层是夏，对此还有争议。从单一的学科，比如仅仅从考古学出发，解决不了这个问题。我们用基因来研究，并且与考古学、历史学结合，与挖出来的疑似夏朝遗迹中的贵族的骨头比对一下，就清楚了。而夏朝遗址在哪里，从哪儿才能得到明确为夏朝贵族的骨骸，目前还没解决，是最需要去调查研究的。<br>我们提出一个可能的假说，接下去就要证明它，这必须把历史问题转化为可以检验的科学问题。夏朝是否存在的问题，实际上就是陶寺文化的尧舜时代（约4300～4000年前）与商朝（约3600～3000年前）之间这400年的广域王朝能否被证明是传说中的四百载夏朝。要证明是夏朝，关键就是研究夏朝统治家族是否符合我们传说中的血统身世的问题。对于夏朝开创者大禹的身世，有两个说法：其一是“禹出西羌”，来自西北；其二是“夏为越后”，来自江浙。这看似矛盾的说法，能否通过历史人类学梳理出头绪来？只要证明夏后氏的渊源符合这两点，就基本能确定夏朝真实存在。<br>历史传说确实很神奇，也留下了很多的蛛丝马迹。5000多年前轩辕黄帝通过涿鹿之战一统天下。而我们看到考古文化中这个年代——5300多年前，也发生了翻天覆地的变化。红山文化从辽西南下，成功扩大了影响范围。这是不是轩辕黄帝南下的结果？黄帝带领红山文化的汉族祖先人群得到了中原，得到了天下。很多地方留下了当时的战场遗迹。中原的仰韶文化庙底沟类型发生显著变化，整个仰韶文化大量西迁至甘肃青海一带，变成马家窑文化。马家窑文化其实就是仰韶文化的余绪，只不过从中原搬到了一个新的地方，然后受到新环境的影响，有一些器物稍微变了一些，以适应那里的环境。然后安徽辉煌了600年的凌家滩文化彻底灭亡了。湖南、湖北大溪文化变成屈家岭文化，那里出现的大量玉器，都向东北看齐。长江下游江浙一带，原来是受凌家滩文化影响的崧泽文化，5300年前变成了良渚文化，出现各种玉器，造型和礼仪也向东北看齐。东北红山文化里代表各种权力的玉钺、玉瑁、玉璧（以半拉山陵墓为代表）等，成了良渚文化中最重要的钺、琮、璧。这种现象在全国很多地区或多或少都出现了。但是，良渚人并不从外地进口玉材，良渚早期的玉器，玉材来自东北的目前只发现一具。良渚的中期遗迹中，有从东北传过来的玉器，但是形状都是方的。后期良渚的礼器，用蛇纹石取代了玉，看来跟东北的关系断绝了。<br>5000多年前，东北的红山文化消失了（华北的延续还在），取而代之的是小河沿文化。小河沿文化的器物都是山东大汶口的纹饰。传说中，山东是少昊氏的地盘，黄帝统一中国的时候没把山东打下来。可能少昊5000年前把黄帝老家给包抄了，变成小河沿文化。这时黄帝式微，统治不了全国各地。后来，黄帝的子孙在江浙的统治也不稳了，可能发生了春秋末年“田代齐姜”式的事情。所以我们研究发现，良渚的贵族不再是红山贵族的 O3型 Y 染色体，而是变成了当地的 O1型[25]。<br>江浙这一带的统治者，很可能就是传说中的颛顼。如今江浙这一带很多人家，家谱上都认颛顼是他们的祖先，和颛顼的文化关系非常密切，这可能是良渚文化所遗留的。史书上说，颛顼是黄帝子孙。颛顼可能并非单指一个人，而是一个帝号，就像炎帝、黄帝，都有很多代。良渚文化的历代首领都可能被称为颛顼。早期的颛顼可能就是黄帝的子孙，后期的颛顼就不见得是黄帝后代（可能发生过“田氏夺齐”式的事件），但颛顼是大禹的祖先，这点应该是明确的，所有书籍都这样记载。颛顼传了几代到鲧，鲧的儿子就是大禹，大禹攫得天下，这一传承可能比较准确。颛顼中的“顼”字，就是玉人头的意思；“颛”字，表示戴着华丽的礼帽。“颛顼”就是戴着大帽子的玉人头（图5.11）。玉人指良渚文化中的人像，当然，更早的是东北红山文化中出现的小玉人，这些小玉人是修道模样的，而在良渚的宗庙里，常见形象是下面刻着兽头的玉琮。历代颛顼的头像被刻在玉琮上，可能就是顼（玉首）的本义。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211602070.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.11　良渚、石家河、齐家、三星堆文化的文物可能代表着颛顼和夏朝的传承。
<br>很多地方都有4500年前五帝时代的玉人头像出土，特别是湖北石家河文化（图5.11）中的玉人头像，跟良渚玉琮造型非常接近——有很夸张的大鼻子大耳朵。这个玉器是上海博物馆的馆藏之宝，这个造型与3600年前的三星堆青铜人头像非常相似，这说明三星堆文物不是从埃及、巴比伦来的，而是我们自己传承下来的。以前有玉石就用玉石来做，后来有了青铜合金，就用青铜来做，都是夏人用于祭祀列祖列宗的。后世说“夏人尚鬼”，就是夏人喜欢把自己的祖宗刻成雕像放在一起的意思。这些雕像从良渚文化，延续到颛顼时代的石家河文化，再到齐家文化。<br>考古中发现，4500年前良渚文化开始北上，进入山东，甚至影响中原。江浙地区的良渚最高统治贵族可能都跑掉了，只剩下留守政府。到4400年前，良渚文化的影响又出现在陕西、甘肃、青海的齐家文化中。齐家文化把马家窑文化取代了。齐家文化中出现大量类似良渚的玉琮、玉璧，还有一些中原的玉刀，所以齐家文化其实可以被称为西北良渚文化。还有一拨人从江浙一带把玉璧带到广东北部韶关一带，产生了广东的良渚文化，叫石硖文化。<br>这些信息连在一起，是什么关系？研究上古历史，就像破案一样。这段历史很可能是这样的：少昊是五帝第一代，少昊打败末代黄帝，进入中原；过了100年，良渚变强北上，打败少昊得了天下，这就是颛顼时代；再过100年，帝喾从安徽河南一带兴起，打败颛顼夺得天下，颛顼没法回到江浙，于是逃到西北，就形成齐家文化；颛顼流亡到西北，经过几代人，传到大禹。传说“夏为越后”即大禹是东南的越人，又说“禹出西羌”，在这个故事里就都能解释：大禹祖籍浙江，生于陕西。对齐家文化的贵族作基因分析，可以判定他们是不是来自浙江良渚文化的后裔。如果再检测一下疑似夏都的二里头文化遗址中的贵族基因，看看他们与齐家文化的贵族是不是同一个家族的，那么夏朝有没有，就真相大白了。所以齐家文化，特别是石峁古城的贵族基因很重要。齐家文化中的老百姓肯定与夏人的贵族不是同一个族群，而是此前的马家窑文化的当地人，其中很多是5300年前从中原跑过去的仰韶文化贵族的后代。<br>“一带一路”上的东西方交流可能开始得非常早，4400～4100年前，因为东西方文化的交流，中国的技术和物资传给西方，西方也传给中国三件宝贝，直接传到西北齐家文化中，那就是麦子、羊、青铜。北方以前一直种小米，收成并不好。引种麦子后，能养活更多人。夏人治水，开发黄河流域的河套地区，建设塞上江南，人口就迅速增长起来，夏人还建了陕北神木的石峁古城和旁边延安峁等好几个古城。齐家文化的石峁很有可能是颛顼流亡政府所在地。所以传说中的大禹治水很可能就是兴修河套水利，水治好后可以耕种大片麦田，邦国才可以兴盛。第二件宝贝羊，羊是特别好的肉食来源。羊比猪好养，大禹的士兵吃了肉食身体强壮，比舜的士兵强多了，可被称为战斗民族。第三件宝贝青铜，是开挂的武器，舜帝的士兵都拿着石制兵器，大禹的士兵拿的是青铜武器，坚固多了。所以大约4000年前，考古文化中发现，石峁的力量从陕北武力扩张，攻下山西南部尧都平阳，就是陶寺遗址[26]。舜帝的时代就此结束。上古的三皇五帝可能是8个朝代，每个朝代有很多帝王。例如尸子说“神农七十世有天下”。舜帝可能也不止一个。舜一世死后葬在陶寺，舜二世被大禹追到湖南南边，被传为“南巡”。史书上说，舜南狩禅位于禹。后来舜二世死在湖南，舜帝的两个妃子（舜二世的母亲）半道上哭死在洞庭湖君山，留下了湘妃的传说。<br>这个故事看来是讲得下去的。有了麦子和羊作为充沛的食物、有了青铜作为锋利武器之后，在大禹治理下，夏人带领着本来被统治的羌人，取得了天下。所以至今很多羌人都认大禹为祖先，也认颛顼为祖先。从那时起羌人的文化变化了，开始养羊，也从那以后叫羌人。《说文解字》说，羌从人从羊。科技考古人员筛选西北地区考古遗址中的麦粒，测定最早的麦粒就是4100年前的[27,28]。4000多年前就建立了传说中的夏朝，这个年代框架，考古结果与历史记载完全对应。所以我们认为夏后氏的起源，最早从良渚开始，4500年前进入中原，开始五帝中第二个朝代颛顼，4400年前流亡到西北，定都石峁开始齐家文化。然后在4000年前又进入中原，建立了夏朝。在二里头的宫城里挖出的最精美的一件青铜重器就是绿松石镶嵌的青铜龙。龙的造型非常奇特，有很夸张的铲刀形面部，大鼻子，小眼睛。同样的造型从来没有在其他考古遗址中发现过，但是2019年，在陕北的石峁古城中挖出的石雕的龙纹，与二里头绿松石青铜龙的造型几乎一模一样（图5.11）。这又是夏人来自西北的一项证据。这是把历史和考古结合在一起的推理。<br>4400年前颛顼朝被灭，留在江浙良渚文化老家的贵族必然受到打击，良渚文化因此灭亡。统治者向南逃亡到了广东，产生石硖文化。后来这一人群又演化成历史上的百越民族，就是现在的侗傣语系族群。包括老挝、泰国、印度阿萨姆邦的主体民族都是侗傣语系的。实际上泰国常用的龙的造型也是大鼻子小眼睛的，与石峁和二里头的龙可能是同一起源（图5.11）。所以很多少数民族并不是各地独立形成的，而是从中华文明的核心因为历史原因分化出来的，甚至可能是统治者的直接后代。羌人可能是涿鹿之战后失势的炎帝的后人，跑到西北变成藏缅语族的氐羌族群。苗族可能是太昊伏羲氏的血裔，在涿鹿之战中失势，从江淮湖广地区跑到湘西山里去了。侗傣民族是颛顼失去天下后部分贵族跑到南方后变成的。所以民族不是一个个孤立的群体，中华民族本来是一家子，后来因为各种历史政治原因流散开。涿鹿之战以后，红山文化的原始汉族就融合成更大的汉族，没有走掉留在中原的仰韶文化民众不会变成羌族，而是融入汉族。山东大汶口文化的少昊是太昊伏羲的后代，少昊统治中原的时候，民众也融入了汉族。结果在汉族里，伏羲的后代占的比例最高，达19%，黄帝的后人（O3-M117）比伏羲的（O3-F11）还少一点。<br>夏朝末年时，商灭夏不仅仅是一场战役。刚开始商汤灭夏，夏人就逃到南方长江流域的安徽，史称“夏都南巢”。南夏北商对峙了大约300年。直到后来商人可能有了战马，才把南夏灭了，夏人又逃到了四川，把宗庙搬到那里，所以留下了三星堆那么多精美的青铜重器。这就是《三字经》里的“四百载，迁夏社”。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211602880.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.12　广西发现的新石器时代赤璋。这是华夏六礼中礼南方的重器，证明广西邕江流域百越族群在当时已在华夏文明圈内。（实物藏于广西民间收藏博物馆）
<br>历史人类学的研究，将不同领域的丰富证据结合在一起。我们不妨给中国的族群演化作一小结。<br><br>历史人类学的研究，将不同领域的丰富证据结合在一起。我们不妨给中国的族群演化作一小结。<br><br>约8000～6000年前，桑干河流域的小米种植人群渐渐增多，向外扩张寻找更多可耕地。约8000年前向南扩散的人群延伸到了黄河流域，发展出裴李岗—仰韶文化。约6000年前向北扩散的人群延伸到西辽河流域，征服了当地的赵宝沟文化人群，发展成了红山文化。汉藏语系的分化就此开始。南下人群奠定了藏缅语族基础，北上人群奠定了汉语族基础。在红山文化最高规格墓葬人骨中，检测到了汉族最主流的 Y 染色体类型 O-M117。<br>约5400年前，气候转冷，红山文化人群南下，跨过涿鹿的桑干河，可能渐次征服了各地人群，民族发生大融合。因此，约5300年前，中国各地的文化多发生巨变。中原的仰韶文化西迁，征服了甘青的大地湾文化，形成马家窑文化。湖广的大溪文化变成屈家岭文化。江浙的崧泽文化变成良渚文化。各地多开始如红山文化一样大量用玉，也出现了许多同样的刻符。仰韶西迁使汉藏语系最终分化。汉语族成为东部主流，藏缅语族成为西部主流。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211603415.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.13　第十一棵进化树——汉藏语系演化。图中数字为距今大致年数。
<br>约4400年前，可能由于来自良渚的齐家文化入侵，马家窑文化终结，部分藏缅人群南迁，发生了第一次分化。约3600年前的夏商之战，约3000年前的商周之战，以及约2600年前的秦羌之战，使藏缅语族分化成了6个主要的语支。<br>春秋战国的诸侯割据，使汉语族分化成了秦、齐、楚3个主要语支。<br><br>汉语5000多年前就已南下，并深度影响了长江流域的上古苗瑶语和侗傣语，但早期汉语并未成为长江流域的主流。秦汉时期，对南方的征伐使汉语渐渐强势。而后来中原的历次战乱使汉族大量人口南下，将其基因与语言文化带到了江南和岭南。特别是东晋、晚唐、南宋的三次大规模南迁，使汉族的南方基因组与北方基因组基本趋同，而显著不同于周边少数民族。虽然历史上北方的汉族人群受到外族影响巨大，但在人口比例上汉族占绝对优势，因此汉族各地基因组基本一致，特别是 Y 染色体。<br>迁到各地的人群因为交流沟通减少，语言渐渐演变分化，形成诸多方言语种。目前汉语的各主要方言基本是因五代十国时期的割据分化形成的。五代的中原地区形成了官话，北汉形成了晋语，吴越形成了吴语，南唐形成了赣语与客家话，闽国形成了诸闽语，南汉形成了粤语，楚国形成了湘语……<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211604648.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.14　第十二棵进化树——汉语族语言演化。
<br>各方言因为移民来源不同，分属于秦、齐、楚三个语支。秦语支丢失了浊辅音，却保留了复杂的韵母系统。楚语支保留了复杂的浊辅音，而丢失了双元音韵母和复杂的韵尾。齐语支有其独特的演化方向，最有特色的是翘舌音变成了普通舌尖塞音（d, t）。<br>汉族虽然内部有诸多差异，但相对外族在基因、语言、文化诸多方面保持了最大的一致性，更由于政权统一时间长，内部认同强，因此稳定地维持为同一个民族。<br><br>江浙地区自古有着独特的文化区系。史前为原始南岛-侗傣语的分布区，经历了马家浜文化、崧泽文化、良渚文化、钱山漾文化、马桥文化等考古时期。至今，上海南郊与丽水若干地区方言还保留了侗傣语特色的缩气塞音与大量侗傣语词汇。<br>春秋时期越国民众普遍使用侗傣语，当时留下的《越人歌》就记录了这种语言，上层则开始使用吴国从西部带来的汉语楚方言。越王政令《维甲令》（维甲修内矛赤鸡稽繇方舟航买仪尘治须虑亟怒纷纷士击高文习之于夷宿之于莱致之于单）中就出现了越汉词汇夹用的现象。这可能是现代吴语的起源。<br>秦汉以后，北方汉族陆续迁入，吴方言渐渐稳定并分化。从北向南的迁徙，在江浙内部形成两条路线，各分化出三个方言区。西线为宣州—婺州—处衢，东线为太湖—台州—东瓯，东线方言之间甚至没有明确的分界线。<br>北方移民增多也使吴语中的汉源词汇渐渐增多，但这种词汇的改换始终基于早期楚方言的语音——简化的韵母结构。可能由于江浙经济发展较快，特别是南宋以来，吴语发音倾向音节短促以提高效率，因此把所有延长发音时间的双元音和鼻音韵尾都简化成更多样的单元音或腭化音。在北部吴语（太湖方言区）中，这一现象尤为突出，甚至进一步取消了影响音节时长的舒声与入声的音长区分，也取消了入声的塞音韵尾的必需性，代之以不同的元音，使元音音位大幅增加。上海奉贤区的偒傣话甚至发展出了20个元音音位，成为世界上元音最多的语言。偒傣话书面形式是发展自楚篆的锦带书。<br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211604308.png" referrerpolicy="no-referrer" style="width: 500px; max-width: 100%;"><br>
图5.15　第十三棵进化树——吴语语言演化。
<br>前文讲述的涿鹿之战与禹夏起源，都是假说，有的证据多一点，有的证据少一点，但是我们可以大胆假设，给出中华民族早期历史的一个版本，这个版本不一定全对，尽管目前的证据似乎充分，但我们还是要继续小心求证。对于早期历史，文字记载也是有的，但是很多古文字学家对文字记载有较多争议。例如，在疑似尧的墓葬里挖出一个陶器，上面写着两个字“大尧”。“尧”字争议比较少，但是那个“大”字争议较多。早期文字不可能从商朝才开始，文字在商朝时已经很成熟了。但是我们发现，早在5300年前，全国各个文化区域，不管湖南、湖北，还是浙江、中原，刻画的符号都是一样的，这跟仓颉造字的传说很可能是一致的。我们传说中的历史很可能都是真的，但需要运用各种研究手段，搞清我们的历史。<br>有人认为“炎黄”不能讲，“中华”也不能讲，担心一说炎黄，会影响一些少数民族的情绪。其实少数民族也是炎黄的后代，比如维吾尔族里有10%炎黄后代的基因，藏族里面一半的基因都是炎帝神农传下来的，另外，苗族、羌族，很多人都是伏羲炎黄后代。其实西南一些外国人也是炎黄子孙。中华民族的血缘纽带是剪不断的，从来不是想象出来的，而是切切实实存在的。<br><br>
<br>
高晶一．汉语与乌拉尔语言同源关系概论[M]//张维佳．地域文化与中国语言．北京：商务印书馆，2014,36-90.

<br>
Gao J Y. On etymology of Sinitic, Indo-European and Uralic terms for‘star’ supported by regular sound correspondences[J]. Archaeoastronomy and Ancient Technologies,2020,8（2）:29-40.

<br>
Wang C C, Yan S, Hou Z, et al. Present Y chromosomes reveal the ancestry of Emperor Cao Cao of 1,800 years ago[J]. Journal of Human Genetics,2012,57:216-218.

<br>
Wang C C, Yan S, Yao C, et al. Ancient DNA of Emperor CAO Cao's granduncle matches those of his present descendants[J]. Journal of Human Genetics, 2013, 58:238-239.

<br>
文少卿，王传超，敖雪，等．古DNA证据支持曹操的父系遗传类型属于单倍群O2-F1462[J]．人类学学报，2016,35（4）:617-625.

<br>
徐丹，傅京起．语言接触与语言变异[M]．北京：商务印书馆，2019,69-96.

<br>
宋兆麟．民族学中的人头祭与有关的考古资料[J]．广西民族研究，1986, （1）:66-77.

<br>
金汉波．史前至商周时期的人头崇拜及其相关问题[J]．民俗研究，2005, （4）:89-111.

<br>
孟鸥．从卜辞看商代的人祭之法[J]．青岛大学师范学院学报，2000,17（4）:23-32.

<br>
王胜华．西盟佤族的猎头习俗与头颅崇拜[J]．中国文化，1994, （1）:71-77.

<br>
赵晔．良渚文明的圣地[M]．杭州：杭州出版社，2013.

<br>
刘斌，余靖静，曾奇琦．五千年良渚王国[M]．杭州：浙江少年儿童出版社，2019.

<br>
易华．从玉帛古国到干戈王“國”[J]．甘肃社会科学，2017, （6）:62-68.

<br>
侯毅．从东胡林遗址发现看京晋冀地区农业文明的起源[J]．首都师范大学学报：社会科学版，2007, （1）:25-28.

<br>
张文绪，袁家荣．湖南道县玉蟾岩古栽培稻的初步研究[J]．作物学报，1998, （4）:416.

<br>
张明华．抚胸玉立人姿式意义暨红山文化南下之探讨[J]．上海博物馆集刊，2005, （10）:411-422.

<br>
南海森．濮阳西水坡[M]．郑州：中州古籍出版社，2012.

<br>
Yan S, Wang C C, Zheng H X, et al. Y Chromosomes of 40% Chinese Descend from Three Neolithic Super-Grandfathers[J]. PLoS ONE,2014,9（8）: e105691.

<br>
贺刚．湘西史前遗存与中国古史传说[M]．长沙：岳麓书社，2013.

<br>
辽宁省文物考古研究所．牛河梁：红山文化遗址发掘报告（1983～2003年度）[M]．北京：文物出版社，2012.

<br>
郭大顺．牛河梁红山文化遗址与玉器精粹[M]．北京：文物出版社，1997.

<br>
熊增珑，樊圣英，李道新，等．辽宁朝阳市半拉山红山文化墓地[J]．考古，2017, （7）:18-30+2.

<br>
Wen S Q, Tong X Z, Li H. Y-chromosome-based genetic pattern in East Asia affected by Neolithic transition[J]. Quaternary International,2006,426:50-55.

<br>
中国社会科学院考古研究所，山西省临汾市文物局．襄汾陶寺：1978～1985年发掘报告[M]．北京：文物出版社，2015.

<br>
Li H, Huang Y, Mustavich L F, et al. Y chromosomes of Prehistoric People along the Yangtze River[J]. Human Genetics,2007,122:383-388.

<br>
徐峰．石峁与陶寺考古发现的初步比较[J]．文博，2014, （1）:18-22.

<br>
Lister D L, Jones H, Oliveira H R, et al. Barley heads east: genetic analyses reveal routes of spread through diverse Eurasian landscapes[J]. PLoS ONE, 2018, 13 （7）: e0196652.

<br>
Liu X, Lister D L, Zhao Z, et al. Journey to the east: diverse routes and variable flowering times for wheat and barley en route to prehistoric China[J]. PLoS ONE,2017, 12（11）: e0187405.

]]></description><link>书籍\人类起源与迁徙之谜（第五章）.html</link><guid isPermaLink="false">书籍/人类起源与迁徙之谜（第五章）.md</guid><pubDate>Mon, 21 Oct 2024 08:10:17 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211555873.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202410211555873.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[牛刀小试]]></title><description><![CDATA[ 
 <br><br>假设，某种特定的癌症的患病率为0.1%(0.001)。有一个简易的方法能够检查出是否患上这种癌症:患上这种癌症的人中有95%(0.95)的概率被诊断为阳性。但另一方面，健康人群也有2%(0.02)的可能性被误诊为阳性。那么，如果在这个检查中被诊断为阳性的时候，实际患上这种癌症的概率为多少呢?<br>解：假设在人群中患病为 ，那么不患病就是 ，那么<br><br>在患病的情况下被诊断为阳性为 ，没患病且被诊断为阳性为 。那么，根据贝叶斯定律：<br><br>那么就等于(0.95×0.001)/((0.95×0.001)+0.02×0.999)<br><br>
假设夫妻俩的第一个孩子是女儿。那么，接下来生的孩子依然是女儿的概率为多少？
<br>第一，从统计学观点来看，生男生女的比率并不是各占一半的。事实上，生男孩的比率会稍微高一点。在日本，生男生女的概率比约为 51:49。即使具体比率上有所差别，但“男孩的概率高一些”这一特性，是全世界共通的。不管原因如何，在生物学上，男女的出生率有着其固有的结构，因此，不能说这种现象与投硬币有着同等的概率。<br>第二，那位读者的医生朋友观察的是“关于多数夫妻生下来的多数孩子的样本统计”，而不是“针对某对特定的夫妻所生的孩子进行的统计”。即使人类整体在统计时呈现出 51:49这样稳定的比率，但某一对特定夫妻所生孩子是男还是女的问题上，并不一定遵循这个比率。这对夫妻有其固有的特性，因此也不能否定是否存在“生女孩稍微容易一点”或“生男孩稍微容易一点”这种性向的可能性。<br>标准统计学（又称内曼－皮尔逊统计学）在阐明全人类范围内的男女例这一性向问题时是有效的，但不能用来解答“特定的某一对夫妻更容易生男孩还是女孩”的问题。这是因为，如果不使用达到一定程度的大量数据，就不能运用标准统计学来推断，关于这一点，在第8讲中会进行详细的解说。理由是，对于某一对特定的夫妻，他们所生的孩子数量，并不足以用来进行统计验证；而且，在生下大量的孩子的过程中，随着年龄的增长，身体条件也会发生变化。]]></description><link>书籍\统计学关我什么事：生活中的极简统计学.html</link><guid isPermaLink="false">书籍/统计学关我什么事：生活中的极简统计学.md</guid><pubDate>Thu, 20 Jun 2024 12:44:14 GMT</pubDate></item><item><title><![CDATA[序言]]></title><description><![CDATA[<a class="tag" href="?query=tag:excalidraw" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#excalidraw</a> <a class="tag" href="?query=tag:想法" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#想法</a> <a class="tag" href="?query=tag:想法" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#想法</a> <a class="tag" href="?query=tag:想法" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#想法</a> <a class="tag" href="?query=tag:想法" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#想法</a> <a class="tag" href="?query=tag:想法" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#想法</a> <a class="tag" href="?query=tag:想法" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#想法</a> <a class="tag" href="?query=tag:想法" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#想法</a> 
 <br><br>动植物也是研究古代人群的迁徙的好材料。<br>
比如<br>
<br>C3 植物是指二氧化碳在光合作用中直接固定成为三碳化合物，即3-磷酸甘油酸：如小麦、大米、玉米、大豆等。
<br>C4 植物则是指二氧化碳在光合作用中首先被固定成为四碳化合物， 即草酸：玉米、甘蔗、高粱等。<br>
这2种物质分别在不同的农作物中不同。<br>
微量同位元素的应用：人活着的时候，会从环境和食物中吸收特定的元素，死了之后，骨骼、牙齿还有茎秆会留下元素信息。通过这些信息就可以知道所吃的食物的营养成分。
<br><br>魏敦瑞在北京周口店，距今77万年。附近发现了<a data-href="北京猿人" href="术语\北京猿人.html" class="internal-link" target="_self" rel="noopener nofollow">北京猿人</a>，魏敦瑞提出了巨人假说，但是后来被证明是错误的。但是他对于<a data-href="北京猿人" href="术语\北京猿人.html" class="internal-link" target="_self" rel="noopener nofollow">北京猿人</a>的猜测：<a data-href="多中心假说" href="术语\多中心假说.html" class="internal-link" target="_self" rel="noopener nofollow">多中心假说</a>，后来演变成为了<a data-href="连续进化附带杂交假说" href="术语\连续进化附带杂交假说.html" class="internal-link" target="_self" rel="noopener nofollow">连续进化附带杂交假说</a>。<br>距今330万年，东非的肯尼亚境内，发现了石制品。<br>
中国境内的石制品落后于非洲，这证明了中国境内独立进化？<br>
但是后来分子生物学的技术不认为是这样。<br><br>线粒体夏娃距今14万年。<br>
Y染色体亚当距今6万年。在科伊桑人。<br>
所以<a data-href="北京猿人" href="术语\北京猿人.html" class="internal-link" target="_self" rel="noopener nofollow">北京猿人</a>不是祖先。<br><br><br>基因学者认为：各地的智人都源自非洲，并非是各地的直立人进化而来的。<br>
就连在<a data-href="云南" href="术语\云南.html" class="internal-link" target="_self" rel="noopener nofollow">云南</a>发现的<a data-href="元谋人" href="术语\元谋人.html" class="internal-link" target="_self" rel="noopener nofollow">元谋人</a>，应该也被错误估计了时间。<br><br>为什么亚洲人有<a data-href="铲形门齿" href="术语\铲形门齿.html" class="internal-link" target="_self" rel="noopener nofollow">铲形门齿</a>？<br>
原因是，这个基因是决定腺体分泌的。<br><br>为什么周口店的<a data-href="北京猿人" href="术语\北京猿人.html" class="internal-link" target="_self" rel="noopener nofollow">北京猿人</a>没有留下后代？也许是因为环境因素导致的。也有可能是<a data-href="塔岛技术悲剧" href="术语\塔岛技术悲剧.html" class="internal-link" target="_self" rel="noopener nofollow">塔岛技术悲剧</a>。还有可能近亲繁殖导致的致病遗传。<br>
比如在中国境内，距今10万年-4万年没有发现任何古人类遗迹，可能是它们灭绝了。<br><br><br>正如<a data-href="格鲁吉亚人" href="术语\格鲁吉亚人.html" class="internal-link" target="_self" rel="noopener nofollow">格鲁吉亚人</a>人类可能是第一批走出非洲的直立人。<br>
后来又发现了<a data-href="海德堡人" href="术语\海德堡人.html" class="internal-link" target="_self" rel="noopener nofollow">海德堡人</a>。可以算是一种晚期直立人。<br>总之，在现代智人还没有冲出非洲的时候，外面至少有3种古人类生活着：<br>
<br><a data-href="尼安德特人（Neanderthal）" href="术语\尼安德特人（neanderthal）.html" class="internal-link" target="_self" rel="noopener nofollow">尼安德特人（Neanderthal）</a>
<br><a data-href="丹尼索瓦人（Denisovan）" href="术语\丹尼索瓦人（denisovan）.html" class="internal-link" target="_self" rel="noopener nofollow">丹尼索瓦人（Denisovan）</a>
<br><a data-href="直立人" href="直立人" class="internal-link" target="_self" rel="noopener nofollow">直立人</a>
<br>认为大概距今40万年，<a data-href="尼安德特人（Neanderthal）" href="术语\尼安德特人（neanderthal）.html" class="internal-link" target="_self" rel="noopener nofollow">尼安德特人（Neanderthal）</a>和<a data-href="丹尼索瓦人（Denisovan）" href="术语\丹尼索瓦人（denisovan）.html" class="internal-link" target="_self" rel="noopener nofollow">丹尼索瓦人（Denisovan）</a>分道扬镳，前者走向了欧洲，后者走向了亚洲。<br><br><br>这其实也有运气的成分，例如：<br><br>内蒙古曾经有一个很大的湖泊，叫做<a data-href="居延海" href="术语\居延海.html" class="internal-link" target="_self" rel="noopener nofollow">居延海</a>。<br>在<a data-href="北京猿人" href="术语\北京猿人.html" class="internal-link" target="_self" rel="noopener nofollow">北京猿人</a>遗址的附近，有一个<a data-href="田园洞人" href="术语\田园洞人.html" class="internal-link" target="_self" rel="noopener nofollow">田园洞人</a>遗址。距今大概4.2万年-3,85万年，很可能是海岸暴走族的后代。而且<a data-href="田园洞人" href="术语\田园洞人.html" class="internal-link" target="_self" rel="noopener nofollow">田园洞人</a>与亚马孙人的遗传关系很近。但是<a data-href="田园洞人" href="术语\田园洞人.html" class="internal-link" target="_self" rel="noopener nofollow">田园洞人</a>最终灭绝了。<br>更有趣的是，在<a data-href="田园洞人" href="术语\田园洞人.html" class="internal-link" target="_self" rel="noopener nofollow">田园洞人</a>附近，有<a data-href="山顶洞人" href="术语\山顶洞人.html" class="internal-link" target="_self" rel="noopener nofollow">山顶洞人</a>遗址，它们生活在3.4万年-2.9万年，但是很不幸，在战火中消失，应该是草原狩猎族的后代。<br><br>
<br>3万年前，海岸暴走族也开始北上，也可能走了2条路。

<br>从海岸到华南
<br>从河流到<a data-href="云南" href="术语\云南.html" class="internal-link" target="_self" rel="noopener nofollow">云南</a>


<br>以<a data-href="山顶洞人" href="术语\山顶洞人.html" class="internal-link" target="_self" rel="noopener nofollow">山顶洞人</a>为代表的这群人，从<a data-href="华北地区" href="术语\华北地区.html" class="internal-link" target="_self" rel="noopener nofollow">华北地区</a>到了<a data-href="黄河流域" href="黄河流域" class="internal-link" target="_self" rel="noopener nofollow">黄河流域</a>。开始逐渐发扬光大。但是好景不长，距今2.5万年，进入了<a data-href="末次盛冰期 (Last Glacial Maximum,LGM)" href="术语\末次盛冰期-(last-glacial-maximum,lgm).html" class="internal-link" target="_self" rel="noopener nofollow">末次盛冰期 (Last Glacial Maximum,LGM)</a>，它们可能向南迁徙。
<br>经过了一段时间的迁徙和混合，中国内陆形成了2批人。干脆直接用组合1和组合2来代替。<br>
<br>组合1在<a data-href="中国北方" href="术语\中国北方.html" class="internal-link" target="_self" rel="noopener nofollow">中国北方</a>现代人的频率高
<br>组合2在<a data-href="中国南方" href="术语\中国南方.html" class="internal-link" target="_self" rel="noopener nofollow">中国南方</a>现代人的频率高<br>
但是！这2种组合的人并不是分别从<a data-href="中国南方" href="术语\中国南方.html" class="internal-link" target="_self" rel="noopener nofollow">中国南方</a>和<a data-href="中国北方" href="术语\中国北方.html" class="internal-link" target="_self" rel="noopener nofollow">中国北方</a>进入中国的。<br>
科学家认为，他们都是从南方进入的。只是组合2在南方扩展比较早，而组合1到达北方之后才迅速扩张。<br>
而当时的那群草原狩猎族和他们的后代<a data-href="山顶洞人" href="术语\山顶洞人.html" class="internal-link" target="_self" rel="noopener nofollow">山顶洞人</a>可能不容乐观。
<br>根据目前的研究，基因多样性从多到少：<br>
南方非汉族人群＞男方汉族＞北方汉族＞北方非汉族人群。<br>
根据对牙齿的描述，可以分为<a data-href="巽他型牙齿" href="术语\巽他型牙齿.html" class="internal-link" target="_self" rel="noopener nofollow">巽他型牙齿</a>和<a data-href="中国型牙齿" href="术语\中国型牙齿.html" class="internal-link" target="_self" rel="noopener nofollow">中国型牙齿</a>。<br><br>可能<a data-href="巽他型牙齿" href="术语\巽他型牙齿.html" class="internal-link" target="_self" rel="noopener nofollow">巽他型牙齿</a>就是组合2，<a data-href="中国型牙齿" href="术语\中国型牙齿.html" class="internal-link" target="_self" rel="noopener nofollow">中国型牙齿</a>就是组合1。<br>后来出现了<a data-href="遗传漂变（genetic drift）" href="术语\遗传漂变（genetic-drift）.html" class="internal-link" target="_self" rel="noopener nofollow">遗传漂变（genetic drift）</a>。<br><br><br><a data-href="贾湖遗址" href="术语\贾湖遗址.html" class="internal-link" target="_self" rel="noopener nofollow">贾湖遗址</a>距今9000-7800年，在河南舞阳，这里有骨笛存在。<a data-href="新仙女木期（Younger Dryas）" href="术语\新仙女木期（younger-dryas）.html" class="internal-link" target="_self" rel="noopener nofollow">新仙女木期（Younger Dryas）</a>的降温事件使得食物变成了很大的问题，于是智人开始采集。<br>我们需要明确一个观点：古人在有吃有喝的情况下不会选择去吃不好吃的农作，而会选择吃肉。<br>粟和黍的起源地可能不一样。粟最早出现在<a data-href="中国北方" href="术语\中国北方.html" class="internal-link" target="_self" rel="noopener nofollow">中国北方</a>的深林草原过度地带，而黍在稍微偏南一点的地方，例如<a data-href="太行山" href="太行山" class="internal-link" target="_self" rel="noopener nofollow">太行山</a>和<a data-href="燕山山脉" href="燕山山脉" class="internal-link" target="_self" rel="noopener nofollow">燕山山脉</a>。<br>
河北南部有一个<a data-href="磁山遗址" href="术语\磁山遗址.html" class="internal-link" target="_self" rel="noopener nofollow">磁山遗址</a>。换句话说，万年前的<a data-href="中国北方" href="术语\中国北方.html" class="internal-link" target="_self" rel="noopener nofollow">中国北方</a>古人吃黄米，后来才吃小米。<br>
农作物的驯化是一个漫长的过程。<br>
<a data-href="菽（Glycine max）" href="术语\菽（glycine-max）.html" class="internal-link" target="_self" rel="noopener nofollow">菽（Glycine max）</a>也是北方的另一个重要农作物。<br>
英国考古学家发现在距今<br>
<br>7000年的欧洲到黑海到东欧和中欧的多个地点都发现了<a data-href="黍（Panicum miliaceum）" href="术语\黍（panicum-miliaceum）.html" class="internal-link" target="_self" rel="noopener nofollow">黍（Panicum miliaceum）</a>，
<br>距今5000年欧洲又发现了<a data-href="粟（millet）" href="术语\粟（millet）.html" class="internal-link" target="_self" rel="noopener nofollow">粟（millet）</a>，距今3000年<a data-href="粟（millet）" href="术语\粟（millet）.html" class="internal-link" target="_self" rel="noopener nofollow">粟（millet）</a>种植明显增加，可能是经过草原传到了欧洲。
<br>韩国距今4500年发现了<a data-href="粟（millet）" href="术语\粟（millet）.html" class="internal-link" target="_self" rel="noopener nofollow">粟（millet）</a>，日本距今4000年发现了<a data-href="粟（millet）" href="术语\粟（millet）.html" class="internal-link" target="_self" rel="noopener nofollow">粟（millet）</a>。<br>
有可能<a data-href="粟（millet）" href="术语\粟（millet）.html" class="internal-link" target="_self" rel="noopener nofollow">粟（millet）</a>传播到印度。
<br><br>在中国长江流域的湖南的<a data-href="城头山遗址" href="城头山遗址" class="internal-link" target="_self" rel="noopener nofollow">城头山遗址</a>，发现了8000年前的的人工栽培<a data-href="稻（Oryza sativa L.）" href="术语\稻（oryza-sativa-l.）.html" class="internal-link" target="_self" rel="noopener nofollow">稻（Oryza sativa L.）</a>，以及灌溉系统。<br>
在江西北部的<a data-href="吊桶环遗址" href="吊桶环遗址" class="internal-link" target="_self" rel="noopener nofollow">吊桶环遗址</a>，发现了距今12000年前的野生<a data-href="稻（Oryza sativa L.）" href="术语\稻（oryza-sativa-l.）.html" class="internal-link" target="_self" rel="noopener nofollow">稻（Oryza sativa L.）</a>和10000年前的栽培<a data-href="稻（Oryza sativa L.）" href="术语\稻（oryza-sativa-l.）.html" class="internal-link" target="_self" rel="noopener nofollow">稻（Oryza sativa L.）</a>硅石。<br>
湖南北部的<a data-href="玉蟾岩遗址" href="玉蟾岩遗址" class="internal-link" target="_self" rel="noopener nofollow">玉蟾岩遗址</a>，发现了18000年和14000年前的驯化<a data-href="稻（Oryza sativa L.）" href="术语\稻（oryza-sativa-l.）.html" class="internal-link" target="_self" rel="noopener nofollow">稻（Oryza sativa L.）</a>，为世界最早。<br>
所以，我们认为，<a data-href="中国南方" href="术语\中国南方.html" class="internal-link" target="_self" rel="noopener nofollow">中国南方</a>才是<a data-href="稻（Oryza sativa L.）" href="术语\稻（oryza-sativa-l.）.html" class="internal-link" target="_self" rel="noopener nofollow">稻（Oryza sativa L.）</a>的起源地。<br><a data-href="稻（Oryza sativa L.）" href="术语\稻（oryza-sativa-l.）.html" class="internal-link" target="_self" rel="noopener nofollow">稻（Oryza sativa L.）</a>分为2种：<br><br>最早出现的应该是<a data-href="粳稻" href="术语\粳稻.html" class="internal-link" target="_self" rel="noopener nofollow">粳稻</a>，出现在<a data-href="河姆渡遗址" href="术语\河姆渡遗址.html" class="internal-link" target="_self" rel="noopener nofollow">河姆渡遗址</a>，后来在印度恒河流域发现了<a data-href="籼稻" href="术语\籼稻.html" class="internal-link" target="_self" rel="noopener nofollow">籼稻</a>，之后中国的<a data-href="粳稻" href="术语\粳稻.html" class="internal-link" target="_self" rel="noopener nofollow">粳稻</a>传入印度，与<a data-href="籼稻" href="术语\籼稻.html" class="internal-link" target="_self" rel="noopener nofollow">籼稻</a>杂交，完成了驯化。<br>但是<a data-href="稻（Oryza sativa L.）" href="术语\稻（oryza-sativa-l.）.html" class="internal-link" target="_self" rel="noopener nofollow">稻（Oryza sativa L.）</a>真正开始大规模成为食物应该是在<a data-href="良渚文化" href="术语\良渚文化.html" class="internal-link" target="_self" rel="noopener nofollow">良渚文化</a>。之后向四面八方辐射。<br><br><a data-href="贾湖遗址" href="术语\贾湖遗址.html" class="internal-link" target="_self" rel="noopener nofollow">贾湖遗址</a>有饲养猪，吃猪肉的习惯。距今8000年前，就在<a data-href="黄河流域" href="黄河流域" class="internal-link" target="_self" rel="noopener nofollow">黄河流域</a>和<a data-href="长江流域" href="长江流域" class="internal-link" target="_self" rel="noopener nofollow">长江流域</a>，出现了家猪饲养。<br><a data-href="黄河流域" href="黄河流域" class="internal-link" target="_self" rel="noopener nofollow">黄河流域</a>的家猪应该是单一驯化中心起源。应该在<a data-href="贾湖遗址" href="术语\贾湖遗址.html" class="internal-link" target="_self" rel="noopener nofollow">贾湖遗址</a>附近。<br>
由于<a data-href="长江流域" href="长江流域" class="internal-link" target="_self" rel="noopener nofollow">长江流域</a>水产资源丰富，养猪始终不多，所以在5000年前，形成了南鱼北猪的局面。<br>后来，<a data-href="良渚文化" href="术语\良渚文化.html" class="internal-link" target="_self" rel="noopener nofollow">良渚文化</a>打破了这种局面，养猪开始多了起来，多半是因为人口多了，鱼类不满足了。<br><br>天时：全新世大暖期。也被称为<a data-href="仰韶文化" href="术语\仰韶文化.html" class="internal-link" target="_self" rel="noopener nofollow">仰韶文化</a>温暖期。<br>
地利：当时的黄土高原自然环境优越，非常适合农作物生长。<br>
人和：农具的发明和野生品种的驯化。<br>这段时间中国大地上面人口爆炸式增长。<br>
<a href=".?query=tag:excalidraw" class="tag" target="_blank" rel="noopener nofollow">#excalidraw</a> <a data-href="5000-4000年中原文化" href="5000-4000年中原文化" class="internal-link" target="_self" rel="noopener nofollow">5000-4000年中原文化</a>。<br>但是在农耕文明这段期间，大规模人群之间的基因交流并没有增加，因为农民要长期守着自己的田地。<br>古人类开荒的时候，可能选择放火烧山，变成耕地，二氧化碳上升，温室效应，温度升高，农作物吸收二氧化碳，产量上升。<br>
但是农业的发展也造成了疾病的传播，因为长期聚集在一个地方。和家禽混居。<br><br><br><a data-href="石峁遗址" href="术语\石峁遗址.html" class="internal-link" target="_self" rel="noopener nofollow">石峁遗址</a>距今4300年，延续了300年左右之后遗弃。<br>
充满了军事和暴力的色彩。而且还有壁画和起稿线。<br>
而且还有一些血腥的祭祀活动，以女性居多。<br>
他们应该是在防御来自北方草原的敌人。<br><br>冰河时代，祖先已经开始捕猎野马了。<br>
最早的马可能是<a data-href="哈萨克斯坦" href="哈萨克斯坦" class="internal-link" target="_self" rel="noopener nofollow">哈萨克斯坦</a>的，距今6000-5500年。<br>
距今5000年，骑马的游牧群体就开始向欧亚大陆四面八方扩散。草原人群开始突袭农耕社会的村镇。<br>
认为：游牧是从农耕社会衍生出来的而不是渔猎方式过渡来的，毕竟，驯化大型动物需要以农耕的粮食为基础。<br>中国的马是在<a data-href="商朝" href="商朝" class="internal-link" target="_self" rel="noopener nofollow">商朝</a>晚期突然出现的，距今3000年。<br>
换句话说，中国缺乏把野马驯化的过程。<br>那么，我们可以回答，<a data-href="石峁遗址" href="术语\石峁遗址.html" class="internal-link" target="_self" rel="noopener nofollow">石峁遗址</a>的古城是在防御日益强大的游牧民族。<br>
证据：<a data-href="石峁遗址" href="术语\石峁遗址.html" class="internal-link" target="_self" rel="noopener nofollow">石峁遗址</a>的头骨和其他区域的古人遗骨有明显的区别，说明不是自家人。祭祀坑里面的死者与<a data-href="夏家店下层文化" href="夏家店下层文化" class="internal-link" target="_self" rel="noopener nofollow">夏家店下层文化</a>的关系比较接近，证明他们的家乡在草原。<br>那么<a data-href="石峁遗址" href="术语\石峁遗址.html" class="internal-link" target="_self" rel="noopener nofollow">石峁遗址</a>的自家人是什么呢？证据显示，其与<a data-href="陶寺文化" href="术语\陶寺文化.html" class="internal-link" target="_self" rel="noopener nofollow">陶寺文化</a>人群关系密切，这些人群大概是<a data-href="仰韶文化" href="术语\仰韶文化.html" class="internal-link" target="_self" rel="noopener nofollow">仰韶文化</a>温暖期中的农耕社会在人口膨胀之后的人群。<br><br><a data-href="西亚" href="西亚" class="internal-link" target="_self" rel="noopener nofollow">西亚</a>地区是冶金术最早的地区，因为那里有最早的红铜制品。距今9000年。<br>
距今6000年的时候，砷铜出现在<a data-href="西亚" href="西亚" class="internal-link" target="_self" rel="noopener nofollow">西亚</a>的<a data-href="安纳托利亚农业人群（Anatolian farmer）" href="术语\安纳托利亚农业人群（anatolian-farmer）.html" class="internal-link" target="_self" rel="noopener nofollow">安纳托利亚农业人群（Anatolian farmer）</a>高原并风靡周边。<br>
距今5000年的古巴比伦，出现了青铜。<br>
在<a data-href="甘肃" href="甘肃" class="internal-link" target="_self" rel="noopener nofollow">甘肃</a>中南部发现了一把青铜刀，距今5000年，但是只有一把，所以可能是带过来的。<br>真正的冶炼应该是在4000年前的<a data-href="甘肃" href="甘肃" class="internal-link" target="_self" rel="noopener nofollow">甘肃</a>中东部和<a data-href="青海" href="青海" class="internal-link" target="_self" rel="noopener nofollow">青海</a>东北部一级<a data-href="内蒙古" href="内蒙古" class="internal-link" target="_self" rel="noopener nofollow">内蒙古</a>和<a data-href="宁夏" href="术语\宁夏.html" class="internal-link" target="_self" rel="noopener nofollow">宁夏</a>的<a data-href="齐家文化" href="术语\齐家文化.html" class="internal-link" target="_self" rel="noopener nofollow">齐家文化</a>。<br>
后来中原出现了更强大的<a data-href="二里头文化" href="术语\二里头文化.html" class="internal-link" target="_self" rel="noopener nofollow">二里头文化</a>，在青铜更进一步。青铜只配贵族享有，周朝的时候，建立了公侯伯子男等。<a data-href="齐家文化" href="术语\齐家文化.html" class="internal-link" target="_self" rel="noopener nofollow">齐家文化</a>可能对<a data-href="二里头文化" href="术语\二里头文化.html" class="internal-link" target="_self" rel="noopener nofollow">二里头文化</a>有影响。<br>但是<a data-href="二里头文化" href="术语\二里头文化.html" class="internal-link" target="_self" rel="noopener nofollow">二里头文化</a>并没有把青铜器作为武器。<br>青铜是怎么传入中国的？可能是通过新疆，也可能是通过草原。考古学家认为，多半是通过的草原。<br><br><a data-href="中华文明西来说" href="中华文明西来说" class="internal-link" target="_self" rel="noopener nofollow">中华文明西来说</a>和<a data-href="中华文明本土说" href="术语\中华文明本土说.html" class="internal-link" target="_self" rel="noopener nofollow">中华文明本土说</a>：发现中华的彩陶文化的出现，有东面早，西面晚的现象，这个不符合西来说。<br>
但是从另一个方面讲，在距今8000年的西亚，就已经出现了彩陶，根据地图，越是原理伊朗、伊拉克，彩陶时间越晚。<br>为什么呢？因为路线错了。虽然中国的彩陶受到了西方的激发，但是最早不是从<a data-href="新疆" href="术语\新疆.html" class="internal-link" target="_self" rel="noopener nofollow">新疆</a>和<a data-href="甘肃" href="甘肃" class="internal-link" target="_self" rel="noopener nofollow">甘肃</a>过来的，而是从草原来的。从<a data-href="内蒙古" href="内蒙古" class="internal-link" target="_self" rel="noopener nofollow">内蒙古</a>经过<a data-href="阴山山脉" href="阴山山脉" class="internal-link" target="_self" rel="noopener nofollow">阴山山脉</a>南下而来。<br>古代有<a data-href="居延海" href="术语\居延海.html" class="internal-link" target="_self" rel="noopener nofollow">居延海</a>和<a data-href="额济纳河（黑河，弱水）" href="术语\额济纳河（黑河，弱水）.html" class="internal-link" target="_self" rel="noopener nofollow">额济纳河（黑河，弱水）</a>，沟通了南北，沟通了<a data-href="青藏高原" href="术语\青藏高原.html" class="internal-link" target="_self" rel="noopener nofollow">青藏高原</a>北部，<a data-href="甘肃" href="甘肃" class="internal-link" target="_self" rel="noopener nofollow">甘肃</a><a data-href="河西走廊" href="河西走廊" class="internal-link" target="_self" rel="noopener nofollow">河西走廊</a>以及<a data-href="内蒙古" href="内蒙古" class="internal-link" target="_self" rel="noopener nofollow">内蒙古</a>，当时动植物资源丰富。<br>青铜和彩陶的路线很像，都是从<a data-href="内蒙古" href="内蒙古" class="internal-link" target="_self" rel="noopener nofollow">内蒙古</a>南下然后分成东西。<br><a data-href="二里头遗址" href="术语\二里头遗址.html" class="internal-link" target="_self" rel="noopener nofollow">二里头遗址</a>还有海北，上面有穿孔。刚开始的时候，人们认为其时中国的近海，但是却揭示这些贝壳属于暖水品种，生活在印度洋和中国南海的热带还与，绝对不会再中国的东海。所以应该是印度经过欧亚草原最终向南抵达中原。<br><br>最早的<a data-href="小麦" href="小麦" class="internal-link" target="_self" rel="noopener nofollow">小麦</a>起源<a data-href="西亚" href="西亚" class="internal-link" target="_self" rel="noopener nofollow">西亚</a>，距今10000年。距今7000年，小麦就达到了中亚，但是迟迟没有进入<a data-href="东亚" href="东亚" class="internal-link" target="_self" rel="noopener nofollow">东亚</a>。原因在于<a data-href="小麦" href="小麦" class="internal-link" target="_self" rel="noopener nofollow">小麦</a>的植物特性。它比较适合地中海气候，但是中国是季风气候，所以迟迟没有进入东亚。<br>
最终，在距今5200年进入了<a data-href="新疆" href="术语\新疆.html" class="internal-link" target="_self" rel="noopener nofollow">新疆</a>的<a data-href="阿尔泰山脉" href="术语\阿尔泰山脉.html" class="internal-link" target="_self" rel="noopener nofollow">阿尔泰山脉</a>。<br>
总之，距今3000年小麦一定已经传入了中原。<br>
传入中原之后，迅速发展。<br><a data-href="渭河" href="渭河" class="internal-link" target="_self" rel="noopener nofollow">渭河</a>是黄河的重要分支，是重要的农耕区。东周时期，<a data-href="小麦" href="小麦" class="internal-link" target="_self" rel="noopener nofollow">小麦</a>的产量非常高。秦汉时期，奠定了南稻北麦的局面。<br><br>距今10000年，绵羊就出现在了西亚。距今5200年，草原有了绵羊。所以大概是5000年前从草原传输带过来的。<br>牛包括：<br>
<br>黄牛

<br>普通牛：距今11000年在<a data-href="西亚" href="西亚" class="internal-link" target="_self" rel="noopener nofollow">西亚</a>北驯服。
<br>瘤牛：<a data-href="南亚" href="南亚" class="internal-link" target="_self" rel="noopener nofollow">南亚</a>的<a data-href="印度" href="印度" class="internal-link" target="_self" rel="noopener nofollow">印度</a>河谷驯化的，距今9000年左右。


<br>牦牛：略晚于普通牛，在<a data-href="中亚" href="中亚" class="internal-link" target="_self" rel="noopener nofollow">中亚</a>被驯服。
<br>水牛
<br>距今4500年，<a data-href="黄河流域" href="黄河流域" class="internal-link" target="_self" rel="noopener nofollow">黄河流域</a>出现了黄牛的迹象。因此有可能是欧亚草原过来的。中华大地上的第一批黄牛吃碳四类，也就是<a data-href="粟（millet）" href="术语\粟（millet）.html" class="internal-link" target="_self" rel="noopener nofollow">粟（millet）</a>和<a data-href="黍（Panicum miliaceum）" href="术语\黍（panicum-miliaceum）.html" class="internal-link" target="_self" rel="noopener nofollow">黍（Panicum miliaceum）</a>。<br>
黄牛除了通过欧亚草原传输带，还通过云南。<br><br><a data-href="中华文明本土说" href="术语\中华文明本土说.html" class="internal-link" target="_self" rel="noopener nofollow">中华文明本土说</a>有一个极端，<a data-href="中华文明西来说" href="中华文明西来说" class="internal-link" target="_self" rel="noopener nofollow">中华文明西来说</a>有另一个极端。要么认为一些物种的进出就决定了文明的走向，要么犯了<a data-href="塔岛技术悲剧" href="术语\塔岛技术悲剧.html" class="internal-link" target="_self" rel="noopener nofollow">塔岛技术悲剧</a>的原理。<br>远古文明的衰落应该2方面的原因：<br>
<br>人口增长
<br>气候变异
<br>最终导致了满天星斗到月明星稀。<br><br>认为最早的中国就是<a data-href="二里头文化" href="术语\二里头文化.html" class="internal-link" target="_self" rel="noopener nofollow">二里头文化</a>。<br>
苏美尔人最初是外来户，白手起家，以宗教来树立权威。<br>
这一点有点像<a data-href="良渚文化" href="术语\良渚文化.html" class="internal-link" target="_self" rel="noopener nofollow">良渚文化</a>。<br><br><br><a data-href="小河墓地（Xiaohe site）" href="术语\小河墓地（xiaohe-site）.html" class="internal-link" target="_self" rel="noopener nofollow">小河墓地（Xiaohe site）</a>位于<a data-href="新疆" href="术语\新疆.html" class="internal-link" target="_self" rel="noopener nofollow">新疆</a>的<a data-href="塔里木盆地（Tarim Basin）" href="术语\塔里木盆地（tarim-basin）.html" class="internal-link" target="_self" rel="noopener nofollow">塔里木盆地（Tarim Basin）</a>罗布泊附近，最早于1927年发现，但是因为战争，直到2000年。<br><a data-href="小河墓地（Xiaohe site）" href="术语\小河墓地（xiaohe-site）.html" class="internal-link" target="_self" rel="noopener nofollow">小河墓地（Xiaohe site）</a>距今大约3980-3540年。可能是罗布泊的最早定居者。她的母系基因认为，欧亚大陆东部的人群，例如<a data-href="内蒙古" href="内蒙古" class="internal-link" target="_self" rel="noopener nofollow">内蒙古</a><a data-href="贝加尔湖" href="术语\贝加尔湖.html" class="internal-link" target="_self" rel="noopener nofollow">贝加尔湖</a>一带，与西亚的人群在欧亚草原带相遇混合，之后南下，进入了罗布泊。<br>此外，<a data-href="小河墓地（Xiaohe site）" href="术语\小河墓地（xiaohe-site）.html" class="internal-link" target="_self" rel="noopener nofollow">小河墓地（Xiaohe site）</a>的人群还有少量的<a data-href="南亚" href="南亚" class="internal-link" target="_self" rel="noopener nofollow">南亚</a><a data-href="中亚" href="中亚" class="internal-link" target="_self" rel="noopener nofollow">中亚</a><a data-href="伊朗" href="伊朗" class="internal-link" target="_self" rel="noopener nofollow">伊朗</a>地区的基因。<br>
<br>早期的基因型不多，但是慢慢地母系多样性越来越复杂。
<br>但是父系基因型却不同，普遍属于欧亚大陆西部的基因型，而且早期和晚期没什么区别。 <a href=".?query=tag:想法" class="tag" target="_blank" rel="noopener nofollow">#想法</a> 是联姻？还是掠夺？
<br><a data-href="小河墓地（Xiaohe site）" href="术语\小河墓地（xiaohe-site）.html" class="internal-link" target="_self" rel="noopener nofollow">小河墓地（Xiaohe site）</a>有<a data-href="粟（millet）" href="术语\粟（millet）.html" class="internal-link" target="_self" rel="noopener nofollow">粟（millet）</a>和<a data-href="黍（Panicum miliaceum）" href="术语\黍（panicum-miliaceum）.html" class="internal-link" target="_self" rel="noopener nofollow">黍（Panicum miliaceum）</a>以及<a data-href="小麦" href="小麦" class="internal-link" target="_self" rel="noopener nofollow">小麦</a>，还有牛奶。这说明他们的西亚的基因使得其能够乳糖耐受。 <a href=".?query=tag:想法" class="tag" target="_blank" rel="noopener nofollow">#想法</a> 乳糖酶基因是否帮助这些人免疫力增强以至于拥有更大的影响力？<br>无论如何，<a data-href="小河墓地（Xiaohe site）" href="术语\小河墓地（xiaohe-site）.html" class="internal-link" target="_self" rel="noopener nofollow">小河墓地（Xiaohe site）</a>的人群指向了另一批人，那就是<a data-href="切穆尔切克文化（克尔木齐文化，Chemurchek）" href="术语\切穆尔切克文化（克尔木齐文化，chemurchek）.html" class="internal-link" target="_self" rel="noopener nofollow">切穆尔切克文化（克尔木齐文化，Chemurchek）</a>人群。<br>但是提到<a data-href="切穆尔切克文化（克尔木齐文化，Chemurchek）" href="术语\切穆尔切克文化（克尔木齐文化，chemurchek）.html" class="internal-link" target="_self" rel="noopener nofollow">切穆尔切克文化（克尔木齐文化，Chemurchek）</a>，就必须先知道<a data-href="颜那亚文化（Yamna culture）" href="术语\颜那亚文化（yamna-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">颜那亚文化（Yamna culture）</a>。<br>距今5600年，草原带西部，诞生了<a data-href="颜那亚文化（Yamna culture）" href="术语\颜那亚文化（yamna-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">颜那亚文化（Yamna culture）</a>，这批草原人群掌握了青铜技术。这个文化的特点就是喜欢<a data-href="竖穴墓" href="术语\竖穴墓.html" class="internal-link" target="_self" rel="noopener nofollow">竖穴墓</a>。就是从地面直接向下挖出墓室，埋葬死者。<br>
距今4000年，<a data-href="颜那亚文化（Yamna culture）" href="术语\颜那亚文化（yamna-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">颜那亚文化（Yamna culture）</a>人群扩散到欧亚草原东部，在<a data-href="贝加尔湖" href="术语\贝加尔湖.html" class="internal-link" target="_self" rel="noopener nofollow">贝加尔湖</a>附近。<br><a data-href="切穆尔切克文化（克尔木齐文化，Chemurchek）" href="术语\切穆尔切克文化（克尔木齐文化，chemurchek）.html" class="internal-link" target="_self" rel="noopener nofollow">切穆尔切克文化（克尔木齐文化，Chemurchek）</a>人群应该继承了<a data-href="颜那亚文化（Yamna culture）" href="术语\颜那亚文化（yamna-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">颜那亚文化（Yamna culture）</a>的西方基因加上东方的基因，在<a data-href="阿尔泰山脉" href="术语\阿尔泰山脉.html" class="internal-link" target="_self" rel="noopener nofollow">阿尔泰山脉</a>附近诞生了。<br>
<img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202311142228377.png" referrerpolicy="no-referrer"><br><br><a data-href="切穆尔切克文化（克尔木齐文化，Chemurchek）" href="术语\切穆尔切克文化（克尔木齐文化，chemurchek）.html" class="internal-link" target="_self" rel="noopener nofollow">切穆尔切克文化（克尔木齐文化，Chemurchek）</a>人群面临来自西方和东方的威胁。<br><br><img alt="image.png" src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202311142228255.png" referrerpolicy="no-referrer"><br><a data-href="奥库涅夫文化（Okunev Culture）" href="术语\奥库涅夫文化（okunev-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">奥库涅夫文化（Okunev Culture）</a>活跃在<a data-href="米努辛斯克盆地" href="米努辛斯克盆地" class="internal-link" target="_self" rel="noopener nofollow">米努辛斯克盆地</a>，位于南西伯利亚，靠近<a data-href="新疆" href="术语\新疆.html" class="internal-link" target="_self" rel="noopener nofollow">新疆</a>和<a data-href="内蒙古" href="内蒙古" class="internal-link" target="_self" rel="noopener nofollow">内蒙古</a>。相对比较易守难攻，是草原文化的摇篮。它们压制住了<a data-href="切穆尔切克文化（克尔木齐文化，Chemurchek）" href="术语\切穆尔切克文化（克尔木齐文化，chemurchek）.html" class="internal-link" target="_self" rel="noopener nofollow">切穆尔切克文化（克尔木齐文化，Chemurchek）</a>人群，但是遇到了<a data-href="四坝文化（Siba culture）" href="术语\四坝文化（siba-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">四坝文化（Siba culture）</a>人群。<br>后来，距今3400年，<a data-href="米努辛斯克盆地" href="米努辛斯克盆地" class="internal-link" target="_self" rel="noopener nofollow">米努辛斯克盆地</a>孕育了强大的<a data-href="卡拉苏克文化（Karasuk culture）" href="术语\卡拉苏克文化（karasuk-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">卡拉苏克文化（Karasuk culture）</a>，后者居然与商朝有交流。而<a data-href="卡拉苏克文化（Karasuk culture）" href="术语\卡拉苏克文化（karasuk-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">卡拉苏克文化（Karasuk culture）</a>的强盛导致了商朝的灭亡。<br><a data-href="卡拉苏克文化（Karasuk culture）" href="术语\卡拉苏克文化（karasuk-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">卡拉苏克文化（Karasuk culture）</a>扩张，导致原本生活在<a data-href="阿尔泰山脉" href="术语\阿尔泰山脉.html" class="internal-link" target="_self" rel="noopener nofollow">阿尔泰山脉</a>附近的部落南下寻找生存空间，就挤压了古代<a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>的生存空间，于是<a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>只能够朝<a data-href="河西走廊" href="河西走廊" class="internal-link" target="_self" rel="noopener nofollow">河西走廊</a>传导，影响了<a data-href="甘肃" href="甘肃" class="internal-link" target="_self" rel="noopener nofollow">甘肃</a>和<a data-href="陕西" href="陕西" class="internal-link" target="_self" rel="noopener nofollow">陕西</a>的部落，其中就有周人。<br><br>周人只能往东南方向走，后来商朝与东夷作战，导致后方空虚，被周人偷家。<br>
从<a data-href="切穆尔切克文化（克尔木齐文化，Chemurchek）" href="术语\切穆尔切克文化（克尔木齐文化，chemurchek）.html" class="internal-link" target="_self" rel="noopener nofollow">切穆尔切克文化（克尔木齐文化，Chemurchek）</a>南下直到周人克商朝，逃避不是办法。<br><br>古代世界的2大阵营，农耕社会和游牧社会，在4000-3000年前形成，比如雅利安人大扩张，灭了古印度，灭了古希腊。<br>后来东周“烽火戏诸侯”导致了自己的灭亡，其实体现了游牧民族的强大。<br>诗经·采薇：靡室靡家，猃狁之故，不遑启居，猃狁之故。 <a href=".?query=tag:想法" class="tag" target="_blank" rel="noopener nofollow">#想法</a>  猃狁是什么民族？<br>历史上的<a data-href="山戎" href="术语\山戎.html" class="internal-link" target="_self" rel="noopener nofollow">山戎</a>，也就是夏家店上层文化，被齐桓公给灭了。之后该地区形成了东胡。<br><br>距今4000年-2000年，欧亚大陆上面冲突不断。<br>有三种模式：<br>
<br>填空模式：哪里有空白，哪里就被占据。这种模式，一块新空间的种群基因是与他们的故乡种群一致，比较容易追踪。比如<a data-href="切穆尔切克文化（克尔木齐文化，Chemurchek）" href="术语\切穆尔切克文化（克尔木齐文化，chemurchek）.html" class="internal-link" target="_self" rel="noopener nofollow">切穆尔切克文化（克尔木齐文化，Chemurchek）</a>南下就是这种模式。
<br>群体替代模式：当没有空白的时候，强大的族群回去消灭驱赶弱小的族群。例如<a data-href="奥库涅夫文化（Okunev Culture）" href="术语\奥库涅夫文化（okunev-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">奥库涅夫文化（Okunev Culture）</a>驱赶<a data-href="切穆尔切克文化（克尔木齐文化，Chemurchek）" href="术语\切穆尔切克文化（克尔木齐文化，chemurchek）.html" class="internal-link" target="_self" rel="noopener nofollow">切穆尔切克文化（克尔木齐文化，Chemurchek）</a>群体，<a data-href="卡拉苏克文化（Karasuk culture）" href="术语\卡拉苏克文化（karasuk-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">卡拉苏克文化（Karasuk culture）</a>驱赶<a data-href="阿尔泰山脉" href="术语\阿尔泰山脉.html" class="internal-link" target="_self" rel="noopener nofollow">阿尔泰山脉</a>部落的情况。
<br>上层更换模式：各个族群都有很多人口，有所了解。一个区域的基因会很复杂，底层广大群众的基因型不变，而上层统治者的基因型改变。变化的不是生物基因，而是文化基因。
<br><br><br><a data-href="尼雅遗址" href="尼雅遗址" class="internal-link" target="_self" rel="noopener nofollow">尼雅遗址</a>位于新疆的<a data-href="塔克拉玛干沙漠" href="塔克拉玛干沙漠" class="internal-link" target="_self" rel="noopener nofollow">塔克拉玛干沙漠</a>，距今2200-1500年。从西汉一直到南北朝。是古代中国，古印度，古希腊，古波斯的罕见交汇点。<br>
在该处的一个成年男性的DNA进行检测，发现其属于欧亚大陆西部的基因型，与伊朗和西亚很近。属于<a data-href="精绝国" href="精绝国" class="internal-link" target="_self" rel="noopener nofollow">精绝国</a>。<br><a data-href="于阗国" href="于阗国" class="internal-link" target="_self" rel="noopener nofollow">于阗国</a>遗址距今2200-1700年。从西汉到三国两晋。与<a data-href="尼雅遗址" href="尼雅遗址" class="internal-link" target="_self" rel="noopener nofollow">尼雅遗址</a>人群接近。<a data-href="于阗国" href="于阗国" class="internal-link" target="_self" rel="noopener nofollow">于阗国</a>与<a data-href="精绝国" href="精绝国" class="internal-link" target="_self" rel="noopener nofollow">精绝国</a>都属于<a data-href="塔里木盆地（Tarim Basin）" href="术语\塔里木盆地（tarim-basin）.html" class="internal-link" target="_self" rel="noopener nofollow">塔里木盆地（Tarim Basin）</a>的<a data-href="昆仑山" href="昆仑山" class="internal-link" target="_self" rel="noopener nofollow">昆仑山</a>下区域。<a data-href="于阗国" href="于阗国" class="internal-link" target="_self" rel="noopener nofollow">于阗国</a>曾经吞并了<a data-href="精绝国" href="精绝国" class="internal-link" target="_self" rel="noopener nofollow">精绝国</a>。<br><br>在<a data-href="精绝国" href="精绝国" class="internal-link" target="_self" rel="noopener nofollow">精绝国</a>里面找到了“五星出东方，利中国讨南羌”。<br>当时的<a data-href="昆仑山" href="昆仑山" class="internal-link" target="_self" rel="noopener nofollow">昆仑山</a>又被叫做南山。<br>
南羌大概就是<a data-href="昆仑山" href="昆仑山" class="internal-link" target="_self" rel="noopener nofollow">昆仑山</a>的游牧民族。南山羌可能是古代羌人的后代。古代<a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>人的基因应该是欧亚大陆东部的基因加上了小<a data-href="月氏国" href="术语\月氏国.html" class="internal-link" target="_self" rel="noopener nofollow">月氏国</a>。<br><br><a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>的族缘是个谜。 <a href=".?query=tag:想法" class="tag" target="_blank" rel="noopener nofollow">#想法</a> 今天的技术能不能解决这个问题？<br>匈奴是很典型的上层更换模式。<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>的基因型有欧亚大陆东部的成分，也有西部的成分，直到现在都无法归类。语言学家也一直争论，究竟是蒙古语系统还是突厥语系统。<br>
在秦朝，西边是<a data-href="月氏国" href="术语\月氏国.html" class="internal-link" target="_self" rel="noopener nofollow">月氏国</a>，中间是<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>，东边是<a data-href="东胡" href="东胡" class="internal-link" target="_self" rel="noopener nofollow">东胡</a>。<br>
<a data-href="月氏国" href="术语\月氏国.html" class="internal-link" target="_self" rel="noopener nofollow">月氏国</a>可能是<a data-href="卡拉苏克文化（Karasuk culture）" href="术语\卡拉苏克文化（karasuk-culture）.html" class="internal-link" target="_self" rel="noopener nofollow">卡拉苏克文化（Karasuk culture）</a>的后代。而且<a data-href="月氏国" href="术语\月氏国.html" class="internal-link" target="_self" rel="noopener nofollow">月氏国</a>可能与<a data-href="吐火罗语(Tocharian language)" href="术语\吐火罗语(tocharian-language).html" class="internal-link" target="_self" rel="noopener nofollow">吐火罗语(Tocharian language)</a>有很大的关系。<br><a data-href="月氏国" href="术语\月氏国.html" class="internal-link" target="_self" rel="noopener nofollow">月氏国</a>被匈奴打败，一分为二。分为：<br>
<br>大月氏：西迁到中亚，建立了<a data-href="贵霜国" href="贵霜国" class="internal-link" target="_self" rel="noopener nofollow">贵霜国</a>。
<br>小月氏：从伊犁向南走入<a data-href="昆仑山" href="昆仑山" class="internal-link" target="_self" rel="noopener nofollow">昆仑山</a>，与当地的族群融合，成为了南山羌。
<br><a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>还打败了<a data-href="东胡" href="东胡" class="internal-link" target="_self" rel="noopener nofollow">东胡</a>，<a data-href="东胡" href="东胡" class="internal-link" target="_self" rel="noopener nofollow">东胡</a>向北躲进了鲜卑山，向南躲进了乌桓山。<br><br>虽然<a data-href="小河墓地（Xiaohe site）" href="术语\小河墓地（xiaohe-site）.html" class="internal-link" target="_self" rel="noopener nofollow">小河墓地（Xiaohe site）</a>的人群也生活在罗布泊，但是距今有4000-3500年，至于是不是<a data-href="楼兰国" href="楼兰国" class="internal-link" target="_self" rel="noopener nofollow">楼兰国</a>的前辈就不知道了。<br><a data-href="楼兰国" href="楼兰国" class="internal-link" target="_self" rel="noopener nofollow">楼兰国</a>最早是一封信中，距今2100年，本来是受到<a data-href="月氏国" href="术语\月氏国.html" class="internal-link" target="_self" rel="noopener nofollow">月氏国</a>统治，后来被<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>统治。<br>但是到东晋时期，楼兰因为环境恶化就不再适合人居住了。<br><a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>和汉朝阻断了草原之路，于是丝绸之路变成了唯一的通道。<br><br><a data-href="黄河流域" href="黄河流域" class="internal-link" target="_self" rel="noopener nofollow">黄河流域</a>上游有一条<a data-href="湟水" href="湟水" class="internal-link" target="_self" rel="noopener nofollow">湟水</a>，曾是风水宝地。发现了距今3000年的<a data-href="卡约文化" href="卡约文化" class="internal-link" target="_self" rel="noopener nofollow">卡约文化</a>遗址。应该是属于古老的<a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>人的文化。它们的母系遗传特征很像<a data-href="云南" href="术语\云南.html" class="internal-link" target="_self" rel="noopener nofollow">云南</a>的现代<a data-href="普米族" href="普米族" class="internal-link" target="_self" rel="noopener nofollow">普米族</a>。<br><a data-href="湟水" href="湟水" class="internal-link" target="_self" rel="noopener nofollow">湟水</a>的另一处距今1900-1700年的遗址中也发现，与现代汉族，云南的<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>和<a data-href="纳西族" href="纳西族" class="internal-link" target="_self" rel="noopener nofollow">纳西族</a>也很像。<br>这说明<a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>人不是一个单一的民族，而是一个统称：<br>
<br>有一部分<a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>人融入了秦汉，
<br>但是另外一部分远走高飞，形成了现代的<a data-href="彝族" href="彝族" class="internal-link" target="_self" rel="noopener nofollow">彝族</a>，<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>，<a data-href="哈尼族" href="哈尼族" class="internal-link" target="_self" rel="noopener nofollow">哈尼族</a>，<a data-href="纳西族" href="纳西族" class="internal-link" target="_self" rel="noopener nofollow">纳西族</a><a data-href="普米族" href="普米族" class="internal-link" target="_self" rel="noopener nofollow">普米族</a>等等。
<br>还有一部分<a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>去了<a data-href="青藏高原" href="术语\青藏高原.html" class="internal-link" target="_self" rel="noopener nofollow">青藏高原</a>。
<br>考古学发现：<a data-href="2019 NSR 新石器时代的粟（作）农（民）通过采用大麦农业为青藏高原的永久定居做出了贡献" href="文献及报道\文献\2024年阅读\1-6月\2019-nsr-新石器时代的粟（作）农（民）通过采用大麦农业为青藏高原的永久定居做出了贡献.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="👍" aria-label="👍" data-icon="👍" aria-hidden="true" style="transform: translateY(0px);"></span>2019 NSR 新石器时代的粟（作）农（民）通过采用大麦农业为青藏高原的永久定居做出了贡献</a><img class="emoji" draggable="false" alt="👍" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f44d.svg" height="18px" style="max-width: 100%;">，距今5200年-3600年前，携带<a data-href="粟（millet）" href="术语\粟（millet）.html" class="internal-link" target="_self" rel="noopener nofollow">粟（millet）</a>和<a data-href="黍（Panicum miliaceum）" href="术语\黍（panicum-miliaceum）.html" class="internal-link" target="_self" rel="noopener nofollow">黍（Panicum miliaceum）</a>的农民采用了抗寒的<a data-href="大麦" href="大麦" class="internal-link" target="_self" rel="noopener nofollow">大麦</a>，进入了<a data-href="青藏高原" href="术语\青藏高原.html" class="internal-link" target="_self" rel="noopener nofollow">青藏高原</a>。而且这群人应当与<a data-href="仰韶文化" href="术语\仰韶文化.html" class="internal-link" target="_self" rel="noopener nofollow">仰韶文化</a>人群很有关系。<br>距今3300年之前，<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>祖先人群：<br>
<br><a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>人
<br><a data-href="仰韶文化" href="术语\仰韶文化.html" class="internal-link" target="_self" rel="noopener nofollow">仰韶文化</a>人群
<br>再往后，距今2000年，<a data-href="青藏高原" href="术语\青藏高原.html" class="internal-link" target="_self" rel="noopener nofollow">青藏高原</a>的人群经历了一次大规模的扩散，奠定了现代<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>人的基因型分布。<br>青藏高原在10000年-7000年前以及4000-3000年前经历过2次大规模的增长。<br>总而言之，<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>的祖先应该是<a data-href="仰韶文化" href="术语\仰韶文化.html" class="internal-link" target="_self" rel="noopener nofollow">仰韶文化</a>人群，融合了<a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>人乃至中亚，北亚的少量族。到吐蕃时期，就已经和现在的藏族人群相似了。<br>但是并不知道<a data-href="丹尼索瓦人（Denisovan）" href="术语\丹尼索瓦人（denisovan）.html" class="internal-link" target="_self" rel="noopener nofollow">丹尼索瓦人（Denisovan）</a>的EPAS基因究竟是哪个人群带上去的？ <a href=".?query=tag:想法" class="tag" target="_blank" rel="noopener nofollow">#想法</a> 有没有办法解决这个问题？<br><a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>将这种特殊的基因传给了<a data-href="夏尔巴人" href="术语\夏尔巴人.html" class="internal-link" target="_self" rel="noopener nofollow">夏尔巴人</a>，基因研究发现，<a data-href="夏尔巴人" href="术语\夏尔巴人.html" class="internal-link" target="_self" rel="noopener nofollow">夏尔巴人</a>应该是<a data-href="藏族" href="术语\藏族.html" class="internal-link" target="_self" rel="noopener nofollow">藏族</a>人的一个比较晚的分支，距今大概1500年，当时正好是吐蕃诞生的前夕，高原上征讨严重。<br><br><br>生物学家利用5000-750年前的8个古代人群，分别是中原古代人群，山西<a data-href="陶寺文化" href="术语\陶寺文化.html" class="internal-link" target="_self" rel="noopener nofollow">陶寺文化</a>人群，秦始皇人群，西北古代，东北古代，古代<a data-href="鲜卑" href="鲜卑" class="internal-link" target="_self" rel="noopener nofollow">鲜卑</a>，蒙古<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>人群。发现：<br>
<br>所有的古代人群都能够在当今的汉族人中找到共享的单倍型。说明都与现代汉人的祖先有关系。
<br>中原古代人群与现代北方汉族人群的基因型共享比例最高，其次分别是西北古代，<a data-href="陶寺文化" href="术语\陶寺文化.html" class="internal-link" target="_self" rel="noopener nofollow">陶寺文化</a>人群，东北古代，<a data-href="鲜卑" href="鲜卑" class="internal-link" target="_self" rel="noopener nofollow">鲜卑</a>和<a data-href="匈奴" href="术语\匈奴.html" class="internal-link" target="_self" rel="noopener nofollow">匈奴</a>。距离越近，年代越近，贡献越大，反之越小。
<br>有些考古学家认为，华和夏分别代表不同的古代人群。北方草原族群南下，南方族群北上，最终在中原相遇。认为华夏民族的但僧就是<a data-href="克里奥尔化" href="克里奥尔化" class="internal-link" target="_self" rel="noopener nofollow">克里奥尔化</a>的产物。<br><br>分子生物学家采集了148名客家男子的基因，发现，与<a data-href="汉族" href="汉族" class="internal-link" target="_self" rel="noopener nofollow">汉族</a>，<a data-href="畬族" href="畬族" class="internal-link" target="_self" rel="noopener nofollow">畬族</a>，<a data-href="侗族" href="侗族" class="internal-link" target="_self" rel="noopener nofollow">侗族</a>很像。他们大多数来自<a data-href="中原地区" href="术语\中原地区.html" class="internal-link" target="_self" rel="noopener nofollow">中原地区</a>。也有来自其他地方的。<br>
线粒体DNA分析发现，不同的客家族群的母系遗传不同。<br>对于<a data-href="汉族" href="汉族" class="internal-link" target="_self" rel="noopener nofollow">汉族</a>，从<a data-href="Y染色体" href="Y染色体" class="internal-link" target="_self" rel="noopener nofollow">Y染色体</a>来看：南方汉族男性和北方汉族男性的分化不明显。应该是北方汉族男性南迁形成的；<br>
从线粒体DNA来看：南方汉族女性和北方汉族女性分化很大，南方汉族的女性中来自南方其他族群的女性基因比继承北方汉族女性祖先的基因更多一些。<br>中国历史上南迁有3次：<br>
<br>西晋灭亡前后
<br>唐朝安史之乱
<br>辽金侵宋
<br>南迁以男性为主。<br><br><a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>大规模西南，应该是在秦穆公时期，他向西扩张，导致<a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>奔逃到<a data-href="四川" href="四川" class="internal-link" target="_self" rel="noopener nofollow">四川</a><a data-href="云南" href="术语\云南.html" class="internal-link" target="_self" rel="noopener nofollow">云南</a>等地。而且根据线粒体DNA的数据，南迁的时候应该不存在性别差异。<br>由于女性可以通过嫁入，男性很难融入，所以形成了男客女主的局面。<br><br>在<a data-href="氐羌（古）" href="术语\氐羌（古）.html" class="internal-link" target="_self" rel="noopener nofollow">氐羌（古）</a>南迁之前，南方就已经有了一些文化，例如湖南的<a data-href="梅山文化（蚩尤文化）" href="术语\梅山文化（蚩尤文化）.html" class="internal-link" target="_self" rel="noopener nofollow">梅山文化（蚩尤文化）</a>。<br>比较大的文化就是<a data-href="百越族群" href="术语\百越族群.html" class="internal-link" target="_self" rel="noopener nofollow">百越族群</a>，位于浙江上海等地；还有<a data-href="百濮族群" href="百濮族群" class="internal-link" target="_self" rel="noopener nofollow">百濮族群</a>，在<a data-href="中国西南" href="术语\中国西南.html" class="internal-link" target="_self" rel="noopener nofollow">中国西南</a>地区。<br>也许<a data-href="百越族群" href="术语\百越族群.html" class="internal-link" target="_self" rel="noopener nofollow">百越族群</a>含有更多的海岸暴走族的基因，而<a data-href="百濮族群" href="百濮族群" class="internal-link" target="_self" rel="noopener nofollow">百濮族群</a>含有内陆迁徙的基因。<br>而且现代东北亚人和<a data-href="日本" href="术语\日本.html" class="internal-link" target="_self" rel="noopener nofollow">日本</a>人体内有与<a data-href="百越族群" href="术语\百越族群.html" class="internal-link" target="_self" rel="noopener nofollow">百越族群</a>相似的基因，说明可能是海岸暴走族带过去的。<br>另外，<a data-href="台湾" href="术语\台湾.html" class="internal-link" target="_self" rel="noopener nofollow">台湾</a>古人应该来自<a data-href="中国南方" href="术语\中国南方.html" class="internal-link" target="_self" rel="noopener nofollow">中国南方</a>，因为台湾的一些少数民族体内有一种特殊基因，这种基因广泛分布于中国大陆包括<a data-href="陶寺文化" href="术语\陶寺文化.html" class="internal-link" target="_self" rel="noopener nofollow">陶寺文化</a>群体内还有沿海汉族以及<a data-href="苗瑶语（Hmong–Mien languages）" href="术语\苗瑶语（hmong–mien-languages）.html" class="internal-link" target="_self" rel="noopener nofollow">苗瑶语（Hmong–Mien languages）</a>群体。但是在东南亚体内没有。这种基因出现在距今2万6千年，应该是智人进入中国大陆后出现的。<br>南下族群的<a data-href="Y染色体" href="Y染色体" class="internal-link" target="_self" rel="noopener nofollow">Y染色体</a>与语言有明显的同步现象，但是<a data-href="线粒体DNA（mtDNA）" href="术语\线粒体dna（mtdna）.html" class="internal-link" target="_self" rel="noopener nofollow">线粒体DNA（mtDNA）</a>却缺乏这种现象，这正是本章所探讨的男客女主的观点。语言和文化石不同族群男性固守的根脉，很难融入其他群体，但是不同族群的女性却可以跨越族群融合。 <a href=".?query=tag:想法" class="tag" target="_blank" rel="noopener nofollow">#想法</a> 这或许可以解释为什么现在大多数研究没有涉及<a data-href="线粒体DNA（mtDNA）" href="术语\线粒体dna（mtdna）.html" class="internal-link" target="_self" rel="noopener nofollow">线粒体DNA（mtDNA）</a>与语言的相关性。<br><br><br>科学家进行基因分析，发现南岛人来自东亚。<br><a data-href="拉皮塔文化" href="术语\拉皮塔文化.html" class="internal-link" target="_self" rel="noopener nofollow">拉皮塔文化</a>是大洋洲及太平洋地区的一种<a data-href="新石器时代（Neolithic）" href="术语\新石器时代（neolithic）.html" class="internal-link" target="_self" rel="noopener nofollow">新石器时代（Neolithic）</a>文化，分布<a data-href="美拉尼西亚" href="术语\美拉尼西亚.html" class="internal-link" target="_self" rel="noopener nofollow">美拉尼西亚</a>群岛等。距今3500年左右。学者们把这种文化的扩张称作快车模式。认为，<a data-href="台湾" href="术语\台湾.html" class="internal-link" target="_self" rel="noopener nofollow">台湾</a>是<a data-href="南岛语系（Austroasiatic language family）" href="术语\南岛语系（austroasiatic-language-family）.html" class="internal-link" target="_self" rel="noopener nofollow">南岛语系（Austroasiatic language family）</a>重要的发源地。<br><a data-href="南岛语系（Austroasiatic language family）" href="术语\南岛语系（austroasiatic-language-family）.html" class="internal-link" target="_self" rel="noopener nofollow">南岛语系（Austroasiatic language family）</a>人群祖先应该是生活在中国的浙江一带，单后据今5900年开始向南方走。<a data-href="原南岛人的形成：来自父系创始人谱系修订后的见解" href="文献及报道\文献\2023年阅读\原南岛人的形成：来自父系创始人谱系修订后的见解.html" class="internal-link" target="_self" rel="noopener nofollow">原南岛人的形成：来自父系创始人谱系修订后的见解</a>。<a data-href="早期南岛人：进出台湾" href="文献及报道\文献\2023年阅读\早期南岛人：进出台湾.html" class="internal-link" target="_self" rel="noopener nofollow">早期南岛人：进出台湾</a>。<br>在中国的江浙一带的<a data-href="壮侗语（Kra–Dai languages）" href="术语\壮侗语（kra–dai-languages）.html" class="internal-link" target="_self" rel="noopener nofollow">壮侗语（Kra–Dai languages）</a>族群一部分进入<a data-href="台湾" href="术语\台湾.html" class="internal-link" target="_self" rel="noopener nofollow">台湾</a>，然后南下<a data-href="菲律宾" href="菲律宾" class="internal-link" target="_self" rel="noopener nofollow">菲律宾</a>和<a data-href="印度尼西亚" href="印度尼西亚" class="internal-link" target="_self" rel="noopener nofollow">印度尼西亚</a>，形成了<a data-href="拉皮塔文化" href="术语\拉皮塔文化.html" class="internal-link" target="_self" rel="noopener nofollow">拉皮塔文化</a>，然后向太平洋扩散；另一部分进入<a data-href="中南半岛" href="中南半岛" class="internal-link" target="_self" rel="noopener nofollow">中南半岛</a>，再进入<a data-href="印度尼西亚" href="印度尼西亚" class="internal-link" target="_self" rel="noopener nofollow">印度尼西亚</a>的西部群岛，形成<a data-href="马来人群" href="马来人群" class="internal-link" target="_self" rel="noopener nofollow">马来人群</a>。距今2300年，马来人群与古巴布亚人进行交流，然后向太平洋扩散。<br><a data-href="南岛语系（Austroasiatic language family）" href="术语\南岛语系（austroasiatic-language-family）.html" class="internal-link" target="_self" rel="noopener nofollow">南岛语系（Austroasiatic language family）</a>群体向东南亚，其实是衣锦还乡，因为本身东亚人有部分就是海岸暴走族的后代，他们到达东南亚，那里也有海岸暴走族的的后代。<br><br>日本在3万年前就有人类活动的迹象了。那个时期刚好是<a data-href="山顶洞人" href="术语\山顶洞人.html" class="internal-link" target="_self" rel="noopener nofollow">山顶洞人</a>活动的日子，有可能是冰河时代迁移过来的草原狩猎族。但是没找到遗骸。<br>距今1万8千年在琉球群岛发现了古人类但是没有基因测序。<br>距今1万6千年，日本列岛来了人群，因为可以制造草绳样的花纹的陶器，称为<a data-href="绳文人" href="术语\绳文人.html" class="internal-link" target="_self" rel="noopener nofollow">绳文人</a>。陆续出土的<a data-href="绳文人" href="术语\绳文人.html" class="internal-link" target="_self" rel="noopener nofollow">绳文人</a>证明了，在日本列岛相对封闭的环境是独立进化的。<br>距今2300年，<a data-href="弥生人" href="术语\弥生人.html" class="internal-link" target="_self" rel="noopener nofollow">弥生人</a>出现了。<a data-href="绳文人" href="术语\绳文人.html" class="internal-link" target="_self" rel="noopener nofollow">绳文人</a>主要是<a data-href="巽他型牙齿" href="术语\巽他型牙齿.html" class="internal-link" target="_self" rel="noopener nofollow">巽他型牙齿</a>，而<a data-href="弥生人" href="术语\弥生人.html" class="internal-link" target="_self" rel="noopener nofollow">弥生人</a>主要是<a data-href="中国型牙齿" href="术语\中国型牙齿.html" class="internal-link" target="_self" rel="noopener nofollow">中国型牙齿</a>。<br>关于<a data-href="弥生人" href="术语\弥生人.html" class="internal-link" target="_self" rel="noopener nofollow">弥生人</a>究竟来自中国南方还是北方，也一直有争论。因为他们是种植<a data-href="稻（Oryza sativa L.）" href="术语\稻（oryza-sativa-l.）.html" class="internal-link" target="_self" rel="noopener nofollow">稻（Oryza sativa L.）</a>的，而<a data-href="稻（Oryza sativa L.）" href="术语\稻（oryza-sativa-l.）.html" class="internal-link" target="_self" rel="noopener nofollow">稻（Oryza sativa L.）</a>没有经过朝鲜半岛，所以有可能是直接跨海到达日本。但是因为他们也种植小麦，这段时期长江流域没有<a data-href="小麦" href="小麦" class="internal-link" target="_self" rel="noopener nofollow">小麦</a>，所以应该是中国北方输入的。 <a href=".?query=tag:想法" class="tag" target="_blank" rel="noopener nofollow">#想法</a> 究竟来自哪里，或是两者兼有？<br><br><a data-href="美洲" href="术语\美洲.html" class="internal-link" target="_self" rel="noopener nofollow">美洲</a>原住民应该是通过<a data-href="白令海峡（Bering Strait）" href="术语\白令海峡（bering-strait）.html" class="internal-link" target="_self" rel="noopener nofollow">白令海峡（Bering Strait）</a>进入美洲的，<a data-href="2023 CR 线粒体基因组证明两次扩张事件以及母系祖先从中国北部沿海向美洲和日本的扩散" href="文献及报道\文献\2024年阅读\1-6月\2023-cr-线粒体基因组证明两次扩张事件以及母系祖先从中国北部沿海向美洲和日本的扩散.html" class="internal-link" target="_self" rel="noopener nofollow"><span class="iconize-icon-in-link" title="😀" aria-label="😀" data-icon="😀" aria-hidden="true" style="transform: translateY(0px);"></span>2023 CR 线粒体基因组证明两次扩张事件以及母系祖先从中国北部沿海向美洲和日本的扩散</a><img class="emoji" draggable="false" alt="😀" src="https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.1.0/assets/svg/1f600.svg" height="18px" style="max-width: 100%;">。<br>
应该是草原狩猎族的后代。<br>
但是美洲的原住民应该不止草原狩猎族，而应该还有海岸暴走族，因为<a data-href="田园洞人" href="术语\田园洞人.html" class="internal-link" target="_self" rel="noopener nofollow">田园洞人</a>和<a data-href="南美洲（South America）" href="术语\南美洲（south-america）.html" class="internal-link" target="_self" rel="noopener nofollow">南美洲（South America）</a>的<a data-href="亚马孙人" href="亚马孙人" class="internal-link" target="_self" rel="noopener nofollow">亚马孙人</a>很像，另外，<a data-href="亚马孙人" href="亚马孙人" class="internal-link" target="_self" rel="noopener nofollow">亚马孙人</a>居然和大洋洲的原住民有2%的基因。说明海岸暴走族后来变成了<a data-href="田园洞人" href="术语\田园洞人.html" class="internal-link" target="_self" rel="noopener nofollow">田园洞人</a>，大洋洲原住民，以及<a data-href="南美洲（South America）" href="术语\南美洲（south-america）.html" class="internal-link" target="_self" rel="noopener nofollow">南美洲（South America）</a>部分原住民。<br><br><br>最远古的一层是第零祖先层， 也就是直立人的时代。中华大地最早的直立人来自非洲， 他们经由西亚、中亚一路而来。他们来到东亚的时候，可能已经步入直立人发展的后期了， 而且他们很可能是从北方地区进入中国的，周口店<a data-href="北京猿人" href="术语\北京猿人.html" class="internal-link" target="_self" rel="noopener nofollow">北京猿人</a>就是中国直立人的典型代表， 甚至可能是最早的那批中国古人类之一。他们不是我们的直系祖先， 但他们的到来本身就表示， 即使在古人类石器技术如此落后的时代，他们也能够跨越亚洲大陆山重水复的地理阻隔。中华大地从有古人类的那一刻起， 就与全世界建立了联系， 只是联系有时如滔滔洪流，有时又细若游丝。<br>东亚的直立人时代， 即是欧亚大陆东西方的基因与技术交流细若游丝的日子。东亚直立人群体仿佛陷入了一个巨大的孤岛中，与外界特别是欧亚非大陆的西部严重缺乏交流， 几乎只能依靠最初带过来的粗糙石器技术， 加以若干本土化技术改进， 在几十万年中孤独地艰难生活， 最终他们全部消失在历史的长河， 他们的基因之河断流了。正是因为他们的基因没有留传给我们，所以我用“第零祖先层”来描述他们。<br>
之后从距今5万年前起，东亚古人类进入第一祖先层， 那是智人扩张的时代。东亚的智人扩张时代是从南方拉开序幕的，然后南方与北方的现代智人祖先联袂上演了跷跷板式的迁徙大戏，中华大地变得热闹起来。智人个体和群体的智慧赋予他们卓越的迁徙能力，不论是面对广阔的大海还是宏伟的山川， 他们都有足够的技术和勇气去跨越阻隔，打破孤岛之魔咒。<br>在智人扩张时代，大陆上的地理阻隔已经失效，面对近乎空空荡荡的原野、丛林、山岭甚至近海岛屿，古老祖先的迁徙奏响了“填空模式”， 智人的基因之河肆意漫流，冲向地球上每个适宜生存的角落。具体到中华大地上，他们或沿着海岸线暴走，从热带的南海海岸北进到温带的渤海湾，并深入陆地；或循着草原带的野兽脚印狩猎而来， 从西到东席卷北方的山岗与平原……<br>严酷的盛冰期从距今2.65万年前一直持续到距今1.9万年前，这是我们古老祖先艰难的一段萎缩期。北方古老人群损失惨重，也许有少部分人群向南转移退却；南方古老人群则利用海平面降低带来的大陆与岛屿连成一片的有利条件，休养生息，养精蓄锐。<br>熬过了盛冰期后，第二祖先层掀开了， 在南方蛰伏了数千年的祖先们抓住温暖间冰期的大好机会，挥动着长矛向北挺进，追逐繁盛的野生动物，采摘满山的野果野菜。第二祖先层的古人类迁徙方向，主要是自南向北的， 他们的扩张过程反映到基因型上， 就造成了今日南方人群基因型多于北方人群基因型的面貌。<br>从百万年前的第零祖先层到第一祖先层、第二祖先层，我们的祖先基本上以狩猎、采集、捕鱼为生， 这样的谋生手段驱动着他们走南闯北。从距今1万年前开始，我们的祖先进入了第三祖先层，他们的谋生手段有了翻天覆地的变化——农耕时代来临了。<br>东亚的农耕时代绚丽且魔幻，不论南方还是北方， 中华大地似乎被施加了丰饶的魔法， 魔法棒点拨之处， 各种农作物和驯化动物纷纷涌现。那高超的魔法师不是别人，正是我们智慧的祖先， 第一批从事农业的祖先。他们在末次冰期“黎明前的黑暗”中对动植物驯化的各种尝试，在冰期结束后激发了改天换地的农业革命。<br>农耕时代也是人口暴增的时代，伴随着粮食产量激增， 大地上的人口快速增长， 中华大地上的人们第一次感受到了什么叫拥挤。一拨又一拨的人群带上小米、黄米或大米种子，赶着猪、狗、鸡、鸭， 前往适合农耕的新天地，把东西南北广阔的大地变成农耕魔法的舞台。<br>农耕人口相对于狩猎采集人口在数量上具有压倒性优势，反映在基因型种类上也是压倒性优势。从基因扩张的角度讲，这个时代的人群迁徙主要是以“群体替代模式”展开的，尤其是农耕群体对于狩猎采集人群的替代，虽然彼此同属于现代智人之列。所以， 农耕的传播意味着农耕人口基因的广泛传播和对少量的狩猎采集人群基因的吸收。<br>距今4 000年前以来的较为晚近的祖先们，可以统一归入第四祖先层， 那是属于文化基因传播的时代。东亚的文化基因时代在文明的钟鼓礼乐声中翩翩而至。我们的祖先以中华大地丰厚的农耕社会为基底， 海纳百川地接纳了来自大陆西方的各种物产与技术，尤其是对国家制度建立与维系至关重要的青铜技术、马车技术，然后再加以创新，终于奏响了中华大地独特的文明古国序曲。<br>文明的序曲并非中原地区的独奏，而是大江南北各个文明政权的合奏。每个政权固然是以某个族群为核心建立起来的，但在族群交融如此频繁和充分的环境中，真正区分不同政权的并非族群的生物基因， 而是他们的文化基因。生物基因混杂的群体拥有近似的文化认同， 从而构建了文化共同体——部族或宗族、政权或国家。他们之间的协调与竞争，已经不再只是生物基因的交流，而是文化基因的交流与碰撞。<br>在第四祖先层的早期，由于草原带西部接触一些重要技术的时间略早，率先崛起， 因此生物基因和文化基因的流动、传输有自西向东的趋势。一旦东亚地区吸收了来自西方的文化元素，整合了内部之后，趋势就发生了逆转，以中原的秦汉王朝和东方草原的匈奴为代表的东亚古代帝国力量又开始自东向西扩张，把东亚人群的生物基因和文化基因输入了西北地区。<br>与此同时，北方地区的汉人群体及其他区域性的群体如南岛语系族群的祖先人群，以庞大的农业人口优势向四周扩散，尤其是向南方地区挺进， 把本群体的生物基因和文化基因撒向南国， 撒向东亚和东南亚的岛屿，甚至跨海扬帆至星辰之下的大洋深处。<br>以上便是对积累于历史长河中的祖先层序的粗线条回顾， 是各个领域的学者们从祖先以及动植物基因中读出的“无字史记”的内容梗概。翻阅由基因写就的这本无字史记，中华大地上祖先的迁徙史跌宕起伏、波澜壮阔，我们这些后人能够从这本天成之作中得到什么启示呢?<br>
<br>首先，我们不是东亚细亚的孤儿， 我们的祖先、我们的文明都是交融的产物。
<br>虽然仍有部分学者坚持中国人祖先的本土起源或曰连续进化附带杂交， 坚持中华文明的单纯的本土起源， 但通过古代各个人群的基因比较， 以及动植物基因的研究可以推断，中国人的祖先最初来自非洲， 然后四面八方各个古代人群融合在一起， 形成了中国人；中华文明既是我们的祖先立足东亚沃土辛勤耕耘、智慧创造的结晶，也是大量外界的物产、技术乃至各种思想输入东亚，落地生根结出的硕果。那些我们现代人所熟知的大洲之间的边界、国家之间的边界， 都是迟至几百年以来的近代逐渐定型的人为界线，并不存在于古代人群迁徙的路途上。古代人群并不会用近代、现代的界线“画地为牢”， 限制他们的基因交流和文化交流。<br>
<br>其次，基因趋于天下大同，文化迈向美美与共。
<br>人口数量和人口密度是决定古代各个人群基因交流的关键因素。直立人时代人口稀少，部落规模也很小， 很多部落会在自然环境波动中自生自灭，他们比周围的灵长类如猩猩、猴子群体强不了太多。因此，远距离的基因交流基本上是不存在的，散落在大陆各个角落的直立人大体上独立进化。认为各个大洲的直立人会迈着同样的进化步伐变成相同的现代智人的观点，不太可能是事实。<br>　<br>
当现代智人走出非洲向全世界扩张时，人口数量比直立人时代明显更多了， 迁徙能力卓越的智人一路上甚至与尼安德特人、丹尼索瓦人进行杂交， 更不用说现代智人不同群体间的杂交了。当农耕传播时代来临时， 相比之前的狩猎采集时代，人口数量有了几十倍甚至上百倍的增加。不同族群间的基因交流更为频繁，昔日因人烟稀少而相对独立进化的各个人群，此时彼此交换着自己的基因型，于是不同人群之间在基因型上逐渐你中有我、我中有你，假以时日，全世界的人类在基因上将趋于天下大同。虽然人群与人群之间仍然会有分野， 但这种分野主要是各自文化基因的差异， 而非生物基因的差别。<br>　<br>
3. 最后，基因属于生命科学， 祖先属于文化情感， 在认识祖先与自我的路途上， 理智与情感都是需要的。<br>　<br>
科学是理性、理智的， 不论人们愿意接受也好，不愿意接受也罢，科学用证据说话， 揭示出祖先的秘史。没有科学成果的支撑，我们连自己的祖先是谁都搞不清楚。对祖先最大的不敬，莫过于认错了自己的祖先是谁，所拜非本尊。要清楚地知晓我们的直系祖先是谁， 生命科学是最重要的工具， 那隐藏在细胞中的肉眼不可见的基因上， 镌刻着祖先的生命信息，那些信息把我们与祖先之间的血脉真正联系了起来。<br>　<br>
中国人自古以来就是非常尊敬祖先的人群，商周的甲骨文中包括大量祭祀祖先的内容。可以想见，在商周之前的很长时间里，中华大地上的人们就已经建立起了对于祖先的尊崇意识和祭拜仪式。这既是古人面对危险重重的外界提高族群凝聚力的有效方式， 也是给身处凡世间的自我一个确定性的“锚”，能够让渺小的个体知晓自己在历史时空长河中所处的位置，获得自己作为个体的存在感和价值感。<br>中国乃至东亚文明圈悠久的祖先崇拜传统，源自古老的农耕聚落结构， 是中国人独特的重要文化基因， 区别于欧美古代文明圈流行的宗教传统。时至今日，对祖先的尊崇乃至祭拜， 仍然是很多中国人重要的情感表达方式， 是人们生活与生命中难以割舍的精神园地。<br>
面对祖先， 我们接受基因证据， 我们也珍视精神传统。<br>但是， 我们应该反对任何以基因之名打造的民族主义和民族歧视， 那些论调并没有科学依据。<br>所有的地球人都是现代智人， 有着 14万年前的共同祖母——线粒体夏娃，有着6万年前的共同祖父——Y染色体亚当。对今天的中国人来说，所有人的共同祖先不会早于3万年前。要追溯绝大多数中国人的共同祖先， 也许只需要把时钟向过去回拨几千年就能成功找到。<br>也许有细心的读者会注意到， 本书尽量避免使用白色人种、蒙古人种、雅利安人种、尼格罗人种这类有着种族味道甚至种族歧视味道的词， 除非引用早期学者的观点的需要。因为这些词混淆了现代民族概念与古代人群称谓， 它们往往是臆想出来的名词，并无基因科学的支持， 对我们理解人类历史造成了干扰。本书在描述古代人群时， 更多地用中性的大洲和大洲方位的地域名称来表示人群，比如“东亚人群”“草原带西部人群”。本书有时也会使用“氐羌族群”“藏缅语系族群”这类包含民族名称的词， 这些词已被学者长期使用，它们要么是对古代人群的描述， 不会引起古今混淆，要么是语言学的中性描述， 不会引起种族歧视。<br>必须强调， 今天我们所谈论的民族，是近代民族国家兴起后才出现的概念， 是一种想象的共同体，是文化基因的产物。基因告诉我们，早在1万年前农耕时代来临时，生物基因意义上的族群界限就开始变得模糊，人群与人群之间的基因交流变得越来越频繁。以“民族”这个几百年前学者构想出来的文化概念来向远古反向推演，认为人类几万年的迁徙历史中， 数以千计的族群之间有着明确的基因阻隔，族群之间有着本质的基因差别， 进而判定族群与族群在智力、文化上有高低之分，这些观点是毫无科学基础的臆想。<br>例如历史上， 汉人有自己的族群认同， 匈奴人有自己的族群认同， 羌人也有自己的族群认同， 这种认同正是不同族群通过对各自祖先、神灵的界定和崇敬来强化的情感。这是历史形成的情感，并没有多大的基因依据。民族主义与族群情感之间的本质区别在于，前者宣扬对外歧视， 后者追求自我欣赏。<br>族群内部的自我欣赏只要不滑向对外歧视，就无伤大雅、无可厚非。只是我们应当警惕这种自我欣赏的潜在危险——族群滑向塔岛技术悲剧。在复活节岛的传说中，第一批移民中有一位建筑师努库·柯胡，他是移民中唯一会建造房屋的人， 跟他学习的移民都没有掌握建筑精髓，特别是没有学会如何盖屋顶，于是在努库·柯胡死后，复活节岛上的房子很容易被大风吹掉屋顶。离开故乡驶向复活节岛的航行中，努库·柯胡没有带上他的妻子同行，到了复活节岛后， 移民却无力再回到故乡。因此，每当日落的时候，建筑师努库·柯胡就很悲伤，因为太阳落下的位置， 正是故乡和妻子所在的方向。<br>由于地理阻隔，复活节岛、塔岛、日本列岛、澳大利亚大陆乃至中华大地、美洲大陆，在远古时代都曾经一度形成塔岛技术悲剧，令深陷其中的古人类、古代族群生计艰难。站在21世纪科技如此发达的今天，我们丝毫不用担心自然界的地理阻隔会把中华大地与世界的其他部分再次分开。但我们要警惕， 那些族群内部自我欣赏所形成的某些消极的文化基因， 会在族群与族群之间制造新的阻隔。<br>比如， 以独立自主产生的本土人群进化、本土文明起源为骄傲，以吸收外来人群基因和文化元素为耻辱， 这种本族群“情感迷恋”是对纯正血统的迷信， 是对自身文化的自大， 在本族群、本国度与外部世界间人为制造障碍。<br>另一种让群体陷入封闭状态的文化基因是迷信丛林法则或曰黑暗丛林法则。这类法则的信徒们认定，他人就是地狱，别的文化和文明是自己必然的敌人， 为了保护自己， 要杜绝与其他文化、文明的接触。历史确实存在一定的丛林法则现象， 比如汉朝、匈奴对于西北地区弱小文化的冲击、欧洲殖民者对于美洲原住民文明的伤害和瓦解。但人类迁徙历史浩荡的主流是彼此开放而非封闭，东亚直立人因被动的封闭而陷入石器技术停滞的境地，中原各文化因为主动的开放，吸纳了大量外来物产、技术乃至思想，站上了古代文明的舞台中央⋯⋯随着农耕时代后人口增长和族群融合，黑暗丛林法则早已失效，因为越封闭，越落后，越无法阻挡打破封闭的力量。<br>一旦拒绝外界交流，每一个人就变成了孤岛， 每一个族群、每一个国家都会变成孤岛。几万年来，人类通过生物基因的突变和扩张、文化基因的创造和交融，最终摆脱了个人的孤岛、族群的孤岛，避免了塔岛技术悲剧。我们需要拥抱那些让各个族群能够平等地走到一起的文化基因， 抵制那些分裂各个族群，在各个族群间制造歧视链的文化基因。<br>本书动笔于2019年年末到 2020年年初新冠肺炎疫情暴发的时期， 疫情迫使各个国家彼此关闭了国境通道， 各个社区限制了人员进出。一种病毒能够感染几乎所有国家的所有族群，这生动地验证了， 全人类在生物基因上差异非常小， 天南地北的族群早已有了充分的基因融合， 只是这验证的方式过于苦难。<br>在疫情期间， 世界各地的很多有识之士都呼吁全球合作， 共同抗疫。被迫暂时隔离的人们通过互联网举办了诸如“同一个世界：共同宅家”(One World: Together at Home)免费音乐会一类的活动,为陷入困境的世界和个人投下希望的光亮；各国科学家也在共享着对于病毒本身和抗病毒药物研究的信息⋯⋯这正是由祖先创造、历史传承的积极、开放的文化基因在发挥作用， 我们都将受益于这样的文化基因打造的人文环境。<br>“四海一家”的信条， 经由一代又一代祖先的传承， 已经写入你我的生物基因里，让它也写入你我的文化基因中吧。<br>今天的人类已经登上了月球， 还没有冲出地月系统。从这个角度看，我们仍然处于地月系统的孤岛上。正如百万年中人类祖先在地球表面的持续探索，人类向太空探索的脚步也从未停止，有朝一日，宇航员必将冲出地月系统，踏上火星和其他星球的表面，书写人类基因的扩张史记新章节，不输祖先曾有的勇气和英名。<br>那将是地球生命基因的荣光，那将是全体人类的荣光。]]></description><link>书籍\无字史记.html</link><guid isPermaLink="false">书籍/无字史记.md</guid><pubDate>Tue, 20 Aug 2024 12:44:13 GMT</pubDate><enclosure url="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202311142228377.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://picturerealm.oss-cn-chengdu.aliyuncs.com/obsidian/202311142228377.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[西西弗神话]]></title><description><![CDATA[ 
 <br>阅读哲学随笔，有时候就像在做推理，因为每一个简单词汇背后，可能都隐藏着能引导你触摸到真理的庞大信息。就像《西西弗神话》，这个看似简单而不能再简单的名字。<br>西西弗（Sisyphus）是希腊神话里一个永生永世都在做着苦役的人物。诸神惩罚西西弗，命令他将一块巨石推向山顶。但每当巨石即将到达山顶时，它就会重新滚回山脚，西西弗永远都不可能完成诸神的命令，只能一直重复这个无意义的死循环。<br>所以许多人的第一印象，都会觉得这也许只是一本神话故事。<br>但《西西弗神话》其实还有一个经常被人忽略掉的副标题「论荒诞」。<br>书名完整的含义其实是：「用神话人物西西弗作为象征，分析与解释关于荒诞的一切。」<br>在加缪看来，当代生活里的每一个人，都是西西弗。西西弗的生活是荒诞的，我们也是，理解了西西弗，你就理解了有关荒诞的一切。<br>那么问题来了，为什么我们一定要理解「荒诞」？<br><br>荒诞（absurdism），也译作荒谬，它起初只是一个源自拉丁语的音乐术语，指旋律的不和谐。从17世纪起，也有一些哲学家开始用这个词来形容一种生活中不合逻辑、不合情理的离奇感受。<br>但接下来的两个多世纪，整个世界陷入了一种前所未有的动荡不安，狂飙式的科技进步、经济大萧条、世界大战……那些曾经被认为是“真理”的价值观被一次又一次的全球事件所颠覆、习惯、风俗、社会、思想……一切坚固的东西都烟消云散了。<br>整个人类的精神世界陷入了一种全体性的迷茫，直到今天，依旧如此。<br>加缪觉得，这种迷茫就是荒诞，他说：<br>整个世界都是荒诞的，没有人能逃离荒诞，当你感受到荒诞时，你就会觉得生活痛苦而无意义。<br>但为什么我们无法逃离荒诞呢？加缪在《西西弗神话》里举出了三种荒诞产生的原因：<br><br>《西西弗神话》里有这样一段话：<br>起床、乘电车、在办公室或工厂干四小时，吃饭，乘电车，再干四小时，吃饭，睡觉，而且星期一、星期二、星期三、星期四、星期五和星期六，大部分的时间里，这条路走得相当顺畅。不过有一天，突然萌生了‘为什么’的疑问，在这种带有惊讶色彩的厌倦中，一切就开始了。<br>生活就是一种循环，无论你选择的是哪一种生活。<br>但没完没了的循环终究会让人心生厌倦，终有一天你会心生疑惑：&nbsp;「为什么我的生活是这样的？」，然后你就会开始质疑造成这种生活状态的一切，从而心生痛苦，觉得生活没有意义。<br><br>人从出生就踏上了走向死亡的必然旅程，没有人能够体验死亡，我们只能够通过听闻见识别人的死亡去理解它，但只要我们去想象死亡，我们自然就会心生恐惧与沉痛，我们如此地渴望着生，可我们终有一死，死亡让人意识到生命的脆弱，人生的痛苦。<br><br>我们的认知和生活存在一种永恒的阻碍，我们越是希望理性、明晰地理解生活，就越发现自己其实完全不了解生活。<br>我们的心智和理性都是有限的，越读书，就越发现自己无知，越试图理解，就越发现自己完全不理解，久而久之这会让人对生活产生一种非常可怕的陌生感，感觉不到自己是生活的一部分。<br>在加缪看来，之所以每个人都无法从荒诞中逃离，因为我们生来希望追求理性，渴望长生，期盼生活有意义，想要生活在一个和谐安宁的社会里，向往是非分明，期盼善恶报应。<br>但战争、疫情、经济危机、自然破坏、贫富不均、性别冲突、价值观崩塌……那些在我们生活中时刻发生的事情，一遍又一遍地在提醒我们——<br>人天性所向往的东西，偏偏都是不存在与世界上的，所以我们一定会在某个时刻体悟到荒诞，然后就会觉得自己孤独、无依无靠，和生活完全分离，像是被全世界所流放，痛苦不堪。<br>但如果《西西弗神话》只是告诉我们“荒诞”究竟是怎么一回事儿，那倒也没有多少推荐的必要了，就像加缪自己说的：「我感兴趣的，主要不在于发现种种荒诞，而是荒诞产生的结果」。<br>因为荒诞已经是每个人在生活中必然会有的状态，所以他更想通过这本书告诉我们的，是人究竟应该如何面对荒诞？<br>加缪有一句名言：「真正严肃的哲学命题只有一个，那便是自杀。」在他看来，面对荒诞只有两种态度，自杀或者反抗。<br>自杀有两种，一种叫做生理的自杀，荒诞使人对现实生活充满绝望，但人无法逃脱荒诞，就像人无法逃离自己的皮肤，荒诞使得他承认自己不理解生活、被生活所超越了，承认自己的所作所为都不再有意义，这个世界上没有任何的深刻理由能够支持自己再活下去。所以那些深陷于荒诞的痛苦中不可自拔的普通人，只能采用最决绝的自我毁灭，才能离开荒诞。<br>另一种，叫做哲学的自杀，有些人意识到了现实的荒诞，并因之痛苦不堪时，所以他们将逃离荒诞的希望寄托于宗教或者来世。无论是海格德尔、舍斯托夫、雅斯贝斯还是胡塞尔，这些伟大哲学家们面对荒诞时，要么是试图用一种伟大的思想来否认荒诞的存在，要么索性就将解决荒诞的方式交给了神来解决。但加缪根本不认同这一点，他说：「纵观各种存在哲学，我看到它们无一例外地都号召我逃跑。 」<br><br>加缪觉得，荒诞让人意识到人生的无意义、生存的无价值，但是越是如此，人就越应该去体验、去接受、不寄希望于虚无缥缈的信仰，立足当下，用行动去为生活创造意义。<br>这便是反抗。<br>加缪在《西西弗神话》里把这种敢于承认荒诞，并且反抗荒诞的人，称之为「荒诞人」。<br>他在书里举了很多例子来说明「荒诞人」到底是怎么样的一种人？<br>荒诞人是清醒的人，他既不会掩盖回避种种荒诞的现实，也不会将自己的关注点投向上帝或者天神，面对无可避免的命运，他不会屈从，而是努力抗争，并且肩负起抗争过程中的苦痛。<br>荒诞人也是自由的人，因为荒诞让人意识到，来世或者天国都是不存在的，这反而能够让人彻底打破精神枷锁，世界上没有全知全能的上帝为人安排好了生活的一切轨迹，人是独立的，人的一切意义都是在当下的生活中，依靠着自己的行动来创造的，除了当下这片荒诞的天地，人什么都没有。<br>最重要的，荒诞人是无比激情的人，因为荒诞意味着人唯一的出路就是现在，应该尽情地以火热的激情感受人生，不追求获得最好，而是获得最多，尽量感受和体验丰富多彩、多种多样的人生。<br>在加缪看来，永生永世都在推着巨石向山顶前行的西西弗，是「荒诞人」的最高典型，可以称为是&nbsp;「荒诞英雄」。<br>西西弗艰难地将巨石推上山又眼看着它滚下去的时候，是其命运最残酷的时刻，但是这也是他最为清醒地意识到自我命运的时候。<br>加缪认为，此时的西西弗已经高于了它的命运，他把神明赋予他的荒诞命运变成了自己安排的事情，将自己视为命运的主人，从而将人的尊严和生命的意义淋漓尽致地表现了出来。<br>「他的命运属于自己。他的那块巨石是他的事」。<br>西西弗清楚地认识到了自己的荒诞处境，他清楚地知道自己努力推上山的巨石一定会滑落，但是他却选择在此用肩膀抗住荒诞的巨石，并勇于承担一切，这就是他的反抗。<br>这种清醒的行为使得原本天神降下的惩罚，变成了西西弗自己选择的英雄行为，当他开始清醒地推动石头的时候，他的命运就不再属于众神，而是属于自己。<br>西西弗欣然地接受了残酷和荒谬的命运;&nbsp;他知道劳动是徒劳的，不会产生任何结果，他也明白自己不存在未来；他的快乐源于他对自己命运的认可、源于对诸神的蔑视、源于对荒谬的抗争、源于他搬起石头那一刻生发的自豪感。<br><br>天神的惩罚是希望让西西弗感到所有的努力都是徒劳，感到生命不存在任何的意义和价值，这就是荒诞最让人恐惧的地方，但西西弗明知荒诞无意义，却坚定地一次又一次地推动巨石，因为他根本就不会把荒诞视作是与自己的存在格格不入的东西。<br>西西弗，还有那些如西西弗一般的「荒诞人」们，公开承认荒诞就是自己的命运，他们不为永恒做任何事情，只在有限的生命里，自由地、充满激情地进行着反抗，生活越没有意义，他们就越觉得生活值得过。<br>「荒诞人有这样的优势，知道所有的王国都是虚幻的，他们心知肚明，这就是他们的全部伟大之所在…被剥夺了希望，不等于绝望，大地的火焰完全抵得上天国的芳香」。我们每个人其实都是荒诞世界里的西西弗，无时无刻地推动着各种各样的巨石，登顶，又重重滑落。<br>他，就是我们每个人命运的象征。<br>但西西弗的命运是绝对单一的，他永远只能在神话的世界里周转往复，可我们却真实地拥有比他更无限的可能。<br>在如此极端的条件下，西西弗依然可以通过自己的反抗，在荒诞世界里拥有自由，那到底还有什么理由能够阻挡我们成为那个清醒、自由又充满激情的「荒诞人」呢？<br>世界或许是悲观的，但人永远应该是乐观的，我们永远都不应该试图回避或者默默忍受生活中所遇到的种种困难，因为这意味着我们否定了生命的意义。<br>我们必须义无反顾地去反抗荒诞，而生活中一切幸福、价值与美好的体验，都会在这种反抗的过程里，灿烂升起。<br>这就是加缪想要通过《西西弗神话》这本书告诉我们的：<br>「推石上山这场搏斗本身，就足以充实一颗人心。」]]></description><link>书籍\西西弗神话.html</link><guid isPermaLink="false">书籍/西西弗神话.md</guid><pubDate>Thu, 20 Jun 2024 12:44:16 GMT</pubDate></item><item><title><![CDATA[中国少数民族的形成]]></title><description><![CDATA[ 
 <br><br>从中国少数民族形成的起点，即从发生学角度方面考察，中国少数民族的形成大体有两种类型和途径：一种是<a data-href="原生型民族" href="术语\原生型民族.html" class="internal-link" target="_self" rel="noopener nofollow">原生型民族</a>，一种是<a data-href="融生型民族" href="术语\融生型民族.html" class="internal-link" target="_self" rel="noopener nofollow">融生型民族</a>。<br>所谓原生型民族，主要是指其民族形成起点是在氏族、部落、部落联盟的基础上，经历了原始社会末期的发展阶段，发展成为民族共同体。这里所说原始社会末期的发展阶段，并不是指整个人类的原始社会发展历程，也不是指作为中国历史上中原地区原始社会末期哪个时代，而是具体指我国某个地区和某个民族自身发展的区域性的原始社会发展末期。譬如11、12世纪，就中国中原和大部分地区来说，已经处于比较发达的封建社会的历史时期，然而蒙古地区的一些地方的人群，却仍然处于原始社会末期。再如我国黑龙江地区和云南某些地区，一直到我国近代，原始社会才出现瓦解的局面。<br>因此，原生型民族并不是指其形成时间的早迟，而是指其形成的起点，是在原始社会发展的末期阶段，是在氏族、部落、部落联盟的基础上形成为民族。这类少数民族在我国民族中是比较多的。例如：苗族、羌族、藏族、维吾尔族、蒙古族以及云南、东北等地的许多民族，都经历了氏族、部落、部落联盟最后进人了民族共同体的阶段。<br>所谓融生型民族，主要是指由已经成为民族的众多民族的成分，由于某种原因发生融合，而形成的民族。其民族形成的起点是比较高的社会发展阶段，其民族共同体的发展并未经历过原始社会的氏族、胞族、部落以及奴隶社会等社会发展阶段。就我国来说，封建社会发展阶段漫长，这类民族共同体基本上都产生于这个历史时期。其中如回族、东乡族、保安族、撒拉族、土族、哈萨克族、乌孜别克族等众多民族。<br>如何确认我国少数民族族源的方法问题，实际上在我国少数民族研究中，已经基本解决。族源的确定要避免主观臆测和想象，要有客观依据。<br>
<br>首先，由于大多数少数民族与汉族和历代中央王朝有密切关系和交往，而我国历代“正史”和其他文献也都有记述少数民族社会活动的传统，因此在我国典籍中，对少数民族的记载是很多的，其中不乏关于民族族源的历史资料，因此汉文历史典籍，是我国绝大多数少数民族族源的重要根据；
<br>其次，我国一些少数民族如蒙古族、藏族、壮族以及历史上的突厥、回等都有自己的文字和有关文献，这些也都是确定这些少数民族族源的基本资料，把少数民族的历史文献资料与汉族文献资料进行比较研究，那更是研究其族源的最好根据；
<br>再次，当前使用的语言学谱系分类法，是研究民族间语言关系亲疏的重要手段，通过对语言关系的研究来确定民族之间的亲疏关系，特别是族源关系，也是十分有效的方法；
<br>最后，通过社会调查，从民间流传的各种传说、各民族习俗、社会生活等方面进行分析比较研究，也是确认民族族源的重要方法。此外，现代基因技术的发展和在民族学中的应用，对研究一个民族的族源，也有重要的参考价值。
目前也许应该通过分子生物学的证据进行考究，这也是一个新的方法。

<br><br>
<br>多源性特征：我国现代绝大多数民族，从族源上说都是多源的。而且从其发展过程来说，它的每一个发展阶段，每一个源头也都是多源的。不同阶段的多源，不同源头的多源。从这个意义上说，任何一个民族都是在融合、同化、分化中产生和发展的，纯粹血统、纯粹体征、纯粹文化的民族是不存在的。例如藏族，从7世纪初，开始作为一个稳定的民族共同体登上了中国多民族的历史舞台。在此以前，就他的族源来说，最基础的部分是西藏地区的土著原始部落，他们早就在西藏地区生息并进行开发，这些土著原始部落的存在，已为西藏地区的考古所证实。根据《唐书》记载，羌族的一支发羌，于战国末年，辗转由东向西南迁徙，进人青藏高原，成为藏族的重要族源之一。在松赞干布时期，又统了西藏高原的附国、大小羊同、象雄、苏毗等部落，从而正式形成了民族共同体。藏族形成后，在北上、东进、西下的过程中，又有大批羌、氏、吐谷浑、西南夷和西域民族成分加人，特别是有大量汉族成分加人，使藏族成为辉煌一时的古代强大民族。藏族的大部分成分，都是较稳定的，如羌、氏、吐谷浑以及汉族等，他们本身也是由许多民族成分融合而成的，因此可以说，藏族族源不仅是多源的，而且其族源的各部分也都是来自多源民族共同体的成分。
<br>地域性特征：我国现代大多数民族，一般来说都有自己祖祖辈辈长期生存生活的区域，而其族源一般都与自己区域内古代活动过的民族有一定的传承关系，因此一个民族的族源，往往带有很强的地域特征。例如满族，作为一个稳定的民族共同体，形成于16世纪末17世纪初，以白山黑水著称的东北地区是他们的发源地。其族源，一般来说，基本上来自在这一地区曾经活动过的各族，具体来说，他们的族源既直接来源于女真，也有契丹、娄、肃慎等东北各族的成分。再如蒙古族，形成于12世纪末13世纪初的蒙古高原，在成吉思汗统一蒙古高原各部时，就将操不同语言，有不同文化的各部统合到了蒙古部之中，形成了蒙古族。这些操不同语言，有不同文化传统、历史渊源的各部，实际上是蒙古高原上从匈奴以来的各古代民族的遗部，蒙古族完全可以说是历史上长期生活于蒙古高原上的北方各族的集大成者。在民族族源地域性特征方面还有一种情况，即古代的一些民族大迁徙到新地域之后，与当地民族融合，产生出一种新的民族。
<br>主源性特征：虽然绝大多数民族在族源上表现为多源性特征，但同时每个民族的族源的成分，在形成该民族中也都有主次之分，即该民族的诸多族源中，明显表现出主源的痕迹。在古代民族中，如吐谷浑族，在其族源中虽有大量的羌族、氏族以及西南夷的成分，但其主源则明显是鲜卑族的成分，这主要表现在其文化的传承、语言的族属、族内结构、族源认同等方面，更多地反映出鲜卑族的特征。羌族成分的特征在吐谷浑族中虽也突出，但比起鲜卑族的特征来，显然并不占主要地位。其他现代民族如维吾尔族，其族源虽然在西域地区吸收了大量古代西域民族的成分，但是从其历史发展、体貌特征、习俗文化、文化传承等方面看，其族源的主要成分仍是回鹃。再如蒙古族，其族源成分中几乎吸纳了北方的古代各民族成分，但就其族源的最主要的成分，直接出于东胡的室韦，特别是蒙兀室韦。因此，每个民族的族源的主要成分，是可以认识的，这也是民族学研究的一项重要任务。
<br>文化继承特征：在分析民族族源的成分时，有许多因素可以作为根据，其中如历史记载、口碑传说、经济文化类型、共同地域范围等，都可以提供定的根据，来确认一个民族的族源成分。而其中比较明显的一个重要因素就是文化，包括语言、习俗、口碑传说、宗教等。特别是语言因素，由于语言、文字在一个民族中影响最普遍，与一个民族的思维方式、感情传递、心理状态、相互交往都有最密切的关系，因此是最不易变动、最稳定的因素，从而也成为判断和剖析一个民族族源的重要根据。以上这些是我国少数民族（包括汉族在内），在民族族源、民族形成方面的一些特点。根据上述一些看法，我们认为我国各少数民族（除了朝鲜族和俄罗斯族外）在族源的关系上，可以用下面这个图表来作一个大体的表述。
]]></description><link>书籍\中国少数民族通史.html</link><guid isPermaLink="false">书籍/中国少数民族通史.md</guid><pubDate>Wed, 26 Jun 2024 08:14:13 GMT</pubDate></item></channel></rss>